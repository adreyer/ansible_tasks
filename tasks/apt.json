{
  "input_method": "stdin", 
  "description": "Manages I(apt) packages (such as for Debian/Ubuntu).", 
  "parameters": {
    "dpkg_options": {
      "type": "Optional[String[0]]", 
      "description": "Add dpkg options to apt command. Defaults to '-o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\"'"
    }, 
    "upgrade": {
      "type": "Optional[Enum[\"no\", \"yes\", \"safe\", \"full\", \"dist\"]]", 
      "description": "If yes or safe, performs an aptitude safe-upgrade."
    }, 
    "force": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "If C(yes), force installs/removes."
    }, 
    "name": {
      "type": "Optional[String[0]]", 
      "description": "A package name, like C(foo), or package specifier with version, like C(foo=1.0). Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported.  Note that the apt-get commandline supports implicit regex matches here but we do not because it can let typos through easier (If you typo C(foo) as C(fo) apt-get would install packages that have \"fo\" in their name with a warning and a prompt for the user.  Since we don't have warnings and prompts before installing we disallow this.  Use an explicit fnmatch pattern if you want wildcarding)"
    }, 
    "install_recommends": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "Corresponds to the C(--no-install-recommends) option for I(apt). C(yes) installs recommended packages.  C(no) does not install recommended packages. By default, Ansible will use the same defaults as the operating system. Suggested packages are never installed."
    }, 
    "autoclean": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "If C(yes), cleans the local repository of retrieved package files that can no longer be downloaded."
    }, 
    "purge": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "Will force purging of configuration files if the module state is set to I(absent)."
    }, 
    "allow_unauthenticated": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "Ignore if packages cannot be authenticated. This is useful for bootstrapping environments that manage their own apt-key setup."
    }, 
    "state": {
      "type": "Optional[Enum[\"latest\", \"absent\", \"present\", \"build-dep\"]]", 
      "description": "Indicates the desired package state. C(latest) ensures that the latest version is installed. C(build-dep) ensures the package build dependencies are installed."
    }, 
    "autoremove": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "If C(yes), remove unused dependency packages for all module states except I(build-dep). It can also be used as the only option."
    }, 
    "update_cache": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "Run the equivalent of C(apt-get update) before the operation. Can be run as part of the package installation or as a separate step."
    }, 
    "default_release": {
      "type": "Optional[String[0]]", 
      "description": "Corresponds to the C(-t) option for I(apt) and sets pin priorities"
    }, 
    "only_upgrade": {
      "type": "Optional[String[0]]", 
      "description": "Only upgrade a package if it is already installed."
    }, 
    "deb": {
      "type": "Optional[String[0]]", 
      "description": "Path to a .deb package on the remote machine."
    }, 
    "cache_valid_time": {
      "type": "Optional[String[0]]", 
      "description": "Update the apt cache if its older than the I(cache_valid_time). This option is set in seconds."
    }
  }
}