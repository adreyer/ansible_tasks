{
  "description": "Assembles a configuration file from fragments", 
  "parameters": {
    "ignore_hidden": {
      "type": "Optional[String]", 
      "description": "A boolean that controls if files that start with a '.' will be included or not."
    }, 
    "src": {
      "type": "String", 
      "description": "An already existing directory full of source files."
    }, 
    "serole": {
      "type": "Optional[String]", 
      "description": "Role part of SELinux file context, C(_default) feature works as for I(seuser)."
    }, 
    "group": {
      "type": "Optional[String]", 
      "description": "Name of the group that should own the file/directory, as would be fed to I(chown)."
    }, 
    "remote_src": {
      "type": "Optional[String]", 
      "description": "If False, it will search for src at originating/master machine, if True it will go to the remote/target machine for the src. Default is True."
    }, 
    "dest": {
      "type": "String", 
      "description": "A file to create using the concatenation of all of the source files."
    }, 
    "selevel": {
      "type": "Optional[String]", 
      "description": "Level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). C(_default) feature works as for I(seuser)."
    }, 
    "seuser": {
      "type": "Optional[String]", 
      "description": "User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available."
    }, 
    "decrypt": {
      "type": "Optional[String]", 
      "description": "This option controls the autodecryption of source files using vault."
    }, 
    "setype": {
      "type": "Optional[String]", 
      "description": "Type part of SELinux file context, C(_default) feature works as for I(seuser)."
    }, 
    "unsafe_writes": {
      "type": "Optional[String]", 
      "description": "Normally this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, sometimes systems are configured or just broken in ways that prevent this. One example are docker mounted files, they cannot be updated atomically and can only be done in an unsafe manner. This boolean option allows ansible to fall back to unsafe methods of updating files for those cases in which you do not have any other choice. Be aware that this is subject to race conditions and can lead to data corruption."
    }, 
    "delimiter": {
      "type": "Optional[String]", 
      "description": "A delimiter to separate the file contents."
    }, 
    "mode": {
      "type": "Optional[String]", 
      "description": "Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r))."
    }, 
    "attributes": {
      "type": "Optional[String]", 
      "description": "Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr)."
    }, 
    "owner": {
      "type": "Optional[String]", 
      "description": "Name of the user that should own the file/directory, as would be fed to I(chown)."
    }, 
    "regexp": {
      "type": "Optional[String]", 
      "description": "Assemble files only if C(regex) matches the filename. If not set, all files are assembled. All \"\\\" (backslash) must be escaped as \"\\\\\" to comply yaml syntax. Uses Python regular expressions; see U(http://docs.python.org/2/library/re.html)."
    }, 
    "validate": {
      "type": "Optional[String]", 
      "description": "The validation command to run before copying into place.  The path to the file to validate is passed in via '%s' which must be present as in the sshd example below. The command is passed securely so shell features like expansion and pipes won't work."
    }, 
    "backup": {
      "type": "Optional[String]", 
      "description": "Create a backup file (if C(yes)), including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."
    }
  }
}