{
  "input_method": "stdin", 
  "description": "Adds or removes SSH authorized keys for particular user accounts", 
  "parameters": {
    "exclusive": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "Whether to remove all other non-specified keys from the authorized_keys file. Multiple keys can be specified in a single C(key) string value by separating them by newlines."
    }, 
    "key_options": {
      "type": "Optional[String[0]]", 
      "description": "A string of ssh key options to be prepended to the key in the authorized_keys file"
    }, 
    "state": {
      "type": "Optional[Enum[\"present\", \"absent\"]]", 
      "description": "Whether the given key (with the given key_options) should or should not be in the file"
    }, 
    "user": {
      "type": "String[0]", 
      "description": "The username on the remote host whose authorized_keys file will be modified"
    }, 
    "key": {
      "type": "String[0]", 
      "description": "The SSH public key(s), as a string or (since 1.9) url (https://github.com/username.keys)"
    }, 
    "path": {
      "type": "Optional[String[0]]", 
      "description": "Alternate path to the authorized_keys file"
    }, 
    "validate_certs": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "This only applies if using a https url as the source of the keys. If set to C(no), the SSL certificates will not be validated."
    }, 
    "manage_dir": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "Whether this module should manage the directory of the authorized key file.  If set, the module will create the directory, as well as set the owner and permissions of an existing directory. Be sure to set C(manage_dir=no) if you are using an alternate directory for authorized_keys, as set with C(path), since you could lock yourself out of SSH access. See the example below."
    }
  }
}