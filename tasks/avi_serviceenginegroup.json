{
  "input_method": "stdin", 
  "description": "This module is used to configure ServiceEngineGroup object", 
  "parameters": {
    "username": {
      "type": "Optional[String[0]]", 
      "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME)."
    }, 
    "openstack_availability_zone": {
      "type": "Optional[String[0]]", 
      "description": "Field deprecated in 17.1.1."
    }, 
    "vcenter_hosts": {
      "type": "Optional[String[0]]", 
      "description": "Vcenterhosts settings for serviceenginegroup."
    }, 
    "per_app": {
      "type": "Optional[String[0]]", 
      "description": "Per-app se mode is designed for deploying dedicated load balancers per app (vs)."
    }, 
    "vcpus_per_se": {
      "type": "Optional[String[0]]", 
      "description": "Number of vcpus for each of the service engine virtual machines."
    }, 
    "hm_on_standby": {
      "type": "Optional[String[0]]", 
      "description": "Enable active health monitoring from the standby se for all placed virtual services."
    }, 
    "host_attribute_value": {
      "type": "Optional[String[0]]", 
      "description": "Value of a (key, value) pair identifying a set of hosts."
    }, 
    "enable_vip_on_all_interfaces": {
      "type": "Optional[String[0]]", 
      "description": "Enable vip on all interfaces of se."
    }, 
    "vs_scalein_timeout_for_upgrade": {
      "type": "Optional[String[0]]", 
      "description": "During se upgrade, time to wait for the scaled-in se to drain existing flows before marking the scalein done."
    }, 
    "se_name_prefix": {
      "type": "Optional[String[0]]", 
      "description": "Prefix to use for virtual machine name of service engines."
    }, 
    "instance_flavor": {
      "type": "Optional[String[0]]", 
      "description": "Instance/flavor type for se instance."
    }, 
    "auto_redistribute_active_standby_load": {
      "type": "Optional[String[0]]", 
      "description": "Redistribution of virtual services from the takeover se to the replacement se can cause momentary traffic loss."
    }, 
    "hardwaresecuritymodulegroup_ref": {
      "type": "Optional[String[0]]", 
      "description": "It is a reference to an object of type hardwaresecuritymodulegroup."
    }, 
    "auto_rebalance": {
      "type": "Optional[String[0]]", 
      "description": "If set, virtual services will be automatically migrated when load on an se is less than minimum or more than maximum thresholds."
    }, 
    "custom_tag": {
      "type": "Optional[String[0]]", 
      "description": "Custom tag will be used to create the tags for se instance in aws."
    }, 
    "floating_intf_ip_se_2": {
      "type": "Optional[String[0]]", 
      "description": "If serviceenginegroup is configured for legacy 1+1 active standby ha mode, floating ip's will be advertised only by the active se in the pair."
    }, 
    "realtime_se_metrics": {
      "type": "Optional[String[0]]", 
      "description": "Enable or disable real time se metrics."
    }, 
    "openstack_mgmt_network_name": {
      "type": "Optional[String[0]]", 
      "description": "Avi management network name."
    }, 
    "se_deprovision_delay": {
      "type": "Optional[String[0]]", 
      "description": "Duration to preserve unused service engine virtual machines before deleting them."
    }, 
    "active_standby": {
      "type": "Optional[String[0]]", 
      "description": "Service engines in active/standby mode for ha failover."
    }, 
    "se_tunnel_mode": {
      "type": "Optional[String[0]]", 
      "description": "Determines if dsr from secondary se is active or not      0        automatically determine based on hypervisor type    1        disable dsr"
    }, 
    "memory_per_se": {
      "type": "Optional[String[0]]", 
      "description": "Amount of memory for each of the service engine virtual machines."
    }, 
    "distribute_load_active_standby": {
      "type": "Optional[String[0]]", 
      "description": "Use both the active and standby service engines for virtual service placement in the legacy active standby ha mode."
    }, 
    "cloud_ref": {
      "type": "Optional[String[0]]", 
      "description": "It is a reference to an object of type cloud."
    }, 
    "extra_shared_config_memory": {
      "type": "Optional[String[0]]", 
      "description": "Extra config memory to support large geo db configuration."
    }, 
    "description": {
      "type": "Optional[String[0]]", 
      "description": "User defined description for the object."
    }, 
    "iptables": {
      "type": "Optional[String[0]]", 
      "description": "Iptable rules."
    }, 
    "auto_rebalance_interval": {
      "type": "Optional[String[0]]", 
      "description": "Frequency of rebalance, if 'auto rebalance' is enabled."
    }, 
    "vs_scaleout_timeout": {
      "type": "Optional[String[0]]", 
      "description": "Time to wait for the scaled out se to become ready before marking the scaleout done."
    }, 
    "vcenter_datastores": {
      "type": "Optional[String[0]]", 
      "description": "List of vcenterdatastore."
    }, 
    "ha_mode": {
      "type": "Optional[String[0]]", 
      "description": "High availability mode for all the virtual services using this service engine group."
    }, 
    "aggressive_failure_detection": {
      "type": "Optional[String[0]]", 
      "description": "Enable aggressive failover configuration for ha."
    }, 
    "vcenter_datastore_mode": {
      "type": "Optional[String[0]]", 
      "description": "Enum options - vcenter_datastore_any, vcenter_datastore_local, vcenter_datastore_shared."
    }, 
    "tenant": {
      "type": "Optional[String[0]]", 
      "description": "Name of tenant used for all Avi API calls and context of object."
    }, 
    "min_cpu_usage": {
      "type": "Optional[String[0]]", 
      "description": "When cpu usage on an se falls below the minimum threshold, virtual services hosted on the se may be consolidated onto other underutilized ses."
    }, 
    "disk_per_se": {
      "type": "Optional[String[0]]", 
      "description": "Amount of disk space for each of the service engine virtual machines."
    }, 
    "vcenter_clusters": {
      "type": "Optional[String[0]]", 
      "description": "Vcenterclusters settings for serviceenginegroup."
    }, 
    "log_disksz": {
      "type": "Optional[String[0]]", 
      "description": "Maximum disk capacity (in mb) to be allocated to an se."
    }, 
    "cpu_socket_affinity": {
      "type": "Optional[String[0]]", 
      "description": "Allocate all the cpu cores for the service engine virtual machines  on the same cpu socket."
    }, 
    "api_version": {
      "type": "Optional[String[0]]", 
      "description": "Avi API version of to use for Avi API and objects."
    }, 
    "se_thread_multiplier": {
      "type": "Optional[String[0]]", 
      "description": "Multiplier for se threads based on vcpu."
    }, 
    "extra_config_multiplier": {
      "type": "Optional[String[0]]", 
      "description": "Multiplier for extra config to support large vs/pool config."
    }, 
    "max_vs_per_se": {
      "type": "Optional[String[0]]", 
      "description": "Maximum number of virtual services that can be placed on a single service engine."
    }, 
    "connection_memory_percentage": {
      "type": "Optional[String[0]]", 
      "description": "Percentage of memory for connection state."
    }, 
    "service_ip_subnets": {
      "type": "Optional[String[0]]", 
      "description": "Subnets assigned to the se group."
    }, 
    "placement_mode": {
      "type": "Optional[String[0]]", 
      "description": "If placement mode is 'auto', virtual services are automatically placed on service engines."
    }, 
    "max_scaleout_per_vs": {
      "type": "Optional[String[0]]", 
      "description": "Maximum number of active service engines for the virtual service."
    }, 
    "enable_routing": {
      "type": "Optional[String[0]]", 
      "description": "Enable routing for this serviceenginegroup ."
    }, 
    "vcenter_folder": {
      "type": "Optional[String[0]]", 
      "description": "Folder to place all the service engine virtual machines in vcenter."
    }, 
    "os_reserved_memory": {
      "type": "Optional[String[0]]", 
      "description": "Amount of extra memory to be reserved for use by the operating system on a service engine."
    }, 
    "openstack_mgmt_network_uuid": {
      "type": "Optional[String[0]]", 
      "description": "Management network uuid."
    }, 
    "vs_scalein_timeout": {
      "type": "Optional[String[0]]", 
      "description": "Time to wait for the scaled in se to drain existing flows before marking the scalein done."
    }, 
    "dedicated_dispatcher_core": {
      "type": "Optional[String[0]]", 
      "description": "Dedicate the core that handles packet receive/transmit from the network to just the dispatching function."
    }, 
    "controller": {
      "type": "Optional[String[0]]", 
      "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER)."
    }, 
    "state": {
      "type": "Optional[Enum[\"absent\", \"present\"]]", 
      "description": "The state that should be applied on the entity."
    }, 
    "floating_intf_ip": {
      "type": "Optional[String[0]]", 
      "description": "If serviceenginegroup is configured for legacy 1+1 active standby ha mode, floating ip's will be advertised only by the active se in the pair."
    }, 
    "openstack_availability_zones": {
      "type": "Optional[String[0]]", 
      "description": "Field introduced in 17.1.1."
    }, 
    "se_vs_hb_max_vs_in_pkt": {
      "type": "Optional[String[0]]", 
      "description": "Maximum number of virtualservices for which heartbeat messages are aggregated in one packet."
    }, 
    "vcenter_datastores_include": {
      "type": "Optional[String[0]]", 
      "description": "Boolean flag to set vcenter_datastores_include."
    }, 
    "advertise_backend_networks": {
      "type": "Optional[String[0]]", 
      "description": "Advertise reach-ability of backend server networks via adc through bgp for default gateway feature."
    }, 
    "password": {
      "type": "Optional[String[0]]", 
      "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD)."
    }, 
    "mgmt_network_ref": {
      "type": "Optional[String[0]]", 
      "description": "Management network to use for avi service engines."
    }, 
    "uuid": {
      "type": "Optional[String[0]]", 
      "description": "Unique object identifier of the object."
    }, 
    "max_cpu_usage": {
      "type": "Optional[String[0]]", 
      "description": "When cpu usage on an se exceeds this threshold, virtual services hosted on this se may be rebalanced to other ses to reduce load."
    }, 
    "min_scaleout_per_vs": {
      "type": "Optional[String[0]]", 
      "description": "Minimum number of active service engines for the virtual service."
    }, 
    "se_vs_hb_max_pkts_in_batch": {
      "type": "Optional[String[0]]", 
      "description": "Maximum number of aggregated vs heartbeat packets to send in a batch."
    }, 
    "name": {
      "type": "String[0]", 
      "description": "Name of the object."
    }, 
    "url": {
      "type": "Optional[String[0]]", 
      "description": "Avi controller URL of the object."
    }, 
    "hypervisor": {
      "type": "Optional[String[0]]", 
      "description": "Override default hypervisor."
    }, 
    "tenant_ref": {
      "type": "Optional[String[0]]", 
      "description": "It is a reference to an object of type tenant."
    }, 
    "host_attribute_key": {
      "type": "Optional[String[0]]", 
      "description": "Key of a (key, value) pair identifying a set of hosts."
    }, 
    "num_flow_cores_sum_changes_to_ignore": {
      "type": "Optional[String[0]]", 
      "description": "Number of changes in num flow cores sum to ignore."
    }, 
    "buffer_se": {
      "type": "Optional[String[0]]", 
      "description": "Excess service engine capacity provisioned for ha failover."
    }, 
    "least_load_core_selection": {
      "type": "Optional[String[0]]", 
      "description": "Select core with least load for new flow."
    }, 
    "max_se": {
      "type": "Optional[String[0]]", 
      "description": "Maximum number of services engines in this group."
    }, 
    "algo": {
      "type": "Optional[String[0]]", 
      "description": "In compact placement, virtual services are placed on existing ses until max_vs_per_se limit is reached."
    }, 
    "mem_reserve": {
      "type": "Optional[String[0]]", 
      "description": "Boolean flag to set mem_reserve."
    }, 
    "cpu_reserve": {
      "type": "Optional[String[0]]", 
      "description": "Boolean flag to set cpu_reserve."
    }, 
    "mgmt_subnet": {
      "type": "Optional[String[0]]", 
      "description": "Management subnet to use for avi service engines."
    }, 
    "se_dos_profile": {
      "type": "Optional[String[0]]", 
      "description": "Dosthresholdprofile settings for serviceenginegroup."
    }, 
    "enable_vmac": {
      "type": "Optional[String[0]]", 
      "description": "Use virtual mac address for interfaces on which floating interface ips are placed."
    }, 
    "tenant_uuid": {
      "type": "Optional[String[0]]", 
      "description": "UUID of tenant used for all Avi API calls and context of object."
    }, 
    "vs_host_redundancy": {
      "type": "Optional[String[0]]", 
      "description": "Ensure primary and secondary service engines are deployed on different physical hosts."
    }
  }
}