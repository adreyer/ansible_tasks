{
  "input_method": "stdin", 
  "description": "This module is used to configure VirtualService object", 
  "parameters": {
    "port_uuid": {
      "type": "Optional[String[0]]", 
      "description": "(internal-use) network port assigned to the virtual service ip address."
    }, 
    "availability_zone": {
      "type": "Optional[String[0]]", 
      "description": "Availability-zone to place the virtual service."
    }, 
    "flow_dist": {
      "type": "Optional[String[0]]", 
      "description": "Criteria for flow distribution among ses."
    }, 
    "enable_rhi_snat": {
      "type": "Optional[String[0]]", 
      "description": "Enable route health injection for source nat'ted floating ip address using the bgp config in the vrf context."
    }, 
    "sideband_profile": {
      "type": "Optional[String[0]]", 
      "description": "Sideband configuration to be used for this virtualservice.it can be used for sending traffic to sideband vips for external inspection etc."
    }, 
    "requests_rate_limit": {
      "type": "Optional[String[0]]", 
      "description": "Rate limit the incoming requests to this virtual service."
    }, 
    "uuid": {
      "type": "Optional[String[0]]", 
      "description": "Uuid of the virtualservice."
    }, 
    "ssl_profile_ref": {
      "type": "Optional[String[0]]", 
      "description": "Determines the set of ssl versions and ciphers to accept for ssl/tls terminated connections."
    }, 
    "created_by": {
      "type": "Optional[String[0]]", 
      "description": "Creator name."
    }, 
    "max_cps_per_client": {
      "type": "Optional[String[0]]", 
      "description": "Maximum connections per second per client ip."
    }, 
    "vs_datascripts": {
      "type": "Optional[String[0]]", 
      "description": "Datascripts applied on the data traffic of the virtual service."
    }, 
    "application_profile_ref": {
      "type": "Optional[String[0]]", 
      "description": "Enable application layer specific features for the virtual service."
    }, 
    "active_standby_se_tag": {
      "type": "Optional[String[0]]", 
      "description": "This configuration only applies if the virtualservice is in legacy active standby ha mode and load distribution among active standby is enabled."
    }, 
    "password": {
      "type": "Optional[String[0]]", 
      "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD)."
    }, 
    "ip_address": {
      "type": "Optional[String[0]]", 
      "description": "Ip address of the virtual service."
    }, 
    "subnet_uuid": {
      "type": "Optional[String[0]]", 
      "description": "It represents subnet for the virtual service ip address allocation when auto_allocate_ip is true.it is only applicable in openstack or aws cloud."
    }, 
    "name": {
      "type": "String[0]", 
      "description": "Name for the virtual service."
    }, 
    "enable_autogw": {
      "type": "Optional[String[0]]", 
      "description": "Response traffic to clients will be sent back to the source mac address of the connection, rather than statically sent to a default gateway."
    }, 
    "tenant_ref": {
      "type": "Optional[String[0]]", 
      "description": "It is a reference to an object of type tenant."
    }, 
    "remove_listening_port_on_vs_down": {
      "type": "Optional[String[0]]", 
      "description": "Remove listening port if virtualservice is down."
    }, 
    "static_dns_records": {
      "type": "Optional[String[0]]", 
      "description": "List of static dns records applied to this virtual service."
    }, 
    "analytics_policy": {
      "type": "Optional[String[0]]", 
      "description": "Determines analytics settings for the application."
    }, 
    "tenant_uuid": {
      "type": "Optional[String[0]]", 
      "description": "UUID of tenant used for all Avi API calls and context of object."
    }, 
    "weight": {
      "type": "Optional[String[0]]", 
      "description": "The quality of service weight to assign to traffic transmitted from this virtual service."
    }, 
    "enabled": {
      "type": "Optional[String[0]]", 
      "description": "Enable or disable the virtual service."
    }, 
    "content_rewrite": {
      "type": "Optional[String[0]]", 
      "description": "Profile used to match and rewrite strings in request and/or response body."
    }, 
    "traffic_clone_profile_ref": {
      "type": "Optional[String[0]]", 
      "description": "Server network or list of servers for cloning traffic."
    }, 
    "vrf_context_ref": {
      "type": "Optional[String[0]]", 
      "description": "Virtual routing context that the virtual service is bound to."
    }, 
    "subnet": {
      "type": "Optional[String[0]]", 
      "description": "Subnet providing reachability for client facing virtual service ip."
    }, 
    "vh_domain_name": {
      "type": "Optional[String[0]]", 
      "description": "The exact name requested from the client's sni-enabled tls hello domain name field."
    }, 
    "se_group_ref": {
      "type": "Optional[String[0]]", 
      "description": "The service engine group to use for this virtual service."
    }, 
    "scaleout_ecmp": {
      "type": "Optional[String[0]]", 
      "description": "Disable re-distribution of flows across service engines for a virtual service."
    }, 
    "state": {
      "type": "Optional[Enum[\"absent\", \"present\"]]", 
      "description": "The state that should be applied on the entity."
    }, 
    "api_version": {
      "type": "Optional[String[0]]", 
      "description": "Avi API version of to use for Avi API and objects."
    }, 
    "vsvip_ref": {
      "type": "Optional[String[0]]", 
      "description": "Mostly used during the creation of shared vs, this fieldrefers to entities that can be shared across virtual services."
    }, 
    "performance_limits": {
      "type": "Optional[String[0]]", 
      "description": "Optional settings that determine performance limits like max connections or bandwdith etc."
    }, 
    "floating_ip": {
      "type": "Optional[String[0]]", 
      "description": "Floating ip to associate with this virtual service."
    }, 
    "auto_allocate_floating_ip": {
      "type": "Optional[String[0]]", 
      "description": "Auto-allocate floating/elastic ip from the cloud infrastructure."
    }, 
    "connections_rate_limit": {
      "type": "Optional[String[0]]", 
      "description": "Rate limit the incoming connections to this virtual service."
    }, 
    "server_network_profile_ref": {
      "type": "Optional[String[0]]", 
      "description": "Determines the network settings profile for the server side of tcp proxied connections."
    }, 
    "ign_pool_net_reach": {
      "type": "Optional[String[0]]", 
      "description": "Ignore pool servers network reachability constraints for virtual service placement."
    }, 
    "tenant": {
      "type": "Optional[String[0]]", 
      "description": "Name of tenant used for all Avi API calls and context of object."
    }, 
    "auto_allocate_ip": {
      "type": "Optional[String[0]]", 
      "description": "Auto-allocate vip from the provided subnet."
    }, 
    "fqdn": {
      "type": "Optional[String[0]]", 
      "description": "Dns resolvable, fully qualified domain name of the virtualservice."
    }, 
    "network_security_policy_ref": {
      "type": "Optional[String[0]]", 
      "description": "Network security policies for the virtual service."
    }, 
    "vh_parent_vs_uuid": {
      "type": "Optional[String[0]]", 
      "description": "Specifies the virtual service acting as virtual hosting (sni) parent."
    }, 
    "client_auth": {
      "type": "Optional[String[0]]", 
      "description": "Http authentication configuration for protected resources."
    }, 
    "floating_subnet_uuid": {
      "type": "Optional[String[0]]", 
      "description": "If auto_allocate_floating_ip is true and more than one floating-ip subnets exist, then the subnet for the floating ip address allocation."
    }, 
    "delay_fairness": {
      "type": "Optional[String[0]]", 
      "description": "Select the algorithm for qos fairness."
    }, 
    "vip": {
      "type": "Optional[String[0]]", 
      "description": "List of virtual service ips."
    }, 
    "snat_ip": {
      "type": "Optional[String[0]]", 
      "description": "Nat'ted floating source ip address(es) for upstream connection to servers."
    }, 
    "avi_allocated_vip": {
      "type": "Optional[String[0]]", 
      "description": "(internal-use) vip allocated by avi in the cloud infrastructure."
    }, 
    "analytics_profile_ref": {
      "type": "Optional[String[0]]", 
      "description": "Specifies settings related to analytics."
    }, 
    "avi_allocated_fip": {
      "type": "Optional[String[0]]", 
      "description": "(internal-use) fip allocated by avi in the cloud infrastructure."
    }, 
    "pool_ref": {
      "type": "Optional[String[0]]", 
      "description": "The pool is an object that contains destination servers and related attributes such as load-balancing and persistence."
    }, 
    "ssl_sess_cache_avg_size": {
      "type": "Optional[String[0]]", 
      "description": "Expected number of ssl session cache entries (may be exceeded)."
    }, 
    "username": {
      "type": "Optional[String[0]]", 
      "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME)."
    }, 
    "http_policies": {
      "type": "Optional[String[0]]", 
      "description": "Http policies applied on the data traffic of the virtual service."
    }, 
    "controller": {
      "type": "Optional[String[0]]", 
      "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER)."
    }, 
    "pool_group_ref": {
      "type": "Optional[String[0]]", 
      "description": "The pool group is an object that contains pools."
    }, 
    "east_west_placement": {
      "type": "Optional[String[0]]", 
      "description": "Force placement on all se's in service group (mesos mode only)."
    }, 
    "service_pool_select": {
      "type": "Optional[String[0]]", 
      "description": "Select pool based on destination port."
    }, 
    "type": {
      "type": "Optional[String[0]]", 
      "description": "Specify if this is a normal virtual service, or if it is the parent or child of an sni-enabled virtual hosted virtual service."
    }, 
    "discovered_networks": {
      "type": "Optional[String[0]]", 
      "description": "(internal-use) discovered networks providing reachability for client facing virtual service ip."
    }, 
    "dns_info": {
      "type": "Optional[String[0]]", 
      "description": "Service discovery specific data including fully qualified domain name, type and time-to-live of the dns record."
    }, 
    "ipam_network_subnet": {
      "type": "Optional[String[0]]", 
      "description": "Subnet and/or network for allocating virtualservice ip by ipam provider module."
    }, 
    "ssl_key_and_certificate_refs": {
      "type": "Optional[String[0]]", 
      "description": "Select or create one or two certificates, ec and/or rsa, that will be presented to ssl/tls terminated connections."
    }, 
    "flow_label_type": {
      "type": "Optional[String[0]]", 
      "description": "Criteria for flow labelling."
    }, 
    "network_profile_ref": {
      "type": "Optional[String[0]]", 
      "description": "Determines network settings such as protocol, tcp or udp, and related options for the protocol."
    }, 
    "service_metadata": {
      "type": "Optional[String[0]]", 
      "description": "Metadata pertaining to the service provided by this virtual service."
    }, 
    "cloud_type": {
      "type": "Optional[String[0]]", 
      "description": "Enum options - cloud_none, cloud_vcenter, cloud_openstack, cloud_aws, cloud_vca, cloud_apic, cloud_mesos, cloud_linuxserver, cloud_docker_ucp,"
    }, 
    "cloud_ref": {
      "type": "Optional[String[0]]", 
      "description": "It is a reference to an object of type cloud."
    }, 
    "enable_rhi": {
      "type": "Optional[String[0]]", 
      "description": "Enable route health injection using the bgp config in the vrf context."
    }, 
    "nsx_securitygroup": {
      "type": "Optional[String[0]]", 
      "description": "A list of nsx service groups representing the clients which can access the virtual ip of the virtual service."
    }, 
    "description": {
      "type": "Optional[String[0]]", 
      "description": "User defined description for the object."
    }, 
    "use_bridge_ip_as_vip": {
      "type": "Optional[String[0]]", 
      "description": "Use bridge ip as vip on each host in mesos deployments."
    }, 
    "host_name_xlate": {
      "type": "Optional[String[0]]", 
      "description": "Translate the host name sent to the servers to this value."
    }, 
    "services": {
      "type": "Optional[String[0]]", 
      "description": "List of services defined for this virtual service."
    }, 
    "microservice_ref": {
      "type": "Optional[String[0]]", 
      "description": "Microservice representing the virtual service."
    }, 
    "discovered_network_ref": {
      "type": "Optional[String[0]]", 
      "description": "(internal-use) discovered networks providing reachability for client facing virtual service ip."
    }, 
    "limit_doser": {
      "type": "Optional[String[0]]", 
      "description": "Limit potential dos attackers who exceed max_cps_per_client significantly to a fraction of max_cps_per_client for a while."
    }, 
    "url": {
      "type": "Optional[String[0]]", 
      "description": "Avi controller URL of the object."
    }, 
    "network_ref": {
      "type": "Optional[String[0]]", 
      "description": "Manually override the network on which the virtual service is placed."
    }, 
    "discovered_subnet": {
      "type": "Optional[String[0]]", 
      "description": "(internal-use) discovered subnets providing reachability for client facing virtual service ip."
    }, 
    "dns_policies": {
      "type": "Optional[String[0]]", 
      "description": "Dns policies applied on the dns traffic of the virtual service."
    }, 
    "cloud_config_cksum": {
      "type": "Optional[String[0]]", 
      "description": "Checksum of cloud configuration for vs."
    }
  }
}