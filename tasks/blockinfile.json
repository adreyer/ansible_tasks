{
  "description": "Insert/update/remove a text block surrounded by marker lines.", 
  "parameters": {
    "group": {
      "type": "Optional[String]", 
      "description": "Name of the group that should own the file/directory, as would be fed to I(chown)."
    }, 
    "insertbefore": {
      "type": "Optional[String]", 
      "description": "If specified, the block will be inserted before the last match of specified regular expression. A special value is available; C(BOF) for inserting the block at the beginning of the file.  If specified regular expression has no matches, the block will be inserted at the end of the file."
    }, 
    "unsafe_writes": {
      "type": "Optional[String]", 
      "description": "Normally this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, sometimes systems are configured or just broken in ways that prevent this. One example are docker mounted files, they cannot be updated atomically and can only be done in an unsafe manner. This boolean option allows ansible to fall back to unsafe methods of updating files for those cases in which you do not have any other choice. Be aware that this is subject to race conditions and can lead to data corruption."
    }, 
    "selevel": {
      "type": "Optional[String]", 
      "description": "Level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). C(_default) feature works as for I(seuser)."
    }, 
    "create": {
      "type": "Optional[String]", 
      "description": "Create a new file if it doesn't exist."
    }, 
    "seuser": {
      "type": "Optional[String]", 
      "description": "User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available."
    }, 
    "state": {
      "type": "Optional[String]", 
      "description": "Whether the block should be there or not."
    }, 
    "owner": {
      "type": "Optional[String]", 
      "description": "Name of the user that should own the file/directory, as would be fed to I(chown)."
    }, 
    "marker": {
      "type": "Optional[String]", 
      "description": "The marker line template. \"{mark}\" will be replaced with \"BEGIN\" or \"END\"."
    }, 
    "serole": {
      "type": "Optional[String]", 
      "description": "Role part of SELinux file context, C(_default) feature works as for I(seuser)."
    }, 
    "mode": {
      "type": "Optional[String]", 
      "description": "Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r))."
    }, 
    "path": {
      "type": "String", 
      "description": "The file to modify. Before 2.3 this option was only usable as I(dest), I(destfile) and I(name)."
    }, 
    "insertafter": {
      "type": "Optional[String]", 
      "description": "If specified, the block will be inserted after the last match of specified regular expression. A special value is available; C(EOF) for inserting the block at the end of the file.  If specified regular expression has no matches, C(EOF) will be used instead."
    }, 
    "follow": {
      "type": "Optional[String]", 
      "description": "This flag indicates that filesystem links, if they exist, should be followed."
    }, 
    "validate": {
      "type": "Optional[String]", 
      "description": "The validation command to run before copying into place. The path to the file to validate is passed in via '%s' which must be present as in the example below. The command is passed securely so shell features like expansion and pipes won't work."
    }, 
    "attributes": {
      "type": "Optional[String]", 
      "description": "Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr)."
    }, 
    "backup": {
      "type": "Optional[String]", 
      "description": "Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."
    }, 
    "block": {
      "type": "Optional[String]", 
      "description": "The text to insert inside the marker lines. If it's missing or an empty string, the block will be removed as if C(state) were specified to C(absent)."
    }, 
    "setype": {
      "type": "Optional[String]", 
      "description": "Type part of SELinux file context, C(_default) feature works as for I(seuser)."
    }
  }
}