{
  "input_method": "stdin", 
  "description": "The C(copy) module copies a file on the local box to remote locations. Use the M(fetch) module to copy files from remote locations to the local box. If you need variable interpolation in copied files, use the M(template) module.", 
  "parameters": {
    "src": {
      "type": "Optional[String[0]]", 
      "description": "Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with \"/\", only inside contents of that directory are copied to destination. Otherwise, if it does not end with \"/\", the directory itself with all contents is copied. This behavior is similar to Rsync."
    }, 
    "directory_mode": {
      "type": "Optional[String[0]]", 
      "description": "When doing a recursive copy set the mode for the directories. If this is not set we will use the system defaults. The mode is only set on directories which are newly created, and will not affect those that already existed."
    }, 
    "force": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "the default is C(yes), which will replace the remote file when contents are different than the source. If C(no), the file will only be transferred if the destination does not exist."
    }, 
    "remote_src": {
      "type": "Optional[Enum[\"True\", \"False\"]]", 
      "description": "If False, it will search for src at originating/master machine, if True it will go to the remote/target machine for the src. Default is False."
    }, 
    "dest": {
      "type": "String[0]", 
      "description": "Remote absolute path where the file should be copied to. If src is a directory, this must be a directory too."
    }, 
    "selevel": {
      "type": "Optional[String[0]]", 
      "description": "Level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). C(_default) feature works as for I(seuser)."
    }, 
    "seuser": {
      "type": "Optional[String[0]]", 
      "description": "User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available."
    }, 
    "decrypt": {
      "type": "Optional[Enum[\"Yes\", \"No\"]]", 
      "description": "This option controls the autodecryption of source files using vault."
    }, 
    "setype": {
      "type": "Optional[String[0]]", 
      "description": "Type part of SELinux file context, C(_default) feature works as for I(seuser)."
    }, 
    "group": {
      "type": "Optional[String[0]]", 
      "description": "Name of the group that should own the file/directory, as would be fed to I(chown)."
    }, 
    "content": {
      "type": "Optional[String[0]]", 
      "description": "When used instead of 'src', sets the contents of a file directly to the specified value. This is for simple values, for anything complex or with formatting please switch to the template module."
    }, 
    "unsafe_writes": {
      "type": "Optional[String[0]]", 
      "description": "Normally this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, sometimes systems are configured or just broken in ways that prevent this. One example are docker mounted files, they cannot be updated atomically and can only be done in an unsafe manner."
    }, 
    "serole": {
      "type": "Optional[String[0]]", 
      "description": "Role part of SELinux file context, C(_default) feature works as for I(seuser)."
    }, 
    "mode": {
      "type": "Optional[String[0]]", 
      "description": "Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r))."
    }, 
    "attributes": {
      "type": "Optional[String[0]]", 
      "description": "Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr)."
    }, 
    "owner": {
      "type": "Optional[String[0]]", 
      "description": "Name of the user that should own the file/directory, as would be fed to I(chown)."
    }, 
    "follow": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "This flag indicates that filesystem links, if they exist, should be followed."
    }, 
    "validate": {
      "type": "Optional[String[0]]", 
      "description": "The validation command to run before copying into place. The path to the file to validate is passed in via '%s' which must be present as in the example below. The command is passed securely so shell features like expansion and pipes won't work."
    }, 
    "backup": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."
    }
  }
}