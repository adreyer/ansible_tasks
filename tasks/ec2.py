#!/usr/bin/python
# -*- coding: utf-8 -*-
ANSIBALLZ_WRAPPER = True # For test-module script to tell this is a ANSIBALLZ_WRAPPER
import os
import os.path
import sys
import __main__
scriptdir = None
try:
    scriptdir = os.path.dirname(os.path.abspath(__main__.__file__))
except (AttributeError, OSError):
    pass
if scriptdir is not None:
    sys.path = [p for p in sys.path if p != scriptdir]
import base64
import json
import shutil
import zipfile
import tempfile
import subprocess
if sys.version_info < (3,):
    bytes = str
    PY3 = False
else:
    unicode = str
    PY3 = True
try:
    from io import BytesIO as IOStream
except ImportError:
    from StringIO import StringIO as IOStream
ZIPDATA = """UEsDBBQAAAAAAAS8K0uPp/FSdwAAAHcAAAATAAAAYW5zaWJsZS9fX2luaXRfXy5weWZyb20gcGtndXRpbCBpbXBvcnQgZXh0ZW5kX3BhdGgKX19wYXRoX189ZXh0ZW5kX3BhdGgoX19wYXRoX18sX19uYW1lX18pCl9fdmVyc2lvbl9fPSIyLjQuMCIKX19hdXRob3JfXz0iQW5zaWJsZSwgSW5jLiIKUEsDBBQAAAAAAAS8K0udxfFrSAAAAEgAAAAgAAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvX19pbml0X18ucHlmcm9tIHBrZ3V0aWwgaW1wb3J0IGV4dGVuZF9wYXRoCl9fcGF0aF9fPWV4dGVuZF9wYXRoKF9fcGF0aF9fLF9fbmFtZV9fKQpQSwMEFAAAAAAABLwrSwU67Eps8wAAbPMAABUAAABhbnNpYmxlX21vZHVsZV9lYzIucHkjIS91c3IvYmluL3B5dGhvbgojIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIEFuc2libGUKIwojIEFuc2libGUgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQojIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5CiMgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKIyAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgojCiMgQW5zaWJsZSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAojIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiMgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQojIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCiMKIyBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQojIGFsb25nIHdpdGggQW5zaWJsZS4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi4KCkFOU0lCTEVfTUVUQURBVEEgPSB7J21ldGFkYXRhX3ZlcnNpb24nOiAnMS4wJywKICAgICAgICAgICAgICAgICAgICAnc3RhdHVzJzogWydzdGFibGVpbnRlcmZhY2UnXSwKICAgICAgICAgICAgICAgICAgICAnc3VwcG9ydGVkX2J5JzogJ2N1cmF0ZWQnfQoKCkRPQ1VNRU5UQVRJT04gPSAnJycKLS0tCm1vZHVsZTogZWMyCnNob3J0X2Rlc2NyaXB0aW9uOiBjcmVhdGUsIHRlcm1pbmF0ZSwgc3RhcnQgb3Igc3RvcCBhbiBpbnN0YW5jZSBpbiBlYzIKZGVzY3JpcHRpb246CiAgICAtIENyZWF0ZXMgb3IgdGVybWluYXRlcyBlYzIgaW5zdGFuY2VzLgogICAgLSBDKHN0YXRlPXJlc3RhcnRlZCkgd2FzIGFkZGVkIGluIDIuMgp2ZXJzaW9uX2FkZGVkOiAiMC45IgpvcHRpb25zOgogIGtleV9uYW1lOgogICAgZGVzY3JpcHRpb246CiAgICAgIC0ga2V5IHBhaXIgdG8gdXNlIG9uIHRoZSBpbnN0YW5jZQogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBudWxsCiAgICBhbGlhc2VzOiBbJ2tleXBhaXInXQogIGlkOgogICAgdmVyc2lvbl9hZGRlZDogIjEuMSIKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIGlkZW50aWZpZXIgZm9yIHRoaXMgaW5zdGFuY2Ugb3Igc2V0IG9mIGluc3RhbmNlcywgc28gdGhhdCB0aGUgbW9kdWxlIHdpbGwgYmUgaWRlbXBvdGVudCB3aXRoIHJlc3BlY3QgdG8gRUMyIGluc3RhbmNlcy4KICAgICAgICBUaGlzIGlkZW50aWZpZXIgaXMgdmFsaWQgZm9yIGF0IGxlYXN0IDI0IGhvdXJzIGFmdGVyIHRoZSB0ZXJtaW5hdGlvbiBvZiB0aGUgaW5zdGFuY2UsIGFuZCBzaG91bGQgbm90IGJlIHJldXNlZCBmb3IgYW5vdGhlciBjYWxsIGxhdGVyIG9uLgogICAgICAgIEZvciBkZXRhaWxzLCBzZWUgdGhlIGRlc2NyaXB0aW9uIG9mIGNsaWVudCB0b2tlbiBhdCBVKGh0dHA6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FXU0VDMi9sYXRlc3QvVXNlckd1aWRlL1J1bl9JbnN0YW5jZV9JZGVtcG90ZW5jeS5odG1sKS4KICAgIHJlcXVpcmVkOiBmYWxzZQogICAgZGVmYXVsdDogbnVsbAogICAgYWxpYXNlczogW10KICBncm91cDoKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIHNlY3VyaXR5IGdyb3VwIChvciBsaXN0IG9mIGdyb3VwcykgdG8gdXNlIHdpdGggdGhlIGluc3RhbmNlCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6IG51bGwKICAgIGFsaWFzZXM6IFsgJ2dyb3VwcycgXQogIGdyb3VwX2lkOgogICAgdmVyc2lvbl9hZGRlZDogIjEuMSIKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIHNlY3VyaXR5IGdyb3VwIGlkIChvciBsaXN0IG9mIGlkcykgdG8gdXNlIHdpdGggdGhlIGluc3RhbmNlCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6IG51bGwKICAgIGFsaWFzZXM6IFtdCiAgcmVnaW9uOgogICAgdmVyc2lvbl9hZGRlZDogIjEuMiIKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIFRoZSBBV1MgcmVnaW9uIHRvIHVzZS4gIE11c3QgYmUgc3BlY2lmaWVkIGlmIGVjMl91cmwgaXMgbm90IHVzZWQuCiAgICAgICAgSWYgbm90IHNwZWNpZmllZCB0aGVuIHRoZSB2YWx1ZSBvZiB0aGUgRUMyX1JFR0lPTiBlbnZpcm9ubWVudCB2YXJpYWJsZSwgaWYgYW55LCBpcyB1c2VkLgogICAgICAgIFNlZSBVKGh0dHA6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2dlbmVyYWwvbGF0ZXN0L2dyL3JhbmRlLmh0bWwjZWMyX3JlZ2lvbikKICAgIHJlcXVpcmVkOiBmYWxzZQogICAgZGVmYXVsdDogbnVsbAogICAgYWxpYXNlczogWyAnYXdzX3JlZ2lvbicsICdlYzJfcmVnaW9uJyBdCiAgem9uZToKICAgIHZlcnNpb25fYWRkZWQ6ICIxLjIiCiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBBV1MgYXZhaWxhYmlsaXR5IHpvbmUgaW4gd2hpY2ggdG8gbGF1bmNoIHRoZSBpbnN0YW5jZQogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBudWxsCiAgICBhbGlhc2VzOiBbICdhd3Nfem9uZScsICdlYzJfem9uZScgXQogIGluc3RhbmNlX3R5cGU6CiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBpbnN0YW5jZSB0eXBlIHRvIHVzZSBmb3IgdGhlIGluc3RhbmNlLCBzZWUgVShodHRwOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BV1NFQzIvbGF0ZXN0L1VzZXJHdWlkZS9pbnN0YW5jZS10eXBlcy5odG1sKQogICAgcmVxdWlyZWQ6IHRydWUKICAgIGRlZmF1bHQ6IG51bGwKICAgIGFsaWFzZXM6IFtdCiAgdGVuYW5jeToKICAgIHZlcnNpb25fYWRkZWQ6ICIxLjkiCiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBBbiBpbnN0YW5jZSB3aXRoIGEgdGVuYW5jeSBvZiAiZGVkaWNhdGVkIiBydW5zIG9uIHNpbmdsZS10ZW5hbnQgaGFyZHdhcmUgYW5kIGNhbiBvbmx5IGJlIGxhdW5jaGVkIGludG8gYSBWUEMuCiAgICAgICAgTm90ZSB0aGF0IHRvIHVzZSBkZWRpY2F0ZWQgdGVuYW5jeSB5b3UgTVVTVCBzcGVjaWZ5IGEgdnBjX3N1Ym5ldF9pZCBhcyB3ZWxsLiBEZWRpY2F0ZWQgdGVuYW5jeSBpcyBub3QgYXZhaWxhYmxlIGZvciBFQzIgIm1pY3JvIiBpbnN0YW5jZXMuCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6IGRlZmF1bHQKICAgIGNob2ljZXM6IFsgImRlZmF1bHQiLCAiZGVkaWNhdGVkIiBdCiAgICBhbGlhc2VzOiBbXQogIHNwb3RfcHJpY2U6CiAgICB2ZXJzaW9uX2FkZGVkOiAiMS41IgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gTWF4aW11bSBzcG90IHByaWNlIHRvIGJpZCwgSWYgbm90IHNldCBhIHJlZ3VsYXIgb24tZGVtYW5kIGluc3RhbmNlIGlzIHJlcXVlc3RlZC4gQSBzcG90IHJlcXVlc3QgaXMgbWFkZSB3aXRoIHRoaXMgbWF4aW11bSBiaWQuCiAgICAgICAgV2hlbiBpdCBpcyBmaWxsZWQsIHRoZSBpbnN0YW5jZSBpcyBzdGFydGVkLgogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBudWxsCiAgICBhbGlhc2VzOiBbXQogIHNwb3RfdHlwZToKICAgIHZlcnNpb25fYWRkZWQ6ICIyLjAiCiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBUeXBlIG9mIHNwb3QgcmVxdWVzdDsgb25lIG9mICJvbmUtdGltZSIgb3IgInBlcnNpc3RlbnQiLiBEZWZhdWx0cyB0byAib25lLXRpbWUiIGlmIG5vdCBzdXBwbGllZC4KICAgIHJlcXVpcmVkOiBmYWxzZQogICAgZGVmYXVsdDogIm9uZS10aW1lIgogICAgY2hvaWNlczogWyAib25lLXRpbWUiLCAicGVyc2lzdGVudCIgXQogICAgYWxpYXNlczogW10KICBpbWFnZToKICAgIGRlc2NyaXB0aW9uOgogICAgICAgLSBJKGFtaSkgSUQgdG8gdXNlIGZvciB0aGUgaW5zdGFuY2UKICAgIHJlcXVpcmVkOiB0cnVlCiAgICBkZWZhdWx0OiBudWxsCiAgICBhbGlhc2VzOiBbXQogIGtlcm5lbDoKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIGtlcm5lbCBJKGVraSkgdG8gdXNlIGZvciB0aGUgaW5zdGFuY2UKICAgIHJlcXVpcmVkOiBmYWxzZQogICAgZGVmYXVsdDogbnVsbAogICAgYWxpYXNlczogW10KICByYW1kaXNrOgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gcmFtZGlzayBJKGVyaSkgdG8gdXNlIGZvciB0aGUgaW5zdGFuY2UKICAgIHJlcXVpcmVkOiBmYWxzZQogICAgZGVmYXVsdDogbnVsbAogICAgYWxpYXNlczogW10KICB3YWl0OgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gd2FpdCBmb3IgdGhlIGluc3RhbmNlIHRvIHJlYWNoIGl0cyBkZXNpcmVkIHN0YXRlIGJlZm9yZSByZXR1cm5pbmcuICBEb2VzIG5vdCB3YWl0IGZvciBTU0gsIHNlZSAnd2FpdF9mb3InIGV4YW1wbGUgZm9yIGRldGFpbHMuCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6ICJubyIKICAgIGNob2ljZXM6IFsgInllcyIsICJubyIgXQogICAgYWxpYXNlczogW10KICB3YWl0X3RpbWVvdXQ6CiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBob3cgbG9uZyBiZWZvcmUgd2FpdCBnaXZlcyB1cCwgaW4gc2Vjb25kcwogICAgZGVmYXVsdDogMzAwCiAgICBhbGlhc2VzOiBbXQogIHNwb3Rfd2FpdF90aW1lb3V0OgogICAgdmVyc2lvbl9hZGRlZDogIjEuNSIKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIGhvdyBsb25nIHRvIHdhaXQgZm9yIHRoZSBzcG90IGluc3RhbmNlIHJlcXVlc3QgdG8gYmUgZnVsZmlsbGVkCiAgICBkZWZhdWx0OiA2MDAKICAgIGFsaWFzZXM6IFtdCiAgY291bnQ6CiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBudW1iZXIgb2YgaW5zdGFuY2VzIHRvIGxhdW5jaAogICAgcmVxdWlyZWQ6IEZhbHNlCiAgICBkZWZhdWx0OiAxCiAgICBhbGlhc2VzOiBbXQogIG1vbml0b3Jpbmc6CiAgICB2ZXJzaW9uX2FkZGVkOiAiMS4xIgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gZW5hYmxlIGRldGFpbGVkIG1vbml0b3JpbmcgKENsb3VkV2F0Y2gpIGZvciBpbnN0YW5jZQogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBudWxsCiAgICBjaG9pY2VzOiBbICJ5ZXMiLCAibm8iIF0KICAgIGFsaWFzZXM6IFtdCiAgdXNlcl9kYXRhOgogICAgdmVyc2lvbl9hZGRlZDogIjAuOSIKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIG9wYXF1ZSBibG9iIG9mIGRhdGEgd2hpY2ggaXMgbWFkZSBhdmFpbGFibGUgdG8gdGhlIGVjMiBpbnN0YW5jZQogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBudWxsCiAgICBhbGlhc2VzOiBbXQogIGluc3RhbmNlX3RhZ3M6CiAgICB2ZXJzaW9uX2FkZGVkOiAiMS4wIgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gYSBoYXNoL2RpY3Rpb25hcnkgb2YgdGFncyB0byBhZGQgdG8gdGhlIG5ldyBpbnN0YW5jZSBvciBmb3Igc3RhcnRpbmcvc3RvcHBpbmcgaW5zdGFuY2UgYnkgdGFnOyAneyJrZXkiOiJ2YWx1ZSJ9JyBhbmQgJ3sia2V5IjoidmFsdWUiLCJrZXkiOiJ2YWx1ZSJ9JwogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBudWxsCiAgICBhbGlhc2VzOiBbXQogIHBsYWNlbWVudF9ncm91cDoKICAgIHZlcnNpb25fYWRkZWQ6ICIxLjMiCiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBwbGFjZW1lbnQgZ3JvdXAgZm9yIHRoZSBpbnN0YW5jZSB3aGVuIHVzaW5nIEVDMiBDbHVzdGVyZWQgQ29tcHV0ZQogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBudWxsCiAgICBhbGlhc2VzOiBbXQogIHZwY19zdWJuZXRfaWQ6CiAgICB2ZXJzaW9uX2FkZGVkOiAiMS4xIgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gdGhlIHN1Ym5ldCBJRCBpbiB3aGljaCB0byBsYXVuY2ggdGhlIGluc3RhbmNlIChWUEMpCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6IG51bGwKICAgIGFsaWFzZXM6IFtdCiAgYXNzaWduX3B1YmxpY19pcDoKICAgIHZlcnNpb25fYWRkZWQ6ICIxLjUiCiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSB3aGVuIHByb3Zpc2lvbmluZyB3aXRoaW4gdnBjLCBhc3NpZ24gYSBwdWJsaWMgSVAgYWRkcmVzcy4gQm90byBsaWJyYXJ5IG11c3QgYmUgMi4xMy4wKwogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBudWxsCiAgICBjaG9pY2VzOiBbICJ5ZXMiLCAibm8iIF0KICAgIGFsaWFzZXM6IFtdCiAgcHJpdmF0ZV9pcDoKICAgIHZlcnNpb25fYWRkZWQ6ICIxLjIiCiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSB0aGUgcHJpdmF0ZSBpcCBhZGRyZXNzIHRvIGFzc2lnbiB0aGUgaW5zdGFuY2UgKGZyb20gdGhlIHZwYyBzdWJuZXQpCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6IG51bGwKICAgIGFsaWFzZXM6IFtdCiAgaW5zdGFuY2VfcHJvZmlsZV9uYW1lOgogICAgdmVyc2lvbl9hZGRlZDogIjEuMyIKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIE5hbWUgb2YgdGhlIElBTSBpbnN0YW5jZSBwcm9maWxlIHRvIHVzZS4gQm90byBsaWJyYXJ5IG11c3QgYmUgMi41LjArCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6IG51bGwKICAgIGFsaWFzZXM6IFtdCiAgaW5zdGFuY2VfaWRzOgogICAgdmVyc2lvbl9hZGRlZDogIjEuMyIKICAgIGRlc2NyaXB0aW9uOgogICAgICAtICJsaXN0IG9mIGluc3RhbmNlIGlkcywgY3VycmVudGx5IHVzZWQgZm9yIHN0YXRlczogYWJzZW50LCBydW5uaW5nLCBzdG9wcGVkIgogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBudWxsCiAgICBhbGlhc2VzOiBbJ2luc3RhbmNlX2lkJ10KICBzb3VyY2VfZGVzdF9jaGVjazoKICAgIHZlcnNpb25fYWRkZWQ6ICIxLjYiCiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBFbmFibGUgb3IgRGlzYWJsZSB0aGUgU291cmNlL0Rlc3RpbmF0aW9uIGNoZWNrcyAoZm9yIE5BVCBpbnN0YW5jZXMgYW5kIFZpcnR1YWwgUm91dGVycykKICAgIHJlcXVpcmVkOiBmYWxzZQogICAgZGVmYXVsdDogeWVzCiAgICBjaG9pY2VzOiBbICJ5ZXMiLCAibm8iIF0KICB0ZXJtaW5hdGlvbl9wcm90ZWN0aW9uOgogICAgdmVyc2lvbl9hZGRlZDogIjIuMCIKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIEVuYWJsZSBvciBEaXNhYmxlIHRoZSBUZXJtaW5hdGlvbiBQcm90ZWN0aW9uCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6IG5vCiAgICBjaG9pY2VzOiBbICJ5ZXMiLCAibm8iIF0KICBpbnN0YW5jZV9pbml0aWF0ZWRfc2h1dGRvd25fYmVoYXZpb3I6CiAgICB2ZXJzaW9uX2FkZGVkOiAiMi4yIgogICAgZGVzY3JpcHRpb246CiAgICAtIFNldCB3aGV0aGVyIEFXUyB3aWxsIFN0b3Agb3IgVGVybWluYXRlIGFuIGluc3RhbmNlIG9uIHNodXRkb3duCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6ICdzdG9wJwogICAgY2hvaWNlczogWyAic3RvcCIsICJ0ZXJtaW5hdGUiIF0KICBzdGF0ZToKICAgIHZlcnNpb25fYWRkZWQ6ICIxLjMiCiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBjcmVhdGUgb3IgdGVybWluYXRlIGluc3RhbmNlcwogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiAncHJlc2VudCcKICAgIGFsaWFzZXM6IFtdCiAgICBjaG9pY2VzOiBbJ3ByZXNlbnQnLCAnYWJzZW50JywgJ3J1bm5pbmcnLCAncmVzdGFydGVkJywgJ3N0b3BwZWQnXQogIHZvbHVtZXM6CiAgICB2ZXJzaW9uX2FkZGVkOiAiMS41IgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gYSBsaXN0IG9mIGhhc2gvZGljdGlvbmFyaWVzIG9mIHZvbHVtZXMgdG8gYWRkIHRvIHRoZSBuZXcgaW5zdGFuY2U7ICdbeyJrZXkiOiJ2YWx1ZSIsICJrZXkiOiJ2YWx1ZSJ9XSc7IGtleXMgYWxsb3dlZAogICAgICAgIGFyZSAtIGRldmljZV9uYW1lIChzdHI7IHJlcXVpcmVkKSwgZGVsZXRlX29uX3Rlcm1pbmF0aW9uIChib29sOyBGYWxzZSksIGRldmljZV90eXBlIChkZXByZWNhdGVkKSwgZXBoZW1lcmFsIChzdHIpLAogICAgICAgIGVuY3J5cHRlZCAoYm9vbDsgRmFsc2UpLCBzbmFwc2hvdCAoc3RyKSwgdm9sdW1lX3R5cGUgKHN0ciksIGlvcHMgKGludCkgLSBkZXZpY2VfdHlwZSBpcyBkZXByZWNhdGVkIHVzZSB2b2x1bWVfdHlwZSwKICAgICAgICBpb3BzIG11c3QgYmUgc2V0IHdoZW4gdm9sdW1lX3R5cGU9J2lvMScsIGVwaGVtZXJhbCBhbmQgc25hcHNob3QgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4KICAgIHJlcXVpcmVkOiBmYWxzZQogICAgZGVmYXVsdDogbnVsbAogICAgYWxpYXNlczogW10KICBlYnNfb3B0aW1pemVkOgogICAgdmVyc2lvbl9hZGRlZDogIjEuNiIKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIHdoZXRoZXIgaW5zdGFuY2UgaXMgdXNpbmcgb3B0aW1pemVkIEVCUyB2b2x1bWVzLCBzZWUgVShodHRwOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BV1NFQzIvbGF0ZXN0L1VzZXJHdWlkZS9FQlNPcHRpbWl6ZWQuaHRtbCkKICAgIHJlcXVpcmVkOiBmYWxzZQogICAgZGVmYXVsdDogJ2ZhbHNlJwogIGV4YWN0X2NvdW50OgogICAgdmVyc2lvbl9hZGRlZDogIjEuNSIKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIEFuIGludGVnZXIgdmFsdWUgd2hpY2ggaW5kaWNhdGVzIGhvdyBtYW55IGluc3RhbmNlcyB0aGF0IG1hdGNoIHRoZSAnY291bnRfdGFnJyBwYXJhbWV0ZXIgc2hvdWxkIGJlIHJ1bm5pbmcuCiAgICAgICAgSW5zdGFuY2VzIGFyZSBlaXRoZXIgY3JlYXRlZCBvciB0ZXJtaW5hdGVkIGJhc2VkIG9uIHRoaXMgdmFsdWUuCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6IG51bGwKICAgIGFsaWFzZXM6IFtdCiAgY291bnRfdGFnOgogICAgdmVyc2lvbl9hZGRlZDogIjEuNSIKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIFVzZWQgd2l0aCAnZXhhY3RfY291bnQnIHRvIGRldGVybWluZSBob3cgbWFueSBub2RlcyBiYXNlZCBvbiBhIHNwZWNpZmljIHRhZyBjcml0ZXJpYSBzaG91bGQgYmUgcnVubmluZy4KICAgICAgICBUaGlzIGNhbiBiZSBleHByZXNzZWQgaW4gbXVsdGlwbGUgd2F5cyBhbmQgaXMgc2hvd24gaW4gdGhlIEVYQU1QTEVTIHNlY3Rpb24uICBGb3IgaW5zdGFuY2UsIG9uZSBjYW4gcmVxdWVzdCAyNSBzZXJ2ZXJzCiAgICAgICAgdGhhdCBhcmUgdGFnZ2VkIHdpdGggImNsYXNzPXdlYnNlcnZlciIuIFRoZSBzcGVjaWZpZWQgdGFnIG11c3QgYWxyZWFkeSBleGlzdCBvciBiZSBwYXNzZWQgaW4gYXMgdGhlICdpbnN0YW5jZV90YWdzJyBvcHRpb24uCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6IG51bGwKICAgIGFsaWFzZXM6IFtdCiAgbmV0d29ya19pbnRlcmZhY2VzOgogICAgdmVyc2lvbl9hZGRlZDogIjIuMCIKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIEEgbGlzdCBvZiBleGlzdGluZyBuZXR3b3JrIGludGVyZmFjZXMgdG8gYXR0YWNoIHRvIHRoZSBpbnN0YW5jZSBhdCBsYXVuY2guIFdoZW4gc3BlY2lmeWluZyBleGlzdGluZyBuZXR3b3JrIGludGVyZmFjZXMsCiAgICAgICAgbm9uZSBvZiB0aGUgYXNzaWduX3B1YmxpY19pcCwgcHJpdmF0ZV9pcCwgdnBjX3N1Ym5ldF9pZCwgZ3JvdXAsIG9yIGdyb3VwX2lkIHBhcmFtZXRlcnMgbWF5IGJlIHVzZWQuIChUaG9zZSBwYXJhbWV0ZXJzIGFyZQogICAgICAgIGZvciBjcmVhdGluZyBhIG5ldyBuZXR3b3JrIGludGVyZmFjZSBhdCBsYXVuY2guKQogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBudWxsCiAgICBhbGlhc2VzOiBbJ25ldHdvcmtfaW50ZXJmYWNlJ10KICBzcG90X2xhdW5jaF9ncm91cDoKICAgIHZlcnNpb25fYWRkZWQ6ICIyLjEiCiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBMYXVuY2ggZ3JvdXAgZm9yIHNwb3QgcmVxdWVzdCwgc2VlIFUoaHR0cDovL2RvY3MuYXdzLmFtYXpvbi5jb20vQVdTRUMyL2xhdGVzdC9Vc2VyR3VpZGUvaG93LXNwb3QtaW5zdGFuY2VzLXdvcmsuaHRtbCNzcG90LWxhdW5jaC1ncm91cCkKICAgIHJlcXVpcmVkOiBmYWxzZQogICAgZGVmYXVsdDogbnVsbAoKYXV0aG9yOgogICAgLSAiVGltIEdlcmxhIChAdGdlcmxhKSIKICAgIC0gIkxlc3RlciBXYWRlIChAbHdhZGUpIgogICAgLSAiU2V0aCBWaWRhbCIKZXh0ZW5kc19kb2N1bWVudGF0aW9uX2ZyYWdtZW50OiBhd3MKJycnCgpFWEFNUExFUyA9ICcnJwojIE5vdGU6IFRoZXNlIGV4YW1wbGVzIGRvIG5vdCBzZXQgYXV0aGVudGljYXRpb24gZGV0YWlscywgc2VlIHRoZSBBV1MgR3VpZGUgZm9yIGRldGFpbHMuCgojIEJhc2ljIHByb3Zpc2lvbmluZyBleGFtcGxlCi0gZWMyOgogICAga2V5X25hbWU6IG15a2V5CiAgICBpbnN0YW5jZV90eXBlOiB0Mi5taWNybwogICAgaW1hZ2U6IGFtaS0xMjM0NTYKICAgIHdhaXQ6IHllcwogICAgZ3JvdXA6IHdlYnNlcnZlcgogICAgY291bnQ6IDMKICAgIHZwY19zdWJuZXRfaWQ6IHN1Ym5ldC0yOWU2MzI0NQogICAgYXNzaWduX3B1YmxpY19pcDogeWVzCgojIEFkdmFuY2VkIGV4YW1wbGUgd2l0aCB0YWdnaW5nIGFuZCBDbG91ZFdhdGNoCi0gZWMyOgogICAga2V5X25hbWU6IG15a2V5CiAgICBncm91cDogZGF0YWJhc2VzCiAgICBpbnN0YW5jZV90eXBlOiB0Mi5taWNybwogICAgaW1hZ2U6IGFtaS0xMjM0NTYKICAgIHdhaXQ6IHllcwogICAgd2FpdF90aW1lb3V0OiA1MDAKICAgIGNvdW50OiA1CiAgICBpbnN0YW5jZV90YWdzOgogICAgICAgZGI6IHBvc3RncmVzCiAgICBtb25pdG9yaW5nOiB5ZXMKICAgIHZwY19zdWJuZXRfaWQ6IHN1Ym5ldC0yOWU2MzI0NQogICAgYXNzaWduX3B1YmxpY19pcDogeWVzCgojIFNpbmdsZSBpbnN0YW5jZSB3aXRoIGFkZGl0aW9uYWwgSU9QUyB2b2x1bWUgZnJvbSBzbmFwc2hvdCBhbmQgdm9sdW1lIGRlbGV0ZSBvbiB0ZXJtaW5hdGlvbgotIGVjMjoKICAgIGtleV9uYW1lOiBteWtleQogICAgZ3JvdXA6IHdlYnNlcnZlcgogICAgaW5zdGFuY2VfdHlwZTogYzMubWVkaXVtCiAgICBpbWFnZTogYW1pLTEyMzQ1NgogICAgd2FpdDogeWVzCiAgICB3YWl0X3RpbWVvdXQ6IDUwMAogICAgdm9sdW1lczoKICAgICAgLSBkZXZpY2VfbmFtZTogL2Rldi9zZGIKICAgICAgICBzbmFwc2hvdDogc25hcC1hYmNkZWYxMgogICAgICAgIHZvbHVtZV90eXBlOiBpbzEKICAgICAgICBpb3BzOiAxMDAwCiAgICAgICAgdm9sdW1lX3NpemU6IDEwMAogICAgICAgIGRlbGV0ZV9vbl90ZXJtaW5hdGlvbjogdHJ1ZQogICAgbW9uaXRvcmluZzogeWVzCiAgICB2cGNfc3VibmV0X2lkOiBzdWJuZXQtMjllNjMyNDUKICAgIGFzc2lnbl9wdWJsaWNfaXA6IHllcwoKIyBTaW5nbGUgaW5zdGFuY2Ugd2l0aCBzc2QgZ3AyIHJvb3Qgdm9sdW1lCi0gZWMyOgogICAga2V5X25hbWU6IG15a2V5CiAgICBncm91cDogd2Vic2VydmVyCiAgICBpbnN0YW5jZV90eXBlOiBjMy5tZWRpdW0KICAgIGltYWdlOiBhbWktMTIzNDU2CiAgICB3YWl0OiB5ZXMKICAgIHdhaXRfdGltZW91dDogNTAwCiAgICB2b2x1bWVzOgogICAgICAtIGRldmljZV9uYW1lOiAvZGV2L3h2ZGEKICAgICAgICB2b2x1bWVfdHlwZTogZ3AyCiAgICAgICAgdm9sdW1lX3NpemU6IDgKICAgIHZwY19zdWJuZXRfaWQ6IHN1Ym5ldC0yOWU2MzI0NQogICAgYXNzaWduX3B1YmxpY19pcDogeWVzCiAgICBjb3VudF90YWc6CiAgICAgIE5hbWU6IGRic2VydmVyCiAgICBleGFjdF9jb3VudDogMQoKIyBNdWx0aXBsZSBncm91cHMgZXhhbXBsZQotIGVjMjoKICAgIGtleV9uYW1lOiBteWtleQogICAgZ3JvdXA6IFsnZGF0YWJhc2VzJywgJ2ludGVybmFsLXNlcnZpY2VzJywgJ3NzaGFibGUnLCAnYW5kLXNvLWZvcnRoJ10KICAgIGluc3RhbmNlX3R5cGU6IG0xLmxhcmdlCiAgICBpbWFnZTogYW1pLTZlNjQ5NzA3CiAgICB3YWl0OiB5ZXMKICAgIHdhaXRfdGltZW91dDogNTAwCiAgICBjb3VudDogNQogICAgaW5zdGFuY2VfdGFnczoKICAgICAgICBkYjogcG9zdGdyZXMKICAgIG1vbml0b3Jpbmc6IHllcwogICAgdnBjX3N1Ym5ldF9pZDogc3VibmV0LTI5ZTYzMjQ1CiAgICBhc3NpZ25fcHVibGljX2lwOiB5ZXMKCiMgTXVsdGlwbGUgaW5zdGFuY2VzIHdpdGggYWRkaXRpb25hbCB2b2x1bWUgZnJvbSBzbmFwc2hvdAotIGVjMjoKICAgIGtleV9uYW1lOiBteWtleQogICAgZ3JvdXA6IHdlYnNlcnZlcgogICAgaW5zdGFuY2VfdHlwZTogbTEubGFyZ2UKICAgIGltYWdlOiBhbWktNmU2NDk3MDcKICAgIHdhaXQ6IHllcwogICAgd2FpdF90aW1lb3V0OiA1MDAKICAgIGNvdW50OiA1CiAgICB2b2x1bWVzOgogICAgLSBkZXZpY2VfbmFtZTogL2Rldi9zZGIKICAgICAgc25hcHNob3Q6IHNuYXAtYWJjZGVmMTIKICAgICAgdm9sdW1lX3NpemU6IDEwCiAgICBtb25pdG9yaW5nOiB5ZXMKICAgIHZwY19zdWJuZXRfaWQ6IHN1Ym5ldC0yOWU2MzI0NQogICAgYXNzaWduX3B1YmxpY19pcDogeWVzCgojIERlZGljYXRlZCB0ZW5hbmN5IGV4YW1wbGUKLSBsb2NhbF9hY3Rpb246CiAgICBtb2R1bGU6IGVjMgogICAgYXNzaWduX3B1YmxpY19pcDogeWVzCiAgICBncm91cF9pZDogc2ctMWRjNTNmNzIKICAgIGtleV9uYW1lOiBteWtleQogICAgaW1hZ2U6IGFtaS02ZTY0OTcwNwogICAgaW5zdGFuY2VfdHlwZTogbTEuc21hbGwKICAgIHRlbmFuY3k6IGRlZGljYXRlZAogICAgdnBjX3N1Ym5ldF9pZDogc3VibmV0LTI5ZTYzMjQ1CiAgICB3YWl0OiB5ZXMKCiMgU3BvdCBpbnN0YW5jZSBleGFtcGxlCi0gZWMyOgogICAgc3BvdF9wcmljZTogMC4yNAogICAgc3BvdF93YWl0X3RpbWVvdXQ6IDYwMAogICAga2V5cGFpcjogbXlrZXkKICAgIGdyb3VwX2lkOiBzZy0xZGM1M2Y3MgogICAgaW5zdGFuY2VfdHlwZTogbTEuc21hbGwKICAgIGltYWdlOiBhbWktNmU2NDk3MDcKICAgIHdhaXQ6IHllcwogICAgdnBjX3N1Ym5ldF9pZDogc3VibmV0LTI5ZTYzMjQ1CiAgICBhc3NpZ25fcHVibGljX2lwOiB5ZXMKICAgIHNwb3RfbGF1bmNoX2dyb3VwOiByZXBvcnRfZ2VuZXJhdG9ycwoKIyBFeGFtcGxlcyB1c2luZyBwcmUtZXhpc3RpbmcgbmV0d29yayBpbnRlcmZhY2VzCi0gZWMyOgogICAga2V5X25hbWU6IG15a2V5CiAgICBpbnN0YW5jZV90eXBlOiB0Mi5zbWFsbAogICAgaW1hZ2U6IGFtaS1mMDA1YmExMQogICAgbmV0d29ya19pbnRlcmZhY2U6IGVuaS1kZWFkYmVlZgoKLSBlYzI6CiAgICBrZXlfbmFtZTogbXlrZXkKICAgIGluc3RhbmNlX3R5cGU6IHQyLnNtYWxsCiAgICBpbWFnZTogYW1pLWYwMDViYTExCiAgICBuZXR3b3JrX2ludGVyZmFjZXM6IFsnZW5pLWRlYWRiZWVmJywgJ2VuaS01Y2ExYWIxZSddCgojIExhdW5jaCBpbnN0YW5jZXMsIHJ1bnMgc29tZSB0YXNrcwojIGFuZCB0aGVuIHRlcm1pbmF0ZSB0aGVtCgotIG5hbWU6IENyZWF0ZSBhIHNhbmRib3ggaW5zdGFuY2UKICBob3N0czogbG9jYWxob3N0CiAgZ2F0aGVyX2ZhY3RzOiBGYWxzZQogIHZhcnM6CiAgICBrZXlfbmFtZTogbXlfa2V5cGFpcgogICAgaW5zdGFuY2VfdHlwZTogbTEuc21hbGwKICAgIHNlY3VyaXR5X2dyb3VwOiBteV9zZWN1cml0eWdyb3VwCiAgICBpbWFnZTogbXlfYW1pX2lkCiAgICByZWdpb246IHVzLWVhc3QtMQogIHRhc2tzOgogICAgLSBuYW1lOiBMYXVuY2ggaW5zdGFuY2UKICAgICAgZWMyOgogICAgICAgICBrZXlfbmFtZTogInt7IGtleXBhaXIgfX0iCiAgICAgICAgIGdyb3VwOiAie3sgc2VjdXJpdHlfZ3JvdXAgfX0iCiAgICAgICAgIGluc3RhbmNlX3R5cGU6ICJ7eyBpbnN0YW5jZV90eXBlIH19IgogICAgICAgICBpbWFnZTogInt7IGltYWdlIH19IgogICAgICAgICB3YWl0OiB0cnVlCiAgICAgICAgIHJlZ2lvbjogInt7IHJlZ2lvbiB9fSIKICAgICAgICAgdnBjX3N1Ym5ldF9pZDogc3VibmV0LTI5ZTYzMjQ1CiAgICAgICAgIGFzc2lnbl9wdWJsaWNfaXA6IHllcwogICAgICByZWdpc3RlcjogZWMyCgogICAgLSBuYW1lOiBBZGQgbmV3IGluc3RhbmNlIHRvIGhvc3QgZ3JvdXAKICAgICAgYWRkX2hvc3Q6CiAgICAgICAgaG9zdG5hbWU6ICJ7eyBpdGVtLnB1YmxpY19pcCB9fSIKICAgICAgICBncm91cG5hbWU6IGxhdW5jaGVkCiAgICAgIHdpdGhfaXRlbXM6ICJ7eyBlYzIuaW5zdGFuY2VzIH19IgoKICAgIC0gbmFtZTogV2FpdCBmb3IgU1NIIHRvIGNvbWUgdXAKICAgICAgd2FpdF9mb3I6CiAgICAgICAgaG9zdDogInt7IGl0ZW0ucHVibGljX2Ruc19uYW1lIH19IgogICAgICAgIHBvcnQ6IDIyCiAgICAgICAgZGVsYXk6IDYwCiAgICAgICAgdGltZW91dDogMzIwCiAgICAgICAgc3RhdGU6IHN0YXJ0ZWQKICAgICAgd2l0aF9pdGVtczogInt7IGVjMi5pbnN0YW5jZXMgfX0iCgotIG5hbWU6IENvbmZpZ3VyZSBpbnN0YW5jZShzKQogIGhvc3RzOiBsYXVuY2hlZAogIGJlY29tZTogVHJ1ZQogIGdhdGhlcl9mYWN0czogVHJ1ZQogIHJvbGVzOgogICAgLSBteV9hd2Vzb21lX3JvbGUKICAgIC0gbXlfYXdlc29tZV90ZXN0CgotIG5hbWU6IFRlcm1pbmF0ZSBpbnN0YW5jZXMKICBob3N0czogbG9jYWxob3N0CiAgY29ubmVjdGlvbjogbG9jYWwKICB0YXNrczoKICAgIC0gbmFtZTogVGVybWluYXRlIGluc3RhbmNlcyB0aGF0IHdlcmUgcHJldmlvdXNseSBsYXVuY2hlZAogICAgICBlYzI6CiAgICAgICAgc3RhdGU6ICdhYnNlbnQnCiAgICAgICAgaW5zdGFuY2VfaWRzOiAne3sgZWMyLmluc3RhbmNlX2lkcyB9fScKCiMgU3RhcnQgYSBmZXcgZXhpc3RpbmcgaW5zdGFuY2VzLCBydW4gc29tZSB0YXNrcwojIGFuZCBzdG9wIHRoZSBpbnN0YW5jZXMKCi0gbmFtZTogU3RhcnQgc2FuZGJveCBpbnN0YW5jZXMKICBob3N0czogbG9jYWxob3N0CiAgZ2F0aGVyX2ZhY3RzOiBmYWxzZQogIGNvbm5lY3Rpb246IGxvY2FsCiAgdmFyczoKICAgIGluc3RhbmNlX2lkczoKICAgICAgLSAnaS14eHh4eHgnCiAgICAgIC0gJ2kteHh4eHh4JwogICAgICAtICdpLXh4eHh4eCcKICAgIHJlZ2lvbjogdXMtZWFzdC0xCiAgdGFza3M6CiAgICAtIG5hbWU6IFN0YXJ0IHRoZSBzYW5kYm94IGluc3RhbmNlcwogICAgICBlYzI6CiAgICAgICAgaW5zdGFuY2VfaWRzOiAne3sgaW5zdGFuY2VfaWRzIH19JwogICAgICAgIHJlZ2lvbjogJ3t7IHJlZ2lvbiB9fScKICAgICAgICBzdGF0ZTogcnVubmluZwogICAgICAgIHdhaXQ6IFRydWUKICAgICAgICB2cGNfc3VibmV0X2lkOiBzdWJuZXQtMjllNjMyNDUKICAgICAgICBhc3NpZ25fcHVibGljX2lwOiB5ZXMKICByb2xlczoKICAgIC0gZG9fbmVhdF9zdHVmZgogICAgLSBkb19tb3JlX25lYXRfc3R1ZmYKCi0gbmFtZTogU3RvcCBzYW5kYm94IGluc3RhbmNlcwogIGhvc3RzOiBsb2NhbGhvc3QKICBnYXRoZXJfZmFjdHM6IGZhbHNlCiAgY29ubmVjdGlvbjogbG9jYWwKICB2YXJzOgogICAgaW5zdGFuY2VfaWRzOgogICAgICAtICdpLXh4eHh4eCcKICAgICAgLSAnaS14eHh4eHgnCiAgICAgIC0gJ2kteHh4eHh4JwogICAgcmVnaW9uOiB1cy1lYXN0LTEKICB0YXNrczoKICAgIC0gbmFtZTogU3RvcCB0aGUgc2FuZGJveCBpbnN0YW5jZXMKICAgICAgZWMyOgogICAgICAgIGluc3RhbmNlX2lkczogJ3t7IGluc3RhbmNlX2lkcyB9fScKICAgICAgICByZWdpb246ICd7eyByZWdpb24gfX0nCiAgICAgICAgc3RhdGU6IHN0b3BwZWQKICAgICAgICB3YWl0OiBUcnVlCiAgICAgICAgdnBjX3N1Ym5ldF9pZDogc3VibmV0LTI5ZTYzMjQ1CiAgICAgICAgYXNzaWduX3B1YmxpY19pcDogeWVzCgojCiMgU3RhcnQgc3RvcHBlZCBpbnN0YW5jZXMgc3BlY2lmaWVkIGJ5IHRhZwojCi0gbG9jYWxfYWN0aW9uOgogICAgbW9kdWxlOiBlYzIKICAgIGluc3RhbmNlX3RhZ3M6CiAgICAgICAgTmFtZTogRXh0cmFQb3dlcgogICAgc3RhdGU6IHJ1bm5pbmcKCiMKIyBSZXN0YXJ0IGluc3RhbmNlcyBzcGVjaWZpZWQgYnkgdGFnCiMKLSBsb2NhbF9hY3Rpb246CiAgICBtb2R1bGU6IGVjMgogICAgaW5zdGFuY2VfdGFnczoKICAgICAgICBOYW1lOiBFeHRyYVBvd2VyCiAgICBzdGF0ZTogcmVzdGFydGVkCgojCiMgRW5mb3JjZSB0aGF0IDUgaW5zdGFuY2VzIHdpdGggYSB0YWcgImZvbyIgYXJlIHJ1bm5pbmcKIyAoSGlnaGx5IHJlY29tbWVuZGVkISkKIwoKLSBlYzI6CiAgICBrZXlfbmFtZTogbXlrZXkKICAgIGluc3RhbmNlX3R5cGU6IGMxLm1lZGl1bQogICAgaW1hZ2U6IGFtaS00MDYwM0FEMQogICAgd2FpdDogeWVzCiAgICBncm91cDogd2Vic2VydmVyCiAgICBpbnN0YW5jZV90YWdzOgogICAgICAgIGZvbzogYmFyCiAgICBleGFjdF9jb3VudDogNQogICAgY291bnRfdGFnOiBmb28KICAgIHZwY19zdWJuZXRfaWQ6IHN1Ym5ldC0yOWU2MzI0NQogICAgYXNzaWduX3B1YmxpY19pcDogeWVzCgojCiMgRW5mb3JjZSB0aGF0IDUgcnVubmluZyBpbnN0YW5jZXMgbmFtZWQgImRhdGFiYXNlIiB3aXRoIGEgImRidHlwZSIgb2YgInBvc3RncmVzIgojCgotIGVjMjoKICAgIGtleV9uYW1lOiBteWtleQogICAgaW5zdGFuY2VfdHlwZTogYzEubWVkaXVtCiAgICBpbWFnZTogYW1pLTQwNjAzQUQxCiAgICB3YWl0OiB5ZXMKICAgIGdyb3VwOiB3ZWJzZXJ2ZXIKICAgIGluc3RhbmNlX3RhZ3M6CiAgICAgICAgTmFtZTogZGF0YWJhc2UKICAgICAgICBkYnR5cGU6IHBvc3RncmVzCiAgICBleGFjdF9jb3VudDogNQogICAgY291bnRfdGFnOgogICAgICAgIE5hbWU6IGRhdGFiYXNlCiAgICAgICAgZGJ0eXBlOiBwb3N0Z3JlcwogICAgdnBjX3N1Ym5ldF9pZDogc3VibmV0LTI5ZTYzMjQ1CiAgICBhc3NpZ25fcHVibGljX2lwOiB5ZXMKCiMKIyBjb3VudF90YWcgY29tcGxleCBhcmd1bWVudCBleGFtcGxlcwojCgogICAgIyBpbnN0YW5jZXMgd2l0aCB0YWcgZm9vCiAgICBjb3VudF90YWc6CiAgICAgICAgZm9vOgoKICAgICMgaW5zdGFuY2VzIHdpdGggdGFnIGZvbz1iYXIKICAgIGNvdW50X3RhZzoKICAgICAgICBmb286IGJhcgoKICAgICMgaW5zdGFuY2VzIHdpdGggdGFncyBmb289YmFyICYgYmF6CiAgICBjb3VudF90YWc6CiAgICAgICAgZm9vOiBiYXIKICAgICAgICBiYXo6CgogICAgIyBpbnN0YW5jZXMgd2l0aCB0YWdzIGZvbyAmIGJhciAmIGJhej1iYW5nCiAgICBjb3VudF90YWc6CiAgICAgICAgLSBmb28KICAgICAgICAtIGJhcgogICAgICAgIC0gYmF6OiBiYW5nCgonJycKCmltcG9ydCB0aW1lCmZyb20gYXN0IGltcG9ydCBsaXRlcmFsX2V2YWwKZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5zaXggaW1wb3J0IGdldF9mdW5jdGlvbl9jb2RlCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuYmFzaWMgaW1wb3J0IEFuc2libGVNb2R1bGUKZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5lYzIgaW1wb3J0IGdldF9hd3NfY29ubmVjdGlvbl9pbmZvLCBlYzJfYXJndW1lbnRfc3BlYywgZWMyX2Nvbm5lY3QsIGNvbm5lY3RfdG9fYXdzCmZyb20gZGlzdHV0aWxzLnZlcnNpb24gaW1wb3J0IExvb3NlVmVyc2lvbgoKdHJ5OgogICAgaW1wb3J0IGJvdG8uZWMyCiAgICBmcm9tIGJvdG8uZWMyLmJsb2NrZGV2aWNlbWFwcGluZyBpbXBvcnQgQmxvY2tEZXZpY2VUeXBlLCBCbG9ja0RldmljZU1hcHBpbmcKICAgIGZyb20gYm90by5leGNlcHRpb24gaW1wb3J0IEVDMlJlc3BvbnNlRXJyb3IKICAgIGZyb20gYm90by52cGMgaW1wb3J0IFZQQ0Nvbm5lY3Rpb24KICAgIEhBU19CT1RPID0gVHJ1ZQpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBIQVNfQk9UTyA9IEZhbHNlCgoKZGVmIGZpbmRfcnVubmluZ19pbnN0YW5jZXNfYnlfY291bnRfdGFnKG1vZHVsZSwgZWMyLCBjb3VudF90YWcsIHpvbmU9Tm9uZSk6CgogICAgIyBnZXQgcmVzZXJ2YXRpb25zIGZvciBpbnN0YW5jZXMgdGhhdCBtYXRjaCB0YWcocykgYW5kIGFyZSBydW5uaW5nCiAgICByZXNlcnZhdGlvbnMgPSBnZXRfcmVzZXJ2YXRpb25zKG1vZHVsZSwgZWMyLCB0YWdzPWNvdW50X3RhZywgc3RhdGU9InJ1bm5pbmciLCB6b25lPXpvbmUpCgogICAgaW5zdGFuY2VzID0gW10KICAgIGZvciByZXMgaW4gcmVzZXJ2YXRpb25zOgogICAgICAgIGlmIGhhc2F0dHIocmVzLCAnaW5zdGFuY2VzJyk6CiAgICAgICAgICAgIGZvciBpbnN0IGluIHJlcy5pbnN0YW5jZXM6CiAgICAgICAgICAgICAgICBpbnN0YW5jZXMuYXBwZW5kKGluc3QpCgogICAgcmV0dXJuIHJlc2VydmF0aW9ucywgaW5zdGFuY2VzCgoKZGVmIF9zZXRfbm9uZV90b19ibGFuayhkaWN0aW9uYXJ5KToKICAgIHJlc3VsdCA9IGRpY3Rpb25hcnkKICAgIGZvciBrIGluIHJlc3VsdDoKICAgICAgICBpZiBpc2luc3RhbmNlKHJlc3VsdFtrXSwgZGljdCk6CiAgICAgICAgICAgIHJlc3VsdFtrXSA9IF9zZXRfbm9uZV90b19ibGFuayhyZXN1bHRba10pCiAgICAgICAgZWxpZiBub3QgcmVzdWx0W2tdOgogICAgICAgICAgICByZXN1bHRba10gPSAiIgogICAgcmV0dXJuIHJlc3VsdAoKCmRlZiBnZXRfcmVzZXJ2YXRpb25zKG1vZHVsZSwgZWMyLCB0YWdzPU5vbmUsIHN0YXRlPU5vbmUsIHpvbmU9Tm9uZSk6CgogICAgIyBUT0RPOiBmaWx0ZXJzIGRvIG5vdCB3b3JrIHdpdGggdGFncyB0aGF0IGhhdmUgdW5kZXJzY29yZXMKICAgIGZpbHRlcnMgPSBkaWN0KCkKCiAgICBpZiB0YWdzIGlzIG5vdCBOb25lOgoKICAgICAgICBpZiBpc2luc3RhbmNlKHRhZ3MsIHN0cik6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHRhZ3MgPSBsaXRlcmFsX2V2YWwodGFncykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICAjIGlmIHN0cmluZywgd2Ugb25seSBjYXJlIHRoYXQgYSB0YWcgb2YgdGhhdCBuYW1lIGV4aXN0cwogICAgICAgIGlmIGlzaW5zdGFuY2UodGFncywgc3RyKToKICAgICAgICAgICAgZmlsdGVycy51cGRhdGUoeyJ0YWcta2V5IjogdGFnc30pCgogICAgICAgICMgaWYgbGlzdCwgYXBwZW5kIGVhY2ggaXRlbSB0byBmaWx0ZXJzCiAgICAgICAgaWYgaXNpbnN0YW5jZSh0YWdzLCBsaXN0KToKICAgICAgICAgICAgZm9yIHggaW4gdGFnczoKICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoeCwgZGljdCk6CiAgICAgICAgICAgICAgICAgICAgeCA9IF9zZXRfbm9uZV90b19ibGFuayh4KQogICAgICAgICAgICAgICAgICAgIGZpbHRlcnMudXBkYXRlKGRpY3QoKCJ0YWc6IiArIHRuLCB0dikgZm9yICh0biwgdHYpIGluIHguaXRlbXMoKSkpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGZpbHRlcnMudXBkYXRlKHsidGFnLWtleSI6IHh9KQoKICAgICAgICAjIGlmIGRpY3QsIGFkZCB0aGUga2V5IGFuZCB2YWx1ZSB0byB0aGUgZmlsdGVyCiAgICAgICAgaWYgaXNpbnN0YW5jZSh0YWdzLCBkaWN0KToKICAgICAgICAgICAgdGFncyA9IF9zZXRfbm9uZV90b19ibGFuayh0YWdzKQogICAgICAgICAgICBmaWx0ZXJzLnVwZGF0ZShkaWN0KCgidGFnOiIgKyB0biwgdHYpIGZvciAodG4sIHR2KSBpbiB0YWdzLml0ZW1zKCkpKQoKICAgIGlmIHN0YXRlOgogICAgICAgICMgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80Mzc1MTEvd2hhdC1hcmUtdGhlLXZhbGlkLWluc3RhbmNlc3RhdGVzLWZvci10aGUtYW1hem9uLWVjMi1hcGkKICAgICAgICBmaWx0ZXJzLnVwZGF0ZSh7J2luc3RhbmNlLXN0YXRlLW5hbWUnOiBzdGF0ZX0pCgogICAgaWYgem9uZToKICAgICAgICBmaWx0ZXJzLnVwZGF0ZSh7J2F2YWlsYWJpbGl0eS16b25lJzogem9uZX0pCgogICAgcmVzdWx0cyA9IGVjMi5nZXRfYWxsX2luc3RhbmNlcyhmaWx0ZXJzPWZpbHRlcnMpCgogICAgcmV0dXJuIHJlc3VsdHMKCgpkZWYgZ2V0X2luc3RhbmNlX2luZm8oaW5zdCk6CiAgICAiIiIKICAgIFJldHJpZXZlcyBpbnN0YW5jZSBpbmZvcm1hdGlvbiBmcm9tIGFuIGluc3RhbmNlCiAgICBJRCBhbmQgcmV0dXJucyBpdCBhcyBhIGRpY3Rpb25hcnkKICAgICIiIgogICAgaW5zdGFuY2VfaW5mbyA9IHsnaWQnOiBpbnN0LmlkLAogICAgICAgICAgICAgICAgICAgICAnYW1pX2xhdW5jaF9pbmRleCc6IGluc3QuYW1pX2xhdW5jaF9pbmRleCwKICAgICAgICAgICAgICAgICAgICAgJ3ByaXZhdGVfaXAnOiBpbnN0LnByaXZhdGVfaXBfYWRkcmVzcywKICAgICAgICAgICAgICAgICAgICAgJ3ByaXZhdGVfZG5zX25hbWUnOiBpbnN0LnByaXZhdGVfZG5zX25hbWUsCiAgICAgICAgICAgICAgICAgICAgICdwdWJsaWNfaXAnOiBpbnN0LmlwX2FkZHJlc3MsCiAgICAgICAgICAgICAgICAgICAgICdkbnNfbmFtZSc6IGluc3QuZG5zX25hbWUsCiAgICAgICAgICAgICAgICAgICAgICdwdWJsaWNfZG5zX25hbWUnOiBpbnN0LnB1YmxpY19kbnNfbmFtZSwKICAgICAgICAgICAgICAgICAgICAgJ3N0YXRlX2NvZGUnOiBpbnN0LnN0YXRlX2NvZGUsCiAgICAgICAgICAgICAgICAgICAgICdhcmNoaXRlY3R1cmUnOiBpbnN0LmFyY2hpdGVjdHVyZSwKICAgICAgICAgICAgICAgICAgICAgJ2ltYWdlX2lkJzogaW5zdC5pbWFnZV9pZCwKICAgICAgICAgICAgICAgICAgICAgJ2tleV9uYW1lJzogaW5zdC5rZXlfbmFtZSwKICAgICAgICAgICAgICAgICAgICAgJ3BsYWNlbWVudCc6IGluc3QucGxhY2VtZW50LAogICAgICAgICAgICAgICAgICAgICAncmVnaW9uJzogaW5zdC5wbGFjZW1lbnRbOi0xXSwKICAgICAgICAgICAgICAgICAgICAgJ2tlcm5lbCc6IGluc3Qua2VybmVsLAogICAgICAgICAgICAgICAgICAgICAncmFtZGlzayc6IGluc3QucmFtZGlzaywKICAgICAgICAgICAgICAgICAgICAgJ2xhdW5jaF90aW1lJzogaW5zdC5sYXVuY2hfdGltZSwKICAgICAgICAgICAgICAgICAgICAgJ2luc3RhbmNlX3R5cGUnOiBpbnN0Lmluc3RhbmNlX3R5cGUsCiAgICAgICAgICAgICAgICAgICAgICdyb290X2RldmljZV90eXBlJzogaW5zdC5yb290X2RldmljZV90eXBlLAogICAgICAgICAgICAgICAgICAgICAncm9vdF9kZXZpY2VfbmFtZSc6IGluc3Qucm9vdF9kZXZpY2VfbmFtZSwKICAgICAgICAgICAgICAgICAgICAgJ3N0YXRlJzogaW5zdC5zdGF0ZSwKICAgICAgICAgICAgICAgICAgICAgJ2h5cGVydmlzb3InOiBpbnN0Lmh5cGVydmlzb3IsCiAgICAgICAgICAgICAgICAgICAgICd0YWdzJzogaW5zdC50YWdzLAogICAgICAgICAgICAgICAgICAgICAnZ3JvdXBzJzogZGljdCgoZ3JvdXAuaWQsIGdyb3VwLm5hbWUpIGZvciBncm91cCBpbiBpbnN0Lmdyb3VwcyksCiAgICAgICAgICAgICAgICAgICAgIH0KICAgIHRyeToKICAgICAgICBpbnN0YW5jZV9pbmZvWyd2aXJ0dWFsaXphdGlvbl90eXBlJ10gPSBnZXRhdHRyKGluc3QsICd2aXJ0dWFsaXphdGlvbl90eXBlJykKICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoKICAgICAgICBpbnN0YW5jZV9pbmZvWyd2aXJ0dWFsaXphdGlvbl90eXBlJ10gPSBOb25lCgogICAgdHJ5OgogICAgICAgIGluc3RhbmNlX2luZm9bJ2Vic19vcHRpbWl6ZWQnXSA9IGdldGF0dHIoaW5zdCwgJ2Vic19vcHRpbWl6ZWQnKQogICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgIGluc3RhbmNlX2luZm9bJ2Vic19vcHRpbWl6ZWQnXSA9IEZhbHNlCgogICAgdHJ5OgogICAgICAgIGJkbV9kaWN0ID0ge30KICAgICAgICBiZG0gPSBnZXRhdHRyKGluc3QsICdibG9ja19kZXZpY2VfbWFwcGluZycpCiAgICAgICAgZm9yIGRldmljZV9uYW1lIGluIGJkbS5rZXlzKCk6CiAgICAgICAgICAgIGJkbV9kaWN0W2RldmljZV9uYW1lXSA9IHsKICAgICAgICAgICAgICAgICdzdGF0dXMnOiBiZG1bZGV2aWNlX25hbWVdLnN0YXR1cywKICAgICAgICAgICAgICAgICd2b2x1bWVfaWQnOiBiZG1bZGV2aWNlX25hbWVdLnZvbHVtZV9pZCwKICAgICAgICAgICAgICAgICdkZWxldGVfb25fdGVybWluYXRpb24nOiBiZG1bZGV2aWNlX25hbWVdLmRlbGV0ZV9vbl90ZXJtaW5hdGlvbgogICAgICAgICAgICB9CiAgICAgICAgaW5zdGFuY2VfaW5mb1snYmxvY2tfZGV2aWNlX21hcHBpbmcnXSA9IGJkbV9kaWN0CiAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgaW5zdGFuY2VfaW5mb1snYmxvY2tfZGV2aWNlX21hcHBpbmcnXSA9IEZhbHNlCgogICAgdHJ5OgogICAgICAgIGluc3RhbmNlX2luZm9bJ3RlbmFuY3knXSA9IGdldGF0dHIoaW5zdCwgJ3BsYWNlbWVudF90ZW5hbmN5JykKICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoKICAgICAgICBpbnN0YW5jZV9pbmZvWyd0ZW5hbmN5J10gPSAnZGVmYXVsdCcKCiAgICByZXR1cm4gaW5zdGFuY2VfaW5mbwoKCmRlZiBib3RvX3N1cHBvcnRzX2Fzc29jaWF0ZV9wdWJsaWNfaXBfYWRkcmVzcyhlYzIpOgogICAgIiIiCiAgICBDaGVjayBpZiBCb3RvIGxpYnJhcnkgaGFzIGFzc29jaWF0ZV9wdWJsaWNfaXBfYWRkcmVzcyBpbiB0aGUgTmV0d29ya0ludGVyZmFjZVNwZWNpZmljYXRpb24KICAgIGNsYXNzLiBBZGRlZCBpbiBCb3RvIDIuMTMuMAoKICAgIGVjMjogYXV0aGVudGljYXRlZCBlYzIgY29ubmVjdGlvbiBvYmplY3QKCiAgICBSZXR1cm5zOgogICAgICAgIFRydWUgaWYgQm90byBsaWJyYXJ5IGFjY2VwdHMgYXNzb2NpYXRlX3B1YmxpY19pcF9hZGRyZXNzIGFyZ3VtZW50LCBlbHNlIGZhbHNlCiAgICAiIiIKCiAgICB0cnk6CiAgICAgICAgbmV0d29ya19pbnRlcmZhY2UgPSBib3RvLmVjMi5uZXR3b3JraW50ZXJmYWNlLk5ldHdvcmtJbnRlcmZhY2VTcGVjaWZpY2F0aW9uKCkKICAgICAgICBnZXRhdHRyKG5ldHdvcmtfaW50ZXJmYWNlLCAiYXNzb2NpYXRlX3B1YmxpY19pcF9hZGRyZXNzIikKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgIHJldHVybiBGYWxzZQoKCmRlZiBib3RvX3N1cHBvcnRzX3Byb2ZpbGVfbmFtZV9hcmcoZWMyKToKICAgICIiIgogICAgQ2hlY2sgaWYgQm90byBsaWJyYXJ5IGhhcyBpbnN0YW5jZV9wcm9maWxlX25hbWUgYXJndW1lbnQuIGluc3RhbmNlX3Byb2ZpbGVfbmFtZSBoYXMgYmVlbiBhZGRlZCBpbiBCb3RvIDIuNS4wCgogICAgZWMyOiBhdXRoZW50aWNhdGVkIGVjMiBjb25uZWN0aW9uIG9iamVjdAoKICAgIFJldHVybnM6CiAgICAgICAgVHJ1ZSBpZiBCb3RvIGxpYnJhcnkgYWNjZXB0IGluc3RhbmNlX3Byb2ZpbGVfbmFtZSBhcmd1bWVudCwgZWxzZSBmYWxzZQogICAgIiIiCiAgICBydW5faW5zdGFuY2VzX21ldGhvZCA9IGdldGF0dHIoZWMyLCAncnVuX2luc3RhbmNlcycpCiAgICByZXR1cm4gJ2luc3RhbmNlX3Byb2ZpbGVfbmFtZScgaW4gZ2V0X2Z1bmN0aW9uX2NvZGUocnVuX2luc3RhbmNlc19tZXRob2QpLmNvX3Zhcm5hbWVzCgoKZGVmIGJvdG9fc3VwcG9ydHNfdm9sdW1lX2VuY3J5cHRpb24oKToKICAgICIiIgogICAgQ2hlY2sgaWYgQm90byBsaWJyYXJ5IHN1cHBvcnRzIGVuY3J5cHRpb24gb2YgRUJTIHZvbHVtZXMgKGFkZGVkIGluIDIuMjkuMCkKCiAgICBSZXR1cm5zOgogICAgICAgIFRydWUgaWYgYm90byBsaWJyYXJ5IGhhcyB0aGUgbmFtZWQgcGFyYW0gYXMgYW4gYXJndW1lbnQgb24gdGhlIHJlcXVlc3Rfc3BvdF9pbnN0YW5jZXMgbWV0aG9kLCBlbHNlIEZhbHNlCiAgICAiIiIKICAgIHJldHVybiBoYXNhdHRyKGJvdG8sICdWZXJzaW9uJykgYW5kIExvb3NlVmVyc2lvbihib3RvLlZlcnNpb24pID49IExvb3NlVmVyc2lvbignMi4yOS4wJykKCgpkZWYgY3JlYXRlX2Jsb2NrX2RldmljZShtb2R1bGUsIGVjMiwgdm9sdW1lKToKICAgICMgTm90IGF3YXJlIG9mIGEgd2F5IHRvIGRldGVybWluZSB0aGlzIHByb2dyYW1hdGljYWxseQogICAgIyBodHRwOi8vYXdzLmFtYXpvbi5jb20vYWJvdXQtYXdzL3doYXRzLW5ldy8yMDEzLzEwLzA5L2Vicy1wcm92aXNpb25lZC1pb3BzLW1heGltdW0taW9wcy1nYi1yYXRpby1pbmNyZWFzZWQtdG8tMzAtMS8KICAgIE1BWF9JT1BTX1RPX1NJWkVfUkFUSU8gPSAzMAoKICAgICMgZGV2aWNlX3R5cGUgaGFzIGJlZW4gdXNlZCBoaXN0b3JpY2FsbHkgdG8gcmVwcmVzZW50IHZvbHVtZV90eXBlLAogICAgIyBob3dldmVyIGVjMl92b2wgdXNlcyB2b2x1bWVfdHlwZSwgYXMgZG9lcyB0aGUgQmxvY2tEZXZpY2VUeXBlLCBzbwogICAgIyB3ZSBhZGQgaGFuZGxpbmcgZm9yIGVpdGhlci9vciBidXQgbm90IGJvdGgKICAgIGlmIGFsbChrZXkgaW4gdm9sdW1lIGZvciBrZXkgaW4gWydkZXZpY2VfdHlwZScsICd2b2x1bWVfdHlwZSddKToKICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0nZGV2aWNlX3R5cGUgaXMgYSBkZXByZWNhdGVkIG5hbWUgZm9yIHZvbHVtZV90eXBlLiBEbyBub3QgdXNlIGJvdGggZGV2aWNlX3R5cGUgYW5kIHZvbHVtZV90eXBlJykKCiAgICAjIGdldCB3aGljaGV2ZXIgb25lIGlzIHNldCwgb3IgTm9uZVR5cGUgaWYgbmVpdGhlciBhcmUgc2V0CiAgICB2b2x1bWVfdHlwZSA9IHZvbHVtZS5nZXQoJ2RldmljZV90eXBlJykgb3Igdm9sdW1lLmdldCgndm9sdW1lX3R5cGUnKQoKICAgIGlmICdzbmFwc2hvdCcgbm90IGluIHZvbHVtZSBhbmQgJ2VwaGVtZXJhbCcgbm90IGluIHZvbHVtZToKICAgICAgICBpZiAndm9sdW1lX3NpemUnIG5vdCBpbiB2b2x1bWU6CiAgICAgICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSdTaXplIG11c3QgYmUgc3BlY2lmaWVkIHdoZW4gY3JlYXRpbmcgYSBuZXcgdm9sdW1lIG9yIG1vZGlmeWluZyB0aGUgcm9vdCB2b2x1bWUnKQogICAgaWYgJ3NuYXBzaG90JyBpbiB2b2x1bWU6CiAgICAgICAgaWYgdm9sdW1lX3R5cGUgPT0gJ2lvMScgYW5kICdpb3BzJyBub3QgaW4gdm9sdW1lOgogICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0naW8xIHZvbHVtZXMgbXVzdCBoYXZlIGFuIGlvcHMgdmFsdWUgc2V0JykKICAgICAgICBpZiAnaW9wcycgaW4gdm9sdW1lOgogICAgICAgICAgICBzbmFwc2hvdCA9IGVjMi5nZXRfYWxsX3NuYXBzaG90cyhzbmFwc2hvdF9pZHM9W3ZvbHVtZVsnc25hcHNob3QnXV0pWzBdCiAgICAgICAgICAgIHNpemUgPSB2b2x1bWUuZ2V0KCd2b2x1bWVfc2l6ZScsIHNuYXBzaG90LnZvbHVtZV9zaXplKQogICAgICAgICAgICBpZiBpbnQodm9sdW1lWydpb3BzJ10pID4gTUFYX0lPUFNfVE9fU0laRV9SQVRJTyAqIHNpemU6CiAgICAgICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0nSU9QUyBtdXN0IGJlIGF0IG1vc3QgJWQgdGltZXMgZ3JlYXRlciB0aGFuIHNpemUnICUgTUFYX0lPUFNfVE9fU0laRV9SQVRJTykKICAgICAgICBpZiAnZW5jcnlwdGVkJyBpbiB2b2x1bWU6CiAgICAgICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSdZb3UgY2FuIG5vdCBzZXQgZW5jcnlwdGlvbiB3aGVuIGNyZWF0aW5nIGEgdm9sdW1lIGZyb20gYSBzbmFwc2hvdCcpCiAgICBpZiAnZXBoZW1lcmFsJyBpbiB2b2x1bWU6CiAgICAgICAgaWYgJ3NuYXBzaG90JyBpbiB2b2x1bWU6CiAgICAgICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSdDYW5ub3Qgc2V0IGJvdGggZXBoZW1lcmFsIGFuZCBzbmFwc2hvdCcpCiAgICBpZiBib3RvX3N1cHBvcnRzX3ZvbHVtZV9lbmNyeXB0aW9uKCk6CiAgICAgICAgcmV0dXJuIEJsb2NrRGV2aWNlVHlwZShzbmFwc2hvdF9pZD12b2x1bWUuZ2V0KCdzbmFwc2hvdCcpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXBoZW1lcmFsX25hbWU9dm9sdW1lLmdldCgnZXBoZW1lcmFsJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPXZvbHVtZS5nZXQoJ3ZvbHVtZV9zaXplJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWVfdHlwZT12b2x1bWVfdHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZV9vbl90ZXJtaW5hdGlvbj12b2x1bWUuZ2V0KCdkZWxldGVfb25fdGVybWluYXRpb24nLCBGYWxzZSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb3BzPXZvbHVtZS5nZXQoJ2lvcHMnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY3J5cHRlZD12b2x1bWUuZ2V0KCdlbmNyeXB0ZWQnLCBOb25lKSkKICAgIGVsc2U6CiAgICAgICAgcmV0dXJuIEJsb2NrRGV2aWNlVHlwZShzbmFwc2hvdF9pZD12b2x1bWUuZ2V0KCdzbmFwc2hvdCcpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXBoZW1lcmFsX25hbWU9dm9sdW1lLmdldCgnZXBoZW1lcmFsJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPXZvbHVtZS5nZXQoJ3ZvbHVtZV9zaXplJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWVfdHlwZT12b2x1bWVfdHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZV9vbl90ZXJtaW5hdGlvbj12b2x1bWUuZ2V0KCdkZWxldGVfb25fdGVybWluYXRpb24nLCBGYWxzZSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb3BzPXZvbHVtZS5nZXQoJ2lvcHMnKSkKCgpkZWYgYm90b19zdXBwb3J0c19wYXJhbV9pbl9zcG90X3JlcXVlc3QoZWMyLCBwYXJhbSk6CiAgICAiIiIKICAgIENoZWNrIGlmIEJvdG8gbGlicmFyeSBoYXMgYSA8cGFyYW0+IGluIGl0cyByZXF1ZXN0X3Nwb3RfaW5zdGFuY2VzKCkgbWV0aG9kLiBGb3IgZXhhbXBsZSwgdGhlIHBsYWNlbWVudF9ncm91cCBwYXJhbWV0ZXIgd2Fzbid0IGFkZGVkIHVudGlsIDIuMy4wLgoKICAgIGVjMjogYXV0aGVudGljYXRlZCBlYzIgY29ubmVjdGlvbiBvYmplY3QKCiAgICBSZXR1cm5zOgogICAgICAgIFRydWUgaWYgYm90byBsaWJyYXJ5IGhhcyB0aGUgbmFtZWQgcGFyYW0gYXMgYW4gYXJndW1lbnQgb24gdGhlIHJlcXVlc3Rfc3BvdF9pbnN0YW5jZXMgbWV0aG9kLCBlbHNlIEZhbHNlCiAgICAiIiIKICAgIG1ldGhvZCA9IGdldGF0dHIoZWMyLCAncmVxdWVzdF9zcG90X2luc3RhbmNlcycpCiAgICByZXR1cm4gcGFyYW0gaW4gZ2V0X2Z1bmN0aW9uX2NvZGUobWV0aG9kKS5jb192YXJuYW1lcwoKCmRlZiBhd2FpdF9zcG90X3JlcXVlc3RzKG1vZHVsZSwgZWMyLCBzcG90X3JlcXVlc3RzLCBjb3VudCk6CiAgICAiIiIKICAgIFdhaXQgZm9yIGEgZ3JvdXAgb2Ygc3BvdCByZXF1ZXN0cyB0byBiZSBmdWxmaWxsZWQsIG9yIGZhaWwuCgogICAgbW9kdWxlOiBBbnNpYmxlIG1vZHVsZSBvYmplY3QKICAgIGVjMjogYXV0aGVudGljYXRlZCBlYzIgY29ubmVjdGlvbiBvYmplY3QKICAgIHNwb3RfcmVxdWVzdHM6IGJvdG8uZWMyLnNwb3RpbnN0YW5jZXJlcXVlc3QuU3BvdEluc3RhbmNlUmVxdWVzdCBvYmplY3QgcmV0dXJuZWQgYnkgZWMyLnJlcXVlc3Rfc3BvdF9pbnN0YW5jZXMKICAgIGNvdW50OiBUb3RhbCBudW1iZXIgb2YgaW5zdGFuY2VzIHRvIGJlIGNyZWF0ZWQgYnkgdGhlIHNwb3QgcmVxdWVzdHMKCiAgICBSZXR1cm5zOgogICAgICAgIGxpc3Qgb2YgaW5zdGFuY2UgSUQncyBjcmVhdGVkIGJ5IHRoZSBzcG90IHJlcXVlc3QocykKICAgICIiIgogICAgc3BvdF93YWl0X3RpbWVvdXQgPSBpbnQobW9kdWxlLnBhcmFtcy5nZXQoJ3Nwb3Rfd2FpdF90aW1lb3V0JykpCiAgICB3YWl0X2NvbXBsZXRlID0gdGltZS50aW1lKCkgKyBzcG90X3dhaXRfdGltZW91dAoKICAgIHNwb3RfcmVxX2luc3RfaWRzID0gZGljdCgpCiAgICB3aGlsZSB0aW1lLnRpbWUoKSA8IHdhaXRfY29tcGxldGU6CiAgICAgICAgcmVxcyA9IGVjMi5nZXRfYWxsX3Nwb3RfaW5zdGFuY2VfcmVxdWVzdHMoKQogICAgICAgIGZvciBzaXJiIGluIHNwb3RfcmVxdWVzdHM6CiAgICAgICAgICAgIGlmIHNpcmIuaWQgaW4gc3BvdF9yZXFfaW5zdF9pZHM6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBmb3Igc2lyIGluIHJlcXM6CiAgICAgICAgICAgICAgICBpZiBzaXIuaWQgIT0gc2lyYi5pZDoKICAgICAgICAgICAgICAgICAgICBjb250aW51ZSAgIyB0aGlzIGlzIG5vdCBvdXIgc3BvdCBpbnN0YW5jZQogICAgICAgICAgICAgICAgaWYgc2lyLmluc3RhbmNlX2lkIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIHNwb3RfcmVxX2luc3RfaWRzW3NpcmIuaWRdID0gc2lyLmluc3RhbmNlX2lkCiAgICAgICAgICAgICAgICBlbGlmIHNpci5zdGF0ZSA9PSAnb3Blbic6CiAgICAgICAgICAgICAgICAgICAgY29udGludWUgICMgc3RpbGwgd2FpdGluZywgbm90aGluZyB0byBkbyBoZXJlCiAgICAgICAgICAgICAgICBlbGlmIHNpci5zdGF0ZSA9PSAnYWN0aXZlJzoKICAgICAgICAgICAgICAgICAgICBjb250aW51ZSAgIyBJbnN0YW5jZSBpcyBjcmVhdGVkIGFscmVhZHksIG5vdGhpbmcgdG8gZG8gaGVyZQogICAgICAgICAgICAgICAgZWxpZiBzaXIuc3RhdGUgPT0gJ2ZhaWxlZCc6CiAgICAgICAgICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9IlNwb3QgaW5zdGFuY2UgcmVxdWVzdCAlcyBmYWlsZWQgd2l0aCBzdGF0dXMgJXMgYW5kIGZhdWx0ICVzOiVzIiAlICgKICAgICAgICAgICAgICAgICAgICAgICAgc2lyLmlkLCBzaXIuc3RhdHVzLmNvZGUsIHNpci5mYXVsdC5jb2RlLCBzaXIuZmF1bHQubWVzc2FnZSkpCiAgICAgICAgICAgICAgICBlbGlmIHNpci5zdGF0ZSA9PSAnY2FuY2VsbGVkJzoKICAgICAgICAgICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0iU3BvdCBpbnN0YW5jZSByZXF1ZXN0ICVzIHdhcyBjYW5jZWxsZWQgYmVmb3JlIGl0IGNvdWxkIGJlIGZ1bGZpbGxlZC4iICUgc2lyLmlkKQogICAgICAgICAgICAgICAgZWxpZiBzaXIuc3RhdGUgPT0gJ2Nsb3NlZCc6CiAgICAgICAgICAgICAgICAgICAgIyBpbnN0YW5jZSBpcyB0ZXJtaW5hdGluZyBvciBtYXJrZWQgZm9yIHRlcm1pbmF0aW9uCiAgICAgICAgICAgICAgICAgICAgIyB0aGlzIG1heSBiZSBpbnRlbnRpb25hbCBvbiB0aGUgcGFydCBvZiB0aGUgb3BlcmF0b3IsCiAgICAgICAgICAgICAgICAgICAgIyBvciBpdCBtYXkgaGF2ZSBiZWVuIHRlcm1pbmF0ZWQgYnkgQVdTIGR1ZSB0byBjYXBhY2l0eSwKICAgICAgICAgICAgICAgICAgICAjIHByaWNlLCBvciBncm91cCBjb25zdHJhaW50cyBpbiB0aGlzIGNhc2UsIHdlJ2xsIGZhaWwKICAgICAgICAgICAgICAgICAgICAjIHRoZSBtb2R1bGUgaWYgdGhlIHJlYXNvbiBmb3IgdGhlIHN0YXRlIGlzIGFueXRoaW5nCiAgICAgICAgICAgICAgICAgICAgIyBvdGhlciB0aGFuIHRlcm1pbmF0aW9uIGJ5IHVzZXIuIENvZGVzIGFyZSBkb2N1bWVudGVkIGF0CiAgICAgICAgICAgICAgICAgICAgIyBodHRwOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BV1NFQzIvbGF0ZXN0L1VzZXJHdWlkZS9zcG90LWJpZC1zdGF0dXMuaHRtbAogICAgICAgICAgICAgICAgICAgIGlmIHNpci5zdGF0dXMuY29kZSA9PSAnaW5zdGFuY2UtdGVybWluYXRlZC1ieS11c2VyJzoKICAgICAgICAgICAgICAgICAgICAgICAgIyBkbyBub3RoaW5nLCBzaW5jZSB0aGUgdXNlciBsaWtlbHkgZGlkIHRoaXMgb24gcHVycG9zZQogICAgICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgc3BvdF9tc2cgPSAiU3BvdCBpbnN0YW5jZSByZXF1ZXN0ICVzIHdhcyBjbG9zZWQgYnkgQVdTIHdpdGggdGhlIHN0YXR1cyAlcyBhbmQgZmF1bHQgJXM6JXMiCiAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPXNwb3RfbXNnICUgKHNpci5pZCwgc2lyLnN0YXR1cy5jb2RlLCBzaXIuZmF1bHQuY29kZSwgc2lyLmZhdWx0Lm1lc3NhZ2UpKQoKICAgICAgICBpZiBsZW4oc3BvdF9yZXFfaW5zdF9pZHMpIDwgY291bnQ6CiAgICAgICAgICAgIHRpbWUuc2xlZXAoNSkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gbGlzdChzcG90X3JlcV9pbnN0X2lkcy52YWx1ZXMoKSkKICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSJ3YWl0IGZvciBzcG90IHJlcXVlc3RzIHRpbWVvdXQgb24gJXMiICUgdGltZS5hc2N0aW1lKCkpCgoKZGVmIGVuZm9yY2VfY291bnQobW9kdWxlLCBlYzIsIHZwYyk6CgogICAgZXhhY3RfY291bnQgPSBtb2R1bGUucGFyYW1zLmdldCgnZXhhY3RfY291bnQnKQogICAgY291bnRfdGFnID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2NvdW50X3RhZycpCiAgICB6b25lID0gbW9kdWxlLnBhcmFtcy5nZXQoJ3pvbmUnKQoKICAgICMgZmFpbCBoZXJlIGlmIHRoZSBleGFjdCBjb3VudCB3YXMgc3BlY2lmaWVkIHdpdGhvdXQgZmlsdGVyaW5nCiAgICAjIG9uIGEgdGFnLCBhcyB0aGlzIG1heSBsZWFkIHRvIGEgdW5kZXNpcmVkIHJlbW92YWwgb2YgaW5zdGFuY2VzCiAgICBpZiBleGFjdF9jb3VudCBhbmQgY291bnRfdGFnIGlzIE5vbmU6CiAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9InlvdSBtdXN0IHVzZSB0aGUgJ2NvdW50X3RhZycgb3B0aW9uIHdpdGggZXhhY3RfY291bnQiKQoKICAgIHJlc2VydmF0aW9ucywgaW5zdGFuY2VzID0gZmluZF9ydW5uaW5nX2luc3RhbmNlc19ieV9jb3VudF90YWcobW9kdWxlLCBlYzIsIGNvdW50X3RhZywgem9uZSkKCiAgICBjaGFuZ2VkID0gTm9uZQogICAgY2hlY2ttb2RlID0gRmFsc2UKICAgIGluc3RhbmNlX2RpY3RfYXJyYXkgPSBbXQogICAgY2hhbmdlZF9pbnN0YW5jZV9pZHMgPSBOb25lCgogICAgaWYgbGVuKGluc3RhbmNlcykgPT0gZXhhY3RfY291bnQ6CiAgICAgICAgY2hhbmdlZCA9IEZhbHNlCiAgICBlbGlmIGxlbihpbnN0YW5jZXMpIDwgZXhhY3RfY291bnQ6CiAgICAgICAgY2hhbmdlZCA9IFRydWUKICAgICAgICB0b19jcmVhdGUgPSBleGFjdF9jb3VudCAtIGxlbihpbnN0YW5jZXMpCiAgICAgICAgaWYgbm90IGNoZWNrbW9kZToKICAgICAgICAgICAgKGluc3RhbmNlX2RpY3RfYXJyYXksIGNoYW5nZWRfaW5zdGFuY2VfaWRzLCBjaGFuZ2VkKSBcCiAgICAgICAgICAgICAgICA9IGNyZWF0ZV9pbnN0YW5jZXMobW9kdWxlLCBlYzIsIHZwYywgb3ZlcnJpZGVfY291bnQ9dG9fY3JlYXRlKQoKICAgICAgICAgICAgZm9yIGluc3QgaW4gaW5zdGFuY2VfZGljdF9hcnJheToKICAgICAgICAgICAgICAgIGluc3RhbmNlcy5hcHBlbmQoaW5zdCkKICAgIGVsaWYgbGVuKGluc3RhbmNlcykgPiBleGFjdF9jb3VudDoKICAgICAgICBjaGFuZ2VkID0gVHJ1ZQogICAgICAgIHRvX3JlbW92ZSA9IGxlbihpbnN0YW5jZXMpIC0gZXhhY3RfY291bnQKICAgICAgICBpZiBub3QgY2hlY2ttb2RlOgogICAgICAgICAgICBhbGxfaW5zdGFuY2VfaWRzID0gc29ydGVkKFt4LmlkIGZvciB4IGluIGluc3RhbmNlc10pCiAgICAgICAgICAgIHJlbW92ZV9pZHMgPSBhbGxfaW5zdGFuY2VfaWRzWzA6dG9fcmVtb3ZlXQoKICAgICAgICAgICAgaW5zdGFuY2VzID0gW3ggZm9yIHggaW4gaW5zdGFuY2VzIGlmIHguaWQgbm90IGluIHJlbW92ZV9pZHNdCgogICAgICAgICAgICAoY2hhbmdlZCwgaW5zdGFuY2VfZGljdF9hcnJheSwgY2hhbmdlZF9pbnN0YW5jZV9pZHMpIFwKICAgICAgICAgICAgICAgID0gdGVybWluYXRlX2luc3RhbmNlcyhtb2R1bGUsIGVjMiwgcmVtb3ZlX2lkcykKICAgICAgICAgICAgdGVybWluYXRlZF9saXN0ID0gW10KICAgICAgICAgICAgZm9yIGluc3QgaW4gaW5zdGFuY2VfZGljdF9hcnJheToKICAgICAgICAgICAgICAgIGluc3RbJ3N0YXRlJ10gPSAidGVybWluYXRlZCIKICAgICAgICAgICAgICAgIHRlcm1pbmF0ZWRfbGlzdC5hcHBlbmQoaW5zdCkKICAgICAgICAgICAgaW5zdGFuY2VfZGljdF9hcnJheSA9IHRlcm1pbmF0ZWRfbGlzdAoKICAgICMgZW5zdXJlIGFsbCBpbnN0YW5jZXMgYXJlIGRpY3Rpb25hcmllcwogICAgYWxsX2luc3RhbmNlcyA9IFtdCiAgICBmb3IgaW5zdCBpbiBpbnN0YW5jZXM6CiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoaW5zdCwgZGljdCk6CiAgICAgICAgICAgIGluc3QgPSBnZXRfaW5zdGFuY2VfaW5mbyhpbnN0KQogICAgICAgIGFsbF9pbnN0YW5jZXMuYXBwZW5kKGluc3QpCgogICAgcmV0dXJuIChhbGxfaW5zdGFuY2VzLCBpbnN0YW5jZV9kaWN0X2FycmF5LCBjaGFuZ2VkX2luc3RhbmNlX2lkcywgY2hhbmdlZCkKCgpkZWYgY3JlYXRlX2luc3RhbmNlcyhtb2R1bGUsIGVjMiwgdnBjLCBvdmVycmlkZV9jb3VudD1Ob25lKToKICAgICIiIgogICAgQ3JlYXRlcyBuZXcgaW5zdGFuY2VzCgogICAgbW9kdWxlIDogQW5zaWJsZU1vZHVsZSBvYmplY3QKICAgIGVjMjogYXV0aGVudGljYXRlZCBlYzIgY29ubmVjdGlvbiBvYmplY3QKCiAgICBSZXR1cm5zOgogICAgICAgIEEgbGlzdCBvZiBkaWN0aW9uYXJpZXMgd2l0aCBpbnN0YW5jZSBpbmZvcm1hdGlvbgogICAgICAgIGFib3V0IHRoZSBpbnN0YW5jZXMgdGhhdCB3ZXJlIGxhdW5jaGVkCiAgICAiIiIKCiAgICBrZXlfbmFtZSA9IG1vZHVsZS5wYXJhbXMuZ2V0KCdrZXlfbmFtZScpCiAgICBpZCA9IG1vZHVsZS5wYXJhbXMuZ2V0KCdpZCcpCiAgICBncm91cF9uYW1lID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2dyb3VwJykKICAgIGdyb3VwX2lkID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2dyb3VwX2lkJykKICAgIHpvbmUgPSBtb2R1bGUucGFyYW1zLmdldCgnem9uZScpCiAgICBpbnN0YW5jZV90eXBlID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2luc3RhbmNlX3R5cGUnKQogICAgdGVuYW5jeSA9IG1vZHVsZS5wYXJhbXMuZ2V0KCd0ZW5hbmN5JykKICAgIHNwb3RfcHJpY2UgPSBtb2R1bGUucGFyYW1zLmdldCgnc3BvdF9wcmljZScpCiAgICBzcG90X3R5cGUgPSBtb2R1bGUucGFyYW1zLmdldCgnc3BvdF90eXBlJykKICAgIGltYWdlID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2ltYWdlJykKICAgIGlmIG92ZXJyaWRlX2NvdW50OgogICAgICAgIGNvdW50ID0gb3ZlcnJpZGVfY291bnQKICAgIGVsc2U6CiAgICAgICAgY291bnQgPSBtb2R1bGUucGFyYW1zLmdldCgnY291bnQnKQogICAgbW9uaXRvcmluZyA9IG1vZHVsZS5wYXJhbXMuZ2V0KCdtb25pdG9yaW5nJykKICAgIGtlcm5lbCA9IG1vZHVsZS5wYXJhbXMuZ2V0KCdrZXJuZWwnKQogICAgcmFtZGlzayA9IG1vZHVsZS5wYXJhbXMuZ2V0KCdyYW1kaXNrJykKICAgIHdhaXQgPSBtb2R1bGUucGFyYW1zLmdldCgnd2FpdCcpCiAgICB3YWl0X3RpbWVvdXQgPSBpbnQobW9kdWxlLnBhcmFtcy5nZXQoJ3dhaXRfdGltZW91dCcpKQogICAgc3BvdF93YWl0X3RpbWVvdXQgPSBpbnQobW9kdWxlLnBhcmFtcy5nZXQoJ3Nwb3Rfd2FpdF90aW1lb3V0JykpCiAgICBwbGFjZW1lbnRfZ3JvdXAgPSBtb2R1bGUucGFyYW1zLmdldCgncGxhY2VtZW50X2dyb3VwJykKICAgIHVzZXJfZGF0YSA9IG1vZHVsZS5wYXJhbXMuZ2V0KCd1c2VyX2RhdGEnKQogICAgaW5zdGFuY2VfdGFncyA9IG1vZHVsZS5wYXJhbXMuZ2V0KCdpbnN0YW5jZV90YWdzJykKICAgIHZwY19zdWJuZXRfaWQgPSBtb2R1bGUucGFyYW1zLmdldCgndnBjX3N1Ym5ldF9pZCcpCiAgICBhc3NpZ25fcHVibGljX2lwID0gbW9kdWxlLmJvb2xlYW4obW9kdWxlLnBhcmFtcy5nZXQoJ2Fzc2lnbl9wdWJsaWNfaXAnKSkKICAgIHByaXZhdGVfaXAgPSBtb2R1bGUucGFyYW1zLmdldCgncHJpdmF0ZV9pcCcpCiAgICBpbnN0YW5jZV9wcm9maWxlX25hbWUgPSBtb2R1bGUucGFyYW1zLmdldCgnaW5zdGFuY2VfcHJvZmlsZV9uYW1lJykKICAgIHZvbHVtZXMgPSBtb2R1bGUucGFyYW1zLmdldCgndm9sdW1lcycpCiAgICBlYnNfb3B0aW1pemVkID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2Vic19vcHRpbWl6ZWQnKQogICAgZXhhY3RfY291bnQgPSBtb2R1bGUucGFyYW1zLmdldCgnZXhhY3RfY291bnQnKQogICAgY291bnRfdGFnID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2NvdW50X3RhZycpCiAgICBzb3VyY2VfZGVzdF9jaGVjayA9IG1vZHVsZS5ib29sZWFuKG1vZHVsZS5wYXJhbXMuZ2V0KCdzb3VyY2VfZGVzdF9jaGVjaycpKQogICAgdGVybWluYXRpb25fcHJvdGVjdGlvbiA9IG1vZHVsZS5ib29sZWFuKG1vZHVsZS5wYXJhbXMuZ2V0KCd0ZXJtaW5hdGlvbl9wcm90ZWN0aW9uJykpCiAgICBuZXR3b3JrX2ludGVyZmFjZXMgPSBtb2R1bGUucGFyYW1zLmdldCgnbmV0d29ya19pbnRlcmZhY2VzJykKICAgIHNwb3RfbGF1bmNoX2dyb3VwID0gbW9kdWxlLnBhcmFtcy5nZXQoJ3Nwb3RfbGF1bmNoX2dyb3VwJykKICAgIGluc3RhbmNlX2luaXRpYXRlZF9zaHV0ZG93bl9iZWhhdmlvciA9IG1vZHVsZS5wYXJhbXMuZ2V0KCdpbnN0YW5jZV9pbml0aWF0ZWRfc2h1dGRvd25fYmVoYXZpb3InKQoKICAgIHZwY19pZCA9IE5vbmUKICAgIGlmIHZwY19zdWJuZXRfaWQ6CiAgICAgICAgaWYgbm90IHZwYzoKICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9InJlZ2lvbiBtdXN0IGJlIHNwZWNpZmllZCIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgdnBjX2lkID0gdnBjLmdldF9hbGxfc3VibmV0cyhzdWJuZXRfaWRzPVt2cGNfc3VibmV0X2lkXSlbMF0udnBjX2lkCiAgICBlbHNlOgogICAgICAgIHZwY19pZCA9IE5vbmUKCiAgICB0cnk6CiAgICAgICAgIyBIZXJlIHdlIHRyeSB0byBsb29rdXAgdGhlIGdyb3VwIGlkIGZyb20gdGhlIHNlY3VyaXR5IGdyb3VwIG5hbWUgLSBpZiBncm91cCBpcyBzZXQuCiAgICAgICAgaWYgZ3JvdXBfbmFtZToKICAgICAgICAgICAgaWYgdnBjX2lkOgogICAgICAgICAgICAgICAgZ3JwX2RldGFpbHMgPSBlYzIuZ2V0X2FsbF9zZWN1cml0eV9ncm91cHMoZmlsdGVycz17J3ZwY19pZCc6IHZwY19pZH0pCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBncnBfZGV0YWlscyA9IGVjMi5nZXRfYWxsX3NlY3VyaXR5X2dyb3VwcygpCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoZ3JvdXBfbmFtZSwgYmFzZXN0cmluZyk6CiAgICAgICAgICAgICAgICBncm91cF9uYW1lID0gW2dyb3VwX25hbWVdCiAgICAgICAgICAgIHVubWF0Y2hlZCA9IHNldChncm91cF9uYW1lKS5kaWZmZXJlbmNlKHN0cihncnAubmFtZSkgZm9yIGdycCBpbiBncnBfZGV0YWlscykKICAgICAgICAgICAgaWYgbGVuKHVubWF0Y2hlZCkgPiAwOgogICAgICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9IlRoZSBmb2xsb3dpbmcgZ3JvdXAgbmFtZXMgYXJlIG5vdCB2YWxpZDogJXMiICUgJywgJy5qb2luKHVubWF0Y2hlZCkpCiAgICAgICAgICAgIGdyb3VwX2lkID0gW3N0cihncnAuaWQpIGZvciBncnAgaW4gZ3JwX2RldGFpbHMgaWYgc3RyKGdycC5uYW1lKSBpbiBncm91cF9uYW1lXQogICAgICAgICMgTm93IHdlIHRyeSB0byBsb29rdXAgdGhlIGdyb3VwIGlkIHRlc3RpbmcgaWYgZ3JvdXAgZXhpc3RzLgogICAgICAgIGVsaWYgZ3JvdXBfaWQ6CiAgICAgICAgICAgICMgd3JhcCB0aGUgZ3JvdXBfaWQgaW4gYSBsaXN0IGlmIGl0J3Mgbm90IG9uZSBhbHJlYWR5CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoZ3JvdXBfaWQsIGJhc2VzdHJpbmcpOgogICAgICAgICAgICAgICAgZ3JvdXBfaWQgPSBbZ3JvdXBfaWRdCiAgICAgICAgICAgIGdycF9kZXRhaWxzID0gZWMyLmdldF9hbGxfc2VjdXJpdHlfZ3JvdXBzKGdyb3VwX2lkcz1ncm91cF9pZCkKICAgICAgICAgICAgZ3JvdXBfbmFtZSA9IFtncnBfaXRlbS5uYW1lIGZvciBncnBfaXRlbSBpbiBncnBfZGV0YWlsc10KICAgIGV4Y2VwdCBib3RvLmV4Y2VwdGlvbi5Ob0F1dGhIYW5kbGVyRm91bmQgYXMgZToKICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz1zdHIoZSkpCgogICAgIyBMb29rdXAgYW55IGluc3RhbmNlcyB0aGF0IG11Y2ggb3VyIHJ1biBpZC4KCiAgICBydW5uaW5nX2luc3RhbmNlcyA9IFtdCiAgICBjb3VudF9yZW1haW5pbmcgPSBpbnQoY291bnQpCgogICAgaWYgaWQgaXMgbm90IE5vbmU6CiAgICAgICAgZmlsdGVyX2RpY3QgPSB7J2NsaWVudC10b2tlbic6IGlkLCAnaW5zdGFuY2Utc3RhdGUtbmFtZSc6ICdydW5uaW5nJ30KICAgICAgICBwcmV2aW91c19yZXNlcnZhdGlvbnMgPSBlYzIuZ2V0X2FsbF9pbnN0YW5jZXMoTm9uZSwgZmlsdGVyX2RpY3QpCiAgICAgICAgZm9yIHJlcyBpbiBwcmV2aW91c19yZXNlcnZhdGlvbnM6CiAgICAgICAgICAgIGZvciBwcmV2X2luc3RhbmNlIGluIHJlcy5pbnN0YW5jZXM6CiAgICAgICAgICAgICAgICBydW5uaW5nX2luc3RhbmNlcy5hcHBlbmQocHJldl9pbnN0YW5jZSkKICAgICAgICBjb3VudF9yZW1haW5pbmcgPSBjb3VudF9yZW1haW5pbmcgLSBsZW4ocnVubmluZ19pbnN0YW5jZXMpCgogICAgIyBCb3RoIG1pbl9jb3VudCBhbmQgbWF4X2NvdW50IGVxdWFsIGNvdW50IHBhcmFtZXRlci4gVGhpcyBtZWFucyB0aGUgbGF1bmNoIHJlcXVlc3QgaXMgZXhwbGljaXQgKHdlIHdhbnQgY291bnQsIG9yIGZhaWwpIGluIGhvdyBtYW55IGluc3RhbmNlcyB3ZSB3YW50LgoKICAgIGlmIGNvdW50X3JlbWFpbmluZyA9PSAwOgogICAgICAgIGNoYW5nZWQgPSBGYWxzZQogICAgZWxzZToKICAgICAgICBjaGFuZ2VkID0gVHJ1ZQogICAgICAgIHRyeToKICAgICAgICAgICAgcGFyYW1zID0geydpbWFnZV9pZCc6IGltYWdlLAogICAgICAgICAgICAgICAgICAgICAgJ2tleV9uYW1lJzoga2V5X25hbWUsCiAgICAgICAgICAgICAgICAgICAgICAnbW9uaXRvcmluZ19lbmFibGVkJzogbW9uaXRvcmluZywKICAgICAgICAgICAgICAgICAgICAgICdwbGFjZW1lbnQnOiB6b25lLAogICAgICAgICAgICAgICAgICAgICAgJ2luc3RhbmNlX3R5cGUnOiBpbnN0YW5jZV90eXBlLAogICAgICAgICAgICAgICAgICAgICAgJ2tlcm5lbF9pZCc6IGtlcm5lbCwKICAgICAgICAgICAgICAgICAgICAgICdyYW1kaXNrX2lkJzogcmFtZGlzaywKICAgICAgICAgICAgICAgICAgICAgICd1c2VyX2RhdGEnOiB1c2VyX2RhdGF9CgogICAgICAgICAgICBpZiBlYnNfb3B0aW1pemVkOgogICAgICAgICAgICAgICAgcGFyYW1zWydlYnNfb3B0aW1pemVkJ10gPSBlYnNfb3B0aW1pemVkCgogICAgICAgICAgICAjICd0ZW5hbmN5JyBhbHdheXMgaGFzIGEgZGVmYXVsdCB2YWx1ZSwgYnV0IGl0IGlzIG5vdCBhIHZhbGlkIHBhcmFtZXRlciBmb3Igc3BvdCBpbnN0YW5jZSByZXF1ZXN0CiAgICAgICAgICAgIGlmIG5vdCBzcG90X3ByaWNlOgogICAgICAgICAgICAgICAgcGFyYW1zWyd0ZW5hbmN5J10gPSB0ZW5hbmN5CgogICAgICAgICAgICBpZiBib3RvX3N1cHBvcnRzX3Byb2ZpbGVfbmFtZV9hcmcoZWMyKToKICAgICAgICAgICAgICAgIHBhcmFtc1snaW5zdGFuY2VfcHJvZmlsZV9uYW1lJ10gPSBpbnN0YW5jZV9wcm9maWxlX25hbWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIGluc3RhbmNlX3Byb2ZpbGVfbmFtZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKAogICAgICAgICAgICAgICAgICAgICAgICBtc2c9Imluc3RhbmNlX3Byb2ZpbGVfbmFtZSBwYXJhbWV0ZXIgcmVxdWlyZXMgQm90byB2ZXJzaW9uIDIuNS4wIG9yIGhpZ2hlciIpCgogICAgICAgICAgICBpZiBhc3NpZ25fcHVibGljX2lwOgogICAgICAgICAgICAgICAgaWYgbm90IGJvdG9fc3VwcG9ydHNfYXNzb2NpYXRlX3B1YmxpY19pcF9hZGRyZXNzKGVjMik6CiAgICAgICAgICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbigKICAgICAgICAgICAgICAgICAgICAgICAgbXNnPSJhc3NpZ25fcHVibGljX2lwIHBhcmFtZXRlciByZXF1aXJlcyBCb3RvIHZlcnNpb24gMi4xMy4wIG9yIGhpZ2hlci4iKQogICAgICAgICAgICAgICAgZWxpZiBub3QgdnBjX3N1Ym5ldF9pZDoKICAgICAgICAgICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKAogICAgICAgICAgICAgICAgICAgICAgICBtc2c9ImFzc2lnbl9wdWJsaWNfaXAgb25seSBhdmFpbGFibGUgd2l0aCB2cGNfc3VibmV0X2lkIikKCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGlmIHByaXZhdGVfaXA6CiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyZmFjZSA9IGJvdG8uZWMyLm5ldHdvcmtpbnRlcmZhY2UuTmV0d29ya0ludGVyZmFjZVNwZWNpZmljYXRpb24oCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJuZXRfaWQ9dnBjX3N1Ym5ldF9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaXZhdGVfaXBfYWRkcmVzcz1wcml2YXRlX2lwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBzPWdyb3VwX2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRlX3B1YmxpY19pcF9hZGRyZXNzPWFzc2lnbl9wdWJsaWNfaXApCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJmYWNlID0gYm90by5lYzIubmV0d29ya2ludGVyZmFjZS5OZXR3b3JrSW50ZXJmYWNlU3BlY2lmaWNhdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym5ldF9pZD12cGNfc3VibmV0X2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBzPWdyb3VwX2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRlX3B1YmxpY19pcF9hZGRyZXNzPWFzc2lnbl9wdWJsaWNfaXApCiAgICAgICAgICAgICAgICAgICAgaW50ZXJmYWNlcyA9IGJvdG8uZWMyLm5ldHdvcmtpbnRlcmZhY2UuTmV0d29ya0ludGVyZmFjZUNvbGxlY3Rpb24oaW50ZXJmYWNlKQogICAgICAgICAgICAgICAgICAgIHBhcmFtc1snbmV0d29ya19pbnRlcmZhY2VzJ10gPSBpbnRlcmZhY2VzCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBpZiBuZXR3b3JrX2ludGVyZmFjZXM6CiAgICAgICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShuZXR3b3JrX2ludGVyZmFjZXMsIGJhc2VzdHJpbmcpOgogICAgICAgICAgICAgICAgICAgICAgICBuZXR3b3JrX2ludGVyZmFjZXMgPSBbbmV0d29ya19pbnRlcmZhY2VzXQogICAgICAgICAgICAgICAgICAgIGludGVyZmFjZXMgPSBbXQogICAgICAgICAgICAgICAgICAgIGZvciBpLCBuZXR3b3JrX2ludGVyZmFjZV9pZCBpbiBlbnVtZXJhdGUobmV0d29ya19pbnRlcmZhY2VzKToKICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJmYWNlID0gYm90by5lYzIubmV0d29ya2ludGVyZmFjZS5OZXR3b3JrSW50ZXJmYWNlU3BlY2lmaWNhdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldHdvcmtfaW50ZXJmYWNlX2lkPW5ldHdvcmtfaW50ZXJmYWNlX2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlX2luZGV4PWkpCiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyZmFjZXMuYXBwZW5kKGludGVyZmFjZSkKICAgICAgICAgICAgICAgICAgICBwYXJhbXNbJ25ldHdvcmtfaW50ZXJmYWNlcyddID0gXAogICAgICAgICAgICAgICAgICAgICAgICBib3RvLmVjMi5uZXR3b3JraW50ZXJmYWNlLk5ldHdvcmtJbnRlcmZhY2VDb2xsZWN0aW9uKCppbnRlcmZhY2VzKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwYXJhbXNbJ3N1Ym5ldF9pZCddID0gdnBjX3N1Ym5ldF9pZAogICAgICAgICAgICAgICAgICAgIGlmIHZwY19zdWJuZXRfaWQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1snc2VjdXJpdHlfZ3JvdXBfaWRzJ10gPSBncm91cF9pZAogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1snc2VjdXJpdHlfZ3JvdXBzJ10gPSBncm91cF9uYW1lCgogICAgICAgICAgICBpZiB2b2x1bWVzOgogICAgICAgICAgICAgICAgYmRtID0gQmxvY2tEZXZpY2VNYXBwaW5nKCkKICAgICAgICAgICAgICAgIGZvciB2b2x1bWUgaW4gdm9sdW1lczoKICAgICAgICAgICAgICAgICAgICBpZiAnZGV2aWNlX25hbWUnIG5vdCBpbiB2b2x1bWU6CiAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSdEZXZpY2UgbmFtZSBtdXN0IGJlIHNldCBmb3Igdm9sdW1lJykKICAgICAgICAgICAgICAgICAgICAjIE1pbmltdW0gdm9sdW1lIHNpemUgaXMgMUdCLiBXZSdsbCB1c2Ugdm9sdW1lIHNpemUgZXhwbGljaXRseSBzZXQgdG8gMAogICAgICAgICAgICAgICAgICAgICMgdG8gYmUgYSBzaWduYWwgbm90IHRvIGNyZWF0ZSB0aGlzIHZvbHVtZQogICAgICAgICAgICAgICAgICAgIGlmICd2b2x1bWVfc2l6ZScgbm90IGluIHZvbHVtZSBvciBpbnQodm9sdW1lWyd2b2x1bWVfc2l6ZSddKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgICAgIGJkbVt2b2x1bWVbJ2RldmljZV9uYW1lJ11dID0gY3JlYXRlX2Jsb2NrX2RldmljZShtb2R1bGUsIGVjMiwgdm9sdW1lKQoKICAgICAgICAgICAgICAgIHBhcmFtc1snYmxvY2tfZGV2aWNlX21hcCddID0gYmRtCgogICAgICAgICAgICAjIGNoZWNrIHRvIHNlZSBpZiB3ZSdyZSB1c2luZyBzcG90IHByaWNpbmcgZmlyc3QgYmVmb3JlIHN0YXJ0aW5nIGluc3RhbmNlcwogICAgICAgICAgICBpZiBub3Qgc3BvdF9wcmljZToKICAgICAgICAgICAgICAgIGlmIGFzc2lnbl9wdWJsaWNfaXAgYW5kIHByaXZhdGVfaXA6CiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnVwZGF0ZSgKICAgICAgICAgICAgICAgICAgICAgICAgZGljdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbl9jb3VudD1jb3VudF9yZW1haW5pbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhfY291bnQ9Y291bnRfcmVtYWluaW5nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50X3Rva2VuPWlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50X2dyb3VwPXBsYWNlbWVudF9ncm91cCwKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnVwZGF0ZSgKICAgICAgICAgICAgICAgICAgICAgICAgZGljdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbl9jb3VudD1jb3VudF9yZW1haW5pbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhfY291bnQ9Y291bnRfcmVtYWluaW5nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50X3Rva2VuPWlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50X2dyb3VwPXBsYWNlbWVudF9ncm91cCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaXZhdGVfaXBfYWRkcmVzcz1wcml2YXRlX2lwLAogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICMgRm9yIG9yZGluYXJ5IChub3Qgc3BvdCkgaW5zdGFuY2VzLCB3ZSBjYW4gc2VsZWN0ICdzdG9wJwogICAgICAgICAgICAgICAgIyAodGhlIGRlZmF1bHQpIG9yICd0ZXJtaW5hdGUnIGhlcmUuCiAgICAgICAgICAgICAgICBwYXJhbXNbJ2luc3RhbmNlX2luaXRpYXRlZF9zaHV0ZG93bl9iZWhhdmlvciddID0gaW5zdGFuY2VfaW5pdGlhdGVkX3NodXRkb3duX2JlaGF2aW9yIG9yICdzdG9wJwoKICAgICAgICAgICAgICAgIHJlcyA9IGVjMi5ydW5faW5zdGFuY2VzKCoqcGFyYW1zKQogICAgICAgICAgICAgICAgaW5zdGlkcyA9IFtpLmlkIGZvciBpIGluIHJlcy5pbnN0YW5jZXNdCiAgICAgICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgZWMyLmdldF9hbGxfaW5zdGFuY2VzKGluc3RpZHMpCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IGJvdG8uZXhjZXB0aW9uLkVDMlJlc3BvbnNlRXJyb3IgYXMgZToKICAgICAgICAgICAgICAgICAgICAgICAgaWYgIjxDb2RlPkludmFsaWRJbnN0YW5jZUlELk5vdEZvdW5kPC9Db2RlPiIgaW4gc3RyKGUpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB0aGVyZSdzIGEgcmFjZSBiZXR3ZWVuIHN0YXJ0IGFuZCBnZXQgYW4gaW5zdGFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz1zdHIoZSkpCgogICAgICAgICAgICAgICAgIyBUaGUgaW5zdGFuY2VzIHJldHVybmVkIHRocm91Z2ggZWMyLnJ1bl9pbnN0YW5jZXMgYWJvdmUgY2FuIGJlIGluCiAgICAgICAgICAgICAgICAjIHRlcm1pbmF0ZWQgc3RhdGUgZHVlIHRvIGlkZW1wb3RlbmN5LiBTZWUgY29tbWl0IDdmMTFjM2QgZm9yIGEgY29tcGxldGUKICAgICAgICAgICAgICAgICMgZXhwbGFuYXRpb24uCiAgICAgICAgICAgICAgICB0ZXJtaW5hdGVkX2luc3RhbmNlcyA9IFsKICAgICAgICAgICAgICAgICAgICBzdHIoaW5zdGFuY2UuaWQpIGZvciBpbnN0YW5jZSBpbiByZXMuaW5zdGFuY2VzIGlmIGluc3RhbmNlLnN0YXRlID09ICd0ZXJtaW5hdGVkJwogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgaWYgdGVybWluYXRlZF9pbnN0YW5jZXM6CiAgICAgICAgICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9Ikluc3RhbmNlcyB3aXRoIGlkKHMpICVzICIgJSB0ZXJtaW5hdGVkX2luc3RhbmNlcyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAid2VyZSBjcmVhdGVkIHByZXZpb3VzbHkgYnV0IGhhdmUgc2luY2UgYmVlbiB0ZXJtaW5hdGVkIC0gIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidXNlIGEgKHBvc3NpYmx5IGRpZmZlcmVudCkgJ2luc3RhbmNlaWQnIHBhcmFtZXRlciIpCgogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaWYgcHJpdmF0ZV9pcDoKICAgICAgICAgICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKAogICAgICAgICAgICAgICAgICAgICAgICBtc2c9J3ByaXZhdGVfaXAgb25seSBhdmFpbGFibGUgd2l0aCBvbi1kZW1hbmQgKG5vbi1zcG90KSBpbnN0YW5jZXMnKQogICAgICAgICAgICAgICAgaWYgYm90b19zdXBwb3J0c19wYXJhbV9pbl9zcG90X3JlcXVlc3QoZWMyLCAncGxhY2VtZW50X2dyb3VwJyk6CiAgICAgICAgICAgICAgICAgICAgcGFyYW1zWydwbGFjZW1lbnRfZ3JvdXAnXSA9IHBsYWNlbWVudF9ncm91cAogICAgICAgICAgICAgICAgZWxpZiBwbGFjZW1lbnRfZ3JvdXA6CiAgICAgICAgICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbigKICAgICAgICAgICAgICAgICAgICAgICAgbXNnPSJwbGFjZW1lbnRfZ3JvdXAgcGFyYW1ldGVyIHJlcXVpcmVzIEJvdG8gdmVyc2lvbiAyLjMuMCBvciBoaWdoZXIuIikKCiAgICAgICAgICAgICAgICAjIFlvdSBjYW4ndCB0ZWxsIHNwb3QgaW5zdGFuY2VzIHRvICdzdG9wJzsgdGhleSB3aWxsIGFsd2F5cyBiZQogICAgICAgICAgICAgICAgIyAndGVybWluYXRlJ2QuIEZvciBjb252ZW5pZW5jZSwgd2UnbGwgaWdub3JlIHRoZSBsYXR0ZXIgdmFsdWUuCiAgICAgICAgICAgICAgICBpZiBpbnN0YW5jZV9pbml0aWF0ZWRfc2h1dGRvd25fYmVoYXZpb3IgYW5kIGluc3RhbmNlX2luaXRpYXRlZF9zaHV0ZG93bl9iZWhhdmlvciAhPSAndGVybWluYXRlJzoKICAgICAgICAgICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKAogICAgICAgICAgICAgICAgICAgICAgICBtc2c9Imluc3RhbmNlX2luaXRpYXRlZF9zaHV0ZG93bl9iZWhhdmlvcj1zdG9wIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHNwb3QgaW5zdGFuY2VzLiIpCgogICAgICAgICAgICAgICAgaWYgc3BvdF9sYXVuY2hfZ3JvdXAgYW5kIGlzaW5zdGFuY2Uoc3BvdF9sYXVuY2hfZ3JvdXAsIGJhc2VzdHJpbmcpOgogICAgICAgICAgICAgICAgICAgIHBhcmFtc1snbGF1bmNoX2dyb3VwJ10gPSBzcG90X2xhdW5jaF9ncm91cAoKICAgICAgICAgICAgICAgIHBhcmFtcy51cGRhdGUoZGljdCgKICAgICAgICAgICAgICAgICAgICBjb3VudD1jb3VudF9yZW1haW5pbmcsCiAgICAgICAgICAgICAgICAgICAgdHlwZT1zcG90X3R5cGUsCiAgICAgICAgICAgICAgICApKQogICAgICAgICAgICAgICAgcmVzID0gZWMyLnJlcXVlc3Rfc3BvdF9pbnN0YW5jZXMoc3BvdF9wcmljZSwgKipwYXJhbXMpCgogICAgICAgICAgICAgICAgIyBOb3cgd2UgaGF2ZSB0byBkbyB0aGUgaW50ZXJtZWRpYXRlIHdhaXRpbmcKICAgICAgICAgICAgICAgIGlmIHdhaXQ6CiAgICAgICAgICAgICAgICAgICAgaW5zdGlkcyA9IGF3YWl0X3Nwb3RfcmVxdWVzdHMobW9kdWxlLCBlYzIsIHJlcywgY291bnQpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGluc3RpZHMgPSBbXQogICAgICAgIGV4Y2VwdCBib3RvLmV4Y2VwdGlvbi5Cb3RvU2VydmVyRXJyb3IgYXMgZToKICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9Ikluc3RhbmNlIGNyZWF0aW9uIGZhaWxlZCA9PiAlczogJXMiICUgKGUuZXJyb3JfY29kZSwgZS5lcnJvcl9tZXNzYWdlKSkKCiAgICAgICAgIyB3YWl0IGhlcmUgdW50aWwgdGhlIGluc3RhbmNlcyBhcmUgdXAKICAgICAgICBudW1fcnVubmluZyA9IDAKICAgICAgICB3YWl0X3RpbWVvdXQgPSB0aW1lLnRpbWUoKSArIHdhaXRfdGltZW91dAogICAgICAgIHJlc19saXN0ID0gKCkKICAgICAgICB3aGlsZSB3YWl0X3RpbWVvdXQgPiB0aW1lLnRpbWUoKSBhbmQgbnVtX3J1bm5pbmcgPCBsZW4oaW5zdGlkcyk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHJlc19saXN0ID0gZWMyLmdldF9hbGxfaW5zdGFuY2VzKGluc3RpZHMpCiAgICAgICAgICAgIGV4Y2VwdCBib3RvLmV4Y2VwdGlvbi5Cb3RvU2VydmVyRXJyb3IgYXMgZToKICAgICAgICAgICAgICAgIGlmIGUuZXJyb3JfY29kZSA9PSAnSW52YWxpZEluc3RhbmNlSUQuTm90Rm91bmQnOgogICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICByYWlzZQoKICAgICAgICAgICAgbnVtX3J1bm5pbmcgPSAwCiAgICAgICAgICAgIGZvciByZXMgaW4gcmVzX2xpc3Q6CiAgICAgICAgICAgICAgICBudW1fcnVubmluZyArPSBsZW4oW2kgZm9yIGkgaW4gcmVzLmluc3RhbmNlcyBpZiBpLnN0YXRlID09ICdydW5uaW5nJ10pCiAgICAgICAgICAgIGlmIGxlbihyZXNfbGlzdCkgPD0gMDoKICAgICAgICAgICAgICAgICMgZ290IGEgYmFkIHJlc3BvbnNlIG9mIHNvbWUgc29ydCwgcG9zc2libHkgZHVlIHRvCiAgICAgICAgICAgICAgICAjIHN0YWxlL2NhY2hlZCBkYXRhLiBXYWl0IGEgc2Vjb25kIGFuZCB0aGVuIHRyeSBhZ2FpbgogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgaWYgd2FpdCBhbmQgbnVtX3J1bm5pbmcgPCBsZW4oaW5zdGlkcyk6CiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDUpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBicmVhawoKICAgICAgICBpZiB3YWl0IGFuZCB3YWl0X3RpbWVvdXQgPD0gdGltZS50aW1lKCk6CiAgICAgICAgICAgICMgd2FpdGluZyB0b29rIHRvbyBsb25nCiAgICAgICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSJ3YWl0IGZvciBpbnN0YW5jZXMgcnVubmluZyB0aW1lb3V0IG9uICVzIiAlIHRpbWUuYXNjdGltZSgpKQoKICAgICAgICAjIFdlIGRvIHRoaXMgYWZ0ZXIgdGhlIGxvb3AgZW5kcyBzbyB0aGF0IHdlIGVuZCB1cCB3aXRoIG9uZSBsaXN0CiAgICAgICAgZm9yIHJlcyBpbiByZXNfbGlzdDoKICAgICAgICAgICAgcnVubmluZ19pbnN0YW5jZXMuZXh0ZW5kKHJlcy5pbnN0YW5jZXMpCgogICAgICAgICMgRW5hYmxlZCBieSBkZWZhdWx0IGJ5IEFXUwogICAgICAgIGlmIHNvdXJjZV9kZXN0X2NoZWNrIGlzIEZhbHNlOgogICAgICAgICAgICBmb3IgaW5zdCBpbiByZXMuaW5zdGFuY2VzOgogICAgICAgICAgICAgICAgaW5zdC5tb2RpZnlfYXR0cmlidXRlKCdzb3VyY2VEZXN0Q2hlY2snLCBGYWxzZSkKCiAgICAgICAgIyBEaXNhYmxlZCBieSBkZWZhdWx0IGJ5IEFXUwogICAgICAgIGlmIHRlcm1pbmF0aW9uX3Byb3RlY3Rpb24gaXMgVHJ1ZToKICAgICAgICAgICAgZm9yIGluc3QgaW4gcmVzLmluc3RhbmNlczoKICAgICAgICAgICAgICAgIGluc3QubW9kaWZ5X2F0dHJpYnV0ZSgnZGlzYWJsZUFwaVRlcm1pbmF0aW9uJywgVHJ1ZSkKCiAgICAgICAgIyBMZWF2ZSB0aGlzIGFzIGxhdGUgYXMgcG9zc2libGUgdG8gdHJ5IGFuZCBhdm9pZCBJbnZhbGlkSW5zdGFuY2VJRC5Ob3RGb3VuZAogICAgICAgIGlmIGluc3RhbmNlX3RhZ3MgYW5kIGluc3RpZHM6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVjMi5jcmVhdGVfdGFncyhpbnN0aWRzLCBpbnN0YW5jZV90YWdzKQogICAgICAgICAgICBleGNlcHQgYm90by5leGNlcHRpb24uRUMyUmVzcG9uc2VFcnJvciBhcyBlOgogICAgICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9Ikluc3RhbmNlIHRhZ2dpbmcgZmFpbGVkID0+ICVzOiAlcyIgJSAoZS5lcnJvcl9jb2RlLCBlLmVycm9yX21lc3NhZ2UpKQoKICAgIGluc3RhbmNlX2RpY3RfYXJyYXkgPSBbXQogICAgY3JlYXRlZF9pbnN0YW5jZV9pZHMgPSBbXQogICAgZm9yIGluc3QgaW4gcnVubmluZ19pbnN0YW5jZXM6CiAgICAgICAgaW5zdC51cGRhdGUoKQogICAgICAgIGQgPSBnZXRfaW5zdGFuY2VfaW5mbyhpbnN0KQogICAgICAgIGNyZWF0ZWRfaW5zdGFuY2VfaWRzLmFwcGVuZChpbnN0LmlkKQogICAgICAgIGluc3RhbmNlX2RpY3RfYXJyYXkuYXBwZW5kKGQpCgogICAgcmV0dXJuIChpbnN0YW5jZV9kaWN0X2FycmF5LCBjcmVhdGVkX2luc3RhbmNlX2lkcywgY2hhbmdlZCkKCgpkZWYgdGVybWluYXRlX2luc3RhbmNlcyhtb2R1bGUsIGVjMiwgaW5zdGFuY2VfaWRzKToKICAgICIiIgogICAgVGVybWluYXRlcyBhIGxpc3Qgb2YgaW5zdGFuY2VzCgogICAgbW9kdWxlOiBBbnNpYmxlIG1vZHVsZSBvYmplY3QKICAgIGVjMjogYXV0aGVudGljYXRlZCBlYzIgY29ubmVjdGlvbiBvYmplY3QKICAgIHRlcm1pbmF0aW9uX2xpc3Q6IGEgbGlzdCBvZiBpbnN0YW5jZXMgdG8gdGVybWluYXRlIGluIHRoZSBmb3JtIG9mCiAgICAgIFsge2lkOiA8aW5zdC1pZD59LCAuLl0KCiAgICBSZXR1cm5zIGEgZGljdGlvbmFyeSBvZiBpbnN0YW5jZSBpbmZvcm1hdGlvbgogICAgYWJvdXQgdGhlIGluc3RhbmNlcyB0ZXJtaW5hdGVkLgoKICAgIElmIHRoZSBpbnN0YW5jZSB0byBiZSB0ZXJtaW5hdGVkIGlzIHJ1bm5pbmcKICAgICJjaGFuZ2VkIiB3aWxsIGJlIHNldCB0byBGYWxzZS4KCiAgICAiIiIKCiAgICAjIFdoZXRoZXIgdG8gd2FpdCBmb3IgdGVybWluYXRpb24gdG8gY29tcGxldGUgYmVmb3JlIHJldHVybmluZwogICAgd2FpdCA9IG1vZHVsZS5wYXJhbXMuZ2V0KCd3YWl0JykKICAgIHdhaXRfdGltZW91dCA9IGludChtb2R1bGUucGFyYW1zLmdldCgnd2FpdF90aW1lb3V0JykpCgogICAgY2hhbmdlZCA9IEZhbHNlCiAgICBpbnN0YW5jZV9kaWN0X2FycmF5ID0gW10KCiAgICBpZiBub3QgaXNpbnN0YW5jZShpbnN0YW5jZV9pZHMsIGxpc3QpIG9yIGxlbihpbnN0YW5jZV9pZHMpIDwgMToKICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0naW5zdGFuY2VfaWRzIHNob3VsZCBiZSBhIGxpc3Qgb2YgaW5zdGFuY2VzLCBhYm9ydGluZycpCgogICAgdGVybWluYXRlZF9pbnN0YW5jZV9pZHMgPSBbXQogICAgZm9yIHJlcyBpbiBlYzIuZ2V0X2FsbF9pbnN0YW5jZXMoaW5zdGFuY2VfaWRzKToKICAgICAgICBmb3IgaW5zdCBpbiByZXMuaW5zdGFuY2VzOgogICAgICAgICAgICBpZiBpbnN0LnN0YXRlID09ICdydW5uaW5nJyBvciBpbnN0LnN0YXRlID09ICdzdG9wcGVkJzoKICAgICAgICAgICAgICAgIHRlcm1pbmF0ZWRfaW5zdGFuY2VfaWRzLmFwcGVuZChpbnN0LmlkKQogICAgICAgICAgICAgICAgaW5zdGFuY2VfZGljdF9hcnJheS5hcHBlbmQoZ2V0X2luc3RhbmNlX2luZm8oaW5zdCkpCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgZWMyLnRlcm1pbmF0ZV9pbnN0YW5jZXMoW2luc3QuaWRdKQogICAgICAgICAgICAgICAgZXhjZXB0IEVDMlJlc3BvbnNlRXJyb3IgYXMgZToKICAgICAgICAgICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0nVW5hYmxlIHRvIHRlcm1pbmF0ZSBpbnN0YW5jZSB7MH0sIGVycm9yOiB7MX0nLmZvcm1hdChpbnN0LmlkLCBlKSkKICAgICAgICAgICAgICAgIGNoYW5nZWQgPSBUcnVlCgogICAgIyB3YWl0IGhlcmUgdW50aWwgdGhlIGluc3RhbmNlcyBhcmUgJ3Rlcm1pbmF0ZWQnCiAgICBpZiB3YWl0OgogICAgICAgIG51bV90ZXJtaW5hdGVkID0gMAogICAgICAgIHdhaXRfdGltZW91dCA9IHRpbWUudGltZSgpICsgd2FpdF90aW1lb3V0CiAgICAgICAgd2hpbGUgd2FpdF90aW1lb3V0ID4gdGltZS50aW1lKCkgYW5kIG51bV90ZXJtaW5hdGVkIDwgbGVuKHRlcm1pbmF0ZWRfaW5zdGFuY2VfaWRzKToKICAgICAgICAgICAgcmVzcG9uc2UgPSBlYzIuZ2V0X2FsbF9pbnN0YW5jZXMoaW5zdGFuY2VfaWRzPXRlcm1pbmF0ZWRfaW5zdGFuY2VfaWRzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzPXsnaW5zdGFuY2Utc3RhdGUtbmFtZSc6ICd0ZXJtaW5hdGVkJ30pCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG51bV90ZXJtaW5hdGVkID0gc3VtKFtsZW4ocmVzLmluc3RhbmNlcykgZm9yIHJlcyBpbiByZXNwb25zZV0pCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICMgZ290IGEgYmFkIHJlc3BvbnNlIG9mIHNvbWUgc29ydCwgcG9zc2libHkgZHVlIHRvCiAgICAgICAgICAgICAgICAjIHN0YWxlL2NhY2hlZCBkYXRhLiBXYWl0IGEgc2Vjb25kIGFuZCB0aGVuIHRyeSBhZ2FpbgogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgICAgICAgY29udGludWUKCiAgICAgICAgICAgIGlmIG51bV90ZXJtaW5hdGVkIDwgbGVuKHRlcm1pbmF0ZWRfaW5zdGFuY2VfaWRzKToKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoNSkKCiAgICAgICAgIyB3YWl0aW5nIHRvb2sgdG9vIGxvbmcKICAgICAgICBpZiB3YWl0X3RpbWVvdXQgPCB0aW1lLnRpbWUoKSBhbmQgbnVtX3Rlcm1pbmF0ZWQgPCBsZW4odGVybWluYXRlZF9pbnN0YW5jZV9pZHMpOgogICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0id2FpdCBmb3IgaW5zdGFuY2UgdGVybWluYXRpb24gdGltZW91dCBvbiAlcyIgJSB0aW1lLmFzY3RpbWUoKSkKICAgICAgICAjIExldHMgZ2V0IHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBpbnN0YW5jZXMgYWZ0ZXIgdGVybWluYXRpbmcgLSBpc3N1ZTYwMAogICAgICAgIGluc3RhbmNlX2RpY3RfYXJyYXkgPSBbXQogICAgICAgIGZvciByZXMgaW4gZWMyLmdldF9hbGxfaW5zdGFuY2VzKGluc3RhbmNlX2lkcz10ZXJtaW5hdGVkX2luc3RhbmNlX2lkcywgZmlsdGVycz17J2luc3RhbmNlLXN0YXRlLW5hbWUnOiAndGVybWluYXRlZCd9KToKICAgICAgICAgICAgZm9yIGluc3QgaW4gcmVzLmluc3RhbmNlczoKICAgICAgICAgICAgICAgIGluc3RhbmNlX2RpY3RfYXJyYXkuYXBwZW5kKGdldF9pbnN0YW5jZV9pbmZvKGluc3QpKQoKICAgIHJldHVybiAoY2hhbmdlZCwgaW5zdGFuY2VfZGljdF9hcnJheSwgdGVybWluYXRlZF9pbnN0YW5jZV9pZHMpCgoKZGVmIHN0YXJ0c3RvcF9pbnN0YW5jZXMobW9kdWxlLCBlYzIsIGluc3RhbmNlX2lkcywgc3RhdGUsIGluc3RhbmNlX3RhZ3MpOgogICAgIiIiCiAgICBTdGFydHMgb3Igc3RvcHMgYSBsaXN0IG9mIGV4aXN0aW5nIGluc3RhbmNlcwoKICAgIG1vZHVsZTogQW5zaWJsZSBtb2R1bGUgb2JqZWN0CiAgICBlYzI6IGF1dGhlbnRpY2F0ZWQgZWMyIGNvbm5lY3Rpb24gb2JqZWN0CiAgICBpbnN0YW5jZV9pZHM6IFRoZSBsaXN0IG9mIGluc3RhbmNlcyB0byBzdGFydCBpbiB0aGUgZm9ybSBvZgogICAgICBbIHtpZDogPGluc3QtaWQ+fSwgLi5dCiAgICBpbnN0YW5jZV90YWdzOiBBIGRpY3Qgb2YgdGFnIGtleXMgYW5kIHZhbHVlcyBpbiB0aGUgZm9ybSBvZgogICAgICB7a2V5OiB2YWx1ZSwgLi4uIH0KICAgIHN0YXRlOiBJbnRlbmRlZCBzdGF0ZSAoInJ1bm5pbmciIG9yICJzdG9wcGVkIikKCiAgICBSZXR1cm5zIGEgZGljdGlvbmFyeSBvZiBpbnN0YW5jZSBpbmZvcm1hdGlvbgogICAgYWJvdXQgdGhlIGluc3RhbmNlcyBzdGFydGVkL3N0b3BwZWQuCgogICAgSWYgdGhlIGluc3RhbmNlIHdhcyBub3QgYWJsZSB0byBjaGFuZ2Ugc3RhdGUsCiAgICAiY2hhbmdlZCIgd2lsbCBiZSBzZXQgdG8gRmFsc2UuCgogICAgTm90ZSB0aGF0IGlmIGluc3RhbmNlX2lkcyBhbmQgaW5zdGFuY2VfdGFncyBhcmUgYm90aCBub24tZW1wdHksCiAgICB0aGlzIG1ldGhvZCB3aWxsIHByb2Nlc3MgdGhlIGludGVyc2VjdGlvbiBvZiB0aGUgdHdvCiAgICAiIiIKCiAgICB3YWl0ID0gbW9kdWxlLnBhcmFtcy5nZXQoJ3dhaXQnKQogICAgd2FpdF90aW1lb3V0ID0gaW50KG1vZHVsZS5wYXJhbXMuZ2V0KCd3YWl0X3RpbWVvdXQnKSkKICAgIHNvdXJjZV9kZXN0X2NoZWNrID0gbW9kdWxlLnBhcmFtcy5nZXQoJ3NvdXJjZV9kZXN0X2NoZWNrJykKICAgIHRlcm1pbmF0aW9uX3Byb3RlY3Rpb24gPSBtb2R1bGUucGFyYW1zLmdldCgndGVybWluYXRpb25fcHJvdGVjdGlvbicpCiAgICBjaGFuZ2VkID0gRmFsc2UKICAgIGluc3RhbmNlX2RpY3RfYXJyYXkgPSBbXQoKICAgIGlmIG5vdCBpc2luc3RhbmNlKGluc3RhbmNlX2lkcywgbGlzdCkgb3IgbGVuKGluc3RhbmNlX2lkcykgPCAxOgogICAgICAgICMgRmFpbCB1bmxlc3MgdGhlIHVzZXIgZGVmaW5lZCBpbnN0YW5jZSB0YWdzCiAgICAgICAgaWYgbm90IGluc3RhbmNlX3RhZ3M6CiAgICAgICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSdpbnN0YW5jZV9pZHMgc2hvdWxkIGJlIGEgbGlzdCBvZiBpbnN0YW5jZXMsIGFib3J0aW5nJykKCiAgICAjIFRvIG1ha2UgYW4gRUMyIHRhZyBmaWx0ZXIsIHdlIG5lZWQgdG8gcHJlcGVuZCAndGFnOicgdG8gZWFjaCBrZXkuCiAgICAjIEFuIGVtcHR5IGZpbHRlciBkb2VzIG5vIGZpbHRlcmluZywgc28gaXQncyBzYWZlIHRvIHBhc3MgaXQgdG8gdGhlCiAgICAjIGdldF9hbGxfaW5zdGFuY2VzIG1ldGhvZCBldmVuIGlmIHRoZSB1c2VyIGRpZCBub3Qgc3BlY2lmeSBpbnN0YW5jZV90YWdzCiAgICBmaWx0ZXJzID0ge30KICAgIGlmIGluc3RhbmNlX3RhZ3M6CiAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gaW5zdGFuY2VfdGFncy5pdGVtcygpOgogICAgICAgICAgICBmaWx0ZXJzWyJ0YWc6IiArIGtleV0gPSB2YWx1ZQoKICAgICMgQ2hlY2sgdGhhdCBvdXIgaW5zdGFuY2VzIGFyZSBub3QgaW4gdGhlIHN0YXRlIHdlIHdhbnQgdG8gdGFrZQoKICAgICMgQ2hlY2sgKGFuZCBldmVudHVhbGx5IGNoYW5nZSkgaW5zdGFuY2VzIGF0dHJpYnV0ZXMgYW5kIGluc3RhbmNlcyBzdGF0ZQogICAgZXhpc3RpbmdfaW5zdGFuY2VzX2FycmF5ID0gW10KICAgIGZvciByZXMgaW4gZWMyLmdldF9hbGxfaW5zdGFuY2VzKGluc3RhbmNlX2lkcywgZmlsdGVycz1maWx0ZXJzKToKICAgICAgICBmb3IgaW5zdCBpbiByZXMuaW5zdGFuY2VzOgoKICAgICAgICAgICAgIyBDaGVjayAic291cmNlX2Rlc3RfY2hlY2siIGF0dHJpYnV0ZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiBpbnN0LnZwY19pZCBpcyBub3QgTm9uZSBhbmQgaW5zdC5nZXRfYXR0cmlidXRlKCdzb3VyY2VEZXN0Q2hlY2snKVsnc291cmNlRGVzdENoZWNrJ10gIT0gc291cmNlX2Rlc3RfY2hlY2s6CiAgICAgICAgICAgICAgICAgICAgaW5zdC5tb2RpZnlfYXR0cmlidXRlKCdzb3VyY2VEZXN0Q2hlY2snLCBzb3VyY2VfZGVzdF9jaGVjaykKICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkID0gVHJ1ZQogICAgICAgICAgICBleGNlcHQgYm90by5leGNlcHRpb24uRUMyUmVzcG9uc2VFcnJvciBhcyBleGM6CiAgICAgICAgICAgICAgICAjIGluc3RhbmNlcyB3aXRoIG1vcmUgdGhhbiBvbmUgRWxhc3RpYyBOZXR3b3JrIEludGVyZmFjZSB3aWxsCiAgICAgICAgICAgICAgICAjIGZhaWwsIGJlY2F1c2UgdGhleSBoYXZlIHRoZSBzb3VyY2VEZXN0Q2hlY2sgYXR0cmlidXRlIGRlZmluZWQKICAgICAgICAgICAgICAgICMgcGVyLWludGVyZmFjZQogICAgICAgICAgICAgICAgaWYgZXhjLmNvZGUgPT0gJ0ludmFsaWRJbnN0YW5jZUlEJzoKICAgICAgICAgICAgICAgICAgICBmb3IgaW50ZXJmYWNlIGluIGluc3QuaW50ZXJmYWNlczoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgaW50ZXJmYWNlLnNvdXJjZV9kZXN0X2NoZWNrICE9IHNvdXJjZV9kZXN0X2NoZWNrOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWMyLm1vZGlmeV9uZXR3b3JrX2ludGVyZmFjZV9hdHRyaWJ1dGUoaW50ZXJmYWNlLmlkLCAic291cmNlRGVzdENoZWNrIiwgc291cmNlX2Rlc3RfY2hlY2spCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkID0gVHJ1ZQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0nRmFpbGVkIHRvIGhhbmRsZSBzb3VyY2VfZGVzdF9jaGVjayBzdGF0ZSBmb3IgaW5zdGFuY2UgezB9LCBlcnJvcjogezF9Jy5mb3JtYXQoaW5zdC5pZCwgZXhjKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdGlvbj10cmFjZWJhY2suZm9ybWF0X2V4YygpKQoKICAgICAgICAgICAgIyBDaGVjayAidGVybWluYXRpb25fcHJvdGVjdGlvbiIgYXR0cmlidXRlCiAgICAgICAgICAgIGlmIChpbnN0LmdldF9hdHRyaWJ1dGUoJ2Rpc2FibGVBcGlUZXJtaW5hdGlvbicpWydkaXNhYmxlQXBpVGVybWluYXRpb24nXSAhPSB0ZXJtaW5hdGlvbl9wcm90ZWN0aW9uIGFuZCB0ZXJtaW5hdGlvbl9wcm90ZWN0aW9uIGlzIG5vdCBOb25lKToKICAgICAgICAgICAgICAgIGluc3QubW9kaWZ5X2F0dHJpYnV0ZSgnZGlzYWJsZUFwaVRlcm1pbmF0aW9uJywgdGVybWluYXRpb25fcHJvdGVjdGlvbikKICAgICAgICAgICAgICAgIGNoYW5nZWQgPSBUcnVlCgogICAgICAgICAgICAjIENoZWNrIGluc3RhbmNlIHN0YXRlCiAgICAgICAgICAgIGlmIGluc3Quc3RhdGUgIT0gc3RhdGU6CiAgICAgICAgICAgICAgICBpbnN0YW5jZV9kaWN0X2FycmF5LmFwcGVuZChnZXRfaW5zdGFuY2VfaW5mbyhpbnN0KSkKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBpZiBzdGF0ZSA9PSAncnVubmluZyc6CiAgICAgICAgICAgICAgICAgICAgICAgIGluc3Quc3RhcnQoKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIGluc3Quc3RvcCgpCiAgICAgICAgICAgICAgICBleGNlcHQgRUMyUmVzcG9uc2VFcnJvciBhcyBlOgogICAgICAgICAgICAgICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSdVbmFibGUgdG8gY2hhbmdlIHN0YXRlIGZvciBpbnN0YW5jZSB7MH0sIGVycm9yOiB7MX0nLmZvcm1hdChpbnN0LmlkLCBlKSkKICAgICAgICAgICAgICAgIGNoYW5nZWQgPSBUcnVlCiAgICAgICAgICAgIGV4aXN0aW5nX2luc3RhbmNlc19hcnJheS5hcHBlbmQoaW5zdC5pZCkKCiAgICBpbnN0YW5jZV9pZHMgPSBsaXN0KHNldChleGlzdGluZ19pbnN0YW5jZXNfYXJyYXkgKyAoaW5zdGFuY2VfaWRzIG9yIFtdKSkpCiAgICAjIFdhaXQgZm9yIGFsbCB0aGUgaW5zdGFuY2VzIHRvIGZpbmlzaCBzdGFydGluZyBvciBzdG9wcGluZwogICAgd2FpdF90aW1lb3V0ID0gdGltZS50aW1lKCkgKyB3YWl0X3RpbWVvdXQKICAgIHdoaWxlIHdhaXQgYW5kIHdhaXRfdGltZW91dCA+IHRpbWUudGltZSgpOgogICAgICAgIGluc3RhbmNlX2RpY3RfYXJyYXkgPSBbXQogICAgICAgIG1hdGNoZWRfaW5zdGFuY2VzID0gW10KICAgICAgICBmb3IgcmVzIGluIGVjMi5nZXRfYWxsX2luc3RhbmNlcyhpbnN0YW5jZV9pZHMpOgogICAgICAgICAgICBmb3IgaSBpbiByZXMuaW5zdGFuY2VzOgogICAgICAgICAgICAgICAgaWYgaS5zdGF0ZSA9PSBzdGF0ZToKICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZV9kaWN0X2FycmF5LmFwcGVuZChnZXRfaW5zdGFuY2VfaW5mbyhpKSkKICAgICAgICAgICAgICAgICAgICBtYXRjaGVkX2luc3RhbmNlcy5hcHBlbmQoaSkKICAgICAgICBpZiBsZW4obWF0Y2hlZF9pbnN0YW5jZXMpIDwgbGVuKGluc3RhbmNlX2lkcyk6CiAgICAgICAgICAgIHRpbWUuc2xlZXAoNSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBicmVhawoKICAgIGlmIHdhaXQgYW5kIHdhaXRfdGltZW91dCA8PSB0aW1lLnRpbWUoKToKICAgICAgICAjIHdhaXRpbmcgdG9vayB0b28gbG9uZwogICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSJ3YWl0IGZvciBpbnN0YW5jZXMgcnVubmluZyB0aW1lb3V0IG9uICVzIiAlIHRpbWUuYXNjdGltZSgpKQoKICAgIHJldHVybiAoY2hhbmdlZCwgaW5zdGFuY2VfZGljdF9hcnJheSwgaW5zdGFuY2VfaWRzKQoKCmRlZiByZXN0YXJ0X2luc3RhbmNlcyhtb2R1bGUsIGVjMiwgaW5zdGFuY2VfaWRzLCBzdGF0ZSwgaW5zdGFuY2VfdGFncyk6CiAgICAiIiIKICAgIFJlc3RhcnRzIGEgbGlzdCBvZiBleGlzdGluZyBpbnN0YW5jZXMKCiAgICBtb2R1bGU6IEFuc2libGUgbW9kdWxlIG9iamVjdAogICAgZWMyOiBhdXRoZW50aWNhdGVkIGVjMiBjb25uZWN0aW9uIG9iamVjdAogICAgaW5zdGFuY2VfaWRzOiBUaGUgbGlzdCBvZiBpbnN0YW5jZXMgdG8gc3RhcnQgaW4gdGhlIGZvcm0gb2YKICAgICAgWyB7aWQ6IDxpbnN0LWlkPn0sIC4uXQogICAgaW5zdGFuY2VfdGFnczogQSBkaWN0IG9mIHRhZyBrZXlzIGFuZCB2YWx1ZXMgaW4gdGhlIGZvcm0gb2YKICAgICAge2tleTogdmFsdWUsIC4uLiB9CiAgICBzdGF0ZTogSW50ZW5kZWQgc3RhdGUgKCJyZXN0YXJ0ZWQiKQoKICAgIFJldHVybnMgYSBkaWN0aW9uYXJ5IG9mIGluc3RhbmNlIGluZm9ybWF0aW9uCiAgICBhYm91dCB0aGUgaW5zdGFuY2VzLgoKICAgIElmIHRoZSBpbnN0YW5jZSB3YXMgbm90IGFibGUgdG8gY2hhbmdlIHN0YXRlLAogICAgImNoYW5nZWQiIHdpbGwgYmUgc2V0IHRvIEZhbHNlLgoKICAgIFdhaXQgd2lsbCBub3QgYXBwbHkgaGVyZSBhcyB0aGlzIGlzIGEgT1MgbGV2ZWwgb3BlcmF0aW9uLgoKICAgIE5vdGUgdGhhdCBpZiBpbnN0YW5jZV9pZHMgYW5kIGluc3RhbmNlX3RhZ3MgYXJlIGJvdGggbm9uLWVtcHR5LAogICAgdGhpcyBtZXRob2Qgd2lsbCBwcm9jZXNzIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIHR3by4KICAgICIiIgoKICAgIHNvdXJjZV9kZXN0X2NoZWNrID0gbW9kdWxlLnBhcmFtcy5nZXQoJ3NvdXJjZV9kZXN0X2NoZWNrJykKICAgIHRlcm1pbmF0aW9uX3Byb3RlY3Rpb24gPSBtb2R1bGUucGFyYW1zLmdldCgndGVybWluYXRpb25fcHJvdGVjdGlvbicpCiAgICBjaGFuZ2VkID0gRmFsc2UKICAgIGluc3RhbmNlX2RpY3RfYXJyYXkgPSBbXQoKICAgIGlmIG5vdCBpc2luc3RhbmNlKGluc3RhbmNlX2lkcywgbGlzdCkgb3IgbGVuKGluc3RhbmNlX2lkcykgPCAxOgogICAgICAgICMgRmFpbCB1bmxlc3MgdGhlIHVzZXIgZGVmaW5lZCBpbnN0YW5jZSB0YWdzCiAgICAgICAgaWYgbm90IGluc3RhbmNlX3RhZ3M6CiAgICAgICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSdpbnN0YW5jZV9pZHMgc2hvdWxkIGJlIGEgbGlzdCBvZiBpbnN0YW5jZXMsIGFib3J0aW5nJykKCiAgICAjIFRvIG1ha2UgYW4gRUMyIHRhZyBmaWx0ZXIsIHdlIG5lZWQgdG8gcHJlcGVuZCAndGFnOicgdG8gZWFjaCBrZXkuCiAgICAjIEFuIGVtcHR5IGZpbHRlciBkb2VzIG5vIGZpbHRlcmluZywgc28gaXQncyBzYWZlIHRvIHBhc3MgaXQgdG8gdGhlCiAgICAjIGdldF9hbGxfaW5zdGFuY2VzIG1ldGhvZCBldmVuIGlmIHRoZSB1c2VyIGRpZCBub3Qgc3BlY2lmeSBpbnN0YW5jZV90YWdzCiAgICBmaWx0ZXJzID0ge30KICAgIGlmIGluc3RhbmNlX3RhZ3M6CiAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gaW5zdGFuY2VfdGFncy5pdGVtcygpOgogICAgICAgICAgICBmaWx0ZXJzWyJ0YWc6IiArIGtleV0gPSB2YWx1ZQoKICAgICMgQ2hlY2sgdGhhdCBvdXIgaW5zdGFuY2VzIGFyZSBub3QgaW4gdGhlIHN0YXRlIHdlIHdhbnQgdG8gdGFrZQoKICAgICMgQ2hlY2sgKGFuZCBldmVudHVhbGx5IGNoYW5nZSkgaW5zdGFuY2VzIGF0dHJpYnV0ZXMgYW5kIGluc3RhbmNlcyBzdGF0ZQogICAgZm9yIHJlcyBpbiBlYzIuZ2V0X2FsbF9pbnN0YW5jZXMoaW5zdGFuY2VfaWRzLCBmaWx0ZXJzPWZpbHRlcnMpOgogICAgICAgIGZvciBpbnN0IGluIHJlcy5pbnN0YW5jZXM6CgogICAgICAgICAgICAjIENoZWNrICJzb3VyY2VfZGVzdF9jaGVjayIgYXR0cmlidXRlCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIGluc3QudnBjX2lkIGlzIG5vdCBOb25lIGFuZCBpbnN0LmdldF9hdHRyaWJ1dGUoJ3NvdXJjZURlc3RDaGVjaycpWydzb3VyY2VEZXN0Q2hlY2snXSAhPSBzb3VyY2VfZGVzdF9jaGVjazoKICAgICAgICAgICAgICAgICAgICBpbnN0Lm1vZGlmeV9hdHRyaWJ1dGUoJ3NvdXJjZURlc3RDaGVjaycsIHNvdXJjZV9kZXN0X2NoZWNrKQogICAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSBUcnVlCiAgICAgICAgICAgIGV4Y2VwdCBib3RvLmV4Y2VwdGlvbi5FQzJSZXNwb25zZUVycm9yIGFzIGV4YzoKICAgICAgICAgICAgICAgICMgaW5zdGFuY2VzIHdpdGggbW9yZSB0aGFuIG9uZSBFbGFzdGljIE5ldHdvcmsgSW50ZXJmYWNlIHdpbGwKICAgICAgICAgICAgICAgICMgZmFpbCwgYmVjYXVzZSB0aGV5IGhhdmUgdGhlIHNvdXJjZURlc3RDaGVjayBhdHRyaWJ1dGUgZGVmaW5lZAogICAgICAgICAgICAgICAgIyBwZXItaW50ZXJmYWNlCiAgICAgICAgICAgICAgICBpZiBleGMuY29kZSA9PSAnSW52YWxpZEluc3RhbmNlSUQnOgogICAgICAgICAgICAgICAgICAgIGZvciBpbnRlcmZhY2UgaW4gaW5zdC5pbnRlcmZhY2VzOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBpbnRlcmZhY2Uuc291cmNlX2Rlc3RfY2hlY2sgIT0gc291cmNlX2Rlc3RfY2hlY2s6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYzIubW9kaWZ5X25ldHdvcmtfaW50ZXJmYWNlX2F0dHJpYnV0ZShpbnRlcmZhY2UuaWQsICJzb3VyY2VEZXN0Q2hlY2siLCBzb3VyY2VfZGVzdF9jaGVjaykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSBUcnVlCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSdGYWlsZWQgdG8gaGFuZGxlIHNvdXJjZV9kZXN0X2NoZWNrIHN0YXRlIGZvciBpbnN0YW5jZSB7MH0sIGVycm9yOiB7MX0nLmZvcm1hdChpbnN0LmlkLCBleGMpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0aW9uPXRyYWNlYmFjay5mb3JtYXRfZXhjKCkpCgogICAgICAgICAgICAjIENoZWNrICJ0ZXJtaW5hdGlvbl9wcm90ZWN0aW9uIiBhdHRyaWJ1dGUKICAgICAgICAgICAgaWYgKGluc3QuZ2V0X2F0dHJpYnV0ZSgnZGlzYWJsZUFwaVRlcm1pbmF0aW9uJylbJ2Rpc2FibGVBcGlUZXJtaW5hdGlvbiddICE9IHRlcm1pbmF0aW9uX3Byb3RlY3Rpb24gYW5kIHRlcm1pbmF0aW9uX3Byb3RlY3Rpb24gaXMgbm90IE5vbmUpOgogICAgICAgICAgICAgICAgaW5zdC5tb2RpZnlfYXR0cmlidXRlKCdkaXNhYmxlQXBpVGVybWluYXRpb24nLCB0ZXJtaW5hdGlvbl9wcm90ZWN0aW9uKQogICAgICAgICAgICAgICAgY2hhbmdlZCA9IFRydWUKCiAgICAgICAgICAgICMgQ2hlY2sgaW5zdGFuY2Ugc3RhdGUKICAgICAgICAgICAgaWYgaW5zdC5zdGF0ZSAhPSBzdGF0ZToKICAgICAgICAgICAgICAgIGluc3RhbmNlX2RpY3RfYXJyYXkuYXBwZW5kKGdldF9pbnN0YW5jZV9pbmZvKGluc3QpKQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGluc3QucmVib290KCkKICAgICAgICAgICAgICAgIGV4Y2VwdCBFQzJSZXNwb25zZUVycm9yIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9J1VuYWJsZSB0byBjaGFuZ2Ugc3RhdGUgZm9yIGluc3RhbmNlIHswfSwgZXJyb3I6IHsxfScuZm9ybWF0KGluc3QuaWQsIGUpKQogICAgICAgICAgICAgICAgY2hhbmdlZCA9IFRydWUKCiAgICByZXR1cm4gKGNoYW5nZWQsIGluc3RhbmNlX2RpY3RfYXJyYXksIGluc3RhbmNlX2lkcykKCgpkZWYgbWFpbigpOgogICAgYXJndW1lbnRfc3BlYyA9IGVjMl9hcmd1bWVudF9zcGVjKCkKICAgIGFyZ3VtZW50X3NwZWMudXBkYXRlKAogICAgICAgIGRpY3QoCiAgICAgICAgICAgIGtleV9uYW1lPWRpY3QoYWxpYXNlcz1bJ2tleXBhaXInXSksCiAgICAgICAgICAgIGlkPWRpY3QoKSwKICAgICAgICAgICAgZ3JvdXA9ZGljdCh0eXBlPSdsaXN0JywgYWxpYXNlcz1bJ2dyb3VwcyddKSwKICAgICAgICAgICAgZ3JvdXBfaWQ9ZGljdCh0eXBlPSdsaXN0JyksCiAgICAgICAgICAgIHpvbmU9ZGljdChhbGlhc2VzPVsnYXdzX3pvbmUnLCAnZWMyX3pvbmUnXSksCiAgICAgICAgICAgIGluc3RhbmNlX3R5cGU9ZGljdChhbGlhc2VzPVsndHlwZSddKSwKICAgICAgICAgICAgc3BvdF9wcmljZT1kaWN0KCksCiAgICAgICAgICAgIHNwb3RfdHlwZT1kaWN0KGRlZmF1bHQ9J29uZS10aW1lJywgY2hvaWNlcz1bIm9uZS10aW1lIiwgInBlcnNpc3RlbnQiXSksCiAgICAgICAgICAgIHNwb3RfbGF1bmNoX2dyb3VwPWRpY3QoKSwKICAgICAgICAgICAgaW1hZ2U9ZGljdCgpLAogICAgICAgICAgICBrZXJuZWw9ZGljdCgpLAogICAgICAgICAgICBjb3VudD1kaWN0KHR5cGU9J2ludCcsIGRlZmF1bHQ9JzEnKSwKICAgICAgICAgICAgbW9uaXRvcmluZz1kaWN0KHR5cGU9J2Jvb2wnLCBkZWZhdWx0PUZhbHNlKSwKICAgICAgICAgICAgcmFtZGlzaz1kaWN0KCksCiAgICAgICAgICAgIHdhaXQ9ZGljdCh0eXBlPSdib29sJywgZGVmYXVsdD1GYWxzZSksCiAgICAgICAgICAgIHdhaXRfdGltZW91dD1kaWN0KGRlZmF1bHQ9MzAwKSwKICAgICAgICAgICAgc3BvdF93YWl0X3RpbWVvdXQ9ZGljdChkZWZhdWx0PTYwMCksCiAgICAgICAgICAgIHBsYWNlbWVudF9ncm91cD1kaWN0KCksCiAgICAgICAgICAgIHVzZXJfZGF0YT1kaWN0KCksCiAgICAgICAgICAgIGluc3RhbmNlX3RhZ3M9ZGljdCh0eXBlPSdkaWN0JyksCiAgICAgICAgICAgIHZwY19zdWJuZXRfaWQ9ZGljdCgpLAogICAgICAgICAgICBhc3NpZ25fcHVibGljX2lwPWRpY3QodHlwZT0nYm9vbCcsIGRlZmF1bHQ9RmFsc2UpLAogICAgICAgICAgICBwcml2YXRlX2lwPWRpY3QoKSwKICAgICAgICAgICAgaW5zdGFuY2VfcHJvZmlsZV9uYW1lPWRpY3QoKSwKICAgICAgICAgICAgaW5zdGFuY2VfaWRzPWRpY3QodHlwZT0nbGlzdCcsIGFsaWFzZXM9WydpbnN0YW5jZV9pZCddKSwKICAgICAgICAgICAgc291cmNlX2Rlc3RfY2hlY2s9ZGljdCh0eXBlPSdib29sJywgZGVmYXVsdD1UcnVlKSwKICAgICAgICAgICAgdGVybWluYXRpb25fcHJvdGVjdGlvbj1kaWN0KHR5cGU9J2Jvb2wnLCBkZWZhdWx0PU5vbmUpLAogICAgICAgICAgICBzdGF0ZT1kaWN0KGRlZmF1bHQ9J3ByZXNlbnQnLCBjaG9pY2VzPVsncHJlc2VudCcsICdhYnNlbnQnLCAncnVubmluZycsICdyZXN0YXJ0ZWQnLCAnc3RvcHBlZCddKSwKICAgICAgICAgICAgaW5zdGFuY2VfaW5pdGlhdGVkX3NodXRkb3duX2JlaGF2aW9yPWRpY3QoZGVmYXVsdD1Ob25lLCBjaG9pY2VzPVsnc3RvcCcsICd0ZXJtaW5hdGUnXSksCiAgICAgICAgICAgIGV4YWN0X2NvdW50PWRpY3QodHlwZT0naW50JywgZGVmYXVsdD1Ob25lKSwKICAgICAgICAgICAgY291bnRfdGFnPWRpY3QoKSwKICAgICAgICAgICAgdm9sdW1lcz1kaWN0KHR5cGU9J2xpc3QnKSwKICAgICAgICAgICAgZWJzX29wdGltaXplZD1kaWN0KHR5cGU9J2Jvb2wnLCBkZWZhdWx0PUZhbHNlKSwKICAgICAgICAgICAgdGVuYW5jeT1kaWN0KGRlZmF1bHQ9J2RlZmF1bHQnKSwKICAgICAgICAgICAgbmV0d29ya19pbnRlcmZhY2VzPWRpY3QodHlwZT0nbGlzdCcsIGFsaWFzZXM9WyduZXR3b3JrX2ludGVyZmFjZSddKQogICAgICAgICkKICAgICkKCiAgICBtb2R1bGUgPSBBbnNpYmxlTW9kdWxlKAogICAgICAgIGFyZ3VtZW50X3NwZWM9YXJndW1lbnRfc3BlYywKICAgICAgICBtdXR1YWxseV9leGNsdXNpdmU9WwogICAgICAgICAgICBbJ2dyb3VwX25hbWUnLCAnZ3JvdXBfaWQnXSwKICAgICAgICAgICAgWydleGFjdF9jb3VudCcsICdjb3VudCddLAogICAgICAgICAgICBbJ2V4YWN0X2NvdW50JywgJ3N0YXRlJ10sCiAgICAgICAgICAgIFsnZXhhY3RfY291bnQnLCAnaW5zdGFuY2VfaWRzJ10sCiAgICAgICAgICAgIFsnbmV0d29ya19pbnRlcmZhY2VzJywgJ2Fzc2lnbl9wdWJsaWNfaXAnXSwKICAgICAgICAgICAgWyduZXR3b3JrX2ludGVyZmFjZXMnLCAnZ3JvdXAnXSwKICAgICAgICAgICAgWyduZXR3b3JrX2ludGVyZmFjZXMnLCAnZ3JvdXBfaWQnXSwKICAgICAgICAgICAgWyduZXR3b3JrX2ludGVyZmFjZXMnLCAncHJpdmF0ZV9pcCddLAogICAgICAgICAgICBbJ25ldHdvcmtfaW50ZXJmYWNlcycsICd2cGNfc3VibmV0X2lkJ10sCiAgICAgICAgICAgIF0sCiAgICApCgogICAgaWYgbm90IEhBU19CT1RPOgogICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSdib3RvIHJlcXVpcmVkIGZvciB0aGlzIG1vZHVsZScpCgogICAgZWMyID0gZWMyX2Nvbm5lY3QobW9kdWxlKQoKICAgIHJlZ2lvbiwgZWMyX3VybCwgYXdzX2Nvbm5lY3Rfa3dhcmdzID0gZ2V0X2F3c19jb25uZWN0aW9uX2luZm8obW9kdWxlKQoKICAgIGlmIHJlZ2lvbjoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZwYyA9IGNvbm5lY3RfdG9fYXdzKGJvdG8udnBjLCByZWdpb24sICoqYXdzX2Nvbm5lY3Rfa3dhcmdzKQogICAgICAgIGV4Y2VwdCBib3RvLmV4Y2VwdGlvbi5Ob0F1dGhIYW5kbGVyRm91bmQgYXMgZToKICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9c3RyKGUpKQogICAgZWxzZToKICAgICAgICB2cGMgPSBOb25lCgogICAgdGFnZ2VkX2luc3RhbmNlcyA9IFtdCgogICAgc3RhdGUgPSBtb2R1bGUucGFyYW1zWydzdGF0ZSddCgogICAgaWYgc3RhdGUgPT0gJ2Fic2VudCc6CiAgICAgICAgaW5zdGFuY2VfaWRzID0gbW9kdWxlLnBhcmFtc1snaW5zdGFuY2VfaWRzJ10KICAgICAgICBpZiBub3QgaW5zdGFuY2VfaWRzOgogICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0naW5zdGFuY2VfaWRzIGxpc3QgaXMgcmVxdWlyZWQgZm9yIGFic2VudCBzdGF0ZScpCgogICAgICAgIChjaGFuZ2VkLCBpbnN0YW5jZV9kaWN0X2FycmF5LCBuZXdfaW5zdGFuY2VfaWRzKSA9IHRlcm1pbmF0ZV9pbnN0YW5jZXMobW9kdWxlLCBlYzIsIGluc3RhbmNlX2lkcykKCiAgICBlbGlmIHN0YXRlIGluICgncnVubmluZycsICdzdG9wcGVkJyk6CiAgICAgICAgaW5zdGFuY2VfaWRzID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2luc3RhbmNlX2lkcycpCiAgICAgICAgaW5zdGFuY2VfdGFncyA9IG1vZHVsZS5wYXJhbXMuZ2V0KCdpbnN0YW5jZV90YWdzJykKICAgICAgICBpZiBub3QgKGlzaW5zdGFuY2UoaW5zdGFuY2VfaWRzLCBsaXN0KSBvciBpc2luc3RhbmNlKGluc3RhbmNlX3RhZ3MsIGRpY3QpKToKICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9J3J1bm5pbmcgbGlzdCBuZWVkcyB0byBiZSBhIGxpc3Qgb2YgaW5zdGFuY2VzIG9yIHNldCBvZiB0YWdzIHRvIHJ1bjogJXMnICUgaW5zdGFuY2VfaWRzKQoKICAgICAgICAoY2hhbmdlZCwgaW5zdGFuY2VfZGljdF9hcnJheSwgbmV3X2luc3RhbmNlX2lkcykgPSBzdGFydHN0b3BfaW5zdGFuY2VzKG1vZHVsZSwgZWMyLCBpbnN0YW5jZV9pZHMsIHN0YXRlLCBpbnN0YW5jZV90YWdzKQoKICAgIGVsaWYgc3RhdGUgaW4gKCdyZXN0YXJ0ZWQnKToKICAgICAgICBpbnN0YW5jZV9pZHMgPSBtb2R1bGUucGFyYW1zLmdldCgnaW5zdGFuY2VfaWRzJykKICAgICAgICBpbnN0YW5jZV90YWdzID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2luc3RhbmNlX3RhZ3MnKQogICAgICAgIGlmIG5vdCAoaXNpbnN0YW5jZShpbnN0YW5jZV9pZHMsIGxpc3QpIG9yIGlzaW5zdGFuY2UoaW5zdGFuY2VfdGFncywgZGljdCkpOgogICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0ncnVubmluZyBsaXN0IG5lZWRzIHRvIGJlIGEgbGlzdCBvZiBpbnN0YW5jZXMgb3Igc2V0IG9mIHRhZ3MgdG8gcnVuOiAlcycgJSBpbnN0YW5jZV9pZHMpCgogICAgICAgIChjaGFuZ2VkLCBpbnN0YW5jZV9kaWN0X2FycmF5LCBuZXdfaW5zdGFuY2VfaWRzKSA9IHJlc3RhcnRfaW5zdGFuY2VzKG1vZHVsZSwgZWMyLCBpbnN0YW5jZV9pZHMsIHN0YXRlLCBpbnN0YW5jZV90YWdzKQoKICAgIGVsaWYgc3RhdGUgPT0gJ3ByZXNlbnQnOgogICAgICAgICMgQ2hhbmdlZCBpcyBhbHdheXMgc2V0IHRvIHRydWUgd2hlbiBwcm92aXNpb25pbmcgbmV3IGluc3RhbmNlcwogICAgICAgIGlmIG5vdCBtb2R1bGUucGFyYW1zLmdldCgnaW1hZ2UnKToKICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9J2ltYWdlIHBhcmFtZXRlciBpcyByZXF1aXJlZCBmb3IgbmV3IGluc3RhbmNlJykKCiAgICAgICAgaWYgbW9kdWxlLnBhcmFtcy5nZXQoJ2V4YWN0X2NvdW50JykgaXMgTm9uZToKICAgICAgICAgICAgKGluc3RhbmNlX2RpY3RfYXJyYXksIG5ld19pbnN0YW5jZV9pZHMsIGNoYW5nZWQpID0gY3JlYXRlX2luc3RhbmNlcyhtb2R1bGUsIGVjMiwgdnBjKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICh0YWdnZWRfaW5zdGFuY2VzLCBpbnN0YW5jZV9kaWN0X2FycmF5LCBuZXdfaW5zdGFuY2VfaWRzLCBjaGFuZ2VkKSA9IGVuZm9yY2VfY291bnQobW9kdWxlLCBlYzIsIHZwYykKCiAgICBtb2R1bGUuZXhpdF9qc29uKGNoYW5nZWQ9Y2hhbmdlZCwgaW5zdGFuY2VfaWRzPW5ld19pbnN0YW5jZV9pZHMsIGluc3RhbmNlcz1pbnN0YW5jZV9kaWN0X2FycmF5LCB0YWdnZWRfaW5zdGFuY2VzPXRhZ2dlZF9pbnN0YW5jZXMpCgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIG1haW4oKQpQSwMEFAAAAAAABLwrSzvfOZUwigEAMIoBAB0AAABhbnNpYmxlL21vZHVsZV91dGlscy9iYXNpYy5weSMgVGhpcyBjb2RlIGlzIHBhcnQgb2YgQW5zaWJsZSwgYnV0IGlzIGFuIGluZGVwZW5kZW50IGNvbXBvbmVudC4KIyBUaGlzIHBhcnRpY3VsYXIgZmlsZSBzbmlwcGV0LCBhbmQgdGhpcyBmaWxlIHNuaXBwZXQgb25seSwgaXMgQlNEIGxpY2Vuc2VkLgojIE1vZHVsZXMgeW91IHdyaXRlIHVzaW5nIHRoaXMgc25pcHBldCwgd2hpY2ggaXMgZW1iZWRkZWQgZHluYW1pY2FsbHkgYnkgQW5zaWJsZQojIHN0aWxsIGJlbG9uZyB0byB0aGUgYXV0aG9yIG9mIHRoZSBtb2R1bGUsIGFuZCBtYXkgYXNzaWduIHRoZWlyIG93biBsaWNlbnNlCiMgdG8gdGhlIGNvbXBsZXRlIHdvcmsuCiMKIyBDb3B5cmlnaHQgKGMpLCBNaWNoYWVsIERlSGFhbiA8bWljaGFlbC5kZWhhYW5AZ21haWwuY29tPiwgMjAxMi0yMDEzCiMgQ29weXJpZ2h0IChjKSwgVG9zaGlvIEt1cmF0b21pIDx0a3VyYXRvbWlAYW5zaWJsZS5jb20+IDIwMTYKIyBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwKIyBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6CiMKIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0CiMgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuCiMgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsCiMgICAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uCiMgICAgICBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KIwojIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTIElTIiBBTkQKIyBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRAojIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4KIyBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwKIyBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sCiMgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTCiMgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVAojIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRQojIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgojCgpCT09MRUFOU19UUlVFID0gWyd5JywgJ3llcycsICdvbicsICcxJywgJ3RydWUnLCAxLCBUcnVlXQpCT09MRUFOU19GQUxTRSA9IFsnbicsICdubycsICdvZmYnLCAnMCcsICdmYWxzZScsIDAsIEZhbHNlXQpCT09MRUFOUyA9IEJPT0xFQU5TX1RSVUUgKyBCT09MRUFOU19GQUxTRQoKU0laRV9SQU5HRVMgPSB7ICdZJzogMTw8ODAsICdaJzogMTw8NzAsICdFJzogMTw8NjAsICdQJzogMTw8NTAsICdUJzogMTw8NDAsICdHJzogMTw8MzAsICdNJzogMTw8MjAsICdLJzogMTw8MTAsICdCJzogMSB9CgpGSUxFX0FUVFJJQlVURVMgPSB7CiAgICAnQSc6ICdub2F0aW1lJywKICAgICdhJzogJ2FwcGVuZCcsCiAgICAnYyc6ICdjb21wcmVzc2VkJywKICAgICdDJzogJ25vY293JywKICAgICdkJzogJ25vZHVtcCcsCiAgICAnRCc6ICdkaXJzeW5jJywKICAgICdlJzogJ2V4dGVudHMnLAogICAgJ0UnOiAnZW5jcnlwdGVkJywKICAgICdoJzogJ2Jsb2Nrc2l6ZScsCiAgICAnaSc6ICdpbW11dGFibGUnLAogICAgJ0knOiAnaW5kZXhlZCcsCiAgICAnaic6ICdqb3VybmFsbGVkJywKICAgICdOJzogJ2lubGluZScsCiAgICAncyc6ICd6ZXJvJywKICAgICdTJzogJ3N5bmNocm9ub3VzJywKICAgICd0JzogJ25vdGFpbCcsCiAgICAnVCc6ICdibG9ja3Jvb3QnLAogICAgJ3UnOiAndW5kZWxldGUnLAogICAgJ1gnOiAnY29tcHJlc3NlZHJhdycsCiAgICAnWic6ICdjb21wcmVzc2VkZGlydHknLAp9CgojIGFuc2libGUgbW9kdWxlcyBjYW4gYmUgd3JpdHRlbiBpbiBhbnkgbGFuZ3VhZ2UuICBUbyBzaW1wbGlmeQojIGRldmVsb3BtZW50IG9mIFB5dGhvbiBtb2R1bGVzLCB0aGUgZnVuY3Rpb25zIGF2YWlsYWJsZSBoZXJlIGNhbgojIGJlIHVzZWQgdG8gZG8gbWFueSBjb21tb24gdGFza3MKCmltcG9ydCBsb2NhbGUKaW1wb3J0IG9zCmltcG9ydCByZQppbXBvcnQgc2hsZXgKaW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IHN5cwppbXBvcnQgdHlwZXMKaW1wb3J0IHRpbWUKaW1wb3J0IHNlbGVjdAppbXBvcnQgc2h1dGlsCmltcG9ydCBzdGF0CmltcG9ydCB0ZW1wZmlsZQppbXBvcnQgdHJhY2ViYWNrCmltcG9ydCBncnAKaW1wb3J0IHB3ZAppbXBvcnQgcGxhdGZvcm0KaW1wb3J0IGVycm5vCmltcG9ydCBkYXRldGltZQpmcm9tIGl0ZXJ0b29scyBpbXBvcnQgcmVwZWF0LCBjaGFpbgoKdHJ5OgogICAgaW1wb3J0IHN5c2xvZwogICAgSEFTX1NZU0xPRz1UcnVlCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIEhBU19TWVNMT0c9RmFsc2UKCnRyeToKICAgIGZyb20gc3lzdGVtZCBpbXBvcnQgam91cm5hbAogICAgaGFzX2pvdXJuYWwgPSBUcnVlCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIGhhc19qb3VybmFsID0gRmFsc2UKCkhBVkVfU0VMSU5VWD1GYWxzZQp0cnk6CiAgICBpbXBvcnQgc2VsaW51eAogICAgSEFWRV9TRUxJTlVYPVRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgcGFzcwoKIyBQeXRob24yICYgMyB3YXkgdG8gZ2V0IE5vbmVUeXBlCk5vbmVUeXBlID0gdHlwZShOb25lKQoKdHJ5OgogICAgZnJvbSBjb2xsZWN0aW9ucyBpbXBvcnQgU2VxdWVuY2UsIE1hcHBpbmcKZXhjZXB0IEltcG9ydEVycm9yOgogICAgIyBweXRob24yLjUKICAgIFNlcXVlbmNlID0gKGxpc3QsIHR1cGxlKQogICAgTWFwcGluZyA9IChkaWN0LCkKCiMgTm90ZTogV2hlbiBnZXR0aW5nIFNlcXVlbmNlIGZyb20gY29sbGVjdGlvbnMsIGl0IG1hdGNoZXMgd2l0aCBzdHJpbmdzLiAgSWYKIyB0aGlzIG1hdHRlcnMsIG1ha2Ugc3VyZSB0byBjaGVjayBmb3Igc3RyaW5ncyBiZWZvcmUgY2hlY2tpbmcgZm9yIHNlcXVlbmNldHlwZQp0cnk6CiAgICBmcm9tIGNvbGxlY3Rpb25zLmFiYyBpbXBvcnQgS2V5c1ZpZXcKICAgIFNFUVVFTkNFVFlQRSA9IChTZXF1ZW5jZSwgS2V5c1ZpZXcpCmV4Y2VwdDoKICAgIFNFUVVFTkNFVFlQRSA9IFNlcXVlbmNlCgp0cnk6CiAgICBpbXBvcnQganNvbgogICAgIyBEZXRlY3QgdGhlIHB5dGhvbi1qc29uIGxpYnJhcnkgd2hpY2ggaXMgaW5jb21wYXRpYmxlCiAgICAjIExvb2sgZm9yIHNpbXBsZWpzb24gaWYgdGhhdCdzIHRoZSBjYXNlCiAgICB0cnk6CiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoanNvbi5sb2FkcywgdHlwZXMuRnVuY3Rpb25UeXBlKSBvciBub3QgaXNpbnN0YW5jZShqc29uLmR1bXBzLCB0eXBlcy5GdW5jdGlvblR5cGUpOgogICAgICAgICAgICByYWlzZSBJbXBvcnRFcnJvcgogICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgIHJhaXNlIEltcG9ydEVycm9yCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIHRyeToKICAgICAgICBpbXBvcnQgc2ltcGxlanNvbiBhcyBqc29uCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgcHJpbnQoJ1xueyJtc2ciOiAiRXJyb3I6IGFuc2libGUgcmVxdWlyZXMgdGhlIHN0ZGxpYiBqc29uIG9yIHNpbXBsZWpzb24gbW9kdWxlLCBuZWl0aGVyIHdhcyBmb3VuZCEiLCAiZmFpbGVkIjogdHJ1ZX0nKQogICAgICAgIHN5cy5leGl0KDEpCiAgICBleGNlcHQgU3ludGF4RXJyb3I6CiAgICAgICAgcHJpbnQoJ1xueyJtc2ciOiAiU3ludGF4RXJyb3I6IHByb2JhYmx5IGR1ZSB0byBpbnN0YWxsZWQgc2ltcGxlanNvbiBiZWluZyBmb3IgYSBkaWZmZXJlbnQgcHl0aG9uIHZlcnNpb24iLCAiZmFpbGVkIjogdHJ1ZX0nKQogICAgICAgIHN5cy5leGl0KDEpCgpBVkFJTEFCTEVfSEFTSF9BTEdPUklUSE1TID0gZGljdCgpCnRyeToKICAgIGltcG9ydCBoYXNobGliCgogICAgIyBweXRob24gMi43LjkrIGFuZCAyLjcuMCsKICAgIGZvciBhdHRyaWJ1dGUgaW4gKCdhdmFpbGFibGVfYWxnb3JpdGhtcycsICdhbGdvcml0aG1zJyk6CiAgICAgICAgYWxnb3JpdGhtcyA9IGdldGF0dHIoaGFzaGxpYiwgYXR0cmlidXRlLCBOb25lKQogICAgICAgIGlmIGFsZ29yaXRobXM6CiAgICAgICAgICAgIGJyZWFrCiAgICBpZiBhbGdvcml0aG1zIGlzIE5vbmU6CiAgICAgICAgIyBweXRob24gMi41KwogICAgICAgIGFsZ29yaXRobXMgPSAoJ21kNScsICdzaGExJywgJ3NoYTIyNCcsICdzaGEyNTYnLCAnc2hhMzg0JywgJ3NoYTUxMicpCiAgICBmb3IgYWxnb3JpdGhtIGluIGFsZ29yaXRobXM6CiAgICAgICAgQVZBSUxBQkxFX0hBU0hfQUxHT1JJVEhNU1thbGdvcml0aG1dID0gZ2V0YXR0cihoYXNobGliLCBhbGdvcml0aG0pCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIGltcG9ydCBzaGEKICAgIEFWQUlMQUJMRV9IQVNIX0FMR09SSVRITVMgPSB7J3NoYTEnOiBzaGEuc2hhfQogICAgdHJ5OgogICAgICAgIGltcG9ydCBtZDUKICAgICAgICBBVkFJTEFCTEVfSEFTSF9BTEdPUklUSE1TWydtZDUnXSA9IG1kNS5tZDUKICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBwYXNzCgpmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLnB5Y29tcGF0MjQgaW1wb3J0IGdldF9leGNlcHRpb24sIGxpdGVyYWxfZXZhbApmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeCBpbXBvcnQgKFBZMiwgUFkzLCBiLCBiaW5hcnlfdHlwZSwgaW50ZWdlcl90eXBlcywKICAgICAgICBpdGVyaXRlbXMsIHRleHRfdHlwZSwgc3RyaW5nX3R5cGVzKQpmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeC5tb3ZlcyBpbXBvcnQgbWFwLCByZWR1Y2UsIHNobGV4X3F1b3RlCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuX3RleHQgaW1wb3J0IHRvX25hdGl2ZSwgdG9fYnl0ZXMsIHRvX3RleHQKClBBU1NXT1JEX01BVENIID0gcmUuY29tcGlsZShyJ14oPzouK1stX1xzXSk/cGFzcyg/OlstX1xzXT8oPzp3b3JkfHBocmFzZXx3cmR8d2QpPykoPzpbLV9cc10uKyk/JCcsIHJlLkkpCgpfTlVNQkVSVFlQRVMgPSB0dXBsZShsaXN0KGludGVnZXJfdHlwZXMpICsgW2Zsb2F0XSkKCiMgRGVwcmVjYXRlZCBjb21wYXQuICBPbmx5IGtlcHQgaW4gY2FzZSBhbm90aGVyIG1vZHVsZSB1c2VkIHRoZXNlIG5hbWVzICBVc2luZwojIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeCBpcyBwcmVmZXJyZWQKCk5VTUJFUlRZUEVTID0gX05VTUJFUlRZUEVTCgppbWFwID0gbWFwCgp0cnk6CiAgICAjIFB5dGhvbiAyCiAgICB1bmljb2RlCmV4Y2VwdCBOYW1lRXJyb3I6CiAgICAjIFB5dGhvbiAzCiAgICB1bmljb2RlID0gdGV4dF90eXBlCgp0cnk6CiAgICAjIFB5dGhvbiAyLjYrCiAgICBieXRlcwpleGNlcHQgTmFtZUVycm9yOgogICAgIyBQeXRob24gMi40CiAgICBieXRlcyA9IGJpbmFyeV90eXBlCgp0cnk6CiAgICAjIFB5dGhvbiAyCiAgICBiYXNlc3RyaW5nCmV4Y2VwdCBOYW1lRXJyb3I6CiAgICAjIFB5dGhvbiAzCiAgICBiYXNlc3RyaW5nID0gc3RyaW5nX3R5cGVzCgpfbGl0ZXJhbF9ldmFsID0gbGl0ZXJhbF9ldmFsCgojIEVuZCBvZiBkZXByZWNhdGVkIG5hbWVzCgojIEludGVybmFsIGdsb2JhbCBob2xkaW5nIHBhc3NlZCBpbiBwYXJhbXMuICBUaGlzIGlzIGNvbnN1bHRlZCBpbiBjYXNlCiMgbXVsdGlwbGUgQW5zaWJsZU1vZHVsZXMgYXJlIGNyZWF0ZWQuICBPdGhlcndpc2UgZWFjaCBBbnNpYmxlTW9kdWxlIHdvdWxkCiMgYXR0ZW1wdCB0byByZWFkIGZyb20gc3RkaW4uICBPdGhlciBjb2RlIHNob3VsZCBub3QgdXNlIHRoaXMgZGlyZWN0bHkgYXMgaXQKIyBpcyBhbiBpbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBkZXRhaWwKX0FOU0lCTEVfQVJHUyA9IE5vbmUKCkZJTEVfQ09NTU9OX0FSR1VNRU5UUz1kaWN0KAogICAgc3JjID0gZGljdCgpLAogICAgbW9kZSA9IGRpY3QodHlwZT0ncmF3JyksCiAgICBvd25lciA9IGRpY3QoKSwKICAgIGdyb3VwID0gZGljdCgpLAogICAgc2V1c2VyID0gZGljdCgpLAogICAgc2Vyb2xlID0gZGljdCgpLAogICAgc2VsZXZlbCA9IGRpY3QoKSwKICAgIHNldHlwZSA9IGRpY3QoKSwKICAgIGZvbGxvdyA9IGRpY3QodHlwZT0nYm9vbCcsIGRlZmF1bHQ9RmFsc2UpLAogICAgIyBub3QgdGFrZW4gYnkgdGhlIGZpbGUgbW9kdWxlLCBidXQgb3RoZXIgbW9kdWxlcyBjYWxsIGZpbGUgc28gaXQgbXVzdCBpZ25vcmUgdGhlbS4KICAgIGNvbnRlbnQgPSBkaWN0KG5vX2xvZz1UcnVlKSwKICAgIGJhY2t1cCA9IGRpY3QoKSwKICAgIGZvcmNlID0gZGljdCgpLAogICAgcmVtb3RlX3NyYyA9IGRpY3QoKSwgIyB1c2VkIGJ5IGFzc2VtYmxlCiAgICByZWdleHAgPSBkaWN0KCksICMgdXNlZCBieSBhc3NlbWJsZQogICAgZGVsaW1pdGVyID0gZGljdCgpLCAjIHVzZWQgYnkgYXNzZW1ibGUKICAgIGRpcmVjdG9yeV9tb2RlID0gZGljdCgpLCAjIHVzZWQgYnkgY29weQogICAgdW5zYWZlX3dyaXRlcyAgPSBkaWN0KHR5cGU9J2Jvb2wnKSwgIyBzaG91bGQgYmUgYXZhaWxhYmxlIHRvIGFueSBtb2R1bGUgdXNpbmcgYXRvbWljX21vdmUKICAgIGF0dHJpYnV0ZXMgPSBkaWN0KGFsaWFzZXM9WydhdHRyJ10pLAopCgpQQVNTV0RfQVJHX1JFID0gcmUuY29tcGlsZShyJ15bLV17MCwyfXBhc3NbLV0/KHdvcmR8d2QpPycpCgojIENhbid0IHVzZSAwNzc3NyBvbiBQeXRob24gMywgY2FuJ3QgdXNlIDBvNzc3NyBvbiBQeXRob24gMi40ClBFUk1fQklUUyA9IGludCgnMDc3NzcnLCA4KSAgICAgICMgZmlsZSBtb2RlIHBlcm1pc3Npb24gYml0cwpFWEVDX1BFUk1fQklUUyA9IGludCgnMDAxMTEnLCA4KSAjIGV4ZWN1dGUgcGVybWlzc2lvbiBiaXRzCkRFRkFVTFRfUEVSTSA9IGludCgnMDY2NicsIDgpICAgICMgZGVmYXVsdCBmaWxlIHBlcm1pc3Npb24gYml0cwoKCmRlZiBnZXRfcGxhdGZvcm0oKToKICAgICcnJyB3aGF0J3MgdGhlIHBsYXRmb3JtPyAgZXhhbXBsZTogTGludXggaXMgYSBwbGF0Zm9ybS4gJycnCiAgICByZXR1cm4gcGxhdGZvcm0uc3lzdGVtKCkKCmRlZiBnZXRfZGlzdHJpYnV0aW9uKCk6CiAgICAnJycgcmV0dXJuIHRoZSBkaXN0cmlidXRpb24gbmFtZSAnJycKICAgIGlmIHBsYXRmb3JtLnN5c3RlbSgpID09ICdMaW51eCc6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdXBwb3J0ZWRfZGlzdHMgPSBwbGF0Zm9ybS5fc3VwcG9ydGVkX2Rpc3RzICsgKCdhcmNoJywnYWxwaW5lJykKICAgICAgICAgICAgZGlzdHJpYnV0aW9uID0gcGxhdGZvcm0ubGludXhfZGlzdHJpYnV0aW9uKHN1cHBvcnRlZF9kaXN0cz1zdXBwb3J0ZWRfZGlzdHMpWzBdLmNhcGl0YWxpemUoKQogICAgICAgICAgICBpZiBub3QgZGlzdHJpYnV0aW9uIGFuZCBvcy5wYXRoLmlzZmlsZSgnL2V0Yy9zeXN0ZW0tcmVsZWFzZScpOgogICAgICAgICAgICAgICAgZGlzdHJpYnV0aW9uID0gcGxhdGZvcm0ubGludXhfZGlzdHJpYnV0aW9uKHN1cHBvcnRlZF9kaXN0cz1bJ3N5c3RlbSddKVswXS5jYXBpdGFsaXplKCkKICAgICAgICAgICAgICAgIGlmICdBbWF6b24nIGluIGRpc3RyaWJ1dGlvbjoKICAgICAgICAgICAgICAgICAgICBkaXN0cmlidXRpb24gPSAnQW1hem9uJwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBkaXN0cmlidXRpb24gPSAnT3RoZXJMaW51eCcKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICMgRklYTUU6IE1ldGhvZE1pc3NpbmcsIEkgYXNzdW1lPwogICAgICAgICAgICBkaXN0cmlidXRpb24gPSBwbGF0Zm9ybS5kaXN0KClbMF0uY2FwaXRhbGl6ZSgpCiAgICBlbHNlOgogICAgICAgIGRpc3RyaWJ1dGlvbiA9IE5vbmUKICAgIHJldHVybiBkaXN0cmlidXRpb24KCmRlZiBnZXRfZGlzdHJpYnV0aW9uX3ZlcnNpb24oKToKICAgICcnJyByZXR1cm4gdGhlIGRpc3RyaWJ1dGlvbiB2ZXJzaW9uICcnJwogICAgaWYgcGxhdGZvcm0uc3lzdGVtKCkgPT0gJ0xpbnV4JzoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGRpc3RyaWJ1dGlvbl92ZXJzaW9uID0gcGxhdGZvcm0ubGludXhfZGlzdHJpYnV0aW9uKClbMV0KICAgICAgICAgICAgaWYgbm90IGRpc3RyaWJ1dGlvbl92ZXJzaW9uIGFuZCBvcy5wYXRoLmlzZmlsZSgnL2V0Yy9zeXN0ZW0tcmVsZWFzZScpOgogICAgICAgICAgICAgICAgZGlzdHJpYnV0aW9uX3ZlcnNpb24gPSBwbGF0Zm9ybS5saW51eF9kaXN0cmlidXRpb24oc3VwcG9ydGVkX2Rpc3RzPVsnc3lzdGVtJ10pWzFdCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAjIEZJWE1FOiBNZXRob2RNaXNzaW5nLCBJIGFzc3VtZT8KICAgICAgICAgICAgZGlzdHJpYnV0aW9uX3ZlcnNpb24gPSBwbGF0Zm9ybS5kaXN0KClbMV0KICAgIGVsc2U6CiAgICAgICAgZGlzdHJpYnV0aW9uX3ZlcnNpb24gPSBOb25lCiAgICByZXR1cm4gZGlzdHJpYnV0aW9uX3ZlcnNpb24KCmRlZiBnZXRfYWxsX3N1YmNsYXNzZXMoY2xzKToKICAgICcnJwogICAgdXNlZCBieSBtb2R1bGVzIGxpa2UgSGFyZHdhcmUgb3IgTmV0d29yayBmYWN0IGNsYXNzZXMgdG8gcmV0cmlldmUgYWxsIHN1YmNsYXNzZXMgb2YgYSBnaXZlbiBjbGFzcy4KICAgIF9fc3ViY2xhc3Nlc19fIHJldHVybiBvbmx5IGRpcmVjdCBzdWIgY2xhc3Nlcy4gVGhpcyBvbmUgZ28gZG93biBpbnRvIHRoZSBjbGFzcyB0cmVlLgogICAgJycnCiAgICAjIFJldHJpZXZlIGRpcmVjdCBzdWJjbGFzc2VzCiAgICBzdWJjbGFzc2VzID0gY2xzLl9fc3ViY2xhc3Nlc19fKCkKICAgIHRvX3Zpc2l0ID0gbGlzdChzdWJjbGFzc2VzKQogICAgIyBUaGVuIHZpc2l0IGFsbCBzdWJjbGFzc2VzCiAgICB3aGlsZSB0b192aXNpdDoKICAgICAgICBmb3Igc2MgaW4gdG9fdmlzaXQ6CiAgICAgICAgICAgICMgVGhlIGN1cnJlbnQgY2xhc3MgaXMgbm93IHZpc2l0ZWQsIHNvIHJlbW92ZSBpdCBmcm9tIGxpc3QKICAgICAgICAgICAgdG9fdmlzaXQucmVtb3ZlKHNjKQogICAgICAgICAgICAjIEFwcGVuZGluZyBhbGwgc3ViY2xhc3NlcyB0byB2aXNpdCBhbmQga2VlcCBhIHJlZmVyZW5jZSBvZiBhdmFpbGFibGUgY2xhc3MKICAgICAgICAgICAgZm9yIHNzYyBpbiBzYy5fX3N1YmNsYXNzZXNfXygpOgogICAgICAgICAgICAgICAgc3ViY2xhc3Nlcy5hcHBlbmQoc3NjKQogICAgICAgICAgICAgICAgdG9fdmlzaXQuYXBwZW5kKHNzYykKICAgIHJldHVybiBzdWJjbGFzc2VzCgoKZGVmIGxvYWRfcGxhdGZvcm1fc3ViY2xhc3MoY2xzLCAqYXJncywgKiprd2FyZ3MpOgogICAgJycnCiAgICB1c2VkIGJ5IG1vZHVsZXMgbGlrZSBVc2VyIHRvIGhhdmUgZGlmZmVyZW50IGltcGxlbWVudGF0aW9ucyBiYXNlZCBvbiBkZXRlY3RlZCBwbGF0Zm9ybS4gIFNlZSBVc2VyCiAgICBtb2R1bGUgZm9yIGFuIGV4YW1wbGUuCiAgICAnJycKCiAgICB0aGlzX3BsYXRmb3JtID0gZ2V0X3BsYXRmb3JtKCkKICAgIGRpc3RyaWJ1dGlvbiA9IGdldF9kaXN0cmlidXRpb24oKQogICAgc3ViY2xhc3MgPSBOb25lCgogICAgIyBnZXQgdGhlIG1vc3Qgc3BlY2lmaWMgc3VwZXJjbGFzcyBmb3IgdGhpcyBwbGF0Zm9ybQogICAgaWYgZGlzdHJpYnV0aW9uIGlzIG5vdCBOb25lOgogICAgICAgIGZvciBzYyBpbiBnZXRfYWxsX3N1YmNsYXNzZXMoY2xzKToKICAgICAgICAgICAgaWYgc2MuZGlzdHJpYnV0aW9uIGlzIG5vdCBOb25lIGFuZCBzYy5kaXN0cmlidXRpb24gPT0gZGlzdHJpYnV0aW9uIGFuZCBzYy5wbGF0Zm9ybSA9PSB0aGlzX3BsYXRmb3JtOgogICAgICAgICAgICAgICAgc3ViY2xhc3MgPSBzYwogICAgaWYgc3ViY2xhc3MgaXMgTm9uZToKICAgICAgICBmb3Igc2MgaW4gZ2V0X2FsbF9zdWJjbGFzc2VzKGNscyk6CiAgICAgICAgICAgIGlmIHNjLnBsYXRmb3JtID09IHRoaXNfcGxhdGZvcm0gYW5kIHNjLmRpc3RyaWJ1dGlvbiBpcyBOb25lOgogICAgICAgICAgICAgICAgc3ViY2xhc3MgPSBzYwogICAgaWYgc3ViY2xhc3MgaXMgTm9uZToKICAgICAgICBzdWJjbGFzcyA9IGNscwoKICAgIHJldHVybiBzdXBlcihjbHMsIHN1YmNsYXNzKS5fX25ld19fKHN1YmNsYXNzKQoKCmRlZiBqc29uX2RpY3RfdW5pY29kZV90b19ieXRlcyhkLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKToKICAgICcnJyBSZWN1cnNpdmVseSBjb252ZXJ0IGRpY3Qga2V5cyBhbmQgdmFsdWVzIHRvIGJ5dGUgc3RyCgogICAgICAgIFNwZWNpYWxpemVkIGZvciBqc29uIHJldHVybiBiZWNhdXNlIHRoaXMgb25seSBoYW5kbGVzLCBsaXN0cywgdHVwbGVzLAogICAgICAgIGFuZCBkaWN0IGNvbnRhaW5lciB0eXBlcyAodGhlIGNvbnRhaW5lcnMgdGhhdCB0aGUganNvbiBtb2R1bGUgcmV0dXJucykKICAgICcnJwoKICAgIGlmIGlzaW5zdGFuY2UoZCwgdGV4dF90eXBlKToKICAgICAgICByZXR1cm4gdG9fYnl0ZXMoZCwgZW5jb2Rpbmc9ZW5jb2RpbmcsIGVycm9ycz1lcnJvcnMpCiAgICBlbGlmIGlzaW5zdGFuY2UoZCwgZGljdCk6CiAgICAgICAgcmV0dXJuIGRpY3QobWFwKGpzb25fZGljdF91bmljb2RlX3RvX2J5dGVzLCBpdGVyaXRlbXMoZCksIHJlcGVhdChlbmNvZGluZyksIHJlcGVhdChlcnJvcnMpKSkKICAgIGVsaWYgaXNpbnN0YW5jZShkLCBsaXN0KToKICAgICAgICByZXR1cm4gbGlzdChtYXAoanNvbl9kaWN0X3VuaWNvZGVfdG9fYnl0ZXMsIGQsIHJlcGVhdChlbmNvZGluZyksIHJlcGVhdChlcnJvcnMpKSkKICAgIGVsaWYgaXNpbnN0YW5jZShkLCB0dXBsZSk6CiAgICAgICAgcmV0dXJuIHR1cGxlKG1hcChqc29uX2RpY3RfdW5pY29kZV90b19ieXRlcywgZCwgcmVwZWF0KGVuY29kaW5nKSwgcmVwZWF0KGVycm9ycykpKQogICAgZWxzZToKICAgICAgICByZXR1cm4gZAoKZGVmIGpzb25fZGljdF9ieXRlc190b191bmljb2RlKGQsIGVuY29kaW5nPSd1dGYtOCcsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpOgogICAgJycnIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgZGljdCBrZXlzIGFuZCB2YWx1ZXMgdG8gYnl0ZSBzdHIKCiAgICAgICAgU3BlY2lhbGl6ZWQgZm9yIGpzb24gcmV0dXJuIGJlY2F1c2UgdGhpcyBvbmx5IGhhbmRsZXMsIGxpc3RzLCB0dXBsZXMsCiAgICAgICAgYW5kIGRpY3QgY29udGFpbmVyIHR5cGVzICh0aGUgY29udGFpbmVycyB0aGF0IHRoZSBqc29uIG1vZHVsZSByZXR1cm5zKQogICAgJycnCgogICAgaWYgaXNpbnN0YW5jZShkLCBiaW5hcnlfdHlwZSk6CiAgICAgICAgIyBXYXJuaW5nLCBjYW4gdHJhY2ViYWNrCiAgICAgICAgcmV0dXJuIHRvX3RleHQoZCwgZW5jb2Rpbmc9ZW5jb2RpbmcsIGVycm9ycz1lcnJvcnMpCiAgICBlbGlmIGlzaW5zdGFuY2UoZCwgZGljdCk6CiAgICAgICAgcmV0dXJuIGRpY3QobWFwKGpzb25fZGljdF9ieXRlc190b191bmljb2RlLCBpdGVyaXRlbXMoZCksIHJlcGVhdChlbmNvZGluZyksIHJlcGVhdChlcnJvcnMpKSkKICAgIGVsaWYgaXNpbnN0YW5jZShkLCBsaXN0KToKICAgICAgICByZXR1cm4gbGlzdChtYXAoanNvbl9kaWN0X2J5dGVzX3RvX3VuaWNvZGUsIGQsIHJlcGVhdChlbmNvZGluZyksIHJlcGVhdChlcnJvcnMpKSkKICAgIGVsaWYgaXNpbnN0YW5jZShkLCB0dXBsZSk6CiAgICAgICAgcmV0dXJuIHR1cGxlKG1hcChqc29uX2RpY3RfYnl0ZXNfdG9fdW5pY29kZSwgZCwgcmVwZWF0KGVuY29kaW5nKSwgcmVwZWF0KGVycm9ycykpKQogICAgZWxzZToKICAgICAgICByZXR1cm4gZAoKZGVmIHJldHVybl92YWx1ZXMob2JqKToKICAgICIiIiBSZXR1cm4gbmF0aXZlIHN0cmluZ2lmaWVkIHZhbHVlcyBmcm9tIGRhdGFzdHJ1Y3R1cmVzLgoKICAgIEZvciB1c2Ugd2l0aCByZW1vdmluZyBzZW5zaXRpdmUgdmFsdWVzIHByZS1qc29uaWZpY2F0aW9uLiIiIgogICAgaWYgaXNpbnN0YW5jZShvYmosICh0ZXh0X3R5cGUsIGJpbmFyeV90eXBlKSk6CiAgICAgICAgaWYgb2JqOgogICAgICAgICAgICB5aWVsZCB0b19uYXRpdmUob2JqLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQogICAgICAgIHJldHVybgogICAgZWxpZiBpc2luc3RhbmNlKG9iaiwgU0VRVUVOQ0VUWVBFKToKICAgICAgICBmb3IgZWxlbWVudCBpbiBvYmo6CiAgICAgICAgICAgIGZvciBzdWJlbGVtZW50IGluIHJldHVybl92YWx1ZXMoZWxlbWVudCk6CiAgICAgICAgICAgICAgICB5aWVsZCBzdWJlbGVtZW50CiAgICBlbGlmIGlzaW5zdGFuY2Uob2JqLCBNYXBwaW5nKToKICAgICAgICBmb3IgZWxlbWVudCBpbiBvYmouaXRlbXMoKToKICAgICAgICAgICAgZm9yIHN1YmVsZW1lbnQgaW4gcmV0dXJuX3ZhbHVlcyhlbGVtZW50WzFdKToKICAgICAgICAgICAgICAgIHlpZWxkIHN1YmVsZW1lbnQKICAgIGVsaWYgaXNpbnN0YW5jZShvYmosIChib29sLCBOb25lVHlwZSkpOgogICAgICAgICMgVGhpcyBtdXN0IGNvbWUgYmVmb3JlIGludCBiZWNhdXNlIGJvb2xzIGFyZSBhbHNvIGludHMKICAgICAgICByZXR1cm4KICAgIGVsaWYgaXNpbnN0YW5jZShvYmosIE5VTUJFUlRZUEVTKToKICAgICAgICB5aWVsZCB0b19uYXRpdmUob2JqLCBub25zdHJpbmc9J3NpbXBsZXJlcHInKQogICAgZWxzZToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ1Vua25vd24gcGFyYW1ldGVyIHR5cGU6ICVzLCAlcycgJSAodHlwZShvYmopLCBvYmopKQoKZGVmIHJlbW92ZV92YWx1ZXModmFsdWUsIG5vX2xvZ19zdHJpbmdzKToKICAgICIiIiBSZW1vdmUgc3RyaW5ncyBpbiBub19sb2dfc3RyaW5ncyBmcm9tIHZhbHVlLiAgSWYgdmFsdWUgaXMgYSBjb250YWluZXIKICAgIHR5cGUsIHRoZW4gcmVtb3ZlIGEgbG90IG1vcmUiIiIKICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsICh0ZXh0X3R5cGUsIGJpbmFyeV90eXBlKSk6CiAgICAgICAgIyBOZWVkIG5hdGl2ZSBzdHIgdHlwZQogICAgICAgIG5hdGl2ZV9zdHJfdmFsdWUgPSB2YWx1ZQogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIHRleHRfdHlwZSk6CiAgICAgICAgICAgIHZhbHVlX2lzX3RleHQgPSBUcnVlCiAgICAgICAgICAgIGlmIFBZMjoKICAgICAgICAgICAgICAgIG5hdGl2ZV9zdHJfdmFsdWUgPSB0b19ieXRlcyh2YWx1ZSwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKICAgICAgICBlbGlmIGlzaW5zdGFuY2UodmFsdWUsIGJpbmFyeV90eXBlKToKICAgICAgICAgICAgdmFsdWVfaXNfdGV4dCA9IEZhbHNlCiAgICAgICAgICAgIGlmIFBZMzoKICAgICAgICAgICAgICAgIG5hdGl2ZV9zdHJfdmFsdWUgPSB0b190ZXh0KHZhbHVlLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQoKICAgICAgICBpZiBuYXRpdmVfc3RyX3ZhbHVlIGluIG5vX2xvZ19zdHJpbmdzOgogICAgICAgICAgICByZXR1cm4gJ1ZBTFVFX1NQRUNJRklFRF9JTl9OT19MT0dfUEFSQU1FVEVSJwogICAgICAgIGZvciBvbWl0X21lIGluIG5vX2xvZ19zdHJpbmdzOgogICAgICAgICAgICBuYXRpdmVfc3RyX3ZhbHVlID0gbmF0aXZlX3N0cl92YWx1ZS5yZXBsYWNlKG9taXRfbWUsICcqJyAqIDgpCgogICAgICAgIGlmIHZhbHVlX2lzX3RleHQgYW5kIGlzaW5zdGFuY2UobmF0aXZlX3N0cl92YWx1ZSwgYmluYXJ5X3R5cGUpOgogICAgICAgICAgICB2YWx1ZSA9IHRvX3RleHQobmF0aXZlX3N0cl92YWx1ZSwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9yZXBsYWNlJykKICAgICAgICBlbGlmIG5vdCB2YWx1ZV9pc190ZXh0IGFuZCBpc2luc3RhbmNlKG5hdGl2ZV9zdHJfdmFsdWUsIHRleHRfdHlwZSk6CiAgICAgICAgICAgIHZhbHVlID0gdG9fYnl0ZXMobmF0aXZlX3N0cl92YWx1ZSwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9yZXBsYWNlJykKICAgICAgICBlbHNlOgogICAgICAgICAgICB2YWx1ZSA9IG5hdGl2ZV9zdHJfdmFsdWUKICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgU0VRVUVOQ0VUWVBFKToKICAgICAgICByZXR1cm4gW3JlbW92ZV92YWx1ZXMoZWxlbSwgbm9fbG9nX3N0cmluZ3MpIGZvciBlbGVtIGluIHZhbHVlXQogICAgZWxpZiBpc2luc3RhbmNlKHZhbHVlLCBNYXBwaW5nKToKICAgICAgICByZXR1cm4gZGljdCgoaywgcmVtb3ZlX3ZhbHVlcyh2LCBub19sb2dfc3RyaW5ncykpIGZvciBrLCB2IGluIHZhbHVlLml0ZW1zKCkpCiAgICBlbGlmIGlzaW5zdGFuY2UodmFsdWUsIHR1cGxlKGNoYWluKE5VTUJFUlRZUEVTLCAoYm9vbCwgTm9uZVR5cGUpKSkpOgogICAgICAgIHN0cmluZ3lfdmFsdWUgPSB0b19uYXRpdmUodmFsdWUsIGVuY29kaW5nPSd1dGYtOCcsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgaWYgc3RyaW5neV92YWx1ZSBpbiBub19sb2dfc3RyaW5nczoKICAgICAgICAgICAgcmV0dXJuICdWQUxVRV9TUEVDSUZJRURfSU5fTk9fTE9HX1BBUkFNRVRFUicKICAgICAgICBmb3Igb21pdF9tZSBpbiBub19sb2dfc3RyaW5nczoKICAgICAgICAgICAgaWYgb21pdF9tZSBpbiBzdHJpbmd5X3ZhbHVlOgogICAgICAgICAgICAgICAgcmV0dXJuICdWQUxVRV9TUEVDSUZJRURfSU5fTk9fTE9HX1BBUkFNRVRFUicKICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOgogICAgICAgIHZhbHVlID0gdmFsdWUuaXNvZm9ybWF0KCkKICAgIGVsc2U6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdWYWx1ZSBvZiB1bmtub3duIHR5cGU6ICVzLCAlcycgJSAodHlwZSh2YWx1ZSksIHZhbHVlKSkKICAgIHJldHVybiB2YWx1ZQoKCmRlZiBoZXVyaXN0aWNfbG9nX3Nhbml0aXplKGRhdGEsIG5vX2xvZ192YWx1ZXM9Tm9uZSk6CiAgICAnJycgUmVtb3ZlIHN0cmluZ3MgdGhhdCBsb29rIGxpa2UgcGFzc3dvcmRzIGZyb20gbG9nIG1lc3NhZ2VzICcnJwogICAgIyBDdXJyZW50bHkgZmlsdGVyczoKICAgICMgdXNlcjpwYXNzQGZvby93aGF0ZXZlciBhbmQgaHR0cDovL3VzZXJuYW1lOnBhc3NAd2hlcmV2ZXIvZm9vCiAgICAjIFRoaXMgY29kZSBoYXMgZmFsc2UgcG9zaXRpdmVzIGFuZCBjb25zdW1lcyBwYXJ0cyBvZiBsb2dzIHRoYXQgYXJlCiAgICAjIG5vdCBwYXNzd2RzCgogICAgIyBiZWdpbjogc3RhcnQgb2YgYSBwYXNzd2QgY29udGFpbmluZyBzdHJpbmcKICAgICMgZW5kOiBlbmQgb2YgYSBwYXNzd2QgY29udGFpbmluZyBzdHJpbmcKICAgICMgc2VwOiBjaGFyIGJldHdlZW4gdXNlciBhbmQgcGFzc3dkCiAgICAjIHByZXZfYmVnaW46IHdoZXJlIGluIHRoZSBvdmVyYWxsIHN0cmluZyB0byBzdGFydCBhIHNlYXJjaCBmb3IKICAgICMgICBhIHBhc3N3ZAogICAgIyBzZXBfc2VhcmNoX2VuZDogd2hlcmUgaW4gdGhlIHN0cmluZyB0byBlbmQgYSBzZWFyY2ggZm9yIHRoZSBzZXAKICAgIGRhdGEgPSB0b19uYXRpdmUoZGF0YSkKCiAgICBvdXRwdXQgPSBbXQogICAgYmVnaW4gPSBsZW4oZGF0YSkKICAgIHByZXZfYmVnaW4gPSBiZWdpbgogICAgc2VwID0gMQogICAgd2hpbGUgc2VwOgogICAgICAgICMgRmluZCB0aGUgcG90ZW50aWFsIGVuZCBvZiBhIHBhc3N3ZAogICAgICAgIHRyeToKICAgICAgICAgICAgZW5kID0gZGF0YS5yaW5kZXgoJ0AnLCAwLCBiZWdpbikKICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgIyBObyBwYXNzd2QgaW4gdGhlIHJlc3Qgb2YgdGhlIGRhdGEKICAgICAgICAgICAgb3V0cHV0Lmluc2VydCgwLCBkYXRhWzA6YmVnaW5dKQogICAgICAgICAgICBicmVhawoKICAgICAgICAjIFNlYXJjaCBmb3IgdGhlIGJlZ2lubmluZyBvZiBhIHBhc3N3ZAogICAgICAgIHNlcCA9IE5vbmUKICAgICAgICBzZXBfc2VhcmNoX2VuZCA9IGVuZAogICAgICAgIHdoaWxlIG5vdCBzZXA6CiAgICAgICAgICAgICMgVVJMLXN0eWxlIHVzZXJuYW1lK3Bhc3N3b3JkCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGJlZ2luID0gZGF0YS5yaW5kZXgoJzovLycsIDAsIHNlcF9zZWFyY2hfZW5kKQogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgICAgICMgTm8gdXJsIHN0eWxlIGluIHRoZSBkYXRhLCBjaGVjayBmb3Igc3NoIHN0eWxlIGluIHRoZQogICAgICAgICAgICAgICAgIyByZXN0IG9mIHRoZSBzdHJpbmcKICAgICAgICAgICAgICAgIGJlZ2luID0gMAogICAgICAgICAgICAjIFNlYXJjaCBmb3Igc2VwYXJhdG9yCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlcCA9IGRhdGEuaW5kZXgoJzonLCBiZWdpbiArIDMsIGVuZCkKICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgICAgICAjIE5vIHNlcGFyYXRvcjsgY2hvaWNlczoKICAgICAgICAgICAgICAgIGlmIGJlZ2luID09IDA6CiAgICAgICAgICAgICAgICAgICAgIyBTZWFyY2hlZCB0aGUgd2hvbGUgc3RyaW5nIHNvIHRoZXJlJ3Mgbm8gcGFzc3dvcmQKICAgICAgICAgICAgICAgICAgICAjIGhlcmUuICBSZXR1cm4gdGhlIHJlbWFpbmluZyBkYXRhCiAgICAgICAgICAgICAgICAgICAgb3V0cHV0Lmluc2VydCgwLCBkYXRhWzA6YmVnaW5dKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAjIFNlYXJjaCBmb3IgYSBkaWZmZXJlbnQgYmVnaW5uaW5nIG9mIHRoZSBwYXNzd29yZCBmaWVsZC4KICAgICAgICAgICAgICAgIHNlcF9zZWFyY2hfZW5kID0gYmVnaW4KICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgaWYgc2VwOgogICAgICAgICAgICAjIFBhc3N3b3JkIHdhcyBmb3VuZDsgcmVtb3ZlIGl0LgogICAgICAgICAgICBvdXRwdXQuaW5zZXJ0KDAsIGRhdGFbZW5kOnByZXZfYmVnaW5dKQogICAgICAgICAgICBvdXRwdXQuaW5zZXJ0KDAsICcqKioqKioqKicpCiAgICAgICAgICAgIG91dHB1dC5pbnNlcnQoMCwgZGF0YVtiZWdpbjpzZXAgKyAxXSkKICAgICAgICAgICAgcHJldl9iZWdpbiA9IGJlZ2luCgogICAgb3V0cHV0ID0gJycuam9pbihvdXRwdXQpCiAgICBpZiBub19sb2dfdmFsdWVzOgogICAgICAgIG91dHB1dCA9IHJlbW92ZV92YWx1ZXMob3V0cHV0LCBub19sb2dfdmFsdWVzKQogICAgcmV0dXJuIG91dHB1dAoKZGVmIGJ5dGVzX3RvX2h1bWFuKHNpemUsIGlzYml0cz1GYWxzZSwgdW5pdD1Ob25lKToKCiAgICBiYXNlID0gJ0J5dGVzJwogICAgaWYgaXNiaXRzOgogICAgICAgIGJhc2UgPSAnYml0cycKICAgIHN1ZmZpeCA9ICcnCgogICAgZm9yIHN1ZmZpeCwgbGltaXQgaW4gc29ydGVkKGl0ZXJpdGVtcyhTSVpFX1JBTkdFUyksIGtleT1sYW1iZGEgaXRlbTogLWl0ZW1bMV0pOgogICAgICAgIGlmICh1bml0IGlzIE5vbmUgYW5kIHNpemUgPj0gbGltaXQpIG9yIHVuaXQgaXMgbm90IE5vbmUgYW5kIHVuaXQudXBwZXIoKSA9PSBzdWZmaXhbMF06CiAgICAgICAgICAgIGJyZWFrCgogICAgaWYgbGltaXQgIT0gMToKICAgICAgICBzdWZmaXggKz0gYmFzZVswXQogICAgZWxzZToKICAgICAgICBzdWZmaXggPSBiYXNlCgogICAgcmV0dXJuICclLjJmICVzJyAlIChmbG9hdChzaXplKS8gbGltaXQsIHN1ZmZpeCkKCmRlZiBodW1hbl90b19ieXRlcyhudW1iZXIsIGRlZmF1bHRfdW5pdD1Ob25lLCBpc2JpdHM9RmFsc2UpOgoKICAgICcnJwogICAgQ29udmVydCBudW1iZXIgaW4gc3RyaW5nIGZvcm1hdCBpbnRvIGJ5dGVzIChleDogJzJLJyA9PiAyMDQ4KSBvciB1c2luZyB1bml0IGFyZ3VtZW50CiAgICBleDoKICAgICAgaHVtYW5fdG9fYnl0ZXMoJzEwTScpIDw9PiBodW1hbl90b19ieXRlcygxMCwgJ00nKQogICAgJycnCiAgICBtID0gcmUuc2VhcmNoKCdeXHMqKFxkKlwuP1xkKilccyooW0EtWmEtel0rKT8nLCBzdHIobnVtYmVyKSwgZmxhZ3M9cmUuSUdOT1JFQ0FTRSkKICAgIGlmIG0gaXMgTm9uZToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJodW1hbl90b19ieXRlcygpIGNhbid0IGludGVycHJldCBmb2xsb3dpbmcgc3RyaW5nOiAlcyIgJSBzdHIobnVtYmVyKSkKICAgIHRyeToKICAgICAgICBudW0gPSBmbG9hdChtLmdyb3VwKDEpKQogICAgZXhjZXB0OgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImh1bWFuX3RvX2J5dGVzKCkgY2FuJ3QgaW50ZXJwcmV0IGZvbGxvd2luZyBudW1iZXI6ICVzIChvcmlnaW5hbCBpbnB1dCBzdHJpbmc6ICVzKSIgJSAobS5ncm91cCgxKSwgbnVtYmVyKSkKCiAgICB1bml0ID0gbS5ncm91cCgyKQogICAgaWYgdW5pdCBpcyBOb25lOgogICAgICAgIHVuaXQgPSBkZWZhdWx0X3VuaXQKCiAgICBpZiB1bml0IGlzIE5vbmU6CiAgICAgICAgJycnIE5vIHVuaXQgZ2l2ZW4sIHJldHVybmluZyByYXcgbnVtYmVyICcnJwogICAgICAgIHJldHVybiBpbnQocm91bmQobnVtKSkKICAgIHJhbmdlX2tleSA9IHVuaXRbMF0udXBwZXIoKQogICAgdHJ5OgogICAgICAgIGxpbWl0ID0gU0laRV9SQU5HRVNbcmFuZ2Vfa2V5XQogICAgZXhjZXB0OgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImh1bWFuX3RvX2J5dGVzKCkgZmFpbGVkIHRvIGNvbnZlcnQgJXMgKHVuaXQgPSAlcykuIFRoZSBzdWZmaXggbXVzdCBiZSBvbmUgb2YgJXMiICUgKG51bWJlciwgdW5pdCwgIiwgIi5qb2luKFNJWkVfUkFOR0VTLmtleXMoKSkpKQoKICAgICMgZGVmYXVsdCB2YWx1ZQogICAgdW5pdF9jbGFzcyA9ICdCJwogICAgdW5pdF9jbGFzc19uYW1lID0gJ2J5dGUnCiAgICAjIGhhbmRsaW5nIGJpdHMgY2FzZQogICAgaWYgaXNiaXRzOgogICAgICAgIHVuaXRfY2xhc3MgPSAnYicKICAgICAgICB1bml0X2NsYXNzX25hbWUgPSAnYml0JwogICAgIyBjaGVjayB1bml0IHZhbHVlIGlmIG1vcmUgdGhhbiBvbmUgY2hhcmFjdGVyIChLQiwgTUIpCiAgICBpZiBsZW4odW5pdCkgPiAxOgogICAgICAgIGV4cGVjdF9tZXNzYWdlID0gJ2V4cGVjdCAlcyVzIG9yICVzJyAlIChyYW5nZV9rZXksIHVuaXRfY2xhc3MsIHJhbmdlX2tleSkKICAgICAgICBpZiByYW5nZV9rZXkgPT0gJ0InOgogICAgICAgICAgICBleHBlY3RfbWVzc2FnZSA9ICdleHBlY3QgJXMgb3IgJXMnICUgKHVuaXRfY2xhc3MsIHVuaXRfY2xhc3NfbmFtZSkKCiAgICAgICAgaWYgdW5pdF9jbGFzc19uYW1lIGluIHVuaXQubG93ZXIoKToKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsaWYgdW5pdFsxXSAhPSB1bml0X2NsYXNzOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJodW1hbl90b19ieXRlcygpIGZhaWxlZCB0byBjb252ZXJ0ICVzLiBWYWx1ZSBpcyBub3QgYSB2YWxpZCBzdHJpbmcgKCVzKSIgJSAobnVtYmVyLCBleHBlY3RfbWVzc2FnZSkpCgogICAgcmV0dXJuIGludChyb3VuZChudW0gKiBsaW1pdCkpCgpkZWYgaXNfZXhlY3V0YWJsZShwYXRoKToKICAgICcnJ2lzIHRoZSBnaXZlbiBwYXRoIGV4ZWN1dGFibGU/CgogICAgTGltaXRhdGlvbnM6CiAgICAqIERvZXMgbm90IGFjY291bnQgZm9yIEZTQUNMcy4KICAgICogTW9zdCB0aW1lcyB3ZSByZWFsbHkgd2FudCB0byBrbm93ICJDYW4gdGhlIGN1cnJlbnQgdXNlciBleGVjdXRlIHRoaXMKICAgICAgZmlsZSIgIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgdGVsbCB1cyB0aGF0LCBvbmx5IGlmIGFuIGV4ZWN1dGUgYml0IGlzIHNldC4KICAgICcnJwogICAgIyBUaGVzZSBhcmUgYWxsIGJpdGZpZWxkcyBzbyBmaXJzdCBiaXR3aXNlLW9yIGFsbCB0aGUgcGVybWlzc2lvbnMgd2UncmUKICAgICMgbG9va2luZyBmb3IsIHRoZW4gYml0d2lzZS1hbmQgd2l0aCB0aGUgZmlsZSdzIG1vZGUgdG8gZGV0ZXJtaW5lIGlmIGFueQogICAgIyBleGVjdXRlIGJpdHMgYXJlIHNldC4KICAgIHJldHVybiAoKHN0YXQuU19JWFVTUiB8IHN0YXQuU19JWEdSUCB8IHN0YXQuU19JWE9USCkgJiBvcy5zdGF0KHBhdGgpW3N0YXQuU1RfTU9ERV0pCgpkZWYgX2xvYWRfcGFyYW1zKCk6CiAgICAnJycgcmVhZCB0aGUgbW9kdWxlcyBwYXJhbWV0ZXJzIGFuZCBzdG9yZSB0aGVtIGdsb2JhbGx5LgoKICAgIFRoaXMgZnVuY3Rpb24gbWF5IGJlIG5lZWRlZCBmb3IgY2VydGFpbiB2ZXJ5IGR5bmFtaWMgY3VzdG9tIG1vZHVsZXMgd2hpY2gKICAgIHdhbnQgdG8gcHJvY2VzcyB0aGUgcGFyYW1ldGVycyB0aGF0IGFyZSBiZWluZyBoYW5kZWQgdGhlIG1vZHVsZS4gIFNpbmNlCiAgICB0aGlzIGlzIHNvIGNsb3NlbHkgdGllZCB0byB0aGUgaW1wbGVtZW50YXRpb24gb2YgbW9kdWxlcyB3ZSBjYW5ub3QKICAgIGd1YXJhbnRlZSBBUEkgc3RhYmlsaXR5IGZvciBpdCAoaXQgbWF5IGNoYW5nZSBiZXR3ZWVuIHZlcnNpb25zKSBob3dldmVyIHdlCiAgICB3aWxsIHRyeSBub3QgdG8gYnJlYWsgaXQgZ3JhdHVpdG91c2x5LiAgSXQgaXMgY2VydGFpbmx5IG1vcmUgZnV0dXJlLXByb29mCiAgICB0byBjYWxsIHRoaXMgZnVuY3Rpb24gYW5kIGNvbnN1bWUgaXRzIG91dHB1dHMgdGhhbiB0byBpbXBsZW1lbnQgdGhlIGxvZ2ljCiAgICBpbnNpZGUgaXQgYXMgYSBjb3B5IGluIHlvdXIgb3duIGNvZGUuCiAgICAnJycKICAgIGdsb2JhbCBfQU5TSUJMRV9BUkdTCiAgICBpZiBfQU5TSUJMRV9BUkdTIGlzIG5vdCBOb25lOgogICAgICAgIGJ1ZmZlciA9IF9BTlNJQkxFX0FSR1MKICAgIGVsc2U6CiAgICAgICAgIyBkZWJ1ZyBvdmVycmlkZXMgdG8gcmVhZCBhcmdzIGZyb20gZmlsZSBvciBjbWRsaW5lCgogICAgICAgICMgQXZvaWQgdHJhY2ViYWNrcyB3aGVuIGxvY2FsZSBpcyBub24tdXRmOAogICAgICAgICMgV2UgY29udHJvbCB0aGUgYXJncyBhbmQgd2UgcGFzcyB0aGVtIGFzIHV0ZjgKICAgICAgICBpZiBsZW4oc3lzLmFyZ3YpID4gMToKICAgICAgICAgICAgaWYgb3MucGF0aC5pc2ZpbGUoc3lzLmFyZ3ZbMV0pOgogICAgICAgICAgICAgICAgZmQgPSBvcGVuKHN5cy5hcmd2WzFdLCAncmInKQogICAgICAgICAgICAgICAgYnVmZmVyID0gZmQucmVhZCgpCiAgICAgICAgICAgICAgICBmZC5jbG9zZSgpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBidWZmZXIgPSBzeXMuYXJndlsxXQogICAgICAgICAgICAgICAgaWYgUFkzOgogICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5lbmNvZGUoJ3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVlc2NhcGUnKQogICAgICAgICMgZGVmYXVsdCBjYXNlLCByZWFkIGZyb20gc3RkaW4KICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBQWTI6CiAgICAgICAgICAgICAgICBidWZmZXIgPSBzeXMuc3RkaW4ucmVhZCgpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBidWZmZXIgPSBzeXMuc3RkaW4uYnVmZmVyLnJlYWQoKQogICAgICAgIF9BTlNJQkxFX0FSR1MgPSBidWZmZXIKCiAgICB0cnk6CiAgICAgICAgcGFyYW1zID0ganNvbi5sb2FkcyhidWZmZXIuZGVjb2RlKCd1dGYtOCcpKQogICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgIyBUaGlzIGhlbHBlciB1c2VkIHRvbyBlYXJseSBmb3IgZmFpbF9qc29uIHRvIHdvcmsuCiAgICAgICAgcHJpbnQoJ1xueyJtc2ciOiAiRXJyb3I6IE1vZHVsZSB1bmFibGUgdG8gZGVjb2RlIHZhbGlkIEpTT04gb24gc3RkaW4uICBVbmFibGUgdG8gZmlndXJlIG91dCB3aGF0IHBhcmFtZXRlcnMgd2VyZSBwYXNzZWQiLCAiZmFpbGVkIjogdHJ1ZX0nKQogICAgICAgIHN5cy5leGl0KDEpCgogICAgaWYgUFkyOgogICAgICAgIHBhcmFtcyA9IGpzb25fZGljdF91bmljb2RlX3RvX2J5dGVzKHBhcmFtcykKCiAgICB0cnk6CiAgICAgICAgcmV0dXJuIHBhcmFtc1snQU5TSUJMRV9NT0RVTEVfQVJHUyddCiAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgIyBUaGlzIGhlbHBlciBkb2VzIG5vdCBoYXZlIGFjY2VzcyB0byBmYWlsX2pzb24gc28gd2UgaGF2ZSB0byBwcmludAogICAgICAgICMganNvbiBvdXRwdXQgb24gb3VyIG93bi4KICAgICAgICBwcmludCgnXG57Im1zZyI6ICJFcnJvcjogTW9kdWxlIHVuYWJsZSB0byBsb2NhdGUgQU5TSUJMRV9NT0RVTEVfQVJHUyBpbiBqc29uIGRhdGEgZnJvbSBzdGRpbi4gIFVuYWJsZSB0byBmaWd1cmUgb3V0IHdoYXQgcGFyYW1ldGVycyB3ZXJlIHBhc3NlZCIsICcKICAgICAgICAgICAgICAnImZhaWxlZCI6IHRydWV9JykKICAgICAgICBzeXMuZXhpdCgxKQoKZGVmIGVudl9mYWxsYmFjaygqYXJncywgKiprd2FyZ3MpOgogICAgJycnIExvYWQgdmFsdWUgZnJvbSBlbnZpcm9ubWVudCAnJycKICAgIGZvciBhcmcgaW4gYXJnczoKICAgICAgICBpZiBhcmcgaW4gb3MuZW52aXJvbjoKICAgICAgICAgICAgcmV0dXJuIG9zLmVudmlyb25bYXJnXQogICAgZWxzZToKICAgICAgICByYWlzZSBBbnNpYmxlRmFsbGJhY2tOb3RGb3VuZAoKZGVmIF9sZW5pZW50X2xvd2VyY2FzZShsc3QpOgogICAgIiIiTG93ZXJjYXNlIGVsZW1lbnRzIG9mIGEgbGlzdC4KCiAgICBJZiBhbiBlbGVtZW50IGlzIG5vdCBhIHN0cmluZywgcGFzcyBpdCB0aHJvdWdoIHVudG91Y2hlZC4KICAgICIiIgogICAgbG93ZXJlZCA9IFtdCiAgICBmb3IgdmFsdWUgaW4gbHN0OgogICAgICAgIHRyeToKICAgICAgICAgICAgbG93ZXJlZC5hcHBlbmQodmFsdWUubG93ZXIoKSkKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIGxvd2VyZWQuYXBwZW5kKHZhbHVlKQogICAgcmV0dXJuIGxvd2VyZWQKCmRlZiBmb3JtYXRfYXR0cmlidXRlcyhhdHRyaWJ1dGVzKToKICAgIGF0dHJpYnV0ZV9saXN0ID0gW10KICAgIGZvciBhdHRyIGluIGF0dHJpYnV0ZXM6CiAgICAgICAgaWYgYXR0ciBpbiBGSUxFX0FUVFJJQlVURVM6CiAgICAgICAgICAgIGF0dHJpYnV0ZV9saXN0LmFwcGVuZChGSUxFX0FUVFJJQlVURVNbYXR0cl0pCiAgICByZXR1cm4gYXR0cmlidXRlX2xpc3QKCmRlZiBnZXRfZmxhZ3NfZnJvbV9hdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpOgogICAgZmxhZ3MgPSBbXQogICAgZm9yIGtleSxhdHRyIGluIEZJTEVfQVRUUklCVVRFUy5pdGVtcygpOgogICAgICAgIGlmIGF0dHIgaW4gYXR0cmlidXRlczoKICAgICAgICAgICAgZmxhZ3MuYXBwZW5kKGtleSkKICAgIHJldHVybiAnJy5qb2luKGZsYWdzKQoKY2xhc3MgQW5zaWJsZUZhbGxiYWNrTm90Rm91bmQoRXhjZXB0aW9uKToKICAgIHBhc3MKCgpjbGFzcyBBbnNpYmxlTW9kdWxlKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgYXJndW1lbnRfc3BlYywgYnlwYXNzX2NoZWNrcz1GYWxzZSwgbm9fbG9nPUZhbHNlLAogICAgICAgICAgICAgICAgIGNoZWNrX2ludmFsaWRfYXJndW1lbnRzPVRydWUsIG11dHVhbGx5X2V4Y2x1c2l2ZT1Ob25lLCByZXF1aXJlZF90b2dldGhlcj1Ob25lLAogICAgICAgICAgICAgICAgIHJlcXVpcmVkX29uZV9vZj1Ob25lLCBhZGRfZmlsZV9jb21tb25fYXJncz1GYWxzZSwgc3VwcG9ydHNfY2hlY2tfbW9kZT1GYWxzZSwKICAgICAgICAgICAgICAgICByZXF1aXJlZF9pZj1Ob25lKToKCiAgICAgICAgJycnCiAgICAgICAgY29tbW9uIGNvZGUgZm9yIHF1aWNrbHkgYnVpbGRpbmcgYW4gYW5zaWJsZSBtb2R1bGUgaW4gUHl0aG9uCiAgICAgICAgKGFsdGhvdWdoIHlvdSBjYW4gd3JpdGUgbW9kdWxlcyBpbiBhbnl0aGluZyB0aGF0IGNhbiByZXR1cm4gSlNPTikKICAgICAgICBzZWUgbGlicmFyeS8qIGZvciBleGFtcGxlcwogICAgICAgICcnJwoKICAgICAgICBzZWxmLl9uYW1lID0gb3MucGF0aC5iYXNlbmFtZShfX2ZpbGVfXykgI2luaXRpYWxpemUgbmFtZSB1bnRpbCB3ZSBjYW4gcGFyc2UgZnJvbSBvcHRpb25zCiAgICAgICAgc2VsZi5hcmd1bWVudF9zcGVjID0gYXJndW1lbnRfc3BlYwogICAgICAgIHNlbGYuc3VwcG9ydHNfY2hlY2tfbW9kZSA9IHN1cHBvcnRzX2NoZWNrX21vZGUKICAgICAgICBzZWxmLmNoZWNrX21vZGUgPSBGYWxzZQogICAgICAgIHNlbGYubm9fbG9nID0gbm9fbG9nCiAgICAgICAgc2VsZi5jbGVhbnVwX2ZpbGVzID0gW10KICAgICAgICBzZWxmLl9kZWJ1ZyA9IEZhbHNlCiAgICAgICAgc2VsZi5fZGlmZiA9IEZhbHNlCiAgICAgICAgc2VsZi5fc29ja2V0X3BhdGggPSBOb25lCiAgICAgICAgc2VsZi5fdmVyYm9zaXR5ID0gMAogICAgICAgICMgTWF5IGJlIHVzZWQgdG8gc2V0IG1vZGlmaWNhdGlvbnMgdG8gdGhlIGVudmlyb25tZW50IGZvciBhbnkKICAgICAgICAjIHJ1bl9jb21tYW5kIGludm9jYXRpb24KICAgICAgICBzZWxmLnJ1bl9jb21tYW5kX2Vudmlyb25fdXBkYXRlID0ge30KICAgICAgICBzZWxmLl93YXJuaW5ncyA9IFtdCiAgICAgICAgc2VsZi5fZGVwcmVjYXRpb25zID0gW10KCiAgICAgICAgc2VsZi5hbGlhc2VzID0ge30KICAgICAgICBzZWxmLl9sZWdhbF9pbnB1dHMgPSBbJ19hbnNpYmxlX2NoZWNrX21vZGUnLCAnX2Fuc2libGVfbm9fbG9nJywgJ19hbnNpYmxlX2RlYnVnJywgJ19hbnNpYmxlX2RpZmYnLCAnX2Fuc2libGVfdmVyYm9zaXR5JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ19hbnNpYmxlX3NlbGludXhfc3BlY2lhbF9mcycsICdfYW5zaWJsZV9tb2R1bGVfbmFtZScsICdfYW5zaWJsZV92ZXJzaW9uJywgJ19hbnNpYmxlX3N5c2xvZ19mYWNpbGl0eScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdfYW5zaWJsZV9zb2NrZXQnXQoKICAgICAgICBpZiBhZGRfZmlsZV9jb21tb25fYXJnczoKICAgICAgICAgICAgZm9yIGssIHYgaW4gRklMRV9DT01NT05fQVJHVU1FTlRTLml0ZW1zKCk6CiAgICAgICAgICAgICAgICBpZiBrIG5vdCBpbiBzZWxmLmFyZ3VtZW50X3NwZWM6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5hcmd1bWVudF9zcGVjW2tdID0gdgoKICAgICAgICBzZWxmLl9sb2FkX3BhcmFtcygpCiAgICAgICAgc2VsZi5fc2V0X2ZhbGxiYWNrcygpCgogICAgICAgICMgYXBwZW5kIHRvIGxlZ2FsX2lucHV0cyBhbmQgdGhlbiBwb3NzaWJseSBjaGVjayBhZ2FpbnN0IHRoZW0KICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYuYWxpYXNlcyA9IHNlbGYuX2hhbmRsZV9hbGlhc2VzKCkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICMgVXNlIGV4Y2VwdGlvbnMgaGVyZSBiZWNhdXNlIGl0IGlzbid0IHNhZmUgdG8gY2FsbCBmYWlsX2pzb24gdW50aWwgbm9fbG9nIGlzIHByb2Nlc3NlZAogICAgICAgICAgICBwcmludCgnXG57ImZhaWxlZCI6IHRydWUsICJtc2ciOiAiTW9kdWxlIGFsaWFzIGVycm9yOiAlcyJ9JyAlIHN0cihlKSkKICAgICAgICAgICAgc3lzLmV4aXQoMSkKCiAgICAgICAgIyBTYXZlIHBhcmFtZXRlciB2YWx1ZXMgdGhhdCBzaG91bGQgbmV2ZXIgYmUgbG9nZ2VkCiAgICAgICAgc2VsZi5ub19sb2dfdmFsdWVzID0gc2V0KCkKICAgICAgICAjIFVzZSB0aGUgYXJnc3BlYyB0byBkZXRlcm1pbmUgd2hpY2ggYXJncyBhcmUgbm9fbG9nCiAgICAgICAgZm9yIGFyZ19uYW1lLCBhcmdfb3B0cyBpbiBzZWxmLmFyZ3VtZW50X3NwZWMuaXRlbXMoKToKICAgICAgICAgICAgaWYgYXJnX29wdHMuZ2V0KCdub19sb2cnLCBGYWxzZSk6CiAgICAgICAgICAgICAgICAjIEZpbmQgdGhlIHZhbHVlIGZvciB0aGUgbm9fbG9nJ2QgcGFyYW0KICAgICAgICAgICAgICAgIG5vX2xvZ19vYmplY3QgPSBzZWxmLnBhcmFtcy5nZXQoYXJnX25hbWUsIE5vbmUpCiAgICAgICAgICAgICAgICBpZiBub19sb2dfb2JqZWN0OgogICAgICAgICAgICAgICAgICAgIHNlbGYubm9fbG9nX3ZhbHVlcy51cGRhdGUocmV0dXJuX3ZhbHVlcyhub19sb2dfb2JqZWN0KSkKCiAgICAgICAgICAgIGlmIGFyZ19vcHRzLmdldCgncmVtb3ZlZF9pbl92ZXJzaW9uJykgaXMgbm90IE5vbmUgYW5kIGFyZ19uYW1lIGluIHNlbGYucGFyYW1zOgogICAgICAgICAgICAgICAgc2VsZi5fZGVwcmVjYXRpb25zLmFwcGVuZCh7CiAgICAgICAgICAgICAgICAgICAgJ21zZyc6ICJQYXJhbSAnJXMnIGlzIGRlcHJlY2F0ZWQuIFNlZSB0aGUgbW9kdWxlIGRvY3MgZm9yIG1vcmUgaW5mb3JtYXRpb24iICUgYXJnX25hbWUsCiAgICAgICAgICAgICAgICAgICAgJ3ZlcnNpb24nOiBhcmdfb3B0cy5nZXQoJ3JlbW92ZWRfaW5fdmVyc2lvbicpCiAgICAgICAgICAgICAgICB9KQoKICAgICAgICAjIGNoZWNrIHRoZSBsb2NhbGUgYXMgc2V0IGJ5IHRoZSBjdXJyZW50IGVudmlyb25tZW50LCBhbmQgcmVzZXQgdG8KICAgICAgICAjIGEga25vd24gdmFsaWQgKExBTkc9QykgaWYgaXQncyBhbiBpbnZhbGlkL3VuYXZhaWxhYmxlIGxvY2FsZQogICAgICAgIHNlbGYuX2NoZWNrX2xvY2FsZSgpCgogICAgICAgIHNlbGYuX2NoZWNrX2FyZ3VtZW50cyhjaGVja19pbnZhbGlkX2FyZ3VtZW50cykKCiAgICAgICAgIyBjaGVjayBleGNsdXNpdmUgZWFybHkKICAgICAgICBpZiBub3QgYnlwYXNzX2NoZWNrczoKICAgICAgICAgICAgc2VsZi5fY2hlY2tfbXV0dWFsbHlfZXhjbHVzaXZlKG11dHVhbGx5X2V4Y2x1c2l2ZSkKCiAgICAgICAgc2VsZi5fc2V0X2RlZmF1bHRzKHByZT1UcnVlKQoKICAgICAgICBzZWxmLl9DSEVDS19BUkdVTUVOVF9UWVBFU19ESVNQQVRDSEVSID0gewogICAgICAgICAgICAnc3RyJzogc2VsZi5fY2hlY2tfdHlwZV9zdHIsCiAgICAgICAgICAgICdsaXN0Jzogc2VsZi5fY2hlY2tfdHlwZV9saXN0LAogICAgICAgICAgICAnZGljdCc6IHNlbGYuX2NoZWNrX3R5cGVfZGljdCwKICAgICAgICAgICAgJ2Jvb2wnOiBzZWxmLl9jaGVja190eXBlX2Jvb2wsCiAgICAgICAgICAgICdpbnQnOiBzZWxmLl9jaGVja190eXBlX2ludCwKICAgICAgICAgICAgJ2Zsb2F0Jzogc2VsZi5fY2hlY2tfdHlwZV9mbG9hdCwKICAgICAgICAgICAgJ3BhdGgnOiBzZWxmLl9jaGVja190eXBlX3BhdGgsCiAgICAgICAgICAgICdyYXcnOiBzZWxmLl9jaGVja190eXBlX3JhdywKICAgICAgICAgICAgJ2pzb25hcmcnOiBzZWxmLl9jaGVja190eXBlX2pzb25hcmcsCiAgICAgICAgICAgICdqc29uJzogc2VsZi5fY2hlY2tfdHlwZV9qc29uYXJnLAogICAgICAgICAgICAnYnl0ZXMnOiBzZWxmLl9jaGVja190eXBlX2J5dGVzLAogICAgICAgICAgICAnYml0cyc6IHNlbGYuX2NoZWNrX3R5cGVfYml0cywKICAgICAgICB9CiAgICAgICAgaWYgbm90IGJ5cGFzc19jaGVja3M6CiAgICAgICAgICAgIHNlbGYuX2NoZWNrX3JlcXVpcmVkX2FyZ3VtZW50cygpCiAgICAgICAgICAgIHNlbGYuX2NoZWNrX2FyZ3VtZW50X3R5cGVzKCkKICAgICAgICAgICAgc2VsZi5fY2hlY2tfYXJndW1lbnRfdmFsdWVzKCkKICAgICAgICAgICAgc2VsZi5fY2hlY2tfcmVxdWlyZWRfdG9nZXRoZXIocmVxdWlyZWRfdG9nZXRoZXIpCiAgICAgICAgICAgIHNlbGYuX2NoZWNrX3JlcXVpcmVkX29uZV9vZihyZXF1aXJlZF9vbmVfb2YpCiAgICAgICAgICAgIHNlbGYuX2NoZWNrX3JlcXVpcmVkX2lmKHJlcXVpcmVkX2lmKQoKICAgICAgICBzZWxmLl9zZXRfZGVmYXVsdHMocHJlPUZhbHNlKQoKICAgICAgICBpZiBub3Qgc2VsZi5ub19sb2c6CiAgICAgICAgICAgIHNlbGYuX2xvZ19pbnZvY2F0aW9uKCkKCiAgICAgICAgIyBmaW5hbGx5LCBtYWtlIHN1cmUgd2UncmUgaW4gYSBzYW5lIHdvcmtpbmcgZGlyCiAgICAgICAgc2VsZi5fc2V0X2N3ZCgpCgogICAgZGVmIHdhcm4oc2VsZiwgd2FybmluZyk6CgogICAgICAgIGlmIGlzaW5zdGFuY2Uod2FybmluZywgc3RyaW5nX3R5cGVzKToKICAgICAgICAgICAgc2VsZi5fd2FybmluZ3MuYXBwZW5kKHdhcm5pbmcpCiAgICAgICAgICAgIHNlbGYubG9nKCdbV0FSTklOR10gJXMnICUgd2FybmluZykKICAgICAgICBlbHNlOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoIndhcm4gcmVxdWlyZXMgYSBzdHJpbmcgbm90IGEgJXMiICUgdHlwZSh3YXJuaW5nKSkKCiAgICBkZWYgZGVwcmVjYXRlKHNlbGYsIG1zZywgdmVyc2lvbj1Ob25lKToKICAgICAgICBpZiBpc2luc3RhbmNlKG1zZywgc3RyaW5nX3R5cGVzKToKICAgICAgICAgICAgc2VsZi5fZGVwcmVjYXRpb25zLmFwcGVuZCh7CiAgICAgICAgICAgICAgICAnbXNnJzogbXNnLAogICAgICAgICAgICAgICAgJ3ZlcnNpb24nOiB2ZXJzaW9uCiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIHNlbGYubG9nKCdbREVQUkVDQVRJT04gV0FSTklOR10gJXMgJXMnICUgKG1zZywgdmVyc2lvbikpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJkZXByZWNhdGUgcmVxdWlyZXMgYSBzdHJpbmcgbm90IGEgJXMiICUgdHlwZShtc2cpKQoKICAgIGRlZiBsb2FkX2ZpbGVfY29tbW9uX2FyZ3VtZW50cyhzZWxmLCBwYXJhbXMpOgogICAgICAgICcnJwogICAgICAgIG1hbnkgbW9kdWxlcyBkZWFsIHdpdGggZmlsZXMsIHRoaXMgZW5jYXBzdWxhdGVzIGNvbW1vbgogICAgICAgIG9wdGlvbnMgdGhhdCB0aGUgZmlsZSBtb2R1bGUgYWNjZXB0cyBzdWNoIHRoYXQgaXQgaXMgZGlyZWN0bHkKICAgICAgICBhdmFpbGFibGUgdG8gYWxsIG1vZHVsZXMgYW5kIHRoZXkgY2FuIHNoYXJlIGNvZGUuCiAgICAgICAgJycnCgogICAgICAgIHBhdGggPSBwYXJhbXMuZ2V0KCdwYXRoJywgcGFyYW1zLmdldCgnZGVzdCcsIE5vbmUpKQogICAgICAgIGlmIHBhdGggaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIHt9CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcGF0aCA9IG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnMocGF0aCkpCgogICAgICAgIGJfcGF0aCA9IHRvX2J5dGVzKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgIyBpZiB0aGUgcGF0aCBpcyBhIHN5bWxpbmssIGFuZCB3ZSdyZSBmb2xsb3dpbmcgbGlua3MsIGdldAogICAgICAgICMgdGhlIHRhcmdldCBvZiB0aGUgbGluayBpbnN0ZWFkIGZvciB0ZXN0aW5nCiAgICAgICAgaWYgcGFyYW1zLmdldCgnZm9sbG93JywgRmFsc2UpIGFuZCBvcy5wYXRoLmlzbGluayhiX3BhdGgpOgogICAgICAgICAgICBiX3BhdGggPSBvcy5wYXRoLnJlYWxwYXRoKGJfcGF0aCkKICAgICAgICAgICAgcGF0aCA9IHRvX25hdGl2ZShiX3BhdGgpCgogICAgICAgIG1vZGUgICA9IHBhcmFtcy5nZXQoJ21vZGUnLCBOb25lKQogICAgICAgIG93bmVyICA9IHBhcmFtcy5nZXQoJ293bmVyJywgTm9uZSkKICAgICAgICBncm91cCAgPSBwYXJhbXMuZ2V0KCdncm91cCcsIE5vbmUpCgogICAgICAgICMgc2VsaW51eCByZWxhdGVkIG9wdGlvbnMKICAgICAgICBzZXVzZXIgICAgPSBwYXJhbXMuZ2V0KCdzZXVzZXInLCBOb25lKQogICAgICAgIHNlcm9sZSAgICA9IHBhcmFtcy5nZXQoJ3Nlcm9sZScsIE5vbmUpCiAgICAgICAgc2V0eXBlICAgID0gcGFyYW1zLmdldCgnc2V0eXBlJywgTm9uZSkKICAgICAgICBzZWxldmVsICAgPSBwYXJhbXMuZ2V0KCdzZWxldmVsJywgTm9uZSkKICAgICAgICBzZWNvbnRleHQgPSBbc2V1c2VyLCBzZXJvbGUsIHNldHlwZV0KCiAgICAgICAgaWYgc2VsZi5zZWxpbnV4X21sc19lbmFibGVkKCk6CiAgICAgICAgICAgIHNlY29udGV4dC5hcHBlbmQoc2VsZXZlbCkKCiAgICAgICAgZGVmYXVsdF9zZWNvbnRleHQgPSBzZWxmLnNlbGludXhfZGVmYXVsdF9jb250ZXh0KHBhdGgpCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKGRlZmF1bHRfc2Vjb250ZXh0KSk6CiAgICAgICAgICAgIGlmIGkgaXMgbm90IE5vbmUgYW5kIHNlY29udGV4dFtpXSA9PSAnX2RlZmF1bHQnOgogICAgICAgICAgICAgICAgc2Vjb250ZXh0W2ldID0gZGVmYXVsdF9zZWNvbnRleHRbaV0KCiAgICAgICAgYXR0cmlidXRlcyA9IHBhcmFtcy5nZXQoJ2F0dHJpYnV0ZXMnLCBOb25lKQogICAgICAgIHJldHVybiBkaWN0KAogICAgICAgICAgICBwYXRoPXBhdGgsIG1vZGU9bW9kZSwgb3duZXI9b3duZXIsIGdyb3VwPWdyb3VwLAogICAgICAgICAgICBzZXVzZXI9c2V1c2VyLCBzZXJvbGU9c2Vyb2xlLCBzZXR5cGU9c2V0eXBlLAogICAgICAgICAgICBzZWxldmVsPXNlbGV2ZWwsIHNlY29udGV4dD1zZWNvbnRleHQsIGF0dHJpYnV0ZXM9YXR0cmlidXRlcywKICAgICAgICApCgoKICAgICMgRGV0ZWN0IHdoZXRoZXIgdXNpbmcgc2VsaW51eCB0aGF0IGlzIE1MUy1hd2FyZS4KICAgICMgV2hpbGUgdGhpcyBtZWFucyB5b3UgY2FuIHNldCB0aGUgbGV2ZWwvcmFuZ2Ugd2l0aAogICAgIyBzZWxpbnV4LmxzZXRmaWxlY29uKCksIGl0IG1heSBvciBtYXkgbm90IG1lYW4gdGhhdCB5b3UKICAgICMgd2lsbCBnZXQgdGhlIHNlbGV2ZWwgYXMgcGFydCBvZiB0aGUgY29udGV4dCByZXR1cm5lZAogICAgIyBieSBzZWxpbnV4LmxnZXRmaWxlY29uKCkuCgogICAgZGVmIHNlbGludXhfbWxzX2VuYWJsZWQoc2VsZik6CiAgICAgICAgaWYgbm90IEhBVkVfU0VMSU5VWDoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgaWYgc2VsaW51eC5pc19zZWxpbnV4X21sc19lbmFibGVkKCkgPT0gMToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgc2VsaW51eF9lbmFibGVkKHNlbGYpOgogICAgICAgIGlmIG5vdCBIQVZFX1NFTElOVVg6CiAgICAgICAgICAgIHNlZW5hYmxlZCA9IHNlbGYuZ2V0X2Jpbl9wYXRoKCdzZWxpbnV4ZW5hYmxlZCcpCiAgICAgICAgICAgIGlmIHNlZW5hYmxlZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIChyYyxvdXQsZXJyKSA9IHNlbGYucnVuX2NvbW1hbmQoc2VlbmFibGVkKQogICAgICAgICAgICAgICAgaWYgcmMgPT0gMDoKICAgICAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9IkFib3J0aW5nLCB0YXJnZXQgdXNlcyBzZWxpbnV4IGJ1dCBweXRob24gYmluZGluZ3MgKGxpYnNlbGludXgtcHl0aG9uKSBhcmVuJ3QgaW5zdGFsbGVkISIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIGlmIHNlbGludXguaXNfc2VsaW51eF9lbmFibGVkKCkgPT0gMToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAjIERldGVybWluZSB3aGV0aGVyIHdlIG5lZWQgYSBwbGFjZWhvbGRlciBmb3Igc2VsZXZlbC9tbHMKICAgIGRlZiBzZWxpbnV4X2luaXRpYWxfY29udGV4dChzZWxmKToKICAgICAgICBjb250ZXh0ID0gW05vbmUsIE5vbmUsIE5vbmVdCiAgICAgICAgaWYgc2VsZi5zZWxpbnV4X21sc19lbmFibGVkKCk6CiAgICAgICAgICAgIGNvbnRleHQuYXBwZW5kKE5vbmUpCiAgICAgICAgcmV0dXJuIGNvbnRleHQKCiAgICAjIElmIHNlbGludXggZmFpbHMgdG8gZmluZCBhIGRlZmF1bHQsIHJldHVybiBhbiBhcnJheSBvZiBOb25lCiAgICBkZWYgc2VsaW51eF9kZWZhdWx0X2NvbnRleHQoc2VsZiwgcGF0aCwgbW9kZT0wKToKICAgICAgICBjb250ZXh0ID0gc2VsZi5zZWxpbnV4X2luaXRpYWxfY29udGV4dCgpCiAgICAgICAgaWYgbm90IEhBVkVfU0VMSU5VWCBvciBub3Qgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldCA9IHNlbGludXgubWF0Y2hwYXRoY29uKHRvX25hdGl2ZShwYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKSwgbW9kZSkKICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQKICAgICAgICBpZiByZXRbMF0gPT0gLTE6CiAgICAgICAgICAgIHJldHVybiBjb250ZXh0CiAgICAgICAgIyBMaW1pdCBzcGxpdCB0byA0IGJlY2F1c2UgdGhlIHNlbGV2ZWwsIHRoZSBsYXN0IGluIHRoZSBsaXN0LAogICAgICAgICMgbWF5IGNvbnRhaW4gJzonIGNoYXJhY3RlcnMKICAgICAgICBjb250ZXh0ID0gcmV0WzFdLnNwbGl0KCc6JywgMykKICAgICAgICByZXR1cm4gY29udGV4dAoKICAgIGRlZiBzZWxpbnV4X2NvbnRleHQoc2VsZiwgcGF0aCk6CiAgICAgICAgY29udGV4dCA9IHNlbGYuc2VsaW51eF9pbml0aWFsX2NvbnRleHQoKQogICAgICAgIGlmIG5vdCBIQVZFX1NFTElOVVggb3Igbm90IHNlbGYuc2VsaW51eF9lbmFibGVkKCk6CiAgICAgICAgICAgIHJldHVybiBjb250ZXh0CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXQgPSBzZWxpbnV4LmxnZXRmaWxlY29uX3Jhdyh0b19uYXRpdmUocGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykpCiAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgaWYgZS5lcnJubyA9PSBlcnJuby5FTk9FTlQ6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0ncGF0aCAlcyBkb2VzIG5vdCBleGlzdCcgJSBwYXRoKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocGF0aD1wYXRoLCBtc2c9J2ZhaWxlZCB0byByZXRyaWV2ZSBzZWxpbnV4IGNvbnRleHQnKQogICAgICAgIGlmIHJldFswXSA9PSAtMToKICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQKICAgICAgICAjIExpbWl0IHNwbGl0IHRvIDQgYmVjYXVzZSB0aGUgc2VsZXZlbCwgdGhlIGxhc3QgaW4gdGhlIGxpc3QsCiAgICAgICAgIyBtYXkgY29udGFpbiAnOicgY2hhcmFjdGVycwogICAgICAgIGNvbnRleHQgPSByZXRbMV0uc3BsaXQoJzonLCAzKQogICAgICAgIHJldHVybiBjb250ZXh0CgogICAgZGVmIHVzZXJfYW5kX2dyb3VwKHNlbGYsIHBhdGgsIGV4cGFuZD1UcnVlKToKICAgICAgICBiX3BhdGggPSB0b19ieXRlcyhwYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3N0cmljdCcpCiAgICAgICAgaWYgZXhwYW5kOgogICAgICAgICAgICBiX3BhdGggPSBvcy5wYXRoLmV4cGFuZHVzZXIob3MucGF0aC5leHBhbmR2YXJzKGJfcGF0aCkpCiAgICAgICAgc3QgPSBvcy5sc3RhdChiX3BhdGgpCiAgICAgICAgdWlkID0gc3Quc3RfdWlkCiAgICAgICAgZ2lkID0gc3Quc3RfZ2lkCiAgICAgICAgcmV0dXJuICh1aWQsIGdpZCkKCiAgICBkZWYgZmluZF9tb3VudF9wb2ludChzZWxmLCBwYXRoKToKICAgICAgICBwYXRoX2lzX2J5dGVzID0gRmFsc2UKICAgICAgICBpZiBpc2luc3RhbmNlKHBhdGgsIGJpbmFyeV90eXBlKToKICAgICAgICAgICAgcGF0aF9pc19ieXRlcyA9IFRydWUKCiAgICAgICAgYl9wYXRoID0gb3MucGF0aC5yZWFscGF0aCh0b19ieXRlcyhvcy5wYXRoLmV4cGFuZHVzZXIob3MucGF0aC5leHBhbmR2YXJzKHBhdGgpKSwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykpCiAgICAgICAgd2hpbGUgbm90IG9zLnBhdGguaXNtb3VudChiX3BhdGgpOgogICAgICAgICAgICBiX3BhdGggPSBvcy5wYXRoLmRpcm5hbWUoYl9wYXRoKQoKICAgICAgICBpZiBwYXRoX2lzX2J5dGVzOgogICAgICAgICAgICByZXR1cm4gYl9wYXRoCgogICAgICAgIHJldHVybiB0b190ZXh0KGJfcGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKCiAgICBkZWYgaXNfc3BlY2lhbF9zZWxpbnV4X3BhdGgoc2VsZiwgcGF0aCk6CiAgICAgICAgIiIiCiAgICAgICAgUmV0dXJucyBhIHR1cGxlIGNvbnRhaW5pbmcgKFRydWUsIHNlbGludXhfY29udGV4dCkgaWYgdGhlIGdpdmVuIHBhdGggaXMgb24gYQogICAgICAgIE5GUyBvciBvdGhlciAnc3BlY2lhbCcgZnMgIG1vdW50IHBvaW50LCBvdGhlcndpc2UgdGhlIHJldHVybiB3aWxsIGJlIChGYWxzZSwgTm9uZSkuCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBmID0gb3BlbignL3Byb2MvbW91bnRzJywgJ3InKQogICAgICAgICAgICBtb3VudF9kYXRhID0gZi5yZWFkbGluZXMoKQogICAgICAgICAgICBmLmNsb3NlKCkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHJldHVybiAoRmFsc2UsIE5vbmUpCiAgICAgICAgcGF0aF9tb3VudF9wb2ludCA9IHNlbGYuZmluZF9tb3VudF9wb2ludChwYXRoKQogICAgICAgIGZvciBsaW5lIGluIG1vdW50X2RhdGE6CiAgICAgICAgICAgIChkZXZpY2UsIG1vdW50X3BvaW50LCBmc3R5cGUsIG9wdGlvbnMsIHJlc3QpID0gbGluZS5zcGxpdCgnICcsIDQpCgogICAgICAgICAgICBpZiBwYXRoX21vdW50X3BvaW50ID09IG1vdW50X3BvaW50OgogICAgICAgICAgICAgICAgZm9yIGZzIGluIHNlbGYuX3NlbGludXhfc3BlY2lhbF9mczoKICAgICAgICAgICAgICAgICAgICBpZiBmcyBpbiBmc3R5cGU6CiAgICAgICAgICAgICAgICAgICAgICAgIHNwZWNpYWxfY29udGV4dCA9IHNlbGYuc2VsaW51eF9jb250ZXh0KHBhdGhfbW91bnRfcG9pbnQpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoVHJ1ZSwgc3BlY2lhbF9jb250ZXh0KQoKICAgICAgICByZXR1cm4gKEZhbHNlLCBOb25lKQoKICAgIGRlZiBzZXRfZGVmYXVsdF9zZWxpbnV4X2NvbnRleHQoc2VsZiwgcGF0aCwgY2hhbmdlZCk6CiAgICAgICAgaWYgbm90IEhBVkVfU0VMSU5VWCBvciBub3Qgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQKICAgICAgICBjb250ZXh0ID0gc2VsZi5zZWxpbnV4X2RlZmF1bHRfY29udGV4dChwYXRoKQogICAgICAgIHJldHVybiBzZWxmLnNldF9jb250ZXh0X2lmX2RpZmZlcmVudChwYXRoLCBjb250ZXh0LCBGYWxzZSkKCiAgICBkZWYgc2V0X2NvbnRleHRfaWZfZGlmZmVyZW50KHNlbGYsIHBhdGgsIGNvbnRleHQsIGNoYW5nZWQsIGRpZmY9Tm9uZSk6CgogICAgICAgIGlmIG5vdCBIQVZFX1NFTElOVVggb3Igbm90IHNlbGYuc2VsaW51eF9lbmFibGVkKCk6CiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VkCiAgICAgICAgY3VyX2NvbnRleHQgPSBzZWxmLnNlbGludXhfY29udGV4dChwYXRoKQogICAgICAgIG5ld19jb250ZXh0ID0gbGlzdChjdXJfY29udGV4dCkKICAgICAgICAjIEl0ZXJhdGUgb3ZlciB0aGUgY3VycmVudCBjb250ZXh0IGluc3RlYWQgb2YgdGhlCiAgICAgICAgIyBhcmd1bWVudCBjb250ZXh0LCB3aGljaCBtYXkgaGF2ZSBzZWxldmVsLgoKICAgICAgICAoaXNfc3BlY2lhbF9zZSwgc3BfY29udGV4dCkgPSBzZWxmLmlzX3NwZWNpYWxfc2VsaW51eF9wYXRoKHBhdGgpCiAgICAgICAgaWYgaXNfc3BlY2lhbF9zZToKICAgICAgICAgICAgbmV3X2NvbnRleHQgPSBzcF9jb250ZXh0CiAgICAgICAgZWxzZToKICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKGN1cl9jb250ZXh0KSk6CiAgICAgICAgICAgICAgICBpZiBsZW4oY29udGV4dCkgPiBpOgogICAgICAgICAgICAgICAgICAgIGlmIGNvbnRleHRbaV0gaXMgbm90IE5vbmUgYW5kIGNvbnRleHRbaV0gIT0gY3VyX2NvbnRleHRbaV06CiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19jb250ZXh0W2ldID0gY29udGV4dFtpXQogICAgICAgICAgICAgICAgICAgIGVsaWYgY29udGV4dFtpXSBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICBuZXdfY29udGV4dFtpXSA9IGN1cl9jb250ZXh0W2ldCgogICAgICAgIGlmIGN1cl9jb250ZXh0ICE9IG5ld19jb250ZXh0OgogICAgICAgICAgICBpZiBkaWZmIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgaWYgJ2JlZm9yZScgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ10gPSB7fQogICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ11bJ3NlY29udGV4dCddID0gY3VyX2NvbnRleHQKICAgICAgICAgICAgICAgIGlmICdhZnRlcicgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYWZ0ZXInXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddWydzZWNvbnRleHQnXSA9IG5ld19jb250ZXh0CgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiBzZWxmLmNoZWNrX21vZGU6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgIHJjID0gc2VsaW51eC5sc2V0ZmlsZWNvbih0b19uYXRpdmUocGF0aCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyKCc6Jy5qb2luKG5ld19jb250ZXh0KSkpCiAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocGF0aD1wYXRoLCBtc2c9J2ludmFsaWQgc2VsaW51eCBjb250ZXh0OiAlcycgJSBzdHIoZSksIG5ld19jb250ZXh0PW5ld19jb250ZXh0LCBjdXJfY29udGV4dD1jdXJfY29udGV4dCwgaW5wdXRfd2FzPWNvbnRleHQpCiAgICAgICAgICAgIGlmIHJjICE9IDA6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nc2V0IHNlbGludXggY29udGV4dCBmYWlsZWQnKQogICAgICAgICAgICBjaGFuZ2VkID0gVHJ1ZQogICAgICAgIHJldHVybiBjaGFuZ2VkCgogICAgZGVmIHNldF9vd25lcl9pZl9kaWZmZXJlbnQoc2VsZiwgcGF0aCwgb3duZXIsIGNoYW5nZWQsIGRpZmY9Tm9uZSwgZXhwYW5kPVRydWUpOgogICAgICAgIGJfcGF0aCA9IHRvX2J5dGVzKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBpZiBleHBhbmQ6CiAgICAgICAgICAgIGJfcGF0aCA9IG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnMoYl9wYXRoKSkKICAgICAgICBwYXRoID0gdG9fdGV4dChiX3BhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBpZiBvd25lciBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gY2hhbmdlZAogICAgICAgIG9yaWdfdWlkLCBvcmlnX2dpZCA9IHNlbGYudXNlcl9hbmRfZ3JvdXAocGF0aCwgZXhwYW5kKQogICAgICAgIHRyeToKICAgICAgICAgICAgdWlkID0gaW50KG93bmVyKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB1aWQgPSBwd2QuZ2V0cHduYW0ob3duZXIpLnB3X3VpZAogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nY2hvd24gZmFpbGVkOiBmYWlsZWQgdG8gbG9vayB1cCB1c2VyICVzJyAlIG93bmVyKQogICAgICAgIGlmIG9yaWdfdWlkICE9IHVpZDoKCiAgICAgICAgICAgIGlmIGRpZmYgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBpZiAnYmVmb3JlJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXVsnb3duZXInXSA9IG9yaWdfdWlkCiAgICAgICAgICAgICAgICBpZiAnYWZ0ZXInIG5vdCBpbiBkaWZmOgogICAgICAgICAgICAgICAgICAgIGRpZmZbJ2FmdGVyJ10gPSB7fQogICAgICAgICAgICAgICAgZGlmZlsnYWZ0ZXInXVsnb3duZXInXSA9IHVpZAoKICAgICAgICAgICAgaWYgc2VsZi5jaGVja19tb2RlOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgb3MubGNob3duKGJfcGF0aCwgdWlkLCAtMSkKICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nY2hvd24gZmFpbGVkJykKICAgICAgICAgICAgY2hhbmdlZCA9IFRydWUKICAgICAgICByZXR1cm4gY2hhbmdlZAoKICAgIGRlZiBzZXRfZ3JvdXBfaWZfZGlmZmVyZW50KHNlbGYsIHBhdGgsIGdyb3VwLCBjaGFuZ2VkLCBkaWZmPU5vbmUsIGV4cGFuZD1UcnVlKToKICAgICAgICBiX3BhdGggPSB0b19ieXRlcyhwYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3N0cmljdCcpCiAgICAgICAgaWYgZXhwYW5kOgogICAgICAgICAgICBiX3BhdGggPSBvcy5wYXRoLmV4cGFuZHVzZXIob3MucGF0aC5leHBhbmR2YXJzKGJfcGF0aCkpCiAgICAgICAgcGF0aCA9IHRvX3RleHQoYl9wYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3N0cmljdCcpCiAgICAgICAgaWYgZ3JvdXAgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQKICAgICAgICBvcmlnX3VpZCwgb3JpZ19naWQgPSBzZWxmLnVzZXJfYW5kX2dyb3VwKGJfcGF0aCwgZXhwYW5kKQogICAgICAgIHRyeToKICAgICAgICAgICAgZ2lkID0gaW50KGdyb3VwKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBnaWQgPSBncnAuZ2V0Z3JuYW0oZ3JvdXApLmdyX2dpZAogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nY2hncnAgZmFpbGVkOiBmYWlsZWQgdG8gbG9vayB1cCBncm91cCAlcycgJSBncm91cCkKICAgICAgICBpZiBvcmlnX2dpZCAhPSBnaWQ6CgogICAgICAgICAgICBpZiBkaWZmIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgaWYgJ2JlZm9yZScgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ10gPSB7fQogICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ11bJ2dyb3VwJ10gPSBvcmlnX2dpZAogICAgICAgICAgICAgICAgaWYgJ2FmdGVyJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddID0ge30KICAgICAgICAgICAgICAgIGRpZmZbJ2FmdGVyJ11bJ2dyb3VwJ10gPSBnaWQKCiAgICAgICAgICAgIGlmIHNlbGYuY2hlY2tfbW9kZToKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG9zLmxjaG93bihiX3BhdGgsIC0xLCBnaWQpCiAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocGF0aD1wYXRoLCBtc2c9J2NoZ3JwIGZhaWxlZCcpCiAgICAgICAgICAgIGNoYW5nZWQgPSBUcnVlCiAgICAgICAgcmV0dXJuIGNoYW5nZWQKCiAgICBkZWYgc2V0X21vZGVfaWZfZGlmZmVyZW50KHNlbGYsIHBhdGgsIG1vZGUsIGNoYW5nZWQsIGRpZmY9Tm9uZSwgZXhwYW5kPVRydWUpOgogICAgICAgIGJfcGF0aCA9IHRvX2J5dGVzKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBpZiBleHBhbmQ6CiAgICAgICAgICAgIGJfcGF0aCA9IG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnMoYl9wYXRoKSkKICAgICAgICBwYXRoID0gdG9fdGV4dChiX3BhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBwYXRoX3N0YXQgPSBvcy5sc3RhdChiX3BhdGgpCgogICAgICAgIGlmIG1vZGUgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQKCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UobW9kZSwgaW50KToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbW9kZSA9IGludChtb2RlLCA4KQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIG1vZGUgPSBzZWxmLl9zeW1ib2xpY19tb2RlX3RvX29jdGFsKHBhdGhfc3RhdCwgbW9kZSkKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2c9Im1vZGUgbXVzdCBiZSBpbiBvY3RhbCBvciBzeW1ib2xpYyBmb3JtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzPXN0cihlKSkKCiAgICAgICAgICAgICAgICBpZiBtb2RlICE9IHN0YXQuU19JTU9ERShtb2RlKToKICAgICAgICAgICAgICAgICAgICAjIHByZXZlbnQgbW9kZSBmcm9tIGhhdmluZyBleHRyYSBpbmZvIG9yYmVpbmcgaW52YWxpZCBsb25nIG51bWJlcgogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSJJbnZhbGlkIG1vZGUgc3VwcGxpZWQsIG9ubHkgcGVybWlzc2lvbiBpbmZvIGlzIGFsbG93ZWQiLCBkZXRhaWxzPW1vZGUpCgogICAgICAgIHByZXZfbW9kZSA9IHN0YXQuU19JTU9ERShwYXRoX3N0YXQuc3RfbW9kZSkKCiAgICAgICAgaWYgcHJldl9tb2RlICE9IG1vZGU6CgogICAgICAgICAgICBpZiBkaWZmIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgaWYgJ2JlZm9yZScgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ10gPSB7fQogICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ11bJ21vZGUnXSA9ICcwJTAzbycgJSBwcmV2X21vZGUKICAgICAgICAgICAgICAgIGlmICdhZnRlcicgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYWZ0ZXInXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddWydtb2RlJ10gPSAnMCUwM28nICUgbW9kZQoKICAgICAgICAgICAgaWYgc2VsZi5jaGVja19tb2RlOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgIyBGSVhNRTogY29tcGFyaXNvbiBhZ2FpbnN0IHN0cmluZyBhYm92ZSB3aWxsIGNhdXNlIHRoaXMgdG8gYmUgZXhlY3V0ZWQKICAgICAgICAgICAgIyBldmVyeSB0aW1lCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIGhhc2F0dHIob3MsICdsY2htb2QnKToKICAgICAgICAgICAgICAgICAgICBvcy5sY2htb2QoYl9wYXRoLCBtb2RlKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5pc2xpbmsoYl9wYXRoKToKICAgICAgICAgICAgICAgICAgICAgICAgb3MuY2htb2QoYl9wYXRoLCBtb2RlKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICMgQXR0ZW1wdCB0byBzZXQgdGhlIHBlcm1zIG9mIHRoZSBzeW1saW5rIGJ1dCBiZQogICAgICAgICAgICAgICAgICAgICAgICAjIGNhcmVmdWwgbm90IHRvIGNoYW5nZSB0aGUgcGVybXMgb2YgdGhlIHVuZGVybHlpbmcKICAgICAgICAgICAgICAgICAgICAgICAgIyBmaWxlIHdoaWxlIHRyeWluZwogICAgICAgICAgICAgICAgICAgICAgICB1bmRlcmx5aW5nX3N0YXQgPSBvcy5zdGF0KGJfcGF0aCkKICAgICAgICAgICAgICAgICAgICAgICAgb3MuY2htb2QoYl9wYXRoLCBtb2RlKQogICAgICAgICAgICAgICAgICAgICAgICBuZXdfdW5kZXJseWluZ19zdGF0ID0gb3Muc3RhdChiX3BhdGgpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVuZGVybHlpbmdfc3RhdC5zdF9tb2RlICE9IG5ld191bmRlcmx5aW5nX3N0YXQuc3RfbW9kZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zLmNobW9kKGJfcGF0aCwgc3RhdC5TX0lNT0RFKHVuZGVybHlpbmdfc3RhdC5zdF9tb2RlKSkKICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmlzbGluayhiX3BhdGgpIGFuZCBlLmVycm5vID09IGVycm5vLkVQRVJNOiAgIyBDYW4ndCBzZXQgbW9kZSBvbiBzeW1ib2xpYyBsaW5rcwogICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgICAgIGVsaWYgZS5lcnJubyBpbiAoZXJybm8uRU5PRU5ULCBlcnJuby5FTE9PUCk6ICMgQ2FuJ3Qgc2V0IG1vZGUgb24gYnJva2VuIHN5bWJvbGljIGxpbmtzCiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICByYWlzZSBlCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nY2htb2QgZmFpbGVkJywgZGV0YWlscz1zdHIoZSkpCgogICAgICAgICAgICBwYXRoX3N0YXQgPSBvcy5sc3RhdChiX3BhdGgpCiAgICAgICAgICAgIG5ld19tb2RlID0gc3RhdC5TX0lNT0RFKHBhdGhfc3RhdC5zdF9tb2RlKQoKICAgICAgICAgICAgaWYgbmV3X21vZGUgIT0gcHJldl9tb2RlOgogICAgICAgICAgICAgICAgY2hhbmdlZCA9IFRydWUKICAgICAgICByZXR1cm4gY2hhbmdlZAoKICAgIGRlZiBzZXRfYXR0cmlidXRlc19pZl9kaWZmZXJlbnQoc2VsZiwgcGF0aCwgYXR0cmlidXRlcywgY2hhbmdlZCwgZGlmZj1Ob25lLCBleHBhbmQ9VHJ1ZSk6CgogICAgICAgIGlmIGF0dHJpYnV0ZXMgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQKCiAgICAgICAgYl9wYXRoID0gdG9fYnl0ZXMocGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9zdHJpY3QnKQogICAgICAgIGlmIGV4cGFuZDoKICAgICAgICAgICAgYl9wYXRoID0gb3MucGF0aC5leHBhbmR1c2VyKG9zLnBhdGguZXhwYW5kdmFycyhiX3BhdGgpKQogICAgICAgIHBhdGggPSB0b190ZXh0KGJfcGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9zdHJpY3QnKQoKICAgICAgICBleGlzdGluZyA9IHNlbGYuZ2V0X2ZpbGVfYXR0cmlidXRlcyhiX3BhdGgpCgogICAgICAgIGlmIGV4aXN0aW5nLmdldCgnYXR0cl9mbGFncycsJycpICE9IGF0dHJpYnV0ZXM6CiAgICAgICAgICAgIGF0dHJjbWQgPSBzZWxmLmdldF9iaW5fcGF0aCgnY2hhdHRyJykKICAgICAgICAgICAgaWYgYXR0cmNtZDoKICAgICAgICAgICAgICAgIGF0dHJjbWQgPSBbYXR0cmNtZCwgJz0lcycgJSBhdHRyaWJ1dGVzLCBiX3BhdGhdCiAgICAgICAgICAgICAgICBjaGFuZ2VkID0gVHJ1ZQoKICAgICAgICAgICAgICAgIGlmIGRpZmYgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgaWYgJ2JlZm9yZScgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZbJ2JlZm9yZSddID0ge30KICAgICAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXVsnYXR0cmlidXRlcyddID0gZXhpc3RpbmcuZ2V0KCdhdHRyX2ZsYWdzJykKICAgICAgICAgICAgICAgICAgICBpZiAnYWZ0ZXInIG5vdCBpbiBkaWZmOgogICAgICAgICAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddID0ge30KICAgICAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddWydhdHRyaWJ1dGVzJ10gPSBhdHRyaWJ1dGVzCgogICAgICAgICAgICAgICAgaWYgbm90IHNlbGYuY2hlY2tfbW9kZToKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJjLCBvdXQsIGVyciA9IHNlbGYucnVuX2NvbW1hbmQoYXR0cmNtZCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgcmMgIT0gMCBvciBlcnI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oIkVycm9yIHdoaWxlIHNldHRpbmcgYXR0cmlidXRlczogJXMiICUgKG91dCArIGVycikpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSdjaGF0dHIgZmFpbGVkJywgZGV0YWlscz1zdHIoZSkpCiAgICAgICAgcmV0dXJuIGNoYW5nZWQKCiAgICBkZWYgZ2V0X2ZpbGVfYXR0cmlidXRlcyhzZWxmLCBwYXRoKToKICAgICAgICBvdXRwdXQgPSB7fQogICAgICAgIGF0dHJjbWQgPSBzZWxmLmdldF9iaW5fcGF0aCgnbHNhdHRyJywgRmFsc2UpCiAgICAgICAgaWYgYXR0cmNtZDoKICAgICAgICAgICAgYXR0cmNtZCA9IFthdHRyY21kLCAnLXZkJywgcGF0aF0KICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmMsIG91dCwgZXJyID0gc2VsZi5ydW5fY29tbWFuZChhdHRyY21kKQogICAgICAgICAgICAgICAgaWYgcmMgPT0gMDoKICAgICAgICAgICAgICAgICAgICByZXMgPSBvdXQuc3BsaXQoJyAnKVswOjJdCiAgICAgICAgICAgICAgICAgICAgb3V0cHV0WydhdHRyX2ZsYWdzJ10gPSAgcmVzWzFdLnJlcGxhY2UoJy0nLCcnKS5zdHJpcCgpCiAgICAgICAgICAgICAgICAgICAgb3V0cHV0Wyd2ZXJzaW9uJ10gPSByZXNbMF0uc3RyaXAoKQogICAgICAgICAgICAgICAgICAgIG91dHB1dFsnYXR0cmlidXRlcyddID0gZm9ybWF0X2F0dHJpYnV0ZXMob3V0cHV0WydhdHRyX2ZsYWdzJ10pCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICByZXR1cm4gb3V0cHV0CgoKICAgIGRlZiBfc3ltYm9saWNfbW9kZV90b19vY3RhbChzZWxmLCBwYXRoX3N0YXQsIHN5bWJvbGljX21vZGUpOgogICAgICAgIG5ld19tb2RlID0gc3RhdC5TX0lNT0RFKHBhdGhfc3RhdC5zdF9tb2RlKQoKICAgICAgICBtb2RlX3JlID0gcmUuY29tcGlsZShyJ14oP1A8dXNlcnM+W3Vnb2FdKykoP1A8b3BlcmF0b3I+Wy0rPV0pKD9QPHBlcm1zPltyd3hYc3QtXSp8W3Vnb10pJCcpCiAgICAgICAgZm9yIG1vZGUgaW4gc3ltYm9saWNfbW9kZS5zcGxpdCgnLCcpOgogICAgICAgICAgICBtYXRjaCA9IG1vZGVfcmUubWF0Y2gobW9kZSkKICAgICAgICAgICAgaWYgbWF0Y2g6CiAgICAgICAgICAgICAgICB1c2VycyA9IG1hdGNoLmdyb3VwKCd1c2VycycpCiAgICAgICAgICAgICAgICBvcGVyYXRvciA9IG1hdGNoLmdyb3VwKCdvcGVyYXRvcicpCiAgICAgICAgICAgICAgICBwZXJtcyA9IG1hdGNoLmdyb3VwKCdwZXJtcycpCgogICAgICAgICAgICAgICAgaWYgdXNlcnMgPT0gJ2EnOgogICAgICAgICAgICAgICAgICAgIHVzZXJzID0gJ3VnbycKCiAgICAgICAgICAgICAgICBmb3IgdXNlciBpbiB1c2VyczoKICAgICAgICAgICAgICAgICAgICBtb2RlX3RvX2FwcGx5ID0gc2VsZi5fZ2V0X29jdGFsX21vZGVfZnJvbV9zeW1ib2xpY19wZXJtcyhwYXRoX3N0YXQsIHVzZXIsIHBlcm1zKQogICAgICAgICAgICAgICAgICAgIG5ld19tb2RlID0gc2VsZi5fYXBwbHlfb3BlcmF0aW9uX3RvX21vZGUodXNlciwgb3BlcmF0b3IsIG1vZGVfdG9fYXBwbHksIG5ld19tb2RlKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiYmFkIHN5bWJvbGljIHBlcm1pc3Npb24gZm9yIG1vZGU6ICVzIiAlIG1vZGUpCiAgICAgICAgcmV0dXJuIG5ld19tb2RlCgogICAgZGVmIF9hcHBseV9vcGVyYXRpb25fdG9fbW9kZShzZWxmLCB1c2VyLCBvcGVyYXRvciwgbW9kZV90b19hcHBseSwgY3VycmVudF9tb2RlKToKICAgICAgICBpZiBvcGVyYXRvciAgPT0gICc9JzoKICAgICAgICAgICAgaWYgdXNlciA9PSAndSc6CiAgICAgICAgICAgICAgICBtYXNrID0gc3RhdC5TX0lSV1hVIHwgc3RhdC5TX0lTVUlECiAgICAgICAgICAgIGVsaWYgdXNlciA9PSAnZyc6CiAgICAgICAgICAgICAgICBtYXNrID0gc3RhdC5TX0lSV1hHIHwgc3RhdC5TX0lTR0lECiAgICAgICAgICAgIGVsaWYgdXNlciA9PSAnbyc6CiAgICAgICAgICAgICAgICBtYXNrID0gc3RhdC5TX0lSV1hPIHwgc3RhdC5TX0lTVlRYCgogICAgICAgICAgICAjIG1hc2sgb3V0IHUsIGcsIG9yIG8gcGVybWlzc2lvbnMgZnJvbSBjdXJyZW50X21vZGUgYW5kIGFwcGx5IG5ldyBwZXJtaXNzaW9ucwogICAgICAgICAgICBpbnZlcnNlX21hc2sgPSBtYXNrIF4gUEVSTV9CSVRTCiAgICAgICAgICAgIG5ld19tb2RlID0gKGN1cnJlbnRfbW9kZSAmIGludmVyc2VfbWFzaykgfCBtb2RlX3RvX2FwcGx5CiAgICAgICAgZWxpZiBvcGVyYXRvciA9PSAnKyc6CiAgICAgICAgICAgIG5ld19tb2RlID0gY3VycmVudF9tb2RlIHwgbW9kZV90b19hcHBseQogICAgICAgIGVsaWYgb3BlcmF0b3IgPT0gJy0nOgogICAgICAgICAgICBuZXdfbW9kZSA9IGN1cnJlbnRfbW9kZSAtIChjdXJyZW50X21vZGUgJiBtb2RlX3RvX2FwcGx5KQogICAgICAgIHJldHVybiBuZXdfbW9kZQoKICAgIGRlZiBfZ2V0X29jdGFsX21vZGVfZnJvbV9zeW1ib2xpY19wZXJtcyhzZWxmLCBwYXRoX3N0YXQsIHVzZXIsIHBlcm1zKToKICAgICAgICBwcmV2X21vZGUgPSBzdGF0LlNfSU1PREUocGF0aF9zdGF0LnN0X21vZGUpCgogICAgICAgIGlzX2RpcmVjdG9yeSA9IHN0YXQuU19JU0RJUihwYXRoX3N0YXQuc3RfbW9kZSkKICAgICAgICBoYXNfeF9wZXJtaXNzaW9ucyA9IChwcmV2X21vZGUgJiBFWEVDX1BFUk1fQklUUykgPiAwCiAgICAgICAgYXBwbHlfWF9wZXJtaXNzaW9uID0gaXNfZGlyZWN0b3J5IG9yIGhhc194X3Blcm1pc3Npb25zCgogICAgICAgICMgUGVybWlzc2lvbiBiaXRzIGNvbnN0YW50cyBkb2N1bWVudGVkIGF0OgogICAgICAgICMgaHR0cDovL2RvY3MucHl0aG9uLm9yZy8yL2xpYnJhcnkvc3RhdC5odG1sI3N0YXQuU19JU1VJRAogICAgICAgIGlmIGFwcGx5X1hfcGVybWlzc2lvbjoKICAgICAgICAgICAgWF9wZXJtcyA9IHsKICAgICAgICAgICAgICAgICd1JzogeydYJzogc3RhdC5TX0lYVVNSfSwKICAgICAgICAgICAgICAgICdnJzogeydYJzogc3RhdC5TX0lYR1JQfSwKICAgICAgICAgICAgICAgICdvJzogeydYJzogc3RhdC5TX0lYT1RIfQogICAgICAgICAgICB9CiAgICAgICAgZWxzZToKICAgICAgICAgICAgWF9wZXJtcyA9IHsKICAgICAgICAgICAgICAgICd1JzogeydYJzogMH0sCiAgICAgICAgICAgICAgICAnZyc6IHsnWCc6IDB9LAogICAgICAgICAgICAgICAgJ28nOiB7J1gnOiAwfQogICAgICAgICAgICB9CgogICAgICAgIHVzZXJfcGVybXNfdG9fbW9kZXMgPSB7CiAgICAgICAgICAgICd1JzogewogICAgICAgICAgICAgICAgJ3InOiBzdGF0LlNfSVJVU1IsCiAgICAgICAgICAgICAgICAndyc6IHN0YXQuU19JV1VTUiwKICAgICAgICAgICAgICAgICd4Jzogc3RhdC5TX0lYVVNSLAogICAgICAgICAgICAgICAgJ3MnOiBzdGF0LlNfSVNVSUQsCiAgICAgICAgICAgICAgICAndCc6IDAsCiAgICAgICAgICAgICAgICAndSc6IHByZXZfbW9kZSAmIHN0YXQuU19JUldYVSwKICAgICAgICAgICAgICAgICdnJzogKHByZXZfbW9kZSAmIHN0YXQuU19JUldYRykgPDwgMywKICAgICAgICAgICAgICAgICdvJzogKHByZXZfbW9kZSAmIHN0YXQuU19JUldYTykgPDwgNiB9LAogICAgICAgICAgICAnZyc6IHsKICAgICAgICAgICAgICAgICdyJzogc3RhdC5TX0lSR1JQLAogICAgICAgICAgICAgICAgJ3cnOiBzdGF0LlNfSVdHUlAsCiAgICAgICAgICAgICAgICAneCc6IHN0YXQuU19JWEdSUCwKICAgICAgICAgICAgICAgICdzJzogc3RhdC5TX0lTR0lELAogICAgICAgICAgICAgICAgJ3QnOiAwLAogICAgICAgICAgICAgICAgJ3UnOiAocHJldl9tb2RlICYgc3RhdC5TX0lSV1hVKSA+PiAzLAogICAgICAgICAgICAgICAgJ2cnOiBwcmV2X21vZGUgJiBzdGF0LlNfSVJXWEcsCiAgICAgICAgICAgICAgICAnbyc6IChwcmV2X21vZGUgJiBzdGF0LlNfSVJXWE8pIDw8IDMgfSwKICAgICAgICAgICAgJ28nOiB7CiAgICAgICAgICAgICAgICAncic6IHN0YXQuU19JUk9USCwKICAgICAgICAgICAgICAgICd3Jzogc3RhdC5TX0lXT1RILAogICAgICAgICAgICAgICAgJ3gnOiBzdGF0LlNfSVhPVEgsCiAgICAgICAgICAgICAgICAncyc6IDAsCiAgICAgICAgICAgICAgICAndCc6IHN0YXQuU19JU1ZUWCwKICAgICAgICAgICAgICAgICd1JzogKHByZXZfbW9kZSAmIHN0YXQuU19JUldYVSkgPj4gNiwKICAgICAgICAgICAgICAgICdnJzogKHByZXZfbW9kZSAmIHN0YXQuU19JUldYRykgPj4gMywKICAgICAgICAgICAgICAgICdvJzogcHJldl9tb2RlICYgc3RhdC5TX0lSV1hPIH0KICAgICAgICB9CgogICAgICAgICMgSW5zZXJ0IFhfcGVybXMgaW50byB1c2VyX3Blcm1zX3RvX21vZGVzCiAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gWF9wZXJtcy5pdGVtcygpOgogICAgICAgICAgICB1c2VyX3Blcm1zX3RvX21vZGVzW2tleV0udXBkYXRlKHZhbHVlKQoKICAgICAgICBvcl9yZWR1Y2UgPSBsYW1iZGEgbW9kZSwgcGVybTogbW9kZSB8IHVzZXJfcGVybXNfdG9fbW9kZXNbdXNlcl1bcGVybV0KICAgICAgICByZXR1cm4gcmVkdWNlKG9yX3JlZHVjZSwgcGVybXMsIDApCgogICAgZGVmIHNldF9mc19hdHRyaWJ1dGVzX2lmX2RpZmZlcmVudChzZWxmLCBmaWxlX2FyZ3MsIGNoYW5nZWQsIGRpZmY9Tm9uZSwgZXhwYW5kPVRydWUpOgogICAgICAgICMgc2V0IG1vZGVzIG93bmVycyBhbmQgY29udGV4dCBhcyBuZWVkZWQKICAgICAgICBjaGFuZ2VkID0gc2VsZi5zZXRfY29udGV4dF9pZl9kaWZmZXJlbnQoCiAgICAgICAgICAgIGZpbGVfYXJnc1sncGF0aCddLCBmaWxlX2FyZ3NbJ3NlY29udGV4dCddLCBjaGFuZ2VkLCBkaWZmCiAgICAgICAgKQogICAgICAgIGNoYW5nZWQgPSBzZWxmLnNldF9vd25lcl9pZl9kaWZmZXJlbnQoCiAgICAgICAgICAgIGZpbGVfYXJnc1sncGF0aCddLCBmaWxlX2FyZ3NbJ293bmVyJ10sIGNoYW5nZWQsIGRpZmYsIGV4cGFuZAogICAgICAgICkKICAgICAgICBjaGFuZ2VkID0gc2VsZi5zZXRfZ3JvdXBfaWZfZGlmZmVyZW50KAogICAgICAgICAgICBmaWxlX2FyZ3NbJ3BhdGgnXSwgZmlsZV9hcmdzWydncm91cCddLCBjaGFuZ2VkLCBkaWZmLCBleHBhbmQKICAgICAgICApCiAgICAgICAgY2hhbmdlZCA9IHNlbGYuc2V0X21vZGVfaWZfZGlmZmVyZW50KAogICAgICAgICAgICBmaWxlX2FyZ3NbJ3BhdGgnXSwgZmlsZV9hcmdzWydtb2RlJ10sIGNoYW5nZWQsIGRpZmYsIGV4cGFuZAogICAgICAgICkKICAgICAgICBjaGFuZ2VkID0gc2VsZi5zZXRfYXR0cmlidXRlc19pZl9kaWZmZXJlbnQoCiAgICAgICAgICAgIGZpbGVfYXJnc1sncGF0aCddLCBmaWxlX2FyZ3NbJ2F0dHJpYnV0ZXMnXSwgY2hhbmdlZCwgZGlmZiwgZXhwYW5kCiAgICAgICAgKQogICAgICAgIHJldHVybiBjaGFuZ2VkCgogICAgZGVmIHNldF9kaXJlY3RvcnlfYXR0cmlidXRlc19pZl9kaWZmZXJlbnQoc2VsZiwgZmlsZV9hcmdzLCBjaGFuZ2VkLCBkaWZmPU5vbmUsIGV4cGFuZD1UcnVlKToKICAgICAgICByZXR1cm4gc2VsZi5zZXRfZnNfYXR0cmlidXRlc19pZl9kaWZmZXJlbnQoZmlsZV9hcmdzLCBjaGFuZ2VkLCBkaWZmLCBleHBhbmQpCgogICAgZGVmIHNldF9maWxlX2F0dHJpYnV0ZXNfaWZfZGlmZmVyZW50KHNlbGYsIGZpbGVfYXJncywgY2hhbmdlZCwgZGlmZj1Ob25lLCBleHBhbmQ9VHJ1ZSk6CiAgICAgICAgcmV0dXJuIHNlbGYuc2V0X2ZzX2F0dHJpYnV0ZXNfaWZfZGlmZmVyZW50KGZpbGVfYXJncywgY2hhbmdlZCwgZGlmZiwgZXhwYW5kKQoKICAgIGRlZiBhZGRfcGF0aF9pbmZvKHNlbGYsIGt3YXJncyk6CiAgICAgICAgJycnCiAgICAgICAgZm9yIHJlc3VsdHMgdGhhdCBhcmUgZmlsZXMsIHN1cHBsZW1lbnQgdGhlIGluZm8gYWJvdXQgdGhlIGZpbGUKICAgICAgICBpbiB0aGUgcmV0dXJuIHBhdGggd2l0aCBzdGF0cyBhYm91dCB0aGUgZmlsZSBwYXRoLgogICAgICAgICcnJwoKICAgICAgICBwYXRoID0ga3dhcmdzLmdldCgncGF0aCcsIGt3YXJncy5nZXQoJ2Rlc3QnLCBOb25lKSkKICAgICAgICBpZiBwYXRoIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBrd2FyZ3MKICAgICAgICBiX3BhdGggPSB0b19ieXRlcyhwYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKGJfcGF0aCk6CiAgICAgICAgICAgICh1aWQsIGdpZCkgPSBzZWxmLnVzZXJfYW5kX2dyb3VwKHBhdGgpCiAgICAgICAgICAgIGt3YXJnc1sndWlkJ10gPSB1aWQKICAgICAgICAgICAga3dhcmdzWydnaWQnXSA9IGdpZAogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB1c2VyID0gcHdkLmdldHB3dWlkKHVpZClbMF0KICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICAgICAgdXNlciA9IHN0cih1aWQpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGdyb3VwID0gZ3JwLmdldGdyZ2lkKGdpZClbMF0KICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICAgICAgZ3JvdXAgPSBzdHIoZ2lkKQogICAgICAgICAgICBrd2FyZ3NbJ293bmVyJ10gPSB1c2VyCiAgICAgICAgICAgIGt3YXJnc1snZ3JvdXAnXSA9IGdyb3VwCiAgICAgICAgICAgIHN0ID0gb3MubHN0YXQoYl9wYXRoKQogICAgICAgICAgICBrd2FyZ3NbJ21vZGUnXSA9ICcwJTAzbycgJSBzdGF0LlNfSU1PREUoc3Rbc3RhdC5TVF9NT0RFXSkKICAgICAgICAgICAgIyBzZWNvbnRleHQgbm90IHlldCBzdXBwb3J0ZWQKICAgICAgICAgICAgaWYgb3MucGF0aC5pc2xpbmsoYl9wYXRoKToKICAgICAgICAgICAgICAgIGt3YXJnc1snc3RhdGUnXSA9ICdsaW5rJwogICAgICAgICAgICBlbGlmIG9zLnBhdGguaXNkaXIoYl9wYXRoKToKICAgICAgICAgICAgICAgIGt3YXJnc1snc3RhdGUnXSA9ICdkaXJlY3RvcnknCiAgICAgICAgICAgIGVsaWYgb3Muc3RhdChiX3BhdGgpLnN0X25saW5rID4gMToKICAgICAgICAgICAgICAgIGt3YXJnc1snc3RhdGUnXSA9ICdoYXJkJwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAga3dhcmdzWydzdGF0ZSddID0gJ2ZpbGUnCiAgICAgICAgICAgIGlmIEhBVkVfU0VMSU5VWCBhbmQgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgICAgIGt3YXJnc1snc2Vjb250ZXh0J10gPSAnOicuam9pbihzZWxmLnNlbGludXhfY29udGV4dChwYXRoKSkKICAgICAgICAgICAga3dhcmdzWydzaXplJ10gPSBzdFtzdGF0LlNUX1NJWkVdCiAgICAgICAgZWxzZToKICAgICAgICAgICAga3dhcmdzWydzdGF0ZSddID0gJ2Fic2VudCcKICAgICAgICByZXR1cm4ga3dhcmdzCgogICAgZGVmIF9jaGVja19sb2NhbGUoc2VsZik6CiAgICAgICAgJycnCiAgICAgICAgVXNlcyB0aGUgbG9jYWxlIG1vZHVsZSB0byB0ZXN0IHRoZSBjdXJyZW50bHkgc2V0IGxvY2FsZQogICAgICAgIChwZXIgdGhlIExBTkcgYW5kIExDX0NUWVBFIGVudmlyb25tZW50IHNldHRpbmdzKQogICAgICAgICcnJwogICAgICAgIHRyeToKICAgICAgICAgICAgIyBzZXR0aW5nIHRoZSBsb2NhbGUgdG8gJycgdXNlcyB0aGUgZGVmYXVsdCBsb2NhbGUKICAgICAgICAgICAgIyBhcyBpdCB3b3VsZCBiZSByZXR1cm5lZCBieSBsb2NhbGUuZ2V0ZGVmYXVsdGxvY2FsZSgpCiAgICAgICAgICAgIGxvY2FsZS5zZXRsb2NhbGUobG9jYWxlLkxDX0FMTCwgJycpCiAgICAgICAgZXhjZXB0IGxvY2FsZS5FcnJvcjoKICAgICAgICAgICAgIyBmYWxsYmFjayB0byB0aGUgJ0MnIGxvY2FsZSwgd2hpY2ggbWF5IGNhdXNlIHVuaWNvZGUKICAgICAgICAgICAgIyBpc3N1ZXMgYnV0IGlzIHByZWZlcmFibGUgdG8gc2ltcGx5IGZhaWxpbmcgYmVjYXVzZQogICAgICAgICAgICAjIG9mIGFuIHVua25vd24gbG9jYWxlCiAgICAgICAgICAgIGxvY2FsZS5zZXRsb2NhbGUobG9jYWxlLkxDX0FMTCwgJ0MnKQogICAgICAgICAgICBvcy5lbnZpcm9uWydMQU5HJ10gPSAnQycKICAgICAgICAgICAgb3MuZW52aXJvblsnTENfQUxMJ10gPSAnQycKICAgICAgICAgICAgb3MuZW52aXJvblsnTENfTUVTU0FHRVMnXSA9ICdDJwogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJBbiB1bmtub3duIGVycm9yIHdhcyBlbmNvdW50ZXJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIHZhbGlkYXRlIHRoZSBsb2NhbGU6ICVzIiAlIGUpCgogICAgZGVmIF9oYW5kbGVfYWxpYXNlcyhzZWxmLCBzcGVjPU5vbmUpOgogICAgICAgICMgdGhpcyB1c2VzIGV4Y2VwdGlvbnMgYXMgaXQgaGFwcGVucyBiZWZvcmUgd2UgY2FuIHNhZmVseSBjYWxsIGZhaWxfanNvbgogICAgICAgIGFsaWFzZXNfcmVzdWx0cyA9IHt9ICNhbGlhczpjYW5vbgogICAgICAgIGlmIHNwZWMgaXMgTm9uZToKICAgICAgICAgICAgc3BlYyA9IHNlbGYuYXJndW1lbnRfc3BlYwogICAgICAgIGZvciAoayx2KSBpbiBzcGVjLml0ZW1zKCk6CiAgICAgICAgICAgIHNlbGYuX2xlZ2FsX2lucHV0cy5hcHBlbmQoaykKICAgICAgICAgICAgYWxpYXNlcyA9IHYuZ2V0KCdhbGlhc2VzJywgTm9uZSkKICAgICAgICAgICAgZGVmYXVsdCA9IHYuZ2V0KCdkZWZhdWx0JywgTm9uZSkKICAgICAgICAgICAgcmVxdWlyZWQgPSB2LmdldCgncmVxdWlyZWQnLCBGYWxzZSkKICAgICAgICAgICAgaWYgZGVmYXVsdCBpcyBub3QgTm9uZSBhbmQgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAjIG5vdCBhbGlhcyBzcGVjaWZpYyBidXQgdGhpcyBpcyBhIGdvb2QgcGxhY2UgdG8gY2hlY2sgdGhpcwogICAgICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJpbnRlcm5hbCBlcnJvcjogcmVxdWlyZWQgYW5kIGRlZmF1bHQgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZSBmb3IgJXMiICUgaykKICAgICAgICAgICAgaWYgYWxpYXNlcyBpcyBOb25lOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoYWxpYXNlcywgU0VRVUVOQ0VUWVBFKSBvciBpc2luc3RhbmNlKGFsaWFzZXMsIChiaW5hcnlfdHlwZSwgdGV4dF90eXBlKSk6CiAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oJ2ludGVybmFsIGVycm9yOiBhbGlhc2VzIG11c3QgYmUgYSBsaXN0IG9yIHR1cGxlJykKICAgICAgICAgICAgZm9yIGFsaWFzIGluIGFsaWFzZXM6CiAgICAgICAgICAgICAgICBzZWxmLl9sZWdhbF9pbnB1dHMuYXBwZW5kKGFsaWFzKQogICAgICAgICAgICAgICAgYWxpYXNlc19yZXN1bHRzW2FsaWFzXSA9IGsKICAgICAgICAgICAgICAgIGlmIGFsaWFzIGluIHNlbGYucGFyYW1zOgogICAgICAgICAgICAgICAgICAgIHNlbGYucGFyYW1zW2tdID0gc2VsZi5wYXJhbXNbYWxpYXNdCgogICAgICAgIHJldHVybiBhbGlhc2VzX3Jlc3VsdHMKCiAgICBkZWYgX2NoZWNrX2FyZ3VtZW50cyhzZWxmLCBjaGVja19pbnZhbGlkX2FyZ3VtZW50cyk6CiAgICAgICAgc2VsZi5fc3lzbG9nX2ZhY2lsaXR5ID0gJ0xPR19VU0VSJwogICAgICAgIHVuc3VwcG9ydGVkX3BhcmFtZXRlcnMgPSBzZXQoKQogICAgICAgIGZvciAoayx2KSBpbiBsaXN0KHNlbGYucGFyYW1zLml0ZW1zKCkpOgoKICAgICAgICAgICAgaWYgayA9PSAnX2Fuc2libGVfY2hlY2tfbW9kZScgYW5kIHY6CiAgICAgICAgICAgICAgICBzZWxmLmNoZWNrX21vZGUgPSBUcnVlCgogICAgICAgICAgICBlbGlmIGsgPT0gJ19hbnNpYmxlX25vX2xvZyc6CiAgICAgICAgICAgICAgICBzZWxmLm5vX2xvZyA9IHNlbGYuYm9vbGVhbih2KQoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV9kZWJ1Zyc6CiAgICAgICAgICAgICAgICBzZWxmLl9kZWJ1ZyA9IHNlbGYuYm9vbGVhbih2KQoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV9kaWZmJzoKICAgICAgICAgICAgICAgIHNlbGYuX2RpZmYgPSBzZWxmLmJvb2xlYW4odikKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfdmVyYm9zaXR5JzoKICAgICAgICAgICAgICAgIHNlbGYuX3ZlcmJvc2l0eSA9IHYKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfc2VsaW51eF9zcGVjaWFsX2ZzJzoKICAgICAgICAgICAgICAgIHNlbGYuX3NlbGludXhfc3BlY2lhbF9mcyA9IHYKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfc3lzbG9nX2ZhY2lsaXR5JzoKICAgICAgICAgICAgICAgIHNlbGYuX3N5c2xvZ19mYWNpbGl0eSA9IHYKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfdmVyc2lvbic6CiAgICAgICAgICAgICAgICBzZWxmLmFuc2libGVfdmVyc2lvbiA9IHYKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfbW9kdWxlX25hbWUnOgogICAgICAgICAgICAgICAgc2VsZi5fbmFtZSA9IHYKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfc29ja2V0JzoKICAgICAgICAgICAgICAgIHNlbGYuX3NvY2tldF9wYXRoID0gdgoKICAgICAgICAgICAgZWxpZiBjaGVja19pbnZhbGlkX2FyZ3VtZW50cyBhbmQgayBub3QgaW4gc2VsZi5fbGVnYWxfaW5wdXRzOgogICAgICAgICAgICAgICAgdW5zdXBwb3J0ZWRfcGFyYW1ldGVycy5hZGQoaykKCiAgICAgICAgICAgICNjbGVhbiB1cCBpbnRlcm5hbCBwYXJhbXM6CiAgICAgICAgICAgIGlmIGsuc3RhcnRzd2l0aCgnX2Fuc2libGVfJyk6CiAgICAgICAgICAgICAgICBkZWwgc2VsZi5wYXJhbXNba10KCiAgICAgICAgaWYgdW5zdXBwb3J0ZWRfcGFyYW1ldGVyczoKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJVbnN1cHBvcnRlZCBwYXJhbWV0ZXJzIGZvciAoJXMpIG1vZHVsZTogJXMuIFN1cHBvcnRlZCBwYXJhbWV0ZXJzIGluY2x1ZGU6ICVzIiAlIChzZWxmLl9uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcsJy5qb2luKHNvcnRlZChsaXN0KHVuc3VwcG9ydGVkX3BhcmFtZXRlcnMpKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJywnLmpvaW4oc29ydGVkKHNlbGYuYXJndW1lbnRfc3BlYy5rZXlzKCkpKSkpCiAgICAgICAgaWYgc2VsZi5jaGVja19tb2RlIGFuZCBub3Qgc2VsZi5zdXBwb3J0c19jaGVja19tb2RlOgogICAgICAgICAgICBzZWxmLmV4aXRfanNvbihza2lwcGVkPVRydWUsIG1zZz0icmVtb3RlIG1vZHVsZSAoJXMpIGRvZXMgbm90IHN1cHBvcnQgY2hlY2sgbW9kZSIgJSBzZWxmLl9uYW1lKQoKICAgIGRlZiBfY291bnRfdGVybXMoc2VsZiwgY2hlY2spOgogICAgICAgIGNvdW50ID0gMAogICAgICAgIGZvciB0ZXJtIGluIGNoZWNrOgogICAgICAgICAgICBpZiB0ZXJtIGluIHNlbGYucGFyYW1zOgogICAgICAgICAgICAgICAgY291bnQgKz0gMQogICAgICAgIHJldHVybiBjb3VudAoKICAgIGRlZiBfY2hlY2tfbXV0dWFsbHlfZXhjbHVzaXZlKHNlbGYsIHNwZWMpOgogICAgICAgIGlmIHNwZWMgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZm9yIGNoZWNrIGluIHNwZWM6CiAgICAgICAgICAgIGNvdW50ID0gc2VsZi5fY291bnRfdGVybXMoY2hlY2spCiAgICAgICAgICAgIGlmIGNvdW50ID4gMToKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0icGFyYW1ldGVycyBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlOiAlcyIgJSAoY2hlY2ssKSkKCiAgICBkZWYgX2NoZWNrX3JlcXVpcmVkX29uZV9vZihzZWxmLCBzcGVjKToKICAgICAgICBpZiBzcGVjIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGZvciBjaGVjayBpbiBzcGVjOgogICAgICAgICAgICBjb3VudCA9IHNlbGYuX2NvdW50X3Rlcm1zKGNoZWNrKQogICAgICAgICAgICBpZiBjb3VudCA9PSAwOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyByZXF1aXJlZDogJXMiICUgJywnLmpvaW4oY2hlY2spKQoKICAgIGRlZiBfY2hlY2tfcmVxdWlyZWRfdG9nZXRoZXIoc2VsZiwgc3BlYyk6CiAgICAgICAgaWYgc3BlYyBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4KICAgICAgICBmb3IgY2hlY2sgaW4gc3BlYzoKICAgICAgICAgICAgY291bnRzID0gWyBzZWxmLl9jb3VudF90ZXJtcyhbZmllbGRdKSBmb3IgZmllbGQgaW4gY2hlY2sgXQogICAgICAgICAgICBub25femVybyA9IFsgYyBmb3IgYyBpbiBjb3VudHMgaWYgYyA+IDAgXQogICAgICAgICAgICBpZiBsZW4obm9uX3plcm8pID4gMDoKICAgICAgICAgICAgICAgIGlmIDAgaW4gY291bnRzOgogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0icGFyYW1ldGVycyBhcmUgcmVxdWlyZWQgdG9nZXRoZXI6ICVzIiAlIChjaGVjaywpKQoKICAgIGRlZiBfY2hlY2tfcmVxdWlyZWRfYXJndW1lbnRzKHNlbGYsIHNwZWM9Tm9uZSwgcGFyYW09Tm9uZSApOgogICAgICAgICcnJyBlbnN1cmUgYWxsIHJlcXVpcmVkIGFyZ3VtZW50cyBhcmUgcHJlc2VudCAnJycKICAgICAgICBtaXNzaW5nID0gW10KICAgICAgICBpZiBzcGVjIGlzIE5vbmU6CiAgICAgICAgICAgIHNwZWMgPSBzZWxmLmFyZ3VtZW50X3NwZWMKICAgICAgICBpZiBwYXJhbSBpcyBOb25lOgogICAgICAgICAgICBwYXJhbSA9IHNlbGYucGFyYW1zCiAgICAgICAgZm9yIChrLHYpIGluIHNwZWMuaXRlbXMoKToKICAgICAgICAgICAgcmVxdWlyZWQgPSB2LmdldCgncmVxdWlyZWQnLCBGYWxzZSkKICAgICAgICAgICAgaWYgcmVxdWlyZWQgYW5kIGsgbm90IGluIHBhcmFtOgogICAgICAgICAgICAgICAgbWlzc2luZy5hcHBlbmQoaykKICAgICAgICBpZiBsZW4obWlzc2luZykgPiAwOgogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9Im1pc3NpbmcgcmVxdWlyZWQgYXJndW1lbnRzOiAlcyIgJSAiLCIuam9pbihtaXNzaW5nKSkKCiAgICBkZWYgX2NoZWNrX3JlcXVpcmVkX2lmKHNlbGYsIHNwZWMpOgogICAgICAgICcnJyBlbnN1cmUgdGhhdCBwYXJhbWV0ZXJzIHdoaWNoIGNvbmRpdGlvbmFsbHkgcmVxdWlyZWQgYXJlIHByZXNlbnQgJycnCiAgICAgICAgaWYgc3BlYyBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4KICAgICAgICBmb3Igc3AgaW4gc3BlYzoKICAgICAgICAgICAgbWlzc2luZyA9IFtdCiAgICAgICAgICAgIG1heF9taXNzaW5nX2NvdW50ID0gMAogICAgICAgICAgICBpc19vbmVfb2YgPSBGYWxzZQogICAgICAgICAgICBpZiBsZW4oc3ApID09IDQ6CiAgICAgICAgICAgICAgICBrZXksIHZhbCwgcmVxdWlyZW1lbnRzLCBpc19vbmVfb2YgPSBzcAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAga2V5LCB2YWwsIHJlcXVpcmVtZW50cyA9IHNwCgogICAgICAgICAgICAjIGlzX29uZV9vZiBpcyBUcnVlIGF0IGxlYXN0IG9uZSByZXF1aXJlbWVudCBzaG91bGQgYmUKICAgICAgICAgICAgIyBwcmVzZW50LCBlbHNlIGFsbCByZXF1aXJlbWVudHMgc2hvdWxkIGJlIHByZXNlbnQuCiAgICAgICAgICAgIGlmIGlzX29uZV9vZjoKICAgICAgICAgICAgICAgIG1heF9taXNzaW5nX2NvdW50ID0gbGVuKHJlcXVpcmVtZW50cykKCiAgICAgICAgICAgIGlmIGtleSBpbiBzZWxmLnBhcmFtcyBhbmQgc2VsZi5wYXJhbXNba2V5XSA9PSB2YWw6CiAgICAgICAgICAgICAgICBmb3IgY2hlY2sgaW4gcmVxdWlyZW1lbnRzOgogICAgICAgICAgICAgICAgICAgIGNvdW50ID0gc2VsZi5fY291bnRfdGVybXMoKGNoZWNrLCkpCiAgICAgICAgICAgICAgICAgICAgaWYgY291bnQgPT0gMDoKICAgICAgICAgICAgICAgICAgICAgICAgbWlzc2luZy5hcHBlbmQoY2hlY2spCiAgICAgICAgICAgIGlmIGxlbihtaXNzaW5nKSBhbmQgbGVuKG1pc3NpbmcpID49IG1heF9taXNzaW5nX2NvdW50OgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSIlcyBpcyAlcyBidXQgdGhlIGZvbGxvd2luZyBhcmUgbWlzc2luZzogJXMiICUgKGtleSwgdmFsLCAnLCcuam9pbihtaXNzaW5nKSkpCgogICAgZGVmIF9jaGVja19hcmd1bWVudF92YWx1ZXMoc2VsZiwgc3BlYz1Ob25lLCBwYXJhbT1Ob25lKToKICAgICAgICAnJycgZW5zdXJlIGFsbCBhcmd1bWVudHMgaGF2ZSB0aGUgcmVxdWVzdGVkIHZhbHVlcywgYW5kIHRoZXJlIGFyZSBubyBzdHJheSBhcmd1bWVudHMgJycnCiAgICAgICAgaWYgc3BlYyBpcyBOb25lOgogICAgICAgICAgICBzcGVjID0gc2VsZi5hcmd1bWVudF9zcGVjCiAgICAgICAgaWYgcGFyYW0gaXMgTm9uZToKICAgICAgICAgICAgcGFyYW0gPSBzZWxmLnBhcmFtcwogICAgICAgIGZvciAoayx2KSBpbiBzcGVjLml0ZW1zKCk6CiAgICAgICAgICAgIGNob2ljZXMgPSB2LmdldCgnY2hvaWNlcycsTm9uZSkKICAgICAgICAgICAgaWYgY2hvaWNlcyBpcyBOb25lOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShjaG9pY2VzLCBTRVFVRU5DRVRZUEUpIGFuZCBub3QgaXNpbnN0YW5jZShjaG9pY2VzLCAoYmluYXJ5X3R5cGUsIHRleHRfdHlwZSkpOgogICAgICAgICAgICAgICAgaWYgayBpbiBwYXJhbToKICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbVtrXSBub3QgaW4gY2hvaWNlczoKICAgICAgICAgICAgICAgICAgICAgICAgIyBQeVlhbWwgY29udmVydHMgY2VydGFpbiBzdHJpbmdzIHRvIGJvb2xzLiAgSWYgd2UgY2FuIHVuYW1iaWd1b3VzbHkgY29udmVydCBiYWNrLCBkbyBzbyBiZWZvcmUgY2hlY2tpbmcKICAgICAgICAgICAgICAgICAgICAgICAgIyB0aGUgdmFsdWUuICBJZiB3ZSBjYW4ndCBmaWd1cmUgdGhpcyBvdXQsIG1vZHVsZSBhdXRob3IgaXMgcmVzcG9uc2libGUuCiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyZWRfY2hvaWNlcyA9IE5vbmUKICAgICAgICAgICAgICAgICAgICAgICAgaWYgcGFyYW1ba10gPT0gJ0ZhbHNlJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyZWRfY2hvaWNlcyA9IF9sZW5pZW50X2xvd2VyY2FzZShjaG9pY2VzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRkFMU0VZID0gZnJvemVuc2V0KEJPT0xFQU5TX0ZBTFNFKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmxhcCA9IEZBTFNFWS5pbnRlcnNlY3Rpb24oY2hvaWNlcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbihvdmVybGFwKSA9PSAxOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgRXh0cmFjdCBmcm9tIGEgc2V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBhcmFtW2tdLCkgPSBvdmVybGFwCgogICAgICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbVtrXSA9PSAnVHJ1ZSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBsb3dlcmVkX2Nob2ljZXMgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb3dlcmVkX2Nob2ljZXMgPSBfbGVuaWVudF9sb3dlcmNhc2UoY2hvaWNlcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRSVVRIWSA9IGZyb3plbnNldChCT09MRUFOU19UUlVFKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmxhcCA9IFRSVVRIWS5pbnRlcnNlY3Rpb24oY2hvaWNlcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbihvdmVybGFwKSA9PSAxOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwYXJhbVtrXSwpID0gb3ZlcmxhcAoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgcGFyYW1ba10gbm90IGluIGNob2ljZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaG9pY2VzX3N0cj0iLCIuam9pbihbdG9fbmF0aXZlKGMpIGZvciBjIGluIGNob2ljZXNdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnPSJ2YWx1ZSBvZiAlcyBtdXN0IGJlIG9uZSBvZjogJXMsIGdvdDogJXMiICUgKGssIGNob2ljZXNfc3RyLCBwYXJhbVtrXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz1tc2cpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9ImludGVybmFsIGVycm9yOiBjaG9pY2VzIGZvciBhcmd1bWVudCAlcyBhcmUgbm90IGl0ZXJhYmxlOiAlcyIgJSAoaywgY2hvaWNlcykpCgogICAgZGVmIHNhZmVfZXZhbChzZWxmLCB2YWx1ZSwgbG9jYWxzPU5vbmUsIGluY2x1ZGVfZXhjZXB0aW9ucz1GYWxzZSk6CgogICAgICAgICMgZG8gbm90IGFsbG93IG1ldGhvZCBjYWxscyB0byBtb2R1bGVzCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UodmFsdWUsIHN0cmluZ190eXBlcyk6CiAgICAgICAgICAgICMgYWxyZWFkeSB0ZW1wbGF0ZWQgdG8gYSBkYXRhdmFsdWVzdHJ1Y3R1cmUsIHBlcmhhcHM/CiAgICAgICAgICAgIGlmIGluY2x1ZGVfZXhjZXB0aW9uczoKICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWUsIE5vbmUpCiAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgIGlmIHJlLnNlYXJjaChyJ1x3XC5cdytcKCcsIHZhbHVlKToKICAgICAgICAgICAgaWYgaW5jbHVkZV9leGNlcHRpb25zOgogICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSwgTm9uZSkKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCiAgICAgICAgIyBkbyBub3QgYWxsb3cgaW1wb3J0cwogICAgICAgIGlmIHJlLnNlYXJjaChyJ2ltcG9ydCBcdysnLCB2YWx1ZSk6CiAgICAgICAgICAgIGlmIGluY2x1ZGVfZXhjZXB0aW9uczoKICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWUsIE5vbmUpCiAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzdWx0ID0gbGl0ZXJhbF9ldmFsKHZhbHVlKQogICAgICAgICAgICBpZiBpbmNsdWRlX2V4Y2VwdGlvbnM6CiAgICAgICAgICAgICAgICByZXR1cm4gKHJlc3VsdCwgTm9uZSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgIGlmIGluY2x1ZGVfZXhjZXB0aW9uczoKICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWUsIGUpCiAgICAgICAgICAgIHJldHVybiB2YWx1ZQoKICAgIGRlZiBfY2hlY2tfdHlwZV9zdHIoc2VsZiwgdmFsdWUpOgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIHN0cmluZ190eXBlcyk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgICMgTm90ZTogVGhpcyBjb3VsZCB0aHJvdyBhIHVuaWNvZGUgZXJyb3IgaWYgdmFsdWUncyBfX3N0cl9fKCkgbWV0aG9kCiAgICAgICAgIyByZXR1cm5zIG5vbi1hc2NpaS4gIEhhdmUgdG8gcG9ydCB1dGlscy50b19ieXRlcygpIGlmIHRoYXQgaGFwcGVucwogICAgICAgIHJldHVybiBzdHIodmFsdWUpCgogICAgZGVmIF9jaGVja190eXBlX2xpc3Qoc2VsZiwgdmFsdWUpOgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIGxpc3QpOgogICAgICAgICAgICByZXR1cm4gdmFsdWUKCiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgc3RyaW5nX3R5cGVzKToKICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNwbGl0KCIsIikKICAgICAgICBlbGlmIGlzaW5zdGFuY2UodmFsdWUsIGludCkgb3IgaXNpbnN0YW5jZSh2YWx1ZSwgZmxvYXQpOgogICAgICAgICAgICByZXR1cm4gWyBzdHIodmFsdWUpIF0KCiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCclcyBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgbGlzdCcgJSB0eXBlKHZhbHVlKSkKCiAgICBkZWYgX2NoZWNrX3R5cGVfZGljdChzZWxmLCB2YWx1ZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgZGljdCk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQoKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICBpZiB2YWx1ZS5zdGFydHN3aXRoKCJ7Iik6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGpzb24ubG9hZHModmFsdWUpCiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdCwgZXhjKSA9IHNlbGYuc2FmZV9ldmFsKHZhbHVlLCBkaWN0KCksIGluY2x1ZGVfZXhjZXB0aW9ucz1UcnVlKQogICAgICAgICAgICAgICAgICAgIGlmIGV4YyBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCd1bmFibGUgdG8gZXZhbHVhdGUgc3RyaW5nIGFzIGRpY3Rpb25hcnknKQogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQKICAgICAgICAgICAgZWxpZiAnPScgaW4gdmFsdWU6CiAgICAgICAgICAgICAgICBmaWVsZHMgPSBbXQogICAgICAgICAgICAgICAgZmllbGRfYnVmZmVyID0gW10KICAgICAgICAgICAgICAgIGluX3F1b3RlID0gRmFsc2UKICAgICAgICAgICAgICAgIGluX2VzY2FwZSA9IEZhbHNlCiAgICAgICAgICAgICAgICBmb3IgYyBpbiB2YWx1ZS5zdHJpcCgpOgogICAgICAgICAgICAgICAgICAgIGlmIGluX2VzY2FwZToKICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfYnVmZmVyLmFwcGVuZChjKQogICAgICAgICAgICAgICAgICAgICAgICBpbl9lc2NhcGUgPSBGYWxzZQogICAgICAgICAgICAgICAgICAgIGVsaWYgYyA9PSAnXFwnOgogICAgICAgICAgICAgICAgICAgICAgICBpbl9lc2NhcGUgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgZWxpZiBub3QgaW5fcXVvdGUgYW5kIGMgaW4gKCdcJycsICciJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIGluX3F1b3RlID0gYwogICAgICAgICAgICAgICAgICAgIGVsaWYgaW5fcXVvdGUgYW5kIGluX3F1b3RlID09IGM6CiAgICAgICAgICAgICAgICAgICAgICAgIGluX3F1b3RlID0gRmFsc2UKICAgICAgICAgICAgICAgICAgICBlbGlmIG5vdCBpbl9xdW90ZSBhbmQgYyBpbiAoJywnLCAnICcpOgogICAgICAgICAgICAgICAgICAgICAgICBmaWVsZCA9ICcnLmpvaW4oZmllbGRfYnVmZmVyKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBmaWVsZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkcy5hcHBlbmQoZmllbGQpCiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkX2J1ZmZlciA9IFtdCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfYnVmZmVyLmFwcGVuZChjKQoKICAgICAgICAgICAgICAgIGZpZWxkID0gJycuam9pbihmaWVsZF9idWZmZXIpCiAgICAgICAgICAgICAgICBpZiBmaWVsZDoKICAgICAgICAgICAgICAgICAgICBmaWVsZHMuYXBwZW5kKGZpZWxkKQogICAgICAgICAgICAgICAgcmV0dXJuIGRpY3QoeC5zcGxpdCgiPSIsIDEpIGZvciB4IGluIGZpZWxkcykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigiZGljdGlvbmFyeSByZXF1ZXN0ZWQsIGNvdWxkIG5vdCBwYXJzZSBKU09OIG9yIGtleT12YWx1ZSIpCgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignJXMgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIGRpY3QnICUgdHlwZSh2YWx1ZSkpCgogICAgZGVmIF9jaGVja190eXBlX2Jvb2woc2VsZiwgdmFsdWUpOgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIGJvb2wpOgogICAgICAgICAgICByZXR1cm4gdmFsdWUKCiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgc3RyaW5nX3R5cGVzKSBvciBpc2luc3RhbmNlKHZhbHVlLCBpbnQpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5ib29sZWFuKHZhbHVlKQoKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYSBib29sJyAlIHR5cGUodmFsdWUpKQoKICAgIGRlZiBfY2hlY2tfdHlwZV9pbnQoc2VsZiwgdmFsdWUpOgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIGludCk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQoKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICByZXR1cm4gaW50KHZhbHVlKQoKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYW4gaW50JyAlIHR5cGUodmFsdWUpKQoKICAgIGRlZiBfY2hlY2tfdHlwZV9mbG9hdChzZWxmLCB2YWx1ZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgZmxvYXQpOgogICAgICAgICAgICByZXR1cm4gdmFsdWUKCiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgKGJpbmFyeV90eXBlLCB0ZXh0X3R5cGUsIGludCkpOgogICAgICAgICAgICByZXR1cm4gZmxvYXQodmFsdWUpCgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignJXMgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIGZsb2F0JyAlIHR5cGUodmFsdWUpKQoKICAgIGRlZiBfY2hlY2tfdHlwZV9wYXRoKHNlbGYsIHZhbHVlKToKICAgICAgICB2YWx1ZSA9IHNlbGYuX2NoZWNrX3R5cGVfc3RyKHZhbHVlKQogICAgICAgIHJldHVybiBvcy5wYXRoLmV4cGFuZHVzZXIob3MucGF0aC5leHBhbmR2YXJzKHZhbHVlKSkKCiAgICBkZWYgX2NoZWNrX3R5cGVfanNvbmFyZyhzZWxmLCB2YWx1ZSk6CiAgICAgICAgIyBSZXR1cm4gYSBqc29uaWZpZWQgc3RyaW5nLiAgU29tZXRpbWVzIHRoZSBjb250cm9sbGVyIHR1cm5zIGEganNvbgogICAgICAgICMgc3RyaW5nIGludG8gYSBkaWN0L2xpc3Qgc28gdHJhbnNmb3JtIGl0IGJhY2sgaW50byBqc29uIGhlcmUKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCAodGV4dF90eXBlLCBiaW5hcnlfdHlwZSkpOgogICAgICAgICAgICByZXR1cm4gdmFsdWUuc3RyaXAoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIChsaXN0LCB0dXBsZSwgZGljdCkpOgogICAgICAgICAgICAgICAgcmV0dXJuIGpzb24uZHVtcHModmFsdWUpCiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCclcyBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEganNvbiBzdHJpbmcnICUgdHlwZSh2YWx1ZSkpCgogICAgZGVmIF9jaGVja190eXBlX3JhdyhzZWxmLCB2YWx1ZSk6CiAgICAgICAgcmV0dXJuIHZhbHVlCgoKICAgIGRlZiBfY2hlY2tfdHlwZV9ieXRlcyhzZWxmLCB2YWx1ZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLmh1bWFuX3RvX2J5dGVzKHZhbHVlKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYSBCeXRlIHZhbHVlJyAlIHR5cGUodmFsdWUpKQoKCiAgICBkZWYgX2NoZWNrX3R5cGVfYml0cyhzZWxmLCB2YWx1ZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLmh1bWFuX3RvX2J5dGVzKHZhbHVlLCBpc2JpdHM9VHJ1ZSkKICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCclcyBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgQml0IHZhbHVlJyAlIHR5cGUodmFsdWUpKQoKICAgIGRlZiBfY2hlY2tfYXJndW1lbnRfdHlwZXMoc2VsZiwgc3BlYz1Ob25lLCBwYXJhbT1Ob25lKToKICAgICAgICAnJycgZW5zdXJlIGFsbCBhcmd1bWVudHMgaGF2ZSB0aGUgcmVxdWVzdGVkIHR5cGUgJycnCgogICAgICAgIGlmIHNwZWMgaXMgTm9uZToKICAgICAgICAgICAgc3BlYyA9IHNlbGYuYXJndW1lbnRfc3BlYwogICAgICAgIGlmIHBhcmFtIGlzIE5vbmU6CiAgICAgICAgICAgIHBhcmFtID0gc2VsZi5wYXJhbXMKCiAgICAgICAgZm9yIChrLCB2KSBpbiBzcGVjLml0ZW1zKCk6CiAgICAgICAgICAgIHdhbnRlZCA9IHYuZ2V0KCd0eXBlJywgTm9uZSkKICAgICAgICAgICAgaWYgayBub3QgaW4gcGFyYW06CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBpZiB3YW50ZWQgaXMgTm9uZToKICAgICAgICAgICAgICAgICMgTW9zdGx5IHdlIHdhbnQgdG8gZGVmYXVsdCB0byBzdHIuCiAgICAgICAgICAgICAgICAjIEZvciB2YWx1ZXMgc2V0IHRvIE5vbmUgZXhwbGljaXRseSwgcmV0dXJuIE5vbmUgaW5zdGVhZCBhcwogICAgICAgICAgICAgICAgIyB0aGF0IGFsbG93cyBhIHVzZXIgdG8gdW5zZXQgYSBwYXJhbWV0ZXIKICAgICAgICAgICAgICAgIGlmIHBhcmFtW2tdIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIHdhbnRlZCA9ICdzdHInCgogICAgICAgICAgICB2YWx1ZSA9IHBhcmFtW2tdCiAgICAgICAgICAgIGlmIHZhbHVlIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBjb250aW51ZQoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdHlwZV9jaGVja2VyID0gc2VsZi5fQ0hFQ0tfQVJHVU1FTlRfVFlQRVNfRElTUEFUQ0hFUlt3YW50ZWRdCiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0iaW1wbGVtZW50YXRpb24gZXJyb3I6IHVua25vd24gdHlwZSAlcyByZXF1ZXN0ZWQgZm9yICVzIiAlICh3YW50ZWQsIGspKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBwYXJhbVtrXSA9IHR5cGVfY2hlY2tlcih2YWx1ZSkKICAgICAgICAgICAgZXhjZXB0IChUeXBlRXJyb3IsIFZhbHVlRXJyb3IpOgogICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJhcmd1bWVudCAlcyBpcyBvZiB0eXBlICVzIGFuZCB3ZSB3ZXJlIHVuYWJsZSB0byBjb252ZXJ0IHRvICVzOiAlcyIgJSAoaywgdHlwZSh2YWx1ZSksIHdhbnRlZCwgZSkpCgogICAgICAgICAgICAjIGRlYWwgd2l0aCBzdWIgb3B0aW9ucyB0byBjcmVhdGUgc3ViIHNwZWMKICAgICAgICAgICAgc3BlYyA9IE5vbmUKICAgICAgICAgICAgaWYgd2FudGVkID09ICdkaWN0JyBvciAod2FudGVkID09ICdsaXN0JyBhbmQgdi5nZXQoJ2VsZW1lbnRzJywgJycpID09ICdkaWN0Jyk6CiAgICAgICAgICAgICAgICBzcGVjID0gdi5nZXQoJ29wdGlvbnMnLCBOb25lKQogICAgICAgICAgICAgICAgaWYgc3BlYzoKICAgICAgICAgICAgICAgICAgICBzZWxmLl9jaGVja19yZXF1aXJlZF9hcmd1bWVudHMoc3BlYywgcGFyYW1ba10pCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fY2hlY2tfYXJndW1lbnRfdHlwZXMoc3BlYywgcGFyYW1ba10pCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fY2hlY2tfYXJndW1lbnRfdmFsdWVzKHNwZWMsIHBhcmFtW2tdKQoKICAgIGRlZiBfc2V0X2RlZmF1bHRzKHNlbGYsIHByZT1UcnVlKToKICAgICAgICBmb3IgKGssdikgaW4gc2VsZi5hcmd1bWVudF9zcGVjLml0ZW1zKCk6CiAgICAgICAgICAgIGRlZmF1bHQgPSB2LmdldCgnZGVmYXVsdCcsIE5vbmUpCiAgICAgICAgICAgIGlmIHByZSBpcyBUcnVlOgogICAgICAgICAgICAgICAgIyB0aGlzIHByZXZlbnRzIHNldHRpbmcgZGVmYXVsdHMgb24gcmVxdWlyZWQgaXRlbXMKICAgICAgICAgICAgICAgIGlmIGRlZmF1bHQgaXMgbm90IE5vbmUgYW5kIGsgbm90IGluIHNlbGYucGFyYW1zOgogICAgICAgICAgICAgICAgICAgIHNlbGYucGFyYW1zW2tdID0gZGVmYXVsdAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBtYWtlIHN1cmUgdGhpbmdzIHdpdGhvdXQgYSBkZWZhdWx0IHN0aWxsIGdldCBzZXQgTm9uZQogICAgICAgICAgICAgICAgaWYgayBub3QgaW4gc2VsZi5wYXJhbXM6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5wYXJhbXNba10gPSBkZWZhdWx0CgogICAgZGVmIF9zZXRfZmFsbGJhY2tzKHNlbGYpOgogICAgICAgIGZvciBrLHYgaW4gc2VsZi5hcmd1bWVudF9zcGVjLml0ZW1zKCk6CiAgICAgICAgICAgIGZhbGxiYWNrID0gdi5nZXQoJ2ZhbGxiYWNrJywgKE5vbmUsKSkKICAgICAgICAgICAgZmFsbGJhY2tfc3RyYXRlZ3kgPSBmYWxsYmFja1swXQogICAgICAgICAgICBmYWxsYmFja19hcmdzID0gW10KICAgICAgICAgICAgZmFsbGJhY2tfa3dhcmdzID0ge30KICAgICAgICAgICAgaWYgayBub3QgaW4gc2VsZi5wYXJhbXMgYW5kIGZhbGxiYWNrX3N0cmF0ZWd5IGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgZm9yIGl0ZW0gaW4gZmFsbGJhY2tbMTpdOgogICAgICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoaXRlbSwgZGljdCk6CiAgICAgICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrX2t3YXJncyA9IGl0ZW0KICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBmYWxsYmFja19hcmdzID0gaXRlbQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHNlbGYucGFyYW1zW2tdID0gZmFsbGJhY2tfc3RyYXRlZ3koKmZhbGxiYWNrX2FyZ3MsICoqZmFsbGJhY2tfa3dhcmdzKQogICAgICAgICAgICAgICAgZXhjZXB0IEFuc2libGVGYWxsYmFja05vdEZvdW5kOgogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgZGVmIF9sb2FkX3BhcmFtcyhzZWxmKToKICAgICAgICAnJycgcmVhZCB0aGUgaW5wdXQgYW5kIHNldCB0aGUgcGFyYW1zIGF0dHJpYnV0ZS4KCiAgICAgICAgVGhpcyBtZXRob2QgaXMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiAgVGhlIGd1dHMgb2YgdGhlIGZ1bmN0aW9uCiAgICAgICAgd2VyZSBtb3ZlZCBvdXQgaW4gMi4xIHNvIHRoYXQgY3VzdG9tIG1vZHVsZXMgY291bGQgcmVhZCB0aGUgcGFyYW1ldGVycy4KICAgICAgICAnJycKICAgICAgICAjIGRlYnVnIG92ZXJyaWRlcyB0byByZWFkIGFyZ3MgZnJvbSBmaWxlIG9yIGNtZGxpbmUKICAgICAgICBzZWxmLnBhcmFtcyA9IF9sb2FkX3BhcmFtcygpCgogICAgZGVmIF9sb2dfdG9fc3lzbG9nKHNlbGYsIG1zZyk6CiAgICAgICAgaWYgSEFTX1NZU0xPRzoKICAgICAgICAgICAgbW9kdWxlID0gJ2Fuc2libGUtJXMnICUgc2VsZi5fbmFtZQogICAgICAgICAgICBmYWNpbGl0eSA9IGdldGF0dHIoc3lzbG9nLCBzZWxmLl9zeXNsb2dfZmFjaWxpdHksIHN5c2xvZy5MT0dfVVNFUikKICAgICAgICAgICAgc3lzbG9nLm9wZW5sb2coc3RyKG1vZHVsZSksIDAsIGZhY2lsaXR5KQogICAgICAgICAgICBzeXNsb2cuc3lzbG9nKHN5c2xvZy5MT0dfSU5GTywgbXNnKQoKICAgIGRlZiBkZWJ1ZyhzZWxmLCBtc2cpOgogICAgICAgIGlmIHNlbGYuX2RlYnVnOgogICAgICAgICAgICBzZWxmLmxvZygnW2RlYnVnXSAlcycgJSBtc2cpCgogICAgZGVmIGxvZyhzZWxmLCBtc2csIGxvZ19hcmdzPU5vbmUpOgoKICAgICAgICBpZiBub3Qgc2VsZi5ub19sb2c6CgogICAgICAgICAgICBpZiBsb2dfYXJncyBpcyBOb25lOgogICAgICAgICAgICAgICAgbG9nX2FyZ3MgPSBkaWN0KCkKCiAgICAgICAgICAgIG1vZHVsZSA9ICdhbnNpYmxlLSVzJyAlIHNlbGYuX25hbWUKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShtb2R1bGUsIGJpbmFyeV90eXBlKToKICAgICAgICAgICAgICAgIG1vZHVsZSA9IG1vZHVsZS5kZWNvZGUoJ3V0Zi04JywgJ3JlcGxhY2UnKQoKICAgICAgICAgICAgIyA2NjU1IC0gYWxsb3cgZm9yIGFjY2VudGVkIGNoYXJhY3RlcnMKICAgICAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UobXNnLCAoYmluYXJ5X3R5cGUsIHRleHRfdHlwZSkpOgogICAgICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJtc2cgc2hvdWxkIGJlIGEgc3RyaW5nIChnb3QgJXMpIiAlIHR5cGUobXNnKSkKCiAgICAgICAgICAgICMgV2Ugd2FudCBqb3VybmFsIHRvIGFsd2F5cyB0YWtlIHRleHQgdHlwZQogICAgICAgICAgICAjIHN5c2xvZyB0YWtlcyBieXRlcyBvbiBweTIsIHRleHQgdHlwZSBvbiBweTMKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShtc2csIGJpbmFyeV90eXBlKToKICAgICAgICAgICAgICAgIGpvdXJuYWxfbXNnID0gcmVtb3ZlX3ZhbHVlcyhtc2cuZGVjb2RlKCd1dGYtOCcsICdyZXBsYWNlJyksIHNlbGYubm9fbG9nX3ZhbHVlcykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgVE9ETzogc3Vycm9nYXRlZXNjYXBlIGlzIGEgZGFuZ2VyIGhlcmUgb24gUHkzCiAgICAgICAgICAgICAgICBqb3VybmFsX21zZyA9IHJlbW92ZV92YWx1ZXMobXNnLCBzZWxmLm5vX2xvZ192YWx1ZXMpCgogICAgICAgICAgICBpZiBQWTM6CiAgICAgICAgICAgICAgICBzeXNsb2dfbXNnID0gam91cm5hbF9tc2cKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHN5c2xvZ19tc2cgPSBqb3VybmFsX21zZy5lbmNvZGUoJ3V0Zi04JywgJ3JlcGxhY2UnKQoKICAgICAgICAgICAgaWYgaGFzX2pvdXJuYWw6CiAgICAgICAgICAgICAgICBqb3VybmFsX2FyZ3MgPSBbKCJNT0RVTEUiLCBvcy5wYXRoLmJhc2VuYW1lKF9fZmlsZV9fKSldCiAgICAgICAgICAgICAgICBmb3IgYXJnIGluIGxvZ19hcmdzOgogICAgICAgICAgICAgICAgICAgIGpvdXJuYWxfYXJncy5hcHBlbmQoKGFyZy51cHBlcigpLCBzdHIobG9nX2FyZ3NbYXJnXSkpKQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGpvdXJuYWwuc2VuZCh1IiVzICVzIiAlIChtb2R1bGUsIGpvdXJuYWxfbXNnKSwgKipkaWN0KGpvdXJuYWxfYXJncykpCiAgICAgICAgICAgICAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICAgICAgICAgICAgICAjIGZhbGwgYmFjayB0byBzeXNsb2cgc2luY2UgbG9nZ2luZyB0byBqb3VybmFsIGZhaWxlZAogICAgICAgICAgICAgICAgICAgIHNlbGYuX2xvZ190b19zeXNsb2coc3lzbG9nX21zZykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYuX2xvZ190b19zeXNsb2coc3lzbG9nX21zZykKCiAgICBkZWYgX2xvZ19pbnZvY2F0aW9uKHNlbGYpOgogICAgICAgICcnJyBsb2cgdGhhdCBhbnNpYmxlIHJhbiB0aGUgbW9kdWxlICcnJwogICAgICAgICMgVE9ETzogZ2VuZXJhbGl6ZSBhIHNlcGFyYXRlIGxvZyBmdW5jdGlvbiBhbmQgbWFrZSBsb2dfaW52b2NhdGlvbiB1c2UgaXQKICAgICAgICAjIFNhbml0aXplIHBvc3NpYmxlIHBhc3N3b3JkIGFyZ3VtZW50IHdoZW4gbG9nZ2luZy4KICAgICAgICBsb2dfYXJncyA9IGRpY3QoKQoKICAgICAgICBmb3IgcGFyYW0gaW4gc2VsZi5wYXJhbXM6CiAgICAgICAgICAgIGNhbm9uICA9IHNlbGYuYWxpYXNlcy5nZXQocGFyYW0sIHBhcmFtKQogICAgICAgICAgICBhcmdfb3B0cyA9IHNlbGYuYXJndW1lbnRfc3BlYy5nZXQoY2Fub24sIHt9KQogICAgICAgICAgICBub19sb2cgPSBhcmdfb3B0cy5nZXQoJ25vX2xvZycsIEZhbHNlKQoKICAgICAgICAgICAgaWYgc2VsZi5ib29sZWFuKG5vX2xvZyk6CiAgICAgICAgICAgICAgICBsb2dfYXJnc1twYXJhbV0gPSAnTk9UX0xPR0dJTkdfUEFSQU1FVEVSJwogICAgICAgICAgICAjIHRyeSB0byBjYXB0dXJlIGFsbCBwYXNzd29yZHMvcGFzc3BocmFzZSBuYW1lZCBmaWVsZHMgbWlzc2VkIGJ5IG5vX2xvZwogICAgICAgICAgICBlbGlmIFBBU1NXT1JEX01BVENILnNlYXJjaChwYXJhbSkgYW5kIFwKICAgICAgICAgICAgICBhcmdfb3B0cy5nZXQoJ3R5cGUnLCAnc3RyJykgIT0gJ2Jvb2wnIGFuZCBcCiAgICAgICAgICAgICAgbm90IGFyZ19vcHRzLmdldCgnY2hvaWNlcycsIEZhbHNlKToKICAgICAgICAgICAgICAgICMgc2tpcCBib29sZWFuIGFuZCBlbnVtcyBhcyB0aGV5IGFyZSBhYm91dCAncGFzc3dvcmQnIHN0YXRlCiAgICAgICAgICAgICAgICBsb2dfYXJnc1twYXJhbV0gPSAnTk9UX0xPR0dJTkdfUEFTU1dPUkQnCiAgICAgICAgICAgICAgICBzZWxmLndhcm4oJ01vZHVsZSBkaWQgbm90IHNldCBub19sb2cgZm9yICVzJyAlIHBhcmFtKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcGFyYW1fdmFsID0gc2VsZi5wYXJhbXNbcGFyYW1dCiAgICAgICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShwYXJhbV92YWwsICh0ZXh0X3R5cGUsIGJpbmFyeV90eXBlKSk6CiAgICAgICAgICAgICAgICAgICAgcGFyYW1fdmFsID0gc3RyKHBhcmFtX3ZhbCkKICAgICAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZShwYXJhbV92YWwsIHRleHRfdHlwZSk6CiAgICAgICAgICAgICAgICAgICAgcGFyYW1fdmFsID0gcGFyYW1fdmFsLmVuY29kZSgndXRmLTgnKQogICAgICAgICAgICAgICAgbG9nX2FyZ3NbcGFyYW1dID0gaGV1cmlzdGljX2xvZ19zYW5pdGl6ZShwYXJhbV92YWwsIHNlbGYubm9fbG9nX3ZhbHVlcykKCiAgICAgICAgbXNnID0gWyclcz0lcycgJSAodG9fbmF0aXZlKGFyZyksIHRvX25hdGl2ZSh2YWwpKSBmb3IgYXJnLCB2YWwgaW4gbG9nX2FyZ3MuaXRlbXMoKV0KICAgICAgICBpZiBtc2c6CiAgICAgICAgICAgIG1zZyA9ICdJbnZva2VkIHdpdGggJXMnICUgJyAnLmpvaW4obXNnKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG1zZyA9ICdJbnZva2VkJwoKICAgICAgICBzZWxmLmxvZyhtc2csIGxvZ19hcmdzPWxvZ19hcmdzKQoKCiAgICBkZWYgX3NldF9jd2Qoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBjd2QgPSBvcy5nZXRjd2QoKQogICAgICAgICAgICBpZiBub3Qgb3MuYWNjZXNzKGN3ZCwgb3MuRl9PS3xvcy5SX09LKToKICAgICAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbigpCiAgICAgICAgICAgIHJldHVybiBjd2QKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICMgd2UgZG9uJ3QgaGF2ZSBhY2Nlc3MgdG8gdGhlIGN3ZCwgcHJvYmFibHkgYmVjYXVzZSBvZiBzdWRvLgogICAgICAgICAgICAjIFRyeSBhbmQgbW92ZSB0byBhIG5ldXRyYWwgbG9jYXRpb24gdG8gcHJldmVudCBlcnJvcnMKICAgICAgICAgICAgZm9yIGN3ZCBpbiBbb3MucGF0aC5leHBhbmR2YXJzKCckSE9NRScpLCB0ZW1wZmlsZS5nZXR0ZW1wZGlyKCldOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGlmIG9zLmFjY2Vzcyhjd2QsIG9zLkZfT0t8b3MuUl9PSyk6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLmNoZGlyKGN3ZCkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN3ZAogICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAjIHdlIHdvbid0IGVycm9yIGhlcmUsIGFzIGl0IG1heSAqbm90KiBiZSBhIHByb2JsZW0sCiAgICAgICAgIyBhbmQgd2UgZG9uJ3Qgd2FudCB0byBicmVhayBtb2R1bGVzIHVubmVjZXNzYXJpbHkKICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiBnZXRfYmluX3BhdGgoc2VsZiwgYXJnLCByZXF1aXJlZD1GYWxzZSwgb3B0X2RpcnM9W10pOgogICAgICAgICcnJwogICAgICAgIGZpbmQgc3lzdGVtIGV4ZWN1dGFibGUgaW4gUEFUSC4KICAgICAgICBPcHRpb25hbCBhcmd1bWVudHM6CiAgICAgICAgICAgLSByZXF1aXJlZDogIGlmIGV4ZWN1dGFibGUgaXMgbm90IGZvdW5kIGFuZCByZXF1aXJlZCBpcyB0cnVlLCBmYWlsX2pzb24KICAgICAgICAgICAtIG9wdF9kaXJzOiAgb3B0aW9uYWwgbGlzdCBvZiBkaXJlY3RvcmllcyB0byBzZWFyY2ggaW4gYWRkaXRpb24gdG8gUEFUSAogICAgICAgIGlmIGZvdW5kIHJldHVybiBmdWxsIHBhdGg7IG90aGVyd2lzZSByZXR1cm4gTm9uZQogICAgICAgICcnJwogICAgICAgIHNiaW5fcGF0aHMgPSBbJy9zYmluJywgJy91c3Ivc2JpbicsICcvdXNyL2xvY2FsL3NiaW4nXQogICAgICAgIHBhdGhzID0gW10KICAgICAgICBmb3IgZCBpbiBvcHRfZGlyczoKICAgICAgICAgICAgaWYgZCBpcyBub3QgTm9uZSBhbmQgb3MucGF0aC5leGlzdHMoZCk6CiAgICAgICAgICAgICAgICBwYXRocy5hcHBlbmQoZCkKICAgICAgICBwYXRocyArPSBvcy5lbnZpcm9uLmdldCgnUEFUSCcsICcnKS5zcGxpdChvcy5wYXRoc2VwKQogICAgICAgIGJpbl9wYXRoID0gTm9uZQogICAgICAgICMgbWFuZ2xlIFBBVEggdG8gaW5jbHVkZSAvc2JpbiBkaXJzCiAgICAgICAgZm9yIHAgaW4gc2Jpbl9wYXRoczoKICAgICAgICAgICAgaWYgcCBub3QgaW4gcGF0aHMgYW5kIG9zLnBhdGguZXhpc3RzKHApOgogICAgICAgICAgICAgICAgcGF0aHMuYXBwZW5kKHApCiAgICAgICAgZm9yIGQgaW4gcGF0aHM6CiAgICAgICAgICAgIGlmIG5vdCBkOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgcGF0aCA9IG9zLnBhdGguam9pbihkLCBhcmcpCiAgICAgICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKHBhdGgpIGFuZCBub3Qgb3MucGF0aC5pc2RpcihwYXRoKSBhbmQgaXNfZXhlY3V0YWJsZShwYXRoKToKICAgICAgICAgICAgICAgIGJpbl9wYXRoID0gcGF0aAogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICBpZiByZXF1aXJlZCBhbmQgYmluX3BhdGggaXMgTm9uZToKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdGYWlsZWQgdG8gZmluZCByZXF1aXJlZCBleGVjdXRhYmxlICVzIGluIHBhdGhzOiAlcycgJSAoYXJnLCBvcy5wYXRoc2VwLmpvaW4ocGF0aHMpKSkKICAgICAgICByZXR1cm4gYmluX3BhdGgKCiAgICBkZWYgYm9vbGVhbihzZWxmLCBhcmcpOgogICAgICAgICcnJyByZXR1cm4gYSBib29sIGZvciB0aGUgYXJnICcnJwogICAgICAgIGlmIGFyZyBpcyBOb25lIG9yIGlzaW5zdGFuY2UoYXJnLCBib29sKToKICAgICAgICAgICAgcmV0dXJuIGFyZwogICAgICAgIGlmIGlzaW5zdGFuY2UoYXJnLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICBhcmcgPSBhcmcubG93ZXIoKQogICAgICAgIGlmIGFyZyBpbiBCT09MRUFOU19UUlVFOgogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGVsaWYgYXJnIGluIEJPT0xFQU5TX0ZBTFNFOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9JyVzIGlzIG5vdCBhIHZhbGlkIGJvb2xlYW4uIFZhbGlkIGJvb2xlYW5zIGluY2x1ZGU6ICVzJyAlICh0b190ZXh0KGFyZyksICcsJy5qb2luKFsnJXMnICUgeCBmb3IgeCBpbiBCT09MRUFOU10pKSkKCiAgICBkZWYganNvbmlmeShzZWxmLCBkYXRhKToKICAgICAgICBmb3IgZW5jb2RpbmcgaW4gKCJ1dGYtOCIsICJsYXRpbi0xIik6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHJldHVybiBqc29uLmR1bXBzKGRhdGEsIGVuY29kaW5nPWVuY29kaW5nKQogICAgICAgICAgICAjIE9sZCBzeXN0ZW1zIHVzaW5nIG9sZCBzaW1wbGVqc29uIG1vZHVsZSBkb2VzIG5vdCBzdXBwb3J0IGVuY29kaW5nIGtleXdvcmQuCiAgICAgICAgICAgIGV4Y2VwdCBUeXBlRXJyb3I6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgbmV3X2RhdGEgPSBqc29uX2RpY3RfYnl0ZXNfdG9fdW5pY29kZShkYXRhLCBlbmNvZGluZz1lbmNvZGluZykKICAgICAgICAgICAgICAgIGV4Y2VwdCBVbmljb2RlRGVjb2RlRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIHJldHVybiBqc29uLmR1bXBzKG5ld19kYXRhKQogICAgICAgICAgICBleGNlcHQgVW5pY29kZURlY29kZUVycm9yOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9J0ludmFsaWQgdW5pY29kZSBlbmNvZGluZyBlbmNvdW50ZXJlZCcpCgogICAgZGVmIGZyb21fanNvbihzZWxmLCBkYXRhKToKICAgICAgICByZXR1cm4ganNvbi5sb2FkcyhkYXRhKQoKICAgIGRlZiBhZGRfY2xlYW51cF9maWxlKHNlbGYsIHBhdGgpOgogICAgICAgIGlmIHBhdGggbm90IGluIHNlbGYuY2xlYW51cF9maWxlczoKICAgICAgICAgICAgc2VsZi5jbGVhbnVwX2ZpbGVzLmFwcGVuZChwYXRoKQoKICAgIGRlZiBkb19jbGVhbnVwX2ZpbGVzKHNlbGYpOgogICAgICAgIGZvciBwYXRoIGluIHNlbGYuY2xlYW51cF9maWxlczoKICAgICAgICAgICAgc2VsZi5jbGVhbnVwKHBhdGgpCgogICAgZGVmIF9yZXR1cm5fZm9ybWF0dGVkKHNlbGYsIGt3YXJncyk6CgogICAgICAgIHNlbGYuYWRkX3BhdGhfaW5mbyhrd2FyZ3MpCgogICAgICAgIGlmICdpbnZvY2F0aW9uJyBub3QgaW4ga3dhcmdzOgogICAgICAgICAgICBrd2FyZ3NbJ2ludm9jYXRpb24nXSA9IHsnbW9kdWxlX2FyZ3MnOiBzZWxmLnBhcmFtc30KCiAgICAgICAgaWYgJ3dhcm5pbmdzJyBpbiBrd2FyZ3M6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoa3dhcmdzWyd3YXJuaW5ncyddLCBsaXN0KToKICAgICAgICAgICAgICAgIGZvciB3IGluIGt3YXJnc1snd2FybmluZ3MnXToKICAgICAgICAgICAgICAgICAgICBzZWxmLndhcm4odykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYud2Fybihrd2FyZ3NbJ3dhcm5pbmdzJ10pCgogICAgICAgIGlmIHNlbGYuX3dhcm5pbmdzOgogICAgICAgICAgICBrd2FyZ3NbJ3dhcm5pbmdzJ10gPSBzZWxmLl93YXJuaW5ncwoKICAgICAgICBpZiAnZGVwcmVjYXRpb25zJyBpbiBrd2FyZ3M6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoa3dhcmdzWydkZXByZWNhdGlvbnMnXSwgbGlzdCk6CiAgICAgICAgICAgICAgICBmb3IgZCBpbiBrd2FyZ3NbJ2RlcHJlY2F0aW9ucyddOgogICAgICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoZCwgU0VRVUVOQ0VUWVBFKSBhbmQgbGVuKGQpID09IDI6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGVwcmVjYXRlKGRbMF0sIHZlcnNpb249ZFsxXSkKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRlcHJlY2F0ZShkKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5kZXByZWNhdGUoa3dhcmdzWydkZXByZWNhdGlvbnMnXSkKCiAgICAgICAgaWYgc2VsZi5fZGVwcmVjYXRpb25zOgogICAgICAgICAgICBrd2FyZ3NbJ2RlcHJlY2F0aW9ucyddID0gc2VsZi5fZGVwcmVjYXRpb25zCgogICAgICAgIGt3YXJncyA9IHJlbW92ZV92YWx1ZXMoa3dhcmdzLCBzZWxmLm5vX2xvZ192YWx1ZXMpCiAgICAgICAgcHJpbnQoJ1xuJXMnICUgc2VsZi5qc29uaWZ5KGt3YXJncykpCgogICAgZGVmIGV4aXRfanNvbihzZWxmLCAqKmt3YXJncyk6CiAgICAgICAgJycnIHJldHVybiBmcm9tIHRoZSBtb2R1bGUsIHdpdGhvdXQgZXJyb3IgJycnCgogICAgICAgIGlmIG5vdCAnY2hhbmdlZCcgaW4ga3dhcmdzOgogICAgICAgICAgICBrd2FyZ3NbJ2NoYW5nZWQnXSA9IEZhbHNlCgogICAgICAgIHNlbGYuZG9fY2xlYW51cF9maWxlcygpCiAgICAgICAgc2VsZi5fcmV0dXJuX2Zvcm1hdHRlZChrd2FyZ3MpCiAgICAgICAgc3lzLmV4aXQoMCkKCiAgICBkZWYgZmFpbF9qc29uKHNlbGYsICoqa3dhcmdzKToKICAgICAgICAnJycgcmV0dXJuIGZyb20gdGhlIG1vZHVsZSwgd2l0aCBhbiBlcnJvciBtZXNzYWdlICcnJwoKICAgICAgICBhc3NlcnQgJ21zZycgaW4ga3dhcmdzLCAiaW1wbGVtZW50YXRpb24gZXJyb3IgLS0gbXNnIHRvIGV4cGxhaW4gdGhlIGVycm9yIGlzIHJlcXVpcmVkIgogICAgICAgIGt3YXJnc1snZmFpbGVkJ10gPSBUcnVlCgogICAgICAgIGlmIG5vdCAnY2hhbmdlZCcgaW4ga3dhcmdzOgogICAgICAgICAgICBrd2FyZ3NbJ2NoYW5nZWQnXSA9IEZhbHNlCgogICAgICAgIHNlbGYuZG9fY2xlYW51cF9maWxlcygpCiAgICAgICAgc2VsZi5fcmV0dXJuX2Zvcm1hdHRlZChrd2FyZ3MpCiAgICAgICAgc3lzLmV4aXQoMSkKCiAgICBkZWYgZmFpbF9vbl9taXNzaW5nX3BhcmFtcyhzZWxmLCByZXF1aXJlZF9wYXJhbXM9Tm9uZSk6CiAgICAgICAgJycnIFRoaXMgaXMgZm9yIGNoZWNraW5nIGZvciByZXF1aXJlZCBwYXJhbXMgd2hlbiB3ZSBjYW4gbm90IGNoZWNrIHZpYSBhcmdzcGVjIGJlY2F1c2Ugd2UKICAgICAgICBuZWVkIG1vcmUgaW5mb3JtYXRpb24gdGhhbiBpcyBzaW1wbHkgZ2l2ZW4gaW4gdGhlIGFyZ3NwZWMuCiAgICAgICAgJycnCiAgICAgICAgaWYgbm90IHJlcXVpcmVkX3BhcmFtczoKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgbWlzc2luZ19wYXJhbXMgPSBbXQogICAgICAgIGZvciByZXF1aXJlZF9wYXJhbSBpbiByZXF1aXJlZF9wYXJhbXM6CiAgICAgICAgICAgIGlmIG5vdCBzZWxmLnBhcmFtcy5nZXQocmVxdWlyZWRfcGFyYW0pOgogICAgICAgICAgICAgICAgbWlzc2luZ19wYXJhbXMuYXBwZW5kKHJlcXVpcmVkX3BhcmFtKQogICAgICAgIGlmIG1pc3NpbmdfcGFyYW1zOgogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9Im1pc3NpbmcgcmVxdWlyZWQgYXJndW1lbnRzOiAlcyIgJSAnLCcuam9pbihtaXNzaW5nX3BhcmFtcykpCgogICAgZGVmIGRpZ2VzdF9mcm9tX2ZpbGUoc2VsZiwgZmlsZW5hbWUsIGFsZ29yaXRobSk6CiAgICAgICAgJycnIFJldHVybiBoZXggZGlnZXN0IG9mIGxvY2FsIGZpbGUgZm9yIGEgZGlnZXN0X21ldGhvZCBzcGVjaWZpZWQgYnkgbmFtZSwgb3IgTm9uZSBpZiBmaWxlIGlzIG5vdCBwcmVzZW50LiAnJycKICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoZmlsZW5hbWUpOgogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIGlmIG9zLnBhdGguaXNkaXIoZmlsZW5hbWUpOgogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9ImF0dGVtcHRlZCB0byB0YWtlIGNoZWNrc3VtIG9mIGRpcmVjdG9yeTogJXMiICUgZmlsZW5hbWUpCgogICAgICAgICMgcHJlc2VydmUgb2xkIGJlaGF2aW91ciB3aGVyZSB0aGUgdGhpcmQgcGFyYW1ldGVyIHdhcyBhIGhhc2ggYWxnb3JpdGhtIG9iamVjdAogICAgICAgIGlmIGhhc2F0dHIoYWxnb3JpdGhtLCAnaGV4ZGlnZXN0Jyk6CiAgICAgICAgICAgIGRpZ2VzdF9tZXRob2QgPSBhbGdvcml0aG0KICAgICAgICBlbHNlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBkaWdlc3RfbWV0aG9kID0gQVZBSUxBQkxFX0hBU0hfQUxHT1JJVEhNU1thbGdvcml0aG1dKCkKICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJDb3VsZCBub3QgaGFzaCBmaWxlICclcycgd2l0aCBhbGdvcml0aG0gJyVzJy4gQXZhaWxhYmxlIGFsZ29yaXRobXM6ICVzIiAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZpbGVuYW1lLCBhbGdvcml0aG0sICcsICcuam9pbihBVkFJTEFCTEVfSEFTSF9BTEdPUklUSE1TKSkpCgogICAgICAgIGJsb2Nrc2l6ZSA9IDY0ICogMTAyNAogICAgICAgIGluZmlsZSA9IG9wZW4ob3MucGF0aC5yZWFscGF0aChmaWxlbmFtZSksICdyYicpCiAgICAgICAgYmxvY2sgPSBpbmZpbGUucmVhZChibG9ja3NpemUpCiAgICAgICAgd2hpbGUgYmxvY2s6CiAgICAgICAgICAgIGRpZ2VzdF9tZXRob2QudXBkYXRlKGJsb2NrKQogICAgICAgICAgICBibG9jayA9IGluZmlsZS5yZWFkKGJsb2Nrc2l6ZSkKICAgICAgICBpbmZpbGUuY2xvc2UoKQogICAgICAgIHJldHVybiBkaWdlc3RfbWV0aG9kLmhleGRpZ2VzdCgpCgogICAgZGVmIG1kNShzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgJycnIFJldHVybiBNRDUgaGV4IGRpZ2VzdCBvZiBsb2NhbCBmaWxlIHVzaW5nIGRpZ2VzdF9mcm9tX2ZpbGUoKS4KCiAgICAgICAgRG8gbm90IHVzZSB0aGlzIGZ1bmN0aW9uIHVubGVzcyB5b3UgaGF2ZSBubyBvdGhlciBjaG9pY2UgZm9yOgogICAgICAgICAgICAxKSBPcHRpb25hbCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQogICAgICAgICAgICAyKSBDb21wYXRpYmlsaXR5IHdpdGggYSB0aGlyZCBwYXJ0eSBwcm90b2NvbAoKICAgICAgICBUaGlzIGZ1bmN0aW9uIHdpbGwgbm90IHdvcmsgb24gc3lzdGVtcyBjb21wbHlpbmcgd2l0aCBGSVBTLTE0MC0yLgoKICAgICAgICBNb3N0IHVzZXMgb2YgdGhpcyBmdW5jdGlvbiBjYW4gdXNlIHRoZSBtb2R1bGUuc2hhMSBmdW5jdGlvbiBpbnN0ZWFkLgogICAgICAgICcnJwogICAgICAgIGlmICdtZDUnIG5vdCBpbiBBVkFJTEFCTEVfSEFTSF9BTEdPUklUSE1TOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdNRDUgbm90IGF2YWlsYWJsZS4gIFBvc3NpYmx5IHJ1bm5pbmcgaW4gRklQUyBtb2RlJykKICAgICAgICByZXR1cm4gc2VsZi5kaWdlc3RfZnJvbV9maWxlKGZpbGVuYW1lLCAnbWQ1JykKCiAgICBkZWYgc2hhMShzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgJycnIFJldHVybiBTSEExIGhleCBkaWdlc3Qgb2YgbG9jYWwgZmlsZSB1c2luZyBkaWdlc3RfZnJvbV9maWxlKCkuICcnJwogICAgICAgIHJldHVybiBzZWxmLmRpZ2VzdF9mcm9tX2ZpbGUoZmlsZW5hbWUsICdzaGExJykKCiAgICBkZWYgc2hhMjU2KHNlbGYsIGZpbGVuYW1lKToKICAgICAgICAnJycgUmV0dXJuIFNIQS0yNTYgaGV4IGRpZ2VzdCBvZiBsb2NhbCBmaWxlIHVzaW5nIGRpZ2VzdF9mcm9tX2ZpbGUoKS4gJycnCiAgICAgICAgcmV0dXJuIHNlbGYuZGlnZXN0X2Zyb21fZmlsZShmaWxlbmFtZSwgJ3NoYTI1NicpCgogICAgZGVmIGJhY2t1cF9sb2NhbChzZWxmLCBmbik6CiAgICAgICAgJycnbWFrZSBhIGRhdGUtbWFya2VkIGJhY2t1cCBvZiB0aGUgc3BlY2lmaWVkIGZpbGUsIHJldHVybiBUcnVlIG9yIEZhbHNlIG9uIHN1Y2Nlc3Mgb3IgZmFpbHVyZScnJwoKICAgICAgICBiYWNrdXBkZXN0ID0gJycKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhmbik6CiAgICAgICAgICAgICMgYmFja3VwcyBuYW1lZCBiYXNlbmFtZS5QSUQuWVlZWS1NTS1EREBISDpNTTpTU34KICAgICAgICAgICAgZXh0ID0gdGltZS5zdHJmdGltZSgiJVktJW0tJWRAJUg6JU06JVN+IiwgdGltZS5sb2NhbHRpbWUodGltZS50aW1lKCkpKQogICAgICAgICAgICBiYWNrdXBkZXN0ID0gJyVzLiVzLiVzJyAlIChmbiwgb3MuZ2V0cGlkKCksIGV4dCkKCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNodXRpbC5jb3B5MihmbiwgYmFja3VwZGVzdCkKICAgICAgICAgICAgZXhjZXB0IChzaHV0aWwuRXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdDb3VsZCBub3QgbWFrZSBiYWNrdXAgb2YgJXMgdG8gJXM6ICVzJyAlIChmbiwgYmFja3VwZGVzdCwgZSkpCgogICAgICAgIHJldHVybiBiYWNrdXBkZXN0CgogICAgZGVmIGNsZWFudXAoc2VsZiwgdG1wZmlsZSk6CiAgICAgICAgaWYgb3MucGF0aC5leGlzdHModG1wZmlsZSk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG9zLnVubGluayh0bXBmaWxlKQogICAgICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgIHN5cy5zdGRlcnIud3JpdGUoImNvdWxkIG5vdCBjbGVhbnVwICVzOiAlcyIgJSAodG1wZmlsZSwgZSkpCgogICAgZGVmIGF0b21pY19tb3ZlKHNlbGYsIHNyYywgZGVzdCwgdW5zYWZlX3dyaXRlcz1GYWxzZSk6CiAgICAgICAgJycnYXRvbWljYWxseSBtb3ZlIHNyYyB0byBkZXN0LCBjb3B5aW5nIGF0dHJpYnV0ZXMgZnJvbSBkZXN0LCByZXR1cm5zIHRydWUgb24gc3VjY2VzcwogICAgICAgIGl0IHVzZXMgb3MucmVuYW1lIHRvIGVuc3VyZSB0aGlzIGFzIGl0IGlzIGFuIGF0b21pYyBvcGVyYXRpb24sIHJlc3Qgb2YgdGhlIGZ1bmN0aW9uIGlzCiAgICAgICAgdG8gd29yayBhcm91bmQgbGltaXRhdGlvbnMsIGNvcm5lciBjYXNlcyBhbmQgZW5zdXJlIHNlbGludXggY29udGV4dCBpcyBzYXZlZCBpZiBwb3NzaWJsZScnJwogICAgICAgIGNvbnRleHQgPSBOb25lCiAgICAgICAgZGVzdF9zdGF0ID0gTm9uZQogICAgICAgIGJfc3JjID0gdG9fYnl0ZXMoc3JjLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQogICAgICAgIGJfZGVzdCA9IHRvX2J5dGVzKGRlc3QsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMoYl9kZXN0KToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZGVzdF9zdGF0ID0gb3Muc3RhdChiX2Rlc3QpCgogICAgICAgICAgICAgICAgIyBjb3B5IG1vZGUgYW5kIG93bmVyc2hpcAogICAgICAgICAgICAgICAgb3MuY2htb2QoYl9zcmMsIGRlc3Rfc3RhdC5zdF9tb2RlICYgUEVSTV9CSVRTKQogICAgICAgICAgICAgICAgb3MuY2hvd24oYl9zcmMsIGRlc3Rfc3RhdC5zdF91aWQsIGRlc3Rfc3RhdC5zdF9naWQpCgogICAgICAgICAgICAgICAgIyB0cnkgdG8gY29weSBmbGFncyBpZiBwb3NzaWJsZQogICAgICAgICAgICAgICAgaWYgaGFzYXR0cihvcywgJ2NoZmxhZ3MnKSBhbmQgaGFzYXR0cihkZXN0X3N0YXQsICdzdF9mbGFncycpOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgb3MuY2hmbGFncyhiX3NyYywgZGVzdF9zdGF0LnN0X2ZsYWdzKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBlcnIgaW4gJ0VPUE5PVFNVUFAnLCAnRU5PVFNVUCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBoYXNhdHRyKGVycm5vLCBlcnIpIGFuZCBlLmVycm5vID09IGdldGF0dHIoZXJybm8sIGVycik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgaWYgZS5lcnJubyAhPSBlcnJuby5FUEVSTToKICAgICAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICBpZiBzZWxmLnNlbGludXhfZW5hYmxlZCgpOgogICAgICAgICAgICAgICAgY29udGV4dCA9IHNlbGYuc2VsaW51eF9jb250ZXh0KGRlc3QpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgICAgIGNvbnRleHQgPSBzZWxmLnNlbGludXhfZGVmYXVsdF9jb250ZXh0KGRlc3QpCgogICAgICAgIGNyZWF0aW5nID0gbm90IG9zLnBhdGguZXhpc3RzKGJfZGVzdCkKCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIE9wdGltaXN0aWNhbGx5IHRyeSBhIHJlbmFtZSwgc29sdmVzIHNvbWUgY29ybmVyIGNhc2VzIGFuZCBjYW4gYXZvaWQgdXNlbGVzcyB3b3JrLCB0aHJvd3MgZXhjZXB0aW9uIGlmIG5vdCBhdG9taWMuCiAgICAgICAgICAgIG9zLnJlbmFtZShiX3NyYywgYl9kZXN0KQogICAgICAgIGV4Y2VwdCAoSU9FcnJvciwgT1NFcnJvcik6CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgaWYgZS5lcnJubyBub3QgaW4gW2Vycm5vLkVQRVJNLCBlcnJuby5FWERFViwgZXJybm8uRUFDQ0VTLCBlcnJuby5FVFhUQlNZLCBlcnJuby5FQlVTWV06CiAgICAgICAgICAgICAgICAjIG9ubHkgdHJ5IHdvcmthcm91bmRzIGZvciBlcnJubyAxOCAoY3Jvc3MgZGV2aWNlKSwgMSAobm90IHBlcm1pdHRlZCksICAxMyAocGVybWlzc2lvbiBkZW5pZWQpCiAgICAgICAgICAgICAgICAjIGFuZCAyNiAodGV4dCBmaWxlIGJ1c3kpIHdoaWNoIGhhcHBlbnMgb24gdmFncmFudCBzeW5jZWQgZm9sZGVycyBhbmQgb3RoZXIgJ2V4b3RpYycgbm9uIHBvc2l4IGZpbGUgc3lzdGVtcwogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdDb3VsZCBub3QgcmVwbGFjZSBmaWxlOiAlcyB0byAlczogJXMnICUgKHNyYywgZGVzdCwgZSksIGV4Y2VwdGlvbj10cmFjZWJhY2suZm9ybWF0X2V4YygpKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgYl9kZXN0X2RpciA9IG9zLnBhdGguZGlybmFtZShiX2Rlc3QpCiAgICAgICAgICAgICAgICAjIFVzZSBieXRlcyBoZXJlLiAgSW4gdGhlIHNoaXBwYWJsZSBDSSwgdGhpcyBmYWlscyB3aXRoCiAgICAgICAgICAgICAgICAjIGEgVW5pY29kZUVycm9yIHdpdGggc3Vycm9nYXRlZXNjYXBlJ2Qgc3RyaW5ncyBmb3IgYW4gdW5rbm93bgogICAgICAgICAgICAgICAgIyByZWFzb24gKGRvZXNuJ3QgaGFwcGVuIGluIGEgbG9jYWwgVWJ1bnR1MTYuMDQgVk0pCiAgICAgICAgICAgICAgICBuYXRpdmVfZGVzdF9kaXIgPSBiX2Rlc3RfZGlyCiAgICAgICAgICAgICAgICBuYXRpdmVfc3VmZml4ID0gb3MucGF0aC5iYXNlbmFtZShiX2Rlc3QpCiAgICAgICAgICAgICAgICBuYXRpdmVfcHJlZml4ID0gYignLmFuc2libGVfdG1wJykKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICB0bXBfZGVzdF9mZCwgdG1wX2Rlc3RfbmFtZSA9IHRlbXBmaWxlLm1rc3RlbXAoIHByZWZpeD1uYXRpdmVfcHJlZml4LCBkaXI9bmF0aXZlX2Rlc3RfZGlyLCBzdWZmaXg9bmF0aXZlX3N1ZmZpeCkKICAgICAgICAgICAgICAgIGV4Y2VwdCAoT1NFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0nVGhlIGRlc3RpbmF0aW9uIGRpcmVjdG9yeSAoJXMpIGlzIG5vdCB3cml0YWJsZSBieSB0aGUgY3VycmVudCB1c2VyLiBFcnJvciB3YXM6ICVzJyAlIChvcy5wYXRoLmRpcm5hbWUoZGVzdCksIGUpKQogICAgICAgICAgICAgICAgZXhjZXB0IFR5cGVFcnJvcjoKICAgICAgICAgICAgICAgICAgICAjIFdlIGV4cGVjdCB0aGF0IHRoaXMgaXMgaGFwcGVuaW5nIGJlY2F1c2UgcHl0aG9uMy40LnggYW5kCiAgICAgICAgICAgICAgICAgICAgIyBiZWxvdyBjYW4ndCBoYW5kbGUgYnl0ZSBzdHJpbmdzIGluIG1rc3RlbXAoKS4gIFRyYWNlYmFjawogICAgICAgICAgICAgICAgICAgICMgd291bGQgZW5kIGluIHNvbWV0aGluZyBsaWtlOgogICAgICAgICAgICAgICAgICAgICMgICAgIGZpbGUgPSBfb3MucGF0aC5qb2luKGRpciwgcHJlICsgbmFtZSArIHN1ZikKICAgICAgICAgICAgICAgICAgICAjIFR5cGVFcnJvcjogY2FuJ3QgY29uY2F0IGJ5dGVzIHRvIHN0cgogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0nRmFpbGVkIGNyZWF0aW5nIHRlbXAgZmlsZSBmb3IgYXRvbWljIG1vdmUuICBUaGlzIHVzdWFsbHkgaGFwcGVucyB3aGVuIHVzaW5nIFB5dGhvbjMgbGVzcyB0aGFuIFB5dGhvbjMuNS4gJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUGxlYXNlIHVzZSBQeXRob24yLnggb3IgUHl0aG9uMy41IG9yIGdyZWF0ZXIuJywgZXhjZXB0aW9uPXRyYWNlYmFjay5mb3JtYXRfZXhjKCkpCgogICAgICAgICAgICAgICAgYl90bXBfZGVzdF9uYW1lID0gdG9fYnl0ZXModG1wX2Rlc3RfbmFtZSwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAjIGNsb3NlIHRtcCBmaWxlIGhhbmRsZSBiZWZvcmUgZmlsZSBvcGVyYXRpb25zIHRvIHByZXZlbnQgdGV4dCBmaWxlIGJ1c3kgZXJyb3JzIG9uIHZib3hmcyBzeW5jZWQgZm9sZGVycyAod2luZG93cyBob3N0KQogICAgICAgICAgICAgICAgICAgICAgICBvcy5jbG9zZSh0bXBfZGVzdF9mZCkKICAgICAgICAgICAgICAgICAgICAgICAgIyBsZWF2ZXMgdG1wIGZpbGUgYmVoaW5kIHdoZW4gc3VkbyBhbmQgbm90IHJvb3QKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2h1dGlsLm1vdmUoYl9zcmMsIGJfdG1wX2Rlc3RfbmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGNsZWFudXAgd2lsbCBoYXBwZW4gYnkgJ3JtJyBvZiB0ZW1wZGlyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGNvcHkyIHdpbGwgcHJlc2VydmUgc29tZSBtZXRhZGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2h1dGlsLmNvcHkyKGJfc3JjLCBiX3RtcF9kZXN0X25hbWUpCgogICAgICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLnNlbGludXhfZW5hYmxlZCgpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRfY29udGV4dF9pZl9kaWZmZXJlbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYl90bXBfZGVzdF9uYW1lLCBjb250ZXh0LCBGYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wX3N0YXQgPSBvcy5zdGF0KGJfdG1wX2Rlc3RfbmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGRlc3Rfc3RhdCBhbmQgKHRtcF9zdGF0LnN0X3VpZCAhPSBkZXN0X3N0YXQuc3RfdWlkIG9yIHRtcF9zdGF0LnN0X2dpZCAhPSBkZXN0X3N0YXQuc3RfZ2lkKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy5jaG93bihiX3RtcF9kZXN0X25hbWUsIGRlc3Rfc3RhdC5zdF91aWQsIGRlc3Rfc3RhdC5zdF9naWQpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgZS5lcnJubyAhPSBlcnJuby5FUEVSTToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy5yZW5hbWUoYl90bXBfZGVzdF9uYW1lLCBiX2Rlc3QpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCAoc2h1dGlsLkVycm9yLCBPU0Vycm9yLCBJT0Vycm9yKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVuc2FmZV93cml0ZXMgYW5kIGUuZXJybm8gPT0gZXJybm8uRUJVU1k6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fdW5zYWZlX3dyaXRlcyhiX3RtcF9kZXN0X25hbWUsIGJfZGVzdCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdVbmFibGUgdG8gcmVuYW1lIGZpbGU6ICVzIHRvICVzOiAlcycgJSAoc3JjLCBkZXN0LCBlKSwgZXhjZXB0aW9uPXRyYWNlYmFjay5mb3JtYXRfZXhjKCkpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IChzaHV0aWwuRXJyb3IsIE9TRXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0nRmFpbGVkIHRvIHJlcGxhY2UgZmlsZTogJXMgdG8gJXM6ICVzJyAlIChzcmMsIGRlc3QsIGUpLCBleGNlcHRpb249dHJhY2ViYWNrLmZvcm1hdF9leGMoKSkKICAgICAgICAgICAgICAgIGZpbmFsbHk6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5jbGVhbnVwKGJfdG1wX2Rlc3RfbmFtZSkKCiAgICAgICAgaWYgY3JlYXRpbmc6CiAgICAgICAgICAgICMgbWFrZSBzdXJlIHRoZSBmaWxlIGhhcyB0aGUgY29ycmVjdCBwZXJtaXNzaW9ucwogICAgICAgICAgICAjIGJhc2VkIG9uIHRoZSBjdXJyZW50IHZhbHVlIG9mIHVtYXNrCiAgICAgICAgICAgIHVtYXNrID0gb3MudW1hc2soMCkKICAgICAgICAgICAgb3MudW1hc2sodW1hc2spCiAgICAgICAgICAgIG9zLmNobW9kKGJfZGVzdCwgREVGQVVMVF9QRVJNICYgfnVtYXNrKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBvcy5jaG93bihiX2Rlc3QsIG9zLmdldGV1aWQoKSwgb3MuZ2V0ZWdpZCgpKQogICAgICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgICAgICMgV2UncmUgb2theSB3aXRoIHRyeWluZyBvdXIgYmVzdCBoZXJlLiAgSWYgdGhlIHVzZXIgaXMgbm90CiAgICAgICAgICAgICAgICAjIHJvb3QgKG9yIG9sZCBVbmljZXMpIHRoZXkgd29uJ3QgYmUgYWJsZSB0byBjaG93bi4KICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgaWYgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgIyByZW5hbWUgbWlnaHQgbm90IHByZXNlcnZlIGNvbnRleHQKICAgICAgICAgICAgc2VsZi5zZXRfY29udGV4dF9pZl9kaWZmZXJlbnQoZGVzdCwgY29udGV4dCwgRmFsc2UpCgogICAgZGVmIF91bnNhZmVfd3JpdGVzKHNlbGYsIHNyYywgZGVzdCk6CiAgICAgICAgIyBzYWRseSB0aGVyZSBhcmUgc29tZSBzaXR1YXRpb25zIHdoZXJlIHdlIGNhbm5vdCBlbnN1cmUgYXRvbWljaXR5LCBidXQgb25seSBpZgogICAgICAgICMgdGhlIHVzZXIgaW5zaXN0cyBhbmQgd2UgZ2V0IHRoZSBhcHByb3ByaWF0ZSBlcnJvciB3ZSB1cGRhdGUgdGhlIGZpbGUgdW5zYWZlbHkKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG91dF9kZXN0ID0gb3BlbihkZXN0LCAnd2InKQogICAgICAgICAgICAgICAgaW5fc3JjID0gb3BlbihzcmMsICdyYicpCiAgICAgICAgICAgICAgICBzaHV0aWwuY29weWZpbGVvYmooaW5fc3JjLCBvdXRfZGVzdCkKICAgICAgICAgICAgZmluYWxseTogICMgYXNzdXJpbmcgY2xvc2VkIGZpbGVzIGluIDIuNCBjb21wYXRpYmxlIHdheQogICAgICAgICAgICAgICAgaWYgb3V0X2Rlc3Q6CiAgICAgICAgICAgICAgICAgICAgb3V0X2Rlc3QuY2xvc2UoKQogICAgICAgICAgICAgICAgaWYgaW5fc3JjOgogICAgICAgICAgICAgICAgICAgIGluX3NyYy5jbG9zZSgpCiAgICAgICAgZXhjZXB0IChzaHV0aWwuRXJyb3IsIE9TRXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0nQ291bGQgbm90IHdyaXRlIGRhdGEgdG8gZmlsZSAoJXMpIGZyb20gKCVzKTogJXMnICUgKGRlc3QsIHNyYywgZSksIGV4Y2VwdGlvbj10cmFjZWJhY2suZm9ybWF0X2V4YygpKQoKCiAgICBkZWYgX3JlYWRfZnJvbV9waXBlcyhzZWxmLCBycGlwZXMsIHJmZHMsIGZpbGVfZGVzY3JpcHRvcik6CiAgICAgICAgZGF0YSA9IGIoJycpCiAgICAgICAgaWYgZmlsZV9kZXNjcmlwdG9yIGluIHJmZHM6CiAgICAgICAgICAgIGRhdGEgPSBvcy5yZWFkKGZpbGVfZGVzY3JpcHRvci5maWxlbm8oKSwgOTAwMCkKICAgICAgICAgICAgaWYgZGF0YSA9PSBiKCcnKToKICAgICAgICAgICAgICAgIHJwaXBlcy5yZW1vdmUoZmlsZV9kZXNjcmlwdG9yKQoKICAgICAgICByZXR1cm4gZGF0YQoKICAgIGRlZiBydW5fY29tbWFuZChzZWxmLCBhcmdzLCBjaGVja19yYz1GYWxzZSwgY2xvc2VfZmRzPVRydWUsIGV4ZWN1dGFibGU9Tm9uZSwgZGF0YT1Ob25lLCBiaW5hcnlfZGF0YT1GYWxzZSwgcGF0aF9wcmVmaXg9Tm9uZSwgY3dkPU5vbmUsCiAgICAgICAgICAgICAgICAgICAgdXNlX3Vuc2FmZV9zaGVsbD1GYWxzZSwgcHJvbXB0X3JlZ2V4PU5vbmUsIGVudmlyb25fdXBkYXRlPU5vbmUsIHVtYXNrPU5vbmUsIGVuY29kaW5nPSd1dGYtOCcsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpOgogICAgICAgICcnJwogICAgICAgIEV4ZWN1dGUgYSBjb21tYW5kLCByZXR1cm5zIHJjLCBzdGRvdXQsIGFuZCBzdGRlcnIuCgogICAgICAgIDphcmcgYXJnczogaXMgdGhlIGNvbW1hbmQgdG8gcnVuCiAgICAgICAgICAgICogSWYgYXJncyBpcyBhIGxpc3QsIHRoZSBjb21tYW5kIHdpbGwgYmUgcnVuIHdpdGggc2hlbGw9RmFsc2UuCiAgICAgICAgICAgICogSWYgYXJncyBpcyBhIHN0cmluZyBhbmQgdXNlX3Vuc2FmZV9zaGVsbD1GYWxzZSBpdCB3aWxsIHNwbGl0IGFyZ3MgdG8gYSBsaXN0IGFuZCBydW4gd2l0aCBzaGVsbD1GYWxzZQogICAgICAgICAgICAqIElmIGFyZ3MgaXMgYSBzdHJpbmcgYW5kIHVzZV91bnNhZmVfc2hlbGw9VHJ1ZSBpdCBydW5zIHdpdGggc2hlbGw9VHJ1ZS4KICAgICAgICA6a3cgY2hlY2tfcmM6IFdoZXRoZXIgdG8gY2FsbCBmYWlsX2pzb24gaW4gY2FzZSBvZiBub24gemVybyBSQy4KICAgICAgICAgICAgRGVmYXVsdCBGYWxzZQogICAgICAgIDprdyBjbG9zZV9mZHM6IFNlZSBkb2N1bWVudGF0aW9uIGZvciBzdWJwcm9jZXNzLlBvcGVuKCkuIERlZmF1bHQgVHJ1ZQogICAgICAgIDprdyBleGVjdXRhYmxlOiBTZWUgZG9jdW1lbnRhdGlvbiBmb3Igc3VicHJvY2Vzcy5Qb3BlbigpLiBEZWZhdWx0IE5vbmUKICAgICAgICA6a3cgZGF0YTogSWYgZ2l2ZW4sIGluZm9ybWF0aW9uIHRvIHdyaXRlIHRvIHRoZSBzdGRpbiBvZiB0aGUgY29tbWFuZAogICAgICAgIDprdyBiaW5hcnlfZGF0YTogSWYgRmFsc2UsIGFwcGVuZCBhIG5ld2xpbmUgdG8gdGhlIGRhdGEuICBEZWZhdWx0IEZhbHNlCiAgICAgICAgOmt3IHBhdGhfcHJlZml4OiBJZiBnaXZlbiwgYWRkaXRpb25hbCBwYXRoIHRvIGZpbmQgdGhlIGNvbW1hbmQgaW4uCiAgICAgICAgICAgIFRoaXMgYWRkcyB0byB0aGUgUEFUSCBlbnZpcm9ubWVudCB2YWlyYWJsZSBzbyBoZWxwZXIgY29tbWFuZHMgaW4KICAgICAgICAgICAgdGhlIHNhbWUgZGlyZWN0b3J5IGNhbiBhbHNvIGJlIGZvdW5kCiAgICAgICAgOmt3IGN3ZDogSWYgZ2l2ZW4sIHdvcmtpbmcgZGlyZWN0b3J5IHRvIHJ1biB0aGUgY29tbWFuZCBpbnNpZGUKICAgICAgICA6a3cgdXNlX3Vuc2FmZV9zaGVsbDogU2VlIGBhcmdzYCBwYXJhbWV0ZXIuICBEZWZhdWx0IEZhbHNlCiAgICAgICAgOmt3IHByb21wdF9yZWdleDogUmVnZXggc3RyaW5nIChub3QgYSBjb21waWxlZCByZWdleCkgd2hpY2ggY2FuIGJlCiAgICAgICAgICAgIHVzZWQgdG8gZGV0ZWN0IHByb21wdHMgaW4gdGhlIHN0ZG91dCB3aGljaCB3b3VsZCBvdGhlcndpc2UgY2F1c2UKICAgICAgICAgICAgdGhlIGV4ZWN1dGlvbiB0byBoYW5nIChlc3BlY2lhbGx5IGlmIG5vIGlucHV0IGRhdGEgaXMgc3BlY2lmaWVkKQogICAgICAgIDprdyBlbnZpcm9uX3VwZGF0ZTogZGljdGlvbmFyeSB0byAqdXBkYXRlKiBvcy5lbnZpcm9uIHdpdGgKICAgICAgICA6a3cgdW1hc2s6IFVtYXNrIHRvIGJlIHVzZWQgd2hlbiBydW5uaW5nIHRoZSBjb21tYW5kLiBEZWZhdWx0IE5vbmUKICAgICAgICA6a3cgZW5jb2Rpbmc6IFNpbmNlIHdlIHJldHVybiBuYXRpdmUgc3RyaW5ncywgb24gcHl0aG9uMyB3ZSBuZWVkIHRvCiAgICAgICAgICAgIGtub3cgdGhlIGVuY29kaW5nIHRvIHVzZSB0byB0cmFuc2Zvcm0gZnJvbSBieXRlcyB0byB0ZXh0LiAgSWYgeW91CiAgICAgICAgICAgIHdhbnQgdG8gYWx3YXlzIGdldCBieXRlcyBiYWNrLCB1c2UgZW5jb2Rpbmc9Tm9uZS4gIFRoZSBkZWZhdWx0IGlzCiAgICAgICAgICAgICJ1dGYtOCIuICBUaGlzIGRvZXMgbm90IGFmZmVjdCB0cmFuc2Zvcm1hdGlvbiBvZiBzdHJpbmdzIGdpdmVuIGFzCiAgICAgICAgICAgIGFyZ3MuCiAgICAgICAgOmt3IGVycm9yczogU2luY2Ugd2UgcmV0dXJuIG5hdGl2ZSBzdHJpbmdzLCBvbiBweXRob24zIHdlIG5lZWQgdG8KICAgICAgICAgICAgdHJhbnNmb3JtIHN0ZG91dCBhbmQgc3RkZXJyIGZyb20gYnl0ZXMgdG8gdGV4dC4gIElmIHRoZSBieXRlcyBhcmUKICAgICAgICAgICAgdW5kZWNvZGFibGUgaW4gdGhlIGBgZW5jb2RpbmdgYCBzcGVjaWZpZWQsIHRoZW4gdXNlIHRoaXMgZXJyb3IKICAgICAgICAgICAgaGFuZGxlciB0byBkZWFsIHdpdGggdGhlbS4gIFRoZSBkZWZhdWx0IGlzIGBgc3Vycm9nYXRlX29yX3N0cmljdGBgCiAgICAgICAgICAgIHdoaWNoIG1lYW5zIHRoYXQgdGhlIGJ5dGVzIHdpbGwgYmUgZGVjb2RlZCB1c2luZyB0aGUKICAgICAgICAgICAgc3Vycm9nYXRlZXNjYXBlIGVycm9yIGhhbmRsZXIgaWYgYXZhaWxhYmxlIChhdmFpbGFibGUgb24gYWxsCiAgICAgICAgICAgIHB5dGhvbjMgdmVyc2lvbnMgd2Ugc3VwcG9ydCkgb3RoZXJ3aXNlIGEgVW5pY29kZUVycm9yIHRyYWNlYmFjawogICAgICAgICAgICB3aWxsIGJlIHJhaXNlZC4gIFRoaXMgZG9lcyBub3QgYWZmZWN0IHRyYW5zZm9ybWF0aW9ucyBvZiBzdHJpbmdzCiAgICAgICAgICAgIGdpdmVuIGFzIGFyZ3MuCiAgICAgICAgOnJldHVybnM6IEEgMy10dXBsZSBvZiByZXR1cm4gY29kZSAoaW50ZWdlciksIHN0ZG91dCAobmF0aXZlIHN0cmluZyksCiAgICAgICAgICAgIGFuZCBzdGRlcnIgKG5hdGl2ZSBzdHJpbmcpLiAgT24gcHl0aG9uMiwgc3Rkb3V0IGFuZCBzdGRlcnIgYXJlIGJvdGgKICAgICAgICAgICAgYnl0ZSBzdHJpbmdzLiAgT24gcHl0aG9uMywgc3Rkb3V0IGFuZCBzdGRlcnIgYXJlIHRleHQgc3RyaW5ncyBjb252ZXJ0ZWQKICAgICAgICAgICAgYWNjb3JkaW5nIHRvIHRoZSBlbmNvZGluZyBhbmQgZXJyb3JzIHBhcmFtZXRlcnMuICBJZiB5b3Ugd2FudCBieXRlCiAgICAgICAgICAgIHN0cmluZ3Mgb24gcHl0aG9uMywgdXNlIGVuY29kaW5nPU5vbmUgdG8gdHVybiBkZWNvZGluZyB0byB0ZXh0IG9mZi4KICAgICAgICAnJycKCiAgICAgICAgaWYgaXNpbnN0YW5jZShhcmdzLCBsaXN0KToKICAgICAgICAgICAgaWYgdXNlX3Vuc2FmZV9zaGVsbDoKICAgICAgICAgICAgICAgIGFyZ3MgPSAiICIuam9pbihbc2hsZXhfcXVvdGUoeCkgZm9yIHggaW4gYXJnc10pCiAgICAgICAgICAgICAgICBzaGVsbCA9IFRydWUKICAgICAgICBlbGlmIGlzaW5zdGFuY2UoYXJncywgKGJpbmFyeV90eXBlLCB0ZXh0X3R5cGUpKSBhbmQgdXNlX3Vuc2FmZV9zaGVsbDoKICAgICAgICAgICAgc2hlbGwgPSBUcnVlCiAgICAgICAgZWxpZiBpc2luc3RhbmNlKGFyZ3MsIChiaW5hcnlfdHlwZSwgdGV4dF90eXBlKSk6CiAgICAgICAgICAgIGlmIG5vdCB1c2VfdW5zYWZlX3NoZWxsOgogICAgICAgICAgICAgICAgIyBPbiBweXRob24yLjYgYW5kIGJlbG93LCBzaGxleCBoYXMgcHJvYmxlbXMgd2l0aCB0ZXh0IHR5cGUKICAgICAgICAgICAgICAgICMgT24gcHl0aG9uMywgc2hsZXggbmVlZHMgYSB0ZXh0IHR5cGUuCiAgICAgICAgICAgICAgICBpZiBQWTI6CiAgICAgICAgICAgICAgICAgICAgYXJncyA9IHRvX2J5dGVzKGFyZ3MsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgICAgICAgICBlbGlmIFBZMzoKICAgICAgICAgICAgICAgICAgICBhcmdzID0gdG9fdGV4dChhcmdzLCBlcnJvcnM9J3N1cnJvZ2F0ZWVzY2FwZScpCiAgICAgICAgICAgICAgICBhcmdzID0gc2hsZXguc3BsaXQoYXJncykKICAgICAgICBlbHNlOgogICAgICAgICAgICBtc2cgPSAiQXJndW1lbnQgJ2FyZ3MnIHRvIHJ1bl9jb21tYW5kIG11c3QgYmUgbGlzdCBvciBzdHJpbmciCiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHJjPTI1NywgY21kPWFyZ3MsIG1zZz1tc2cpCgogICAgICAgIHNoZWxsID0gRmFsc2UKICAgICAgICBpZiB1c2VfdW5zYWZlX3NoZWxsOgogICAgICAgICAgICBpZiBleGVjdXRhYmxlIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBleGVjdXRhYmxlID0gb3MuZW52aXJvbi5nZXQoJ1NIRUxMJykKICAgICAgICAgICAgaWYgZXhlY3V0YWJsZToKICAgICAgICAgICAgICAgIGFyZ3MgPSBbZXhlY3V0YWJsZSwgJy1jJywgYXJnc10KICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNoZWxsID0gVHJ1ZQoKICAgICAgICBwcm9tcHRfcmUgPSBOb25lCiAgICAgICAgaWYgcHJvbXB0X3JlZ2V4OgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHByb21wdF9yZWdleCwgdGV4dF90eXBlKToKICAgICAgICAgICAgICAgIGlmIFBZMzoKICAgICAgICAgICAgICAgICAgICBwcm9tcHRfcmVnZXggPSB0b19ieXRlcyhwcm9tcHRfcmVnZXgsIGVycm9ycz0nc3Vycm9nYXRlZXNjYXBlJykKICAgICAgICAgICAgICAgIGVsaWYgUFkyOgogICAgICAgICAgICAgICAgICAgIHByb21wdF9yZWdleCA9IHRvX2J5dGVzKHByb21wdF9yZWdleCwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcHJvbXB0X3JlID0gcmUuY29tcGlsZShwcm9tcHRfcmVnZXgsIHJlLk1VTFRJTElORSkKICAgICAgICAgICAgZXhjZXB0IHJlLmVycm9yOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJpbnZhbGlkIHByb21wdCByZWd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gdG8gcnVuX2NvbW1hbmQiKQoKICAgICAgICAjIGV4cGFuZCB0aGluZ3MgbGlrZSAkSE9NRSBhbmQgfgogICAgICAgIGlmIG5vdCBzaGVsbDoKICAgICAgICAgICAgYXJncyA9IFsgb3MucGF0aC5leHBhbmR1c2VyKG9zLnBhdGguZXhwYW5kdmFycyh4KSkgZm9yIHggaW4gYXJncyBpZiB4IGlzIG5vdCBOb25lIF0KCiAgICAgICAgcmMgPSAwCiAgICAgICAgbXNnID0gTm9uZQogICAgICAgIHN0X2luID0gTm9uZQoKICAgICAgICAjIE1hbmlwdWxhdGUgdGhlIGVudmlyb24gd2UnbGwgc2VuZCB0byB0aGUgbmV3IHByb2Nlc3MKICAgICAgICBvbGRfZW52X3ZhbHMgPSB7fQogICAgICAgICMgV2UgY2FuIHNldCB0aGlzIGZyb20gYm90aCBhbiBhdHRyaWJ1dGUgYW5kIHBlciBjYWxsCiAgICAgICAgZm9yIGtleSwgdmFsIGluIHNlbGYucnVuX2NvbW1hbmRfZW52aXJvbl91cGRhdGUuaXRlbXMoKToKICAgICAgICAgICAgb2xkX2Vudl92YWxzW2tleV0gPSBvcy5lbnZpcm9uLmdldChrZXksIE5vbmUpCiAgICAgICAgICAgIG9zLmVudmlyb25ba2V5XSA9IHZhbAogICAgICAgIGlmIGVudmlyb25fdXBkYXRlOgogICAgICAgICAgICBmb3Iga2V5LCB2YWwgaW4gZW52aXJvbl91cGRhdGUuaXRlbXMoKToKICAgICAgICAgICAgICAgIG9sZF9lbnZfdmFsc1trZXldID0gb3MuZW52aXJvbi5nZXQoa2V5LCBOb25lKQogICAgICAgICAgICAgICAgb3MuZW52aXJvbltrZXldID0gdmFsCiAgICAgICAgaWYgcGF0aF9wcmVmaXg6CiAgICAgICAgICAgIG9sZF9lbnZfdmFsc1snUEFUSCddID0gb3MuZW52aXJvblsnUEFUSCddCiAgICAgICAgICAgIG9zLmVudmlyb25bJ1BBVEgnXSA9ICIlczolcyIgJSAocGF0aF9wcmVmaXgsIG9zLmVudmlyb25bJ1BBVEgnXSkKCiAgICAgICAgIyBJZiB1c2luZyB0ZXN0LW1vZHVsZSBhbmQgZXhwbG9kZSwgdGhlIHJlbW90ZSBsaWIgcGF0aCB3aWxsIHJlc2VtYmxlIC4uLgogICAgICAgICMgICAvdG1wL3Rlc3RfbW9kdWxlX3NjcmF0Y2gvZGVidWdfZGlyL2Fuc2libGUvbW9kdWxlX3V0aWxzL2Jhc2ljLnB5CiAgICAgICAgIyBJZiB1c2luZyBhbnNpYmxlIG9yIGFuc2libGUtcGxheWJvb2sgd2l0aCBhIHJlbW90ZSBzeXN0ZW0gLi4uCiAgICAgICAgIyAgIC90bXAvYW5zaWJsZV92bXdlTFEvYW5zaWJsZV9tb2RsaWIuemlwL2Fuc2libGUvbW9kdWxlX3V0aWxzL2Jhc2ljLnB5CgogICAgICAgICMgQ2xlYW4gb3V0IHB5dGhvbiBwYXRocyBzZXQgYnkgYW5zaWJhbGx6CiAgICAgICAgaWYgJ1BZVEhPTlBBVEgnIGluIG9zLmVudmlyb246CiAgICAgICAgICAgIHB5cGF0aHMgPSBvcy5lbnZpcm9uWydQWVRIT05QQVRIJ10uc3BsaXQoJzonKQogICAgICAgICAgICBweXBhdGhzID0gW3ggZm9yIHggaW4gcHlwYXRocyBcCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCB4LmVuZHN3aXRoKCcvYW5zaWJsZV9tb2RsaWIuemlwJykgXAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgbm90IHguZW5kc3dpdGgoJy9kZWJ1Z19kaXInKV0KICAgICAgICAgICAgb3MuZW52aXJvblsnUFlUSE9OUEFUSCddID0gJzonLmpvaW4ocHlwYXRocykKICAgICAgICAgICAgaWYgbm90IG9zLmVudmlyb25bJ1BZVEhPTlBBVEgnXToKICAgICAgICAgICAgICAgIGRlbCBvcy5lbnZpcm9uWydQWVRIT05QQVRIJ10KCiAgICAgICAgIyBjcmVhdGUgYSBwcmludGFibGUgdmVyc2lvbiBvZiB0aGUgY29tbWFuZCBmb3IgdXNlCiAgICAgICAgIyBpbiByZXBvcnRpbmcgbGF0ZXIsIHdoaWNoIHN0cmlwcyBvdXQgdGhpbmdzIGxpa2UKICAgICAgICAjIHBhc3N3b3JkcyBmcm9tIHRoZSBhcmdzIGxpc3QKICAgICAgICB0b19jbGVhbl9hcmdzID0gYXJncwogICAgICAgIGlmIFBZMjoKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShhcmdzLCB0ZXh0X3R5cGUpOgogICAgICAgICAgICAgICAgdG9fY2xlYW5fYXJncyA9IHRvX2J5dGVzKGFyZ3MpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShhcmdzLCBiaW5hcnlfdHlwZSk6CiAgICAgICAgICAgICAgICB0b19jbGVhbl9hcmdzID0gdG9fdGV4dChhcmdzKQogICAgICAgIGlmIGlzaW5zdGFuY2UoYXJncywgKHRleHRfdHlwZSwgYmluYXJ5X3R5cGUpKToKICAgICAgICAgICAgdG9fY2xlYW5fYXJncyA9IHNobGV4LnNwbGl0KHRvX2NsZWFuX2FyZ3MpCgogICAgICAgIGNsZWFuX2FyZ3MgPSBbXQogICAgICAgIGlzX3Bhc3N3ZCA9IEZhbHNlCiAgICAgICAgZm9yIGFyZyBpbiB0b19jbGVhbl9hcmdzOgogICAgICAgICAgICBpZiBpc19wYXNzd2Q6CiAgICAgICAgICAgICAgICBpc19wYXNzd2QgPSBGYWxzZQogICAgICAgICAgICAgICAgY2xlYW5fYXJncy5hcHBlbmQoJyoqKioqKioqJykKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGlmIFBBU1NXRF9BUkdfUkUubWF0Y2goYXJnKToKICAgICAgICAgICAgICAgIHNlcF9pZHggPSBhcmcuZmluZCgnPScpCiAgICAgICAgICAgICAgICBpZiBzZXBfaWR4ID4gLTE6CiAgICAgICAgICAgICAgICAgICAgY2xlYW5fYXJncy5hcHBlbmQoJyVzPSoqKioqKioqJyAlIGFyZ1s6c2VwX2lkeF0pCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgaXNfcGFzc3dkID0gVHJ1ZQogICAgICAgICAgICBhcmcgPSBoZXVyaXN0aWNfbG9nX3Nhbml0aXplKGFyZywgc2VsZi5ub19sb2dfdmFsdWVzKQogICAgICAgICAgICBjbGVhbl9hcmdzLmFwcGVuZChhcmcpCiAgICAgICAgY2xlYW5fYXJncyA9ICcgJy5qb2luKHNobGV4X3F1b3RlKGFyZykgZm9yIGFyZyBpbiBjbGVhbl9hcmdzKQoKICAgICAgICBpZiBkYXRhOgogICAgICAgICAgICBzdF9pbiA9IHN1YnByb2Nlc3MuUElQRQoKICAgICAgICBrd2FyZ3MgPSBkaWN0KAogICAgICAgICAgICBleGVjdXRhYmxlPWV4ZWN1dGFibGUsCiAgICAgICAgICAgIHNoZWxsPXNoZWxsLAogICAgICAgICAgICBjbG9zZV9mZHM9Y2xvc2VfZmRzLAogICAgICAgICAgICBzdGRpbj1zdF9pbiwKICAgICAgICAgICAgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwKICAgICAgICAgICAgc3RkZXJyPXN1YnByb2Nlc3MuUElQRSwKICAgICAgICApCgogICAgICAgICMgc3RvcmUgdGhlIHB3ZAogICAgICAgIHByZXZfZGlyID0gb3MuZ2V0Y3dkKCkKCiAgICAgICAgIyBtYWtlIHN1cmUgd2UncmUgaW4gdGhlIHJpZ2h0IHdvcmtpbmcgZGlyZWN0b3J5CiAgICAgICAgaWYgY3dkIGFuZCBvcy5wYXRoLmlzZGlyKGN3ZCk6CiAgICAgICAgICAgIGN3ZCA9IG9zLnBhdGguYWJzcGF0aChvcy5wYXRoLmV4cGFuZHVzZXIoY3dkKSkKICAgICAgICAgICAga3dhcmdzWydjd2QnXSA9IGN3ZAogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBvcy5jaGRpcihjd2QpCiAgICAgICAgICAgIGV4Y2VwdCAoT1NFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihyYz1lLmVycm5vLCBtc2c9IkNvdWxkIG5vdCBvcGVuICVzLCAlcyIgJSAoY3dkLCBzdHIoZSkpKQoKICAgICAgICBvbGRfdW1hc2sgPSBOb25lCiAgICAgICAgaWYgdW1hc2s6CiAgICAgICAgICAgIG9sZF91bWFzayA9IG9zLnVtYXNrKHVtYXNrKQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIHNlbGYuX2RlYnVnOgogICAgICAgICAgICAgICAgc2VsZi5sb2coJ0V4ZWN1dGluZzogJyArIGNsZWFuX2FyZ3MpCiAgICAgICAgICAgIGNtZCA9IHN1YnByb2Nlc3MuUG9wZW4oYXJncywgKiprd2FyZ3MpCgogICAgICAgICAgICAjIHRoZSBjb21tdW5pY2F0aW9uIGxvZ2ljIGhlcmUgaXMgZXNzZW50aWFsbHkgdGFrZW4gZnJvbSB0aGF0CiAgICAgICAgICAgICMgb2YgdGhlIF9jb21tdW5pY2F0ZSgpIGZ1bmN0aW9uIGluIHNzaC5weQoKICAgICAgICAgICAgc3Rkb3V0ID0gYignJykKICAgICAgICAgICAgc3RkZXJyID0gYignJykKICAgICAgICAgICAgcnBpcGVzID0gW2NtZC5zdGRvdXQsIGNtZC5zdGRlcnJdCgogICAgICAgICAgICBpZiBkYXRhOgogICAgICAgICAgICAgICAgaWYgbm90IGJpbmFyeV9kYXRhOgogICAgICAgICAgICAgICAgICAgIGRhdGEgKz0gJ1xuJwogICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShkYXRhLCB0ZXh0X3R5cGUpOgogICAgICAgICAgICAgICAgICAgIGRhdGEgPSB0b19ieXRlcyhkYXRhKQogICAgICAgICAgICAgICAgY21kLnN0ZGluLndyaXRlKGRhdGEpCiAgICAgICAgICAgICAgICBjbWQuc3RkaW4uY2xvc2UoKQoKICAgICAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgICAgIHJmZHMsIHdmZHMsIGVmZHMgPSBzZWxlY3Quc2VsZWN0KHJwaXBlcywgW10sIHJwaXBlcywgMSkKICAgICAgICAgICAgICAgIHN0ZG91dCArPSBzZWxmLl9yZWFkX2Zyb21fcGlwZXMocnBpcGVzLCByZmRzLCBjbWQuc3Rkb3V0KQogICAgICAgICAgICAgICAgc3RkZXJyICs9IHNlbGYuX3JlYWRfZnJvbV9waXBlcyhycGlwZXMsIHJmZHMsIGNtZC5zdGRlcnIpCiAgICAgICAgICAgICAgICAjIGlmIHdlJ3JlIGNoZWNraW5nIGZvciBwcm9tcHRzLCBkbyBpdCBub3cKICAgICAgICAgICAgICAgIGlmIHByb21wdF9yZToKICAgICAgICAgICAgICAgICAgICBpZiBwcm9tcHRfcmUuc2VhcmNoKHN0ZG91dCkgYW5kIG5vdCBkYXRhOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBlbmNvZGluZzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZG91dCA9IHRvX25hdGl2ZShzdGRvdXQsIGVuY29kaW5nPWVuY29kaW5nLCBlcnJvcnM9ZXJyb3JzKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Rkb3V0ID0gc3Rkb3V0CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoMjU3LCBzdGRvdXQsICJBIHByb21wdCB3YXMgZW5jb3VudGVyZWQgd2hpbGUgcnVubmluZyBhIGNvbW1hbmQsIGJ1dCBubyBpbnB1dCBkYXRhIHdhcyBzcGVjaWZpZWQiKQogICAgICAgICAgICAgICAgIyBvbmx5IGJyZWFrIG91dCBpZiBubyBwaXBlcyBhcmUgbGVmdCB0byByZWFkIG9yCiAgICAgICAgICAgICAgICAjIHRoZSBwaXBlcyBhcmUgY29tcGxldGVseSByZWFkIGFuZAogICAgICAgICAgICAgICAgIyB0aGUgcHJvY2VzcyBpcyB0ZXJtaW5hdGVkCiAgICAgICAgICAgICAgICBpZiAobm90IHJwaXBlcyBvciBub3QgcmZkcykgYW5kIGNtZC5wb2xsKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICMgTm8gcGlwZXMgYXJlIGxlZnQgdG8gcmVhZCBidXQgcHJvY2VzcyBpcyBub3QgeWV0IHRlcm1pbmF0ZWQKICAgICAgICAgICAgICAgICMgT25seSB0aGVuIGl0IGlzIHNhZmUgdG8gd2FpdCBmb3IgdGhlIHByb2Nlc3MgdG8gYmUgZmluaXNoZWQKICAgICAgICAgICAgICAgICMgTk9URTogQWN0dWFsbHkgY21kLnBvbGwoKSBpcyBhbHdheXMgTm9uZSBoZXJlIGlmIHJwaXBlcyBpcyBlbXB0eQogICAgICAgICAgICAgICAgZWxpZiBub3QgcnBpcGVzIGFuZCBjbWQucG9sbCgpIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgY21kLndhaXQoKQogICAgICAgICAgICAgICAgICAgICMgVGhlIHByb2Nlc3MgaXMgdGVybWluYXRlZC4gU2luY2Ugbm8gcGlwZXMgdG8gcmVhZCBmcm9tIGFyZQogICAgICAgICAgICAgICAgICAgICMgbGVmdCwgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIHNlbGVjdCgpIGFnYWluLgogICAgICAgICAgICAgICAgICAgIGJyZWFrCgogICAgICAgICAgICBjbWQuc3Rkb3V0LmNsb3NlKCkKICAgICAgICAgICAgY21kLnN0ZGVyci5jbG9zZSgpCgogICAgICAgICAgICByYyA9IGNtZC5yZXR1cm5jb2RlCiAgICAgICAgZXhjZXB0IChPU0Vycm9yLCBJT0Vycm9yKToKICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICBzZWxmLmxvZygiRXJyb3IgRXhlY3V0aW5nIENNRDolcyBFeGNlcHRpb246JXMiICUgKGNsZWFuX2FyZ3MsIHRvX25hdGl2ZShlKSkpCiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHJjPWUuZXJybm8sIG1zZz10b19uYXRpdmUoZSksIGNtZD1jbGVhbl9hcmdzKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgc2VsZi5sb2coIkVycm9yIEV4ZWN1dGluZyBDTUQ6JXMgRXhjZXB0aW9uOiVzIiAlIChjbGVhbl9hcmdzLHRvX25hdGl2ZSh0cmFjZWJhY2suZm9ybWF0X2V4YygpKSkpCiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHJjPTI1NywgbXNnPXRvX25hdGl2ZShlKSwgZXhjZXB0aW9uPXRyYWNlYmFjay5mb3JtYXRfZXhjKCksIGNtZD1jbGVhbl9hcmdzKQoKICAgICAgICAjIFJlc3RvcmUgZW52IHNldHRpbmdzCiAgICAgICAgZm9yIGtleSwgdmFsIGluIG9sZF9lbnZfdmFscy5pdGVtcygpOgogICAgICAgICAgICBpZiB2YWwgaXMgTm9uZToKICAgICAgICAgICAgICAgIGRlbCBvcy5lbnZpcm9uW2tleV0KICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG9zLmVudmlyb25ba2V5XSA9IHZhbAoKICAgICAgICBpZiBvbGRfdW1hc2s6CiAgICAgICAgICAgIG9zLnVtYXNrKG9sZF91bWFzaykKCiAgICAgICAgaWYgcmMgIT0gMCBhbmQgY2hlY2tfcmM6CiAgICAgICAgICAgIG1zZyA9IGhldXJpc3RpY19sb2dfc2FuaXRpemUoc3RkZXJyLnJzdHJpcCgpLCBzZWxmLm5vX2xvZ192YWx1ZXMpCiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKGNtZD1jbGVhbl9hcmdzLCByYz1yYywgc3Rkb3V0PXN0ZG91dCwgc3RkZXJyPXN0ZGVyciwgbXNnPW1zZykKCiAgICAgICAgIyByZXNldCB0aGUgcHdkCiAgICAgICAgb3MuY2hkaXIocHJldl9kaXIpCgogICAgICAgIGlmIGVuY29kaW5nIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXR1cm4gKHJjLCB0b19uYXRpdmUoc3Rkb3V0LCBlbmNvZGluZz1lbmNvZGluZywgZXJyb3JzPWVycm9ycyksCiAgICAgICAgICAgICAgICAgICAgdG9fbmF0aXZlKHN0ZGVyciwgZW5jb2Rpbmc9ZW5jb2RpbmcsIGVycm9ycz1lcnJvcnMpKQogICAgICAgIHJldHVybiAocmMsIHN0ZG91dCwgc3RkZXJyKQoKICAgIGRlZiBhcHBlbmRfdG9fZmlsZShzZWxmLCBmaWxlbmFtZSwgc3RyKToKICAgICAgICBmaWxlbmFtZSA9IG9zLnBhdGguZXhwYW5kdmFycyhvcy5wYXRoLmV4cGFuZHVzZXIoZmlsZW5hbWUpKQogICAgICAgIGZoID0gb3BlbihmaWxlbmFtZSwgJ2EnKQogICAgICAgIGZoLndyaXRlKHN0cikKICAgICAgICBmaC5jbG9zZSgpCgogICAgZGVmIGJ5dGVzX3RvX2h1bWFuKHNlbGYsIHNpemUpOgogICAgICAgIHJldHVybiBieXRlc190b19odW1hbihzaXplKQoKICAgICMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5CiAgICBwcmV0dHlfYnl0ZXMgPSBieXRlc190b19odW1hbgoKICAgIGRlZiBodW1hbl90b19ieXRlcyhzZWxmLCBudW1iZXIsIGlzYml0cz1GYWxzZSk6CiAgICAgICAgcmV0dXJuIGh1bWFuX3RvX2J5dGVzKG51bWJlciwgaXNiaXRzKQoKICAgICMKICAgICMgQmFja3dhcmRzIGNvbXBhdAogICAgIwoKICAgICMgSW4gMi4wLCBtb3ZlZCBmcm9tIGluc2lkZSB0aGUgbW9kdWxlIHRvIHRoZSB0b3BsZXZlbAogICAgaXNfZXhlY3V0YWJsZSA9IGlzX2V4ZWN1dGFibGUKCgpkZWYgZ2V0X21vZHVsZV9wYXRoKCk6CiAgICByZXR1cm4gb3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKQpQSwMEFAAAAAAABLwrSyl0CnTvWwAA71sAABsAAABhbnNpYmxlL21vZHVsZV91dGlscy9lYzIucHkjIFRoaXMgY29kZSBpcyBwYXJ0IG9mIEFuc2libGUsIGJ1dCBpcyBhbiBpbmRlcGVuZGVudCBjb21wb25lbnQuCiMgVGhpcyBwYXJ0aWN1bGFyIGZpbGUgc25pcHBldCwgYW5kIHRoaXMgZmlsZSBzbmlwcGV0IG9ubHksIGlzIEJTRCBsaWNlbnNlZC4KIyBNb2R1bGVzIHlvdSB3cml0ZSB1c2luZyB0aGlzIHNuaXBwZXQsIHdoaWNoIGlzIGVtYmVkZGVkIGR5bmFtaWNhbGx5IGJ5IEFuc2libGUKIyBzdGlsbCBiZWxvbmcgdG8gdGhlIGF1dGhvciBvZiB0aGUgbW9kdWxlLCBhbmQgbWF5IGFzc2lnbiB0aGVpciBvd24gbGljZW5zZQojIHRvIHRoZSBjb21wbGV0ZSB3b3JrLgojCiMgQ29weXJpZ2h0IChjKSwgTWljaGFlbCBEZUhhYW4gPG1pY2hhZWwuZGVoYWFuQGdtYWlsLmNvbT4sIDIwMTItMjAxMwojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLAojIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDoKIwojICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQKIyAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwKIyAgICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24KIyAgICAgIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgojCiMgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyAiQVMgSVMiIEFORAojIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVECiMgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELgojIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULAojIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywKIyBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MKIyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUCiMgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFCiMgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCgppbXBvcnQgb3MKaW1wb3J0IHJlCmZyb20gdGltZSBpbXBvcnQgc2xlZXAKCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuY2xvdWQgaW1wb3J0IENsb3VkUmV0cnkKCnRyeToKICAgIGltcG9ydCBib3RvCiAgICBpbXBvcnQgYm90by5lYzIgI2JvdG8gZG9lcyB3ZWlyZCBpbXBvcnQgc3R1ZmYKICAgIEhBU19CT1RPID0gVHJ1ZQpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBIQVNfQk9UTyA9IEZhbHNlCgp0cnk6CiAgICBpbXBvcnQgYm90bzMKICAgIGltcG9ydCBib3RvY29yZQogICAgSEFTX0JPVE8zID0gVHJ1ZQpleGNlcHQ6CiAgICBIQVNfQk9UTzMgPSBGYWxzZQoKdHJ5OgogICAgZnJvbSBkaXN0dXRpbHMudmVyc2lvbiBpbXBvcnQgTG9vc2VWZXJzaW9uCiAgICBIQVNfTE9PU0VfVkVSU0lPTiA9IFRydWUKZXhjZXB0OgogICAgSEFTX0xPT1NFX1ZFUlNJT04gPSBGYWxzZQoKZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5zaXggaW1wb3J0IHN0cmluZ190eXBlcywgYmluYXJ5X3R5cGUsIHRleHRfdHlwZQoKY2xhc3MgQW5zaWJsZUFXU0Vycm9yKEV4Y2VwdGlvbik6CiAgICBwYXNzCgoKZGVmIF9ib3RvY29yZV9leGNlcHRpb25fbWF5YmUoKToKICAgICIiIgogICAgQWxsb3cgZm9yIGJvdG8zIG5vdCBiZWluZyBpbnN0YWxsZWQgd2hlbiB1c2luZyB0aGVzZSB1dGlscyBieSB3cmFwcGluZwogICAgYm90b2NvcmUuZXhjZXB0aW9ucyBpbnN0ZWFkIG9mIGFzc2lnbmluZyBmcm9tIGl0IGRpcmVjdGx5LgogICAgIiIiCiAgICBpZiBIQVNfQk9UTzM6CiAgICAgICAgcmV0dXJuIGJvdG9jb3JlLmV4Y2VwdGlvbnMuQ2xpZW50RXJyb3IKICAgIHJldHVybiB0eXBlKE5vbmUpCgoKY2xhc3MgQVdTUmV0cnkoQ2xvdWRSZXRyeSk6CiAgICBiYXNlX2NsYXNzID0gX2JvdG9jb3JlX2V4Y2VwdGlvbl9tYXliZSgpCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIHN0YXR1c19jb2RlX2Zyb21fZXhjZXB0aW9uKGVycm9yKToKICAgICAgICByZXR1cm4gZXJyb3IucmVzcG9uc2VbJ0Vycm9yJ11bJ0NvZGUnXQoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBmb3VuZChyZXNwb25zZV9jb2RlKToKICAgICAgICAjIFRoaXMgbGlzdCBvZiBmYWlsdXJlcyBpcyBiYXNlZCBvbiB0aGlzIEFQSSBSZWZlcmVuY2UKICAgICAgICAjIGh0dHA6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FXU0VDMi9sYXRlc3QvQVBJUmVmZXJlbmNlL2Vycm9ycy1vdmVydmlldy5odG1sCiAgICAgICAgcmV0cnlfb24gPSBbCiAgICAgICAgICAgICdSZXF1ZXN0TGltaXRFeGNlZWRlZCcsICdVbmF2YWlsYWJsZScsICdTZXJ2aWNlVW5hdmFpbGFibGUnLAogICAgICAgICAgICAnSW50ZXJuYWxGYWlsdXJlJywgJ0ludGVybmFsRXJyb3InCiAgICAgICAgXQoKICAgICAgICBub3RfZm91bmQgPSByZS5jb21waWxlKHInXlx3Ky5Ob3RGb3VuZCcpCiAgICAgICAgaWYgcmVzcG9uc2VfY29kZSBpbiByZXRyeV9vbiBvciBub3RfZm91bmQuc2VhcmNoKHJlc3BvbnNlX2NvZGUpOgogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKCmRlZiBib3RvM19jb25uKG1vZHVsZSwgY29ubl90eXBlPU5vbmUsIHJlc291cmNlPU5vbmUsIHJlZ2lvbj1Ob25lLCBlbmRwb2ludD1Ob25lLCAqKnBhcmFtcyk6CiAgICB0cnk6CiAgICAgICAgcmV0dXJuIF9ib3RvM19jb25uKGNvbm5fdHlwZT1jb25uX3R5cGUsIHJlc291cmNlPXJlc291cmNlLCByZWdpb249cmVnaW9uLCBlbmRwb2ludD1lbmRwb2ludCwgKipwYXJhbXMpCiAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0nVGhlcmUgaXMgYW4gaXNzdWUgaW4gdGhlIGNvZGUgb2YgdGhlIG1vZHVsZS4gWW91IG11c3Qgc3BlY2lmeSBlaXRoZXIgYm90aCwgcmVzb3VyY2Ugb3IgY2xpZW50IHRvIHRoZSBjb25uX3R5cGUgJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwYXJhbWV0ZXIgaW4gdGhlIGJvdG8zX2Nvbm4gZnVuY3Rpb24gY2FsbCcpCgpkZWYgX2JvdG8zX2Nvbm4oY29ubl90eXBlPU5vbmUsIHJlc291cmNlPU5vbmUsIHJlZ2lvbj1Ob25lLCBlbmRwb2ludD1Ob25lLCAqKnBhcmFtcyk6CiAgICBwcm9maWxlID0gcGFyYW1zLnBvcCgncHJvZmlsZV9uYW1lJywgTm9uZSkKCiAgICBpZiBjb25uX3R5cGUgbm90IGluIFsnYm90aCcsICdyZXNvdXJjZScsICdjbGllbnQnXToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdUaGVyZSBpcyBhbiBpc3N1ZSBpbiB0aGUgY2FsbGluZyBjb2RlLiBZb3UgJwogICAgICAgICAgICAgICAgICAgICAgICAgJ211c3Qgc3BlY2lmeSBlaXRoZXIgYm90aCwgcmVzb3VyY2UsIG9yIGNsaWVudCB0byAnCiAgICAgICAgICAgICAgICAgICAgICAgICAndGhlIGNvbm5fdHlwZSBwYXJhbWV0ZXIgaW4gdGhlIGJvdG8zX2Nvbm4gZnVuY3Rpb24gJwogICAgICAgICAgICAgICAgICAgICAgICAgJ2NhbGwnKQoKICAgIGlmIGNvbm5fdHlwZSA9PSAncmVzb3VyY2UnOgogICAgICAgIHJlc291cmNlID0gYm90bzMuc2Vzc2lvbi5TZXNzaW9uKHByb2ZpbGVfbmFtZT1wcm9maWxlKS5yZXNvdXJjZShyZXNvdXJjZSwgcmVnaW9uX25hbWU9cmVnaW9uLCBlbmRwb2ludF91cmw9ZW5kcG9pbnQsICoqcGFyYW1zKQogICAgICAgIHJldHVybiByZXNvdXJjZQogICAgZWxpZiBjb25uX3R5cGUgPT0gJ2NsaWVudCc6CiAgICAgICAgY2xpZW50ID0gYm90bzMuc2Vzc2lvbi5TZXNzaW9uKHByb2ZpbGVfbmFtZT1wcm9maWxlKS5jbGllbnQocmVzb3VyY2UsIHJlZ2lvbl9uYW1lPXJlZ2lvbiwgZW5kcG9pbnRfdXJsPWVuZHBvaW50LCAqKnBhcmFtcykKICAgICAgICByZXR1cm4gY2xpZW50CiAgICBlbHNlOgogICAgICAgIGNsaWVudCA9IGJvdG8zLnNlc3Npb24uU2Vzc2lvbihwcm9maWxlX25hbWU9cHJvZmlsZSkuY2xpZW50KHJlc291cmNlLCByZWdpb25fbmFtZT1yZWdpb24sIGVuZHBvaW50X3VybD1lbmRwb2ludCwgKipwYXJhbXMpCiAgICAgICAgcmVzb3VyY2UgPSBib3RvMy5zZXNzaW9uLlNlc3Npb24ocHJvZmlsZV9uYW1lPXByb2ZpbGUpLnJlc291cmNlKHJlc291cmNlLCByZWdpb25fbmFtZT1yZWdpb24sIGVuZHBvaW50X3VybD1lbmRwb2ludCwgKipwYXJhbXMpCiAgICAgICAgcmV0dXJuIGNsaWVudCwgcmVzb3VyY2UKCmJvdG8zX2ludmVudG9yeV9jb25uID0gX2JvdG8zX2Nvbm4KCmRlZiBhd3NfY29tbW9uX2FyZ3VtZW50X3NwZWMoKToKICAgIHJldHVybiBkaWN0KAogICAgICAgIGVjMl91cmw9ZGljdCgpLAogICAgICAgIGF3c19zZWNyZXRfa2V5PWRpY3QoYWxpYXNlcz1bJ2VjMl9zZWNyZXRfa2V5JywgJ3NlY3JldF9rZXknXSwgbm9fbG9nPVRydWUpLAogICAgICAgIGF3c19hY2Nlc3Nfa2V5PWRpY3QoYWxpYXNlcz1bJ2VjMl9hY2Nlc3Nfa2V5JywgJ2FjY2Vzc19rZXknXSksCiAgICAgICAgdmFsaWRhdGVfY2VydHM9ZGljdChkZWZhdWx0PVRydWUsIHR5cGU9J2Jvb2wnKSwKICAgICAgICBzZWN1cml0eV90b2tlbj1kaWN0KGFsaWFzZXM9WydhY2Nlc3NfdG9rZW4nXSwgbm9fbG9nPVRydWUpLAogICAgICAgIHByb2ZpbGU9ZGljdCgpLAogICAgKQoKCmRlZiBlYzJfYXJndW1lbnRfc3BlYygpOgogICAgc3BlYyA9IGF3c19jb21tb25fYXJndW1lbnRfc3BlYygpCiAgICBzcGVjLnVwZGF0ZSgKICAgICAgICBkaWN0KAogICAgICAgICAgICByZWdpb249ZGljdChhbGlhc2VzPVsnYXdzX3JlZ2lvbicsICdlYzJfcmVnaW9uJ10pLAogICAgICAgICkKICAgICkKICAgIHJldHVybiBzcGVjCgoKZGVmIGdldF9hd3NfY29ubmVjdGlvbl9pbmZvKG1vZHVsZSwgYm90bzM9RmFsc2UpOgoKICAgICMgQ2hlY2sgbW9kdWxlIGFyZ3MgZm9yIGNyZWRlbnRpYWxzLCB0aGVuIGNoZWNrIGVudmlyb25tZW50IHZhcnMKICAgICMgYWNjZXNzX2tleQoKICAgIGVjMl91cmwgPSBtb2R1bGUucGFyYW1zLmdldCgnZWMyX3VybCcpCiAgICBhY2Nlc3Nfa2V5ID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2F3c19hY2Nlc3Nfa2V5JykKICAgIHNlY3JldF9rZXkgPSBtb2R1bGUucGFyYW1zLmdldCgnYXdzX3NlY3JldF9rZXknKQogICAgc2VjdXJpdHlfdG9rZW4gPSBtb2R1bGUucGFyYW1zLmdldCgnc2VjdXJpdHlfdG9rZW4nKQogICAgcmVnaW9uID0gbW9kdWxlLnBhcmFtcy5nZXQoJ3JlZ2lvbicpCiAgICBwcm9maWxlX25hbWUgPSBtb2R1bGUucGFyYW1zLmdldCgncHJvZmlsZScpCiAgICB2YWxpZGF0ZV9jZXJ0cyA9IG1vZHVsZS5wYXJhbXMuZ2V0KCd2YWxpZGF0ZV9jZXJ0cycpCgogICAgaWYgbm90IGVjMl91cmw6CiAgICAgICAgaWYgJ0FXU19VUkwnIGluIG9zLmVudmlyb246CiAgICAgICAgICAgIGVjMl91cmwgPSBvcy5lbnZpcm9uWydBV1NfVVJMJ10KICAgICAgICBlbGlmICdFQzJfVVJMJyBpbiBvcy5lbnZpcm9uOgogICAgICAgICAgICBlYzJfdXJsID0gb3MuZW52aXJvblsnRUMyX1VSTCddCgogICAgaWYgbm90IGFjY2Vzc19rZXk6CiAgICAgICAgaWYgJ0FXU19BQ0NFU1NfS0VZX0lEJyBpbiBvcy5lbnZpcm9uOgogICAgICAgICAgICBhY2Nlc3Nfa2V5ID0gb3MuZW52aXJvblsnQVdTX0FDQ0VTU19LRVlfSUQnXQogICAgICAgIGVsaWYgJ0FXU19BQ0NFU1NfS0VZJyBpbiBvcy5lbnZpcm9uOgogICAgICAgICAgICBhY2Nlc3Nfa2V5ID0gb3MuZW52aXJvblsnQVdTX0FDQ0VTU19LRVknXQogICAgICAgIGVsaWYgJ0VDMl9BQ0NFU1NfS0VZJyBpbiBvcy5lbnZpcm9uOgogICAgICAgICAgICBhY2Nlc3Nfa2V5ID0gb3MuZW52aXJvblsnRUMyX0FDQ0VTU19LRVknXQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgaW4gY2FzZSBhY2Nlc3Nfa2V5IGNhbWUgaW4gYXMgZW1wdHkgc3RyaW5nCiAgICAgICAgICAgIGFjY2Vzc19rZXkgPSBOb25lCgogICAgaWYgbm90IHNlY3JldF9rZXk6CiAgICAgICAgaWYgJ0FXU19TRUNSRVRfQUNDRVNTX0tFWScgaW4gb3MuZW52aXJvbjoKICAgICAgICAgICAgc2VjcmV0X2tleSA9IG9zLmVudmlyb25bJ0FXU19TRUNSRVRfQUNDRVNTX0tFWSddCiAgICAgICAgZWxpZiAnQVdTX1NFQ1JFVF9LRVknIGluIG9zLmVudmlyb246CiAgICAgICAgICAgIHNlY3JldF9rZXkgPSBvcy5lbnZpcm9uWydBV1NfU0VDUkVUX0tFWSddCiAgICAgICAgZWxpZiAnRUMyX1NFQ1JFVF9LRVknIGluIG9zLmVudmlyb246CiAgICAgICAgICAgIHNlY3JldF9rZXkgPSBvcy5lbnZpcm9uWydFQzJfU0VDUkVUX0tFWSddCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBpbiBjYXNlIHNlY3JldF9rZXkgY2FtZSBpbiBhcyBlbXB0eSBzdHJpbmcKICAgICAgICAgICAgc2VjcmV0X2tleSA9IE5vbmUKCiAgICBpZiBub3QgcmVnaW9uOgogICAgICAgIGlmICdBV1NfUkVHSU9OJyBpbiBvcy5lbnZpcm9uOgogICAgICAgICAgICByZWdpb24gPSBvcy5lbnZpcm9uWydBV1NfUkVHSU9OJ10KICAgICAgICBlbGlmICdBV1NfREVGQVVMVF9SRUdJT04nIGluIG9zLmVudmlyb246CiAgICAgICAgICAgIHJlZ2lvbiA9IG9zLmVudmlyb25bJ0FXU19ERUZBVUxUX1JFR0lPTiddCiAgICAgICAgZWxpZiAnRUMyX1JFR0lPTicgaW4gb3MuZW52aXJvbjoKICAgICAgICAgICAgcmVnaW9uID0gb3MuZW52aXJvblsnRUMyX1JFR0lPTiddCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgbm90IGJvdG8zOgogICAgICAgICAgICAgICAgIyBib3RvLmNvbmZpZy5nZXQgcmV0dXJucyBOb25lIGlmIGNvbmZpZyBub3QgZm91bmQKICAgICAgICAgICAgICAgIHJlZ2lvbiA9IGJvdG8uY29uZmlnLmdldCgnQm90bycsICdhd3NfcmVnaW9uJykKICAgICAgICAgICAgICAgIGlmIG5vdCByZWdpb246CiAgICAgICAgICAgICAgICAgICAgcmVnaW9uID0gYm90by5jb25maWcuZ2V0KCdCb3RvJywgJ2VjMl9yZWdpb24nKQogICAgICAgICAgICBlbGlmIEhBU19CT1RPMzoKICAgICAgICAgICAgICAgICMgaGVyZSB3ZSBkb24ndCBuZWVkIHRvIG1ha2UgYW4gYWRkaXRpb25hbCBjYWxsLCB3aWxsIGRlZmF1bHQgdG8gJ3VzLWVhc3QtMScgaWYgdGhlIGJlbG93IGV2YWx1YXRlcyB0byBOb25lLgogICAgICAgICAgICAgICAgcmVnaW9uID0gYm90b2NvcmUuc2Vzc2lvbi5nZXRfc2Vzc2lvbigpLmdldF9jb25maWdfdmFyaWFibGUoJ3JlZ2lvbicpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0iQm90bzMgaXMgcmVxdWlyZWQgZm9yIHRoaXMgbW9kdWxlLiBQbGVhc2UgaW5zdGFsbCBib3RvMyBhbmQgdHJ5IGFnYWluIikKCiAgICBpZiBub3Qgc2VjdXJpdHlfdG9rZW46CiAgICAgICAgaWYgJ0FXU19TRUNVUklUWV9UT0tFTicgaW4gb3MuZW52aXJvbjoKICAgICAgICAgICAgc2VjdXJpdHlfdG9rZW4gPSBvcy5lbnZpcm9uWydBV1NfU0VDVVJJVFlfVE9LRU4nXQogICAgICAgIGVsaWYgJ0FXU19TRVNTSU9OX1RPS0VOJyBpbiBvcy5lbnZpcm9uOgogICAgICAgICAgICBzZWN1cml0eV90b2tlbiA9IG9zLmVudmlyb25bJ0FXU19TRVNTSU9OX1RPS0VOJ10KICAgICAgICBlbGlmICdFQzJfU0VDVVJJVFlfVE9LRU4nIGluIG9zLmVudmlyb246CiAgICAgICAgICAgIHNlY3VyaXR5X3Rva2VuID0gb3MuZW52aXJvblsnRUMyX1NFQ1VSSVRZX1RPS0VOJ10KCiAgICAgICAgaWYgbm90IHNlY3VyaXR5X3Rva2VuOgogICAgICAgICAgICAjIGluIGNhc2Ugc2VjdXJpdHlfdG9rZW4gY2FtZSBpbiBhcyBlbXB0eSBzdHJpbmcKICAgICAgICAgICAgc2VjdXJpdHlfdG9rZW4gPSBOb25lCgogICAgaWYgSEFTX0JPVE8zIGFuZCBib3RvMzoKICAgICAgICBib3RvX3BhcmFtcyA9IGRpY3QoYXdzX2FjY2Vzc19rZXlfaWQ9YWNjZXNzX2tleSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdzX3NlY3JldF9hY2Nlc3Nfa2V5PXNlY3JldF9rZXksCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3c19zZXNzaW9uX3Rva2VuPXNlY3VyaXR5X3Rva2VuKQogICAgICAgIGJvdG9fcGFyYW1zWyd2ZXJpZnknXSA9IHZhbGlkYXRlX2NlcnRzCgogICAgICAgIGlmIHByb2ZpbGVfbmFtZToKICAgICAgICAgICAgYm90b19wYXJhbXNbJ3Byb2ZpbGVfbmFtZSddID0gcHJvZmlsZV9uYW1lCgogICAgZWxzZToKICAgICAgICBib3RvX3BhcmFtcyA9IGRpY3QoYXdzX2FjY2Vzc19rZXlfaWQ9YWNjZXNzX2tleSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdzX3NlY3JldF9hY2Nlc3Nfa2V5PXNlY3JldF9rZXksCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5X3Rva2VuPXNlY3VyaXR5X3Rva2VuKQoKICAgICAgICAjIG9ubHkgc2V0IHByb2ZpbGVfbmFtZSBpZiBwYXNzZWQgYXMgYW4gYXJndW1lbnQKICAgICAgICBpZiBwcm9maWxlX25hbWU6CiAgICAgICAgICAgIGJvdG9fcGFyYW1zWydwcm9maWxlX25hbWUnXSA9IHByb2ZpbGVfbmFtZQoKICAgICAgICBib3RvX3BhcmFtc1sndmFsaWRhdGVfY2VydHMnXSA9IHZhbGlkYXRlX2NlcnRzCgogICAgZm9yIHBhcmFtLCB2YWx1ZSBpbiBib3RvX3BhcmFtcy5pdGVtcygpOgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIGJpbmFyeV90eXBlKToKICAgICAgICAgICAgYm90b19wYXJhbXNbcGFyYW1dID0gdGV4dF90eXBlKHZhbHVlLCAndXRmLTgnLCAnc3RyaWN0JykKCiAgICByZXR1cm4gcmVnaW9uLCBlYzJfdXJsLCBib3RvX3BhcmFtcwoKCmRlZiBnZXRfZWMyX2NyZWRzKG1vZHVsZSk6CiAgICAnJycgZm9yIGNvbXBhdGliaWxpdHkgbW9kZSB3aXRoIG9sZCBtb2R1bGVzIHRoYXQgZG9uJ3QvY2FuJ3QgeWV0CiAgICAgICAgdXNlIGVjMl9jb25uZWN0IG1ldGhvZCAnJycKICAgIHJlZ2lvbiwgZWMyX3VybCwgYm90b19wYXJhbXMgPSBnZXRfYXdzX2Nvbm5lY3Rpb25faW5mbyhtb2R1bGUpCiAgICByZXR1cm4gZWMyX3VybCwgYm90b19wYXJhbXNbJ2F3c19hY2Nlc3Nfa2V5X2lkJ10sIGJvdG9fcGFyYW1zWydhd3Nfc2VjcmV0X2FjY2Vzc19rZXknXSwgcmVnaW9uCgoKZGVmIGJvdG9fZml4X3NlY3VyaXR5X3Rva2VuX2luX3Byb2ZpbGUoY29ubiwgcHJvZmlsZV9uYW1lKToKICAgICcnJyBtb25rZXkgcGF0Y2ggZm9yIGJvdG8gaXNzdWUgYm90by9ib3RvIzIxMDAgJycnCiAgICBwcm9maWxlID0gJ3Byb2ZpbGUgJyArIHByb2ZpbGVfbmFtZQogICAgaWYgYm90by5jb25maWcuaGFzX29wdGlvbihwcm9maWxlLCAnYXdzX3NlY3VyaXR5X3Rva2VuJyk6CiAgICAgICAgY29ubi5wcm92aWRlci5zZXRfc2VjdXJpdHlfdG9rZW4oYm90by5jb25maWcuZ2V0KHByb2ZpbGUsICdhd3Nfc2VjdXJpdHlfdG9rZW4nKSkKICAgIHJldHVybiBjb25uCgoKZGVmIGNvbm5lY3RfdG9fYXdzKGF3c19tb2R1bGUsIHJlZ2lvbiwgKipwYXJhbXMpOgogICAgY29ubiA9IGF3c19tb2R1bGUuY29ubmVjdF90b19yZWdpb24ocmVnaW9uLCAqKnBhcmFtcykKICAgIGlmIG5vdCBjb25uOgogICAgICAgIGlmIHJlZ2lvbiBub3QgaW4gW2F3c19tb2R1bGVfcmVnaW9uLm5hbWUgZm9yIGF3c19tb2R1bGVfcmVnaW9uIGluIGF3c19tb2R1bGUucmVnaW9ucygpXToKICAgICAgICAgICAgcmFpc2UgQW5zaWJsZUFXU0Vycm9yKCJSZWdpb24gJXMgZG9lcyBub3Qgc2VlbSB0byBiZSBhdmFpbGFibGUgZm9yIGF3cyBtb2R1bGUgJXMuIElmIHRoZSByZWdpb24gZGVmaW5pdGVseSBleGlzdHMsIHlvdSBtYXkgbmVlZCB0byB1cGdyYWRlICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJib3RvIG9yIGV4dGVuZCB3aXRoIGVuZHBvaW50c19wYXRoIiAlIChyZWdpb24sIGF3c19tb2R1bGUuX19uYW1lX18pKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJhaXNlIEFuc2libGVBV1NFcnJvcigiVW5rbm93biBwcm9ibGVtIGNvbm5lY3RpbmcgdG8gcmVnaW9uICVzIGZvciBhd3MgbW9kdWxlICVzLiIgJSAocmVnaW9uLCBhd3NfbW9kdWxlLl9fbmFtZV9fKSkKICAgIGlmIHBhcmFtcy5nZXQoJ3Byb2ZpbGVfbmFtZScpOgogICAgICAgIGNvbm4gPSBib3RvX2ZpeF9zZWN1cml0eV90b2tlbl9pbl9wcm9maWxlKGNvbm4sIHBhcmFtc1sncHJvZmlsZV9uYW1lJ10pCiAgICByZXR1cm4gY29ubgoKCmRlZiBlYzJfY29ubmVjdChtb2R1bGUpOgoKICAgICIiIiBSZXR1cm4gYW4gZWMyIGNvbm5lY3Rpb24iIiIKCiAgICByZWdpb24sIGVjMl91cmwsIGJvdG9fcGFyYW1zID0gZ2V0X2F3c19jb25uZWN0aW9uX2luZm8obW9kdWxlKQoKICAgICMgSWYgd2UgaGF2ZSBhIHJlZ2lvbiBzcGVjaWZpZWQsIGNvbm5lY3QgdG8gaXRzIGVuZHBvaW50LgogICAgaWYgcmVnaW9uOgogICAgICAgIHRyeToKICAgICAgICAgICAgZWMyID0gY29ubmVjdF90b19hd3MoYm90by5lYzIsIHJlZ2lvbiwgKipib3RvX3BhcmFtcykKICAgICAgICBleGNlcHQgKGJvdG8uZXhjZXB0aW9uLk5vQXV0aEhhbmRsZXJGb3VuZCwgQW5zaWJsZUFXU0Vycm9yKSBhcyBlOgogICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz1zdHIoZSkpCiAgICAjIE90aGVyd2lzZSwgbm8gcmVnaW9uIHNvIHdlIGZhbGxiYWNrIHRvIHRoZSBvbGQgY29ubmVjdGlvbiBtZXRob2QKICAgIGVsaWYgZWMyX3VybDoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGVjMiA9IGJvdG8uY29ubmVjdF9lYzJfZW5kcG9pbnQoZWMyX3VybCwgKipib3RvX3BhcmFtcykKICAgICAgICBleGNlcHQgKGJvdG8uZXhjZXB0aW9uLk5vQXV0aEhhbmRsZXJGb3VuZCwgQW5zaWJsZUFXU0Vycm9yKSBhcyBlOgogICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz1zdHIoZSkpCiAgICBlbHNlOgogICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSJFaXRoZXIgcmVnaW9uIG9yIGVjMl91cmwgbXVzdCBiZSBzcGVjaWZpZWQiKQoKICAgIHJldHVybiBlYzIKCmRlZiBwYWdpbmcocGF1c2U9MCwgbWFya2VyX3Byb3BlcnR5PSdtYXJrZXInKToKICAgICIiIiBBZGRzIHBhZ2luZyB0byBib3RvIHJldHJpZXZhbCBmdW5jdGlvbnMgdGhhdCBzdXBwb3J0IGEgJ21hcmtlcicKICAgICAgICB0aGlzIGlzIGNvbmZpZ3VyYWJsZSBhcyBub3QgYWxsIGJvdG8gZnVuY3Rpb25zIHNlZW0gdG8gdXNlIHRoZQogICAgICAgIHNhbWUgbmFtZS4KICAgICIiIgogICAgZGVmIHdyYXBwZXIoZik6CiAgICAgICAgZGVmIHBhZ2UoKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICAgICAgcmVzdWx0cyA9IFtdCiAgICAgICAgICAgIG1hcmtlciA9IE5vbmUKICAgICAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBuZXcgPSBmKCphcmdzLCBtYXJrZXI9bWFya2VyLCAqKmt3YXJncykKICAgICAgICAgICAgICAgICAgICBtYXJrZXIgPSBnZXRhdHRyKG5ldywgbWFya2VyX3Byb3BlcnR5KQogICAgICAgICAgICAgICAgICAgIHJlc3VsdHMuZXh0ZW5kKG5ldykKICAgICAgICAgICAgICAgICAgICBpZiBub3QgbWFya2VyOgogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIGVsaWYgcGF1c2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHNsZWVwKHBhdXNlKQogICAgICAgICAgICAgICAgZXhjZXB0IFR5cGVFcnJvcjoKICAgICAgICAgICAgICAgICAgICAjIE9sZGVyIHZlcnNpb24gb2YgYm90byBkbyBub3QgYWxsb3cgZm9yIG1hcmtlciBwYXJhbSwganVzdCBydW4gbm9ybWFsbHkKICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0gZigqYXJncywgKiprd2FyZ3MpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMKICAgICAgICByZXR1cm4gcGFnZQogICAgcmV0dXJuIHdyYXBwZXIKCgpkZWYgY2FtZWxfZGljdF90b19zbmFrZV9kaWN0KGNhbWVsX2RpY3QpOgoKICAgIGRlZiBjYW1lbF90b19zbmFrZShuYW1lKToKCiAgICAgICAgaW1wb3J0IHJlCgogICAgICAgIGZpcnN0X2NhcF9yZSA9IHJlLmNvbXBpbGUoJyguKShbQS1aXVthLXpdKyknKQogICAgICAgIGFsbF9jYXBfcmUgPSByZS5jb21waWxlKCcoW2EtejAtOV0pKFtBLVpdKScpCiAgICAgICAgczEgPSBmaXJzdF9jYXBfcmUuc3ViKHInXDFfXDInLCBuYW1lKQoKICAgICAgICByZXR1cm4gYWxsX2NhcF9yZS5zdWIocidcMV9cMicsIHMxKS5sb3dlcigpCgoKICAgIGRlZiB2YWx1ZV9pc19saXN0KGNhbWVsX2xpc3QpOgoKICAgICAgICBjaGVja2VkX2xpc3QgPSBbXQogICAgICAgIGZvciBpdGVtIGluIGNhbWVsX2xpc3Q6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoaXRlbSwgZGljdCk6CiAgICAgICAgICAgICAgICBjaGVja2VkX2xpc3QuYXBwZW5kKGNhbWVsX2RpY3RfdG9fc25ha2VfZGljdChpdGVtKSkKICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKGl0ZW0sIGxpc3QpOgogICAgICAgICAgICAgICAgY2hlY2tlZF9saXN0LmFwcGVuZCh2YWx1ZV9pc19saXN0KGl0ZW0pKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgY2hlY2tlZF9saXN0LmFwcGVuZChpdGVtKQoKICAgICAgICByZXR1cm4gY2hlY2tlZF9saXN0CgoKICAgIHNuYWtlX2RpY3QgPSB7fQogICAgZm9yIGssIHYgaW4gY2FtZWxfZGljdC5pdGVtcygpOgogICAgICAgIGlmIGlzaW5zdGFuY2UodiwgZGljdCk6CiAgICAgICAgICAgIHNuYWtlX2RpY3RbY2FtZWxfdG9fc25ha2UoayldID0gY2FtZWxfZGljdF90b19zbmFrZV9kaWN0KHYpCiAgICAgICAgZWxpZiBpc2luc3RhbmNlKHYsIGxpc3QpOgogICAgICAgICAgICBzbmFrZV9kaWN0W2NhbWVsX3RvX3NuYWtlKGspXSA9IHZhbHVlX2lzX2xpc3QodikKICAgICAgICBlbHNlOgogICAgICAgICAgICBzbmFrZV9kaWN0W2NhbWVsX3RvX3NuYWtlKGspXSA9IHYKCiAgICByZXR1cm4gc25ha2VfZGljdAoKCmRlZiBzbmFrZV9kaWN0X3RvX2NhbWVsX2RpY3Qoc25ha2VfZGljdCk6CgogICAgZGVmIGNhbWVsaXplKGNvbXBsZXhfdHlwZSk6CiAgICAgICAgaWYgY29tcGxleF90eXBlIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIG5ld190eXBlID0gdHlwZShjb21wbGV4X3R5cGUpKCkKICAgICAgICBpZiBpc2luc3RhbmNlKGNvbXBsZXhfdHlwZSwgZGljdCk6CiAgICAgICAgICAgIGZvciBrZXkgaW4gY29tcGxleF90eXBlOgogICAgICAgICAgICAgICAgbmV3X3R5cGVbY2FtZWwoa2V5KV0gPSBjYW1lbGl6ZShjb21wbGV4X3R5cGVba2V5XSkKICAgICAgICBlbGlmIGlzaW5zdGFuY2UoY29tcGxleF90eXBlLCBsaXN0KToKICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKGNvbXBsZXhfdHlwZSkpOgogICAgICAgICAgICAgICAgbmV3X3R5cGUuYXBwZW5kKGNhbWVsaXplKGNvbXBsZXhfdHlwZVtpXSkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXhfdHlwZQogICAgICAgIHJldHVybiBuZXdfdHlwZQoKICAgIGRlZiBjYW1lbCh3b3Jkcyk6CiAgICAgICAgcmV0dXJuIHdvcmRzLnNwbGl0KCdfJylbMF0gKyAnJy5qb2luKHguY2FwaXRhbGl6ZSgpIG9yICdfJyBmb3IgeCBpbiB3b3Jkcy5zcGxpdCgnXycpWzE6XSkKCiAgICByZXR1cm4gY2FtZWxpemUoc25ha2VfZGljdCkKCgpkZWYgYW5zaWJsZV9kaWN0X3RvX2JvdG8zX2ZpbHRlcl9saXN0KGZpbHRlcnNfZGljdCk6CgogICAgIiIiIENvbnZlcnQgYW4gQW5zaWJsZSBkaWN0IG9mIGZpbHRlcnMgdG8gbGlzdCBvZiBkaWN0cyB0aGF0IGJvdG8zIGNhbiB1c2UKICAgIEFyZ3M6CiAgICAgICAgZmlsdGVyc19kaWN0IChkaWN0KTogRGljdCBvZiBBV1MgZmlsdGVycy4KICAgIEJhc2ljIFVzYWdlOgogICAgICAgID4+PiBmaWx0ZXJzID0geydzb21lLWF3cy1pZCcsICdpLTAxMjM0NTY3J30KICAgICAgICA+Pj4gYW5zaWJsZV9kaWN0X3RvX2JvdG8zX2ZpbHRlcl9saXN0KGZpbHRlcnMpCiAgICAgICAgewogICAgICAgICAgICAnc29tZS1hd3MtaWQnOiAnaS0wMTIzNDU2NycKICAgICAgICB9CiAgICBSZXR1cm5zOgogICAgICAgIExpc3Q6IExpc3Qgb2YgQVdTIGZpbHRlcnMgYW5kIHRoZWlyIHZhbHVlcwogICAgICAgIFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJ05hbWUnOiAnc29tZS1hd3MtaWQnLAogICAgICAgICAgICAgICAgJ1ZhbHVlcyc6IFsKICAgICAgICAgICAgICAgICAgICAnaS0wMTIzNDU2NycsCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICAiIiIKCiAgICBmaWx0ZXJzX2xpc3QgPSBbXQogICAgZm9yIGssdiBpbiBmaWx0ZXJzX2RpY3QuaXRlbXMoKToKICAgICAgICBmaWx0ZXJfZGljdCA9IHsnTmFtZSc6IGt9CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2LCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICBmaWx0ZXJfZGljdFsnVmFsdWVzJ10gPSBbdl0KICAgICAgICBlbHNlOgogICAgICAgICAgICBmaWx0ZXJfZGljdFsnVmFsdWVzJ10gPSB2CgogICAgICAgIGZpbHRlcnNfbGlzdC5hcHBlbmQoZmlsdGVyX2RpY3QpCgogICAgcmV0dXJuIGZpbHRlcnNfbGlzdAoKCmRlZiBib3RvM190YWdfbGlzdF90b19hbnNpYmxlX2RpY3QodGFnc19saXN0LCB0YWdfbmFtZV9rZXlfbmFtZT0nS2V5JywgdGFnX3ZhbHVlX2tleV9uYW1lPSdWYWx1ZScpOgoKICAgICIiIiBDb252ZXJ0IGEgYm90bzMgbGlzdCBvZiByZXNvdXJjZSB0YWdzIHRvIGEgZmxhdCBkaWN0IG9mIGtleTp2YWx1ZSBwYWlycwogICAgQXJnczoKICAgICAgICB0YWdzX2xpc3QgKGxpc3QpOiBMaXN0IG9mIGRpY3RzIHJlcHJlc2VudGluZyBBV1MgdGFncy4KICAgICAgICB0YWdfbmFtZV9rZXlfbmFtZSAoc3RyKTogVmFsdWUgdG8gdXNlIGFzIHRoZSBrZXkgZm9yIGFsbCB0YWcga2V5cyAodXNlZnVsIGJlY2F1c2UgYm90bzMgZG9lc24ndCBhbHdheXMgdXNlICJLZXkiKQogICAgICAgIHRhZ192YWx1ZV9rZXlfbmFtZSAoc3RyKTogVmFsdWUgdG8gdXNlIGFzIHRoZSBrZXkgZm9yIGFsbCB0YWcgdmFsdWVzICh1c2VmdWwgYmVjYXVzZSBib3RvMyBkb2Vzbid0IGFsd2F5cyB1c2UgIlZhbHVlIikKICAgIEJhc2ljIFVzYWdlOgogICAgICAgID4+PiB0YWdzX2xpc3QgPSBbeydLZXknOiAnTXlUYWdLZXknLCAnVmFsdWUnOiAnTXlUYWdWYWx1ZSd9XQogICAgICAgID4+PiBib3RvM190YWdfbGlzdF90b19hbnNpYmxlX2RpY3QodGFnc19saXN0KQogICAgICAgIFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJ0tleSc6ICdNeVRhZ0tleScsCiAgICAgICAgICAgICAgICAnVmFsdWUnOiAnTXlUYWdWYWx1ZScKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIFJldHVybnM6CiAgICAgICAgRGljdDogRGljdCBvZiBrZXk6dmFsdWUgcGFpcnMgcmVwcmVzZW50aW5nIEFXUyB0YWdzCiAgICAgICAgIHsKICAgICAgICAgICAgJ015VGFnS2V5JzogJ015VGFnVmFsdWUnLAogICAgICAgIH0KICAgICIiIgoKICAgIHRhZ3NfZGljdCA9IHt9CiAgICBmb3IgdGFnIGluIHRhZ3NfbGlzdDoKICAgICAgICBpZiB0YWdfbmFtZV9rZXlfbmFtZSBpbiB0YWc6CiAgICAgICAgICAgIHRhZ3NfZGljdFt0YWdbdGFnX25hbWVfa2V5X25hbWVdXSA9IHRhZ1t0YWdfdmFsdWVfa2V5X25hbWVdCgogICAgcmV0dXJuIHRhZ3NfZGljdAoKCmRlZiBhbnNpYmxlX2RpY3RfdG9fYm90bzNfdGFnX2xpc3QodGFnc19kaWN0LCB0YWdfbmFtZV9rZXlfbmFtZT0nS2V5JywgdGFnX3ZhbHVlX2tleV9uYW1lPSdWYWx1ZScpOgoKICAgICIiIiBDb252ZXJ0IGEgZmxhdCBkaWN0IG9mIGtleTp2YWx1ZSBwYWlycyByZXByZXNlbnRpbmcgQVdTIHJlc291cmNlIHRhZ3MgdG8gYSBib3RvMyBsaXN0IG9mIGRpY3RzCiAgICBBcmdzOgogICAgICAgIHRhZ3NfZGljdCAoZGljdCk6IERpY3QgcmVwcmVzZW50aW5nIEFXUyByZXNvdXJjZSB0YWdzLgogICAgICAgIHRhZ19uYW1lX2tleV9uYW1lIChzdHIpOiBWYWx1ZSB0byB1c2UgYXMgdGhlIGtleSBmb3IgYWxsIHRhZyBrZXlzICh1c2VmdWwgYmVjYXVzZSBib3RvMyBkb2Vzbid0IGFsd2F5cyB1c2UgIktleSIpCiAgICAgICAgdGFnX3ZhbHVlX2tleV9uYW1lIChzdHIpOiBWYWx1ZSB0byB1c2UgYXMgdGhlIGtleSBmb3IgYWxsIHRhZyB2YWx1ZXMgKHVzZWZ1bCBiZWNhdXNlIGJvdG8zIGRvZXNuJ3QgYWx3YXlzIHVzZSAiVmFsdWUiKQogICAgQmFzaWMgVXNhZ2U6CiAgICAgICAgPj4+IHRhZ3NfZGljdCA9IHsnTXlUYWdLZXknOiAnTXlUYWdWYWx1ZSd9CiAgICAgICAgPj4+IGFuc2libGVfZGljdF90b19ib3RvM190YWdfbGlzdCh0YWdzX2RpY3QpCiAgICAgICAgewogICAgICAgICAgICAnTXlUYWdLZXknOiAnTXlUYWdWYWx1ZScKICAgICAgICB9CiAgICBSZXR1cm5zOgogICAgICAgIExpc3Q6IExpc3Qgb2YgZGljdHMgY29udGFpbmluZyB0YWcga2V5cyBhbmQgdmFsdWVzCiAgICAgICAgWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAnS2V5JzogJ015VGFnS2V5JywKICAgICAgICAgICAgICAgICdWYWx1ZSc6ICdNeVRhZ1ZhbHVlJwogICAgICAgICAgICB9CiAgICAgICAgXQogICAgIiIiCgogICAgdGFnc19saXN0ID0gW10KICAgIGZvciBrLHYgaW4gdGFnc19kaWN0Lml0ZW1zKCk6CiAgICAgICAgdGFnc19saXN0LmFwcGVuZCh7dGFnX25hbWVfa2V5X25hbWU6IGssIHRhZ192YWx1ZV9rZXlfbmFtZTogdn0pCgogICAgcmV0dXJuIHRhZ3NfbGlzdAoKCmRlZiBnZXRfZWMyX3NlY3VyaXR5X2dyb3VwX2lkc19mcm9tX25hbWVzKHNlY19ncm91cF9saXN0LCBlYzJfY29ubmVjdGlvbiwgdnBjX2lkPU5vbmUsIGJvdG8zPVRydWUpOgoKICAgICIiIiBSZXR1cm4gbGlzdCBvZiBzZWN1cml0eSBncm91cCBJRHMgZnJvbSBzZWN1cml0eSBncm91cCBuYW1lcy4gTm90ZSB0aGF0IHNlY3VyaXR5IGdyb3VwIG5hbWVzIGFyZSBub3QgdW5pcXVlCiAgICAgYWNyb3NzIFZQQ3MuICBJZiBhIG5hbWUgZXhpc3RzIGFjcm9zcyBtdWx0aXBsZSBWUENzIGFuZCBubyBWUEMgSUQgaXMgc3VwcGxpZWQsIGFsbCBtYXRjaGluZyBJRHMgd2lsbCBiZSByZXR1cm5lZC4gVGhpcwogICAgIHdpbGwgcHJvYmFibHkgbGVhZCB0byBhIGJvdG8gZXhjZXB0aW9uIGlmIHlvdSBhdHRlbXB0IHRvIGFzc2lnbiBib3RoIElEcyB0byBhIHJlc291cmNlIHNvIGVuc3VyZSB5b3Ugd3JhcCB0aGUgY2FsbCBpbgogICAgIGEgdHJ5IGJsb2NrCiAgICAgIiIiCgogICAgZGVmIGdldF9zZ19uYW1lKHNnLCBib3RvMyk6CgogICAgICAgIGlmIGJvdG8zOgogICAgICAgICAgICByZXR1cm4gc2dbJ0dyb3VwTmFtZSddCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNnLm5hbWUKCgogICAgZGVmIGdldF9zZ19pZChzZywgYm90bzMpOgoKICAgICAgICBpZiBib3RvMzoKICAgICAgICAgICAgcmV0dXJuIHNnWydHcm91cElkJ10KICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2cuaWQKCiAgICBzZWNfZ3JvdXBfaWRfbGlzdCA9IFtdCgogICAgaWYgaXNpbnN0YW5jZShzZWNfZ3JvdXBfbGlzdCwgc3RyaW5nX3R5cGVzKToKICAgICAgICBzZWNfZ3JvdXBfbGlzdCA9IFtzZWNfZ3JvdXBfbGlzdF0KCiAgICAjIEdldCBhbGwgc2VjdXJpdHkgZ3JvdXBzCiAgICBpZiBib3RvMzoKICAgICAgICBpZiB2cGNfaWQ6CiAgICAgICAgICAgIGZpbHRlcnMgPSBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJ05hbWUnOiAndnBjLWlkJywKICAgICAgICAgICAgICAgICAgICAnVmFsdWVzJzogWwogICAgICAgICAgICAgICAgICAgICAgICB2cGNfaWQsCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICAgIGFsbF9zZWNfZ3JvdXBzID0gZWMyX2Nvbm5lY3Rpb24uZGVzY3JpYmVfc2VjdXJpdHlfZ3JvdXBzKEZpbHRlcnM9ZmlsdGVycylbJ1NlY3VyaXR5R3JvdXBzJ10KICAgICAgICBlbHNlOgogICAgICAgICAgICBhbGxfc2VjX2dyb3VwcyA9IGVjMl9jb25uZWN0aW9uLmRlc2NyaWJlX3NlY3VyaXR5X2dyb3VwcygpWydTZWN1cml0eUdyb3VwcyddCiAgICBlbHNlOgogICAgICAgIGlmIHZwY19pZDoKICAgICAgICAgICAgZmlsdGVycyA9IHsgJ3ZwYy1pZCc6IHZwY19pZCB9CiAgICAgICAgICAgIGFsbF9zZWNfZ3JvdXBzID0gZWMyX2Nvbm5lY3Rpb24uZ2V0X2FsbF9zZWN1cml0eV9ncm91cHMoZmlsdGVycz1maWx0ZXJzKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGFsbF9zZWNfZ3JvdXBzID0gZWMyX2Nvbm5lY3Rpb24uZ2V0X2FsbF9zZWN1cml0eV9ncm91cHMoKQoKICAgIHVubWF0Y2hlZCA9IHNldChzZWNfZ3JvdXBfbGlzdCkuZGlmZmVyZW5jZShzdHIoZ2V0X3NnX25hbWUoYWxsX3NnLCBib3RvMykpIGZvciBhbGxfc2cgaW4gYWxsX3NlY19ncm91cHMpCiAgICBzZWNfZ3JvdXBfbmFtZV9saXN0ID0gbGlzdChzZXQoc2VjX2dyb3VwX2xpc3QpIC0gc2V0KHVubWF0Y2hlZCkpCgogICAgaWYgbGVuKHVubWF0Y2hlZCkgPiAwOgogICAgICAgICMgSWYgd2UgaGF2ZSB1bm1hdGNoZWQgbmFtZXMgdGhhdCBsb29rIGxpa2UgYW4gSUQsIGFzc3VtZSB0aGV5IGFyZQogICAgICAgIGltcG9ydCByZQogICAgICAgIHNlY19ncm91cF9pZF9saXN0WzpdID0gW3NnIGZvciBzZyBpbiB1bm1hdGNoZWQgaWYgcmUubWF0Y2goJ3NnLVthLWZBLUYwLTldKyQnLCBzZyldCiAgICAgICAgc3RpbGxfdW5tYXRjaGVkID0gW3NnIGZvciBzZyBpbiB1bm1hdGNoZWQgaWYgbm90IHJlLm1hdGNoKCdzZy1bYS1mQS1GMC05XSskJywgc2cpXQogICAgICAgIGlmIGxlbihzdGlsbF91bm1hdGNoZWQpID4gMDoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiVGhlIGZvbGxvd2luZyBncm91cCBuYW1lcyBhcmUgbm90IHZhbGlkOiAlcyIgJSAnLCAnLmpvaW4oc3RpbGxfdW5tYXRjaGVkKSkKCiAgICBzZWNfZ3JvdXBfaWRfbGlzdCArPSBbIHN0cihnZXRfc2dfaWQoYWxsX3NnLCBib3RvMykpIGZvciBhbGxfc2cgaW4gYWxsX3NlY19ncm91cHMgaWYgc3RyKGdldF9zZ19uYW1lKGFsbF9zZywgYm90bzMpKSBpbiBzZWNfZ3JvdXBfbmFtZV9saXN0IF0KCiAgICByZXR1cm4gc2VjX2dyb3VwX2lkX2xpc3QKCgpkZWYgc29ydF9qc29uX3BvbGljeV9kaWN0KHBvbGljeV9kaWN0KToKCiAgICAiIiIgU29ydCBhbnkgbGlzdHMgaW4gYW4gSUFNIEpTT04gcG9saWN5IHNvIHRoYXQgY29tcGFyaXNvbiBvZiB0d28gcG9saWNpZXMgd2l0aCBpZGVudGljYWwgdmFsdWVzIGJ1dAogICAgZGlmZmVyZW50IG9yZGVycyB3aWxsIHJldHVybiB0cnVlCiAgICBBcmdzOgogICAgICAgIHBvbGljeV9kaWN0IChkaWN0KTogRGljdCByZXByZXNlbnRpbmcgSUFNIEpTT04gcG9saWN5LgogICAgQmFzaWMgVXNhZ2U6CiAgICAgICAgPj4+IG15X2lhbV9wb2xpY3kgPSB7J1ByaW5jaXBsZSc6IHsnQVdTJzpbIjMxIiwiNyIsIjE0IiwiMTAxIl19CiAgICAgICAgPj4+IHNvcnRfanNvbl9wb2xpY3lfZGljdChteV9pYW1fcG9saWN5KQogICAgUmV0dXJuczoKICAgICAgICBEaWN0OiBXaWxsIHJldHVybiBhIGNvcHkgb2YgdGhlIHBvbGljeSBhcyBhIERpY3QgYnV0IGFueSBMaXN0IHdpbGwgYmUgc29ydGVkCiAgICAgICAgewogICAgICAgICAgICAnUHJpbmNpcGxlJzogewogICAgICAgICAgICAgICAgJ0FXUyc6IFsgJzcnLCAnMTQnLCAnMzEnLCAnMTAxJyBdCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAiIiIKCiAgICBkZWYgdmFsdWVfaXNfbGlzdChteV9saXN0KToKCiAgICAgICAgY2hlY2tlZF9saXN0ID0gW10KICAgICAgICBmb3IgaXRlbSBpbiBteV9saXN0OgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGl0ZW0sIGRpY3QpOgogICAgICAgICAgICAgICAgY2hlY2tlZF9saXN0LmFwcGVuZChzb3J0X2pzb25fcG9saWN5X2RpY3QoaXRlbSkpCiAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZShpdGVtLCBsaXN0KToKICAgICAgICAgICAgICAgIGNoZWNrZWRfbGlzdC5hcHBlbmQodmFsdWVfaXNfbGlzdChpdGVtKSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGNoZWNrZWRfbGlzdC5hcHBlbmQoaXRlbSkKCiAgICAgICAgY2hlY2tlZF9saXN0LnNvcnQoKQogICAgICAgIHJldHVybiBjaGVja2VkX2xpc3QKCiAgICBvcmRlcmVkX3BvbGljeV9kaWN0ID0ge30KICAgIGZvciBrZXksIHZhbHVlIGluIHBvbGljeV9kaWN0Lml0ZW1zKCk6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgZGljdCk6CiAgICAgICAgICAgIG9yZGVyZWRfcG9saWN5X2RpY3Rba2V5XSA9IHNvcnRfanNvbl9wb2xpY3lfZGljdCh2YWx1ZSkKICAgICAgICBlbGlmIGlzaW5zdGFuY2UodmFsdWUsIGxpc3QpOgogICAgICAgICAgICBvcmRlcmVkX3BvbGljeV9kaWN0W2tleV0gPSB2YWx1ZV9pc19saXN0KHZhbHVlKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG9yZGVyZWRfcG9saWN5X2RpY3Rba2V5XSA9IHZhbHVlCgogICAgcmV0dXJuIG9yZGVyZWRfcG9saWN5X2RpY3QKCgpkZWYgbWFwX2NvbXBsZXhfdHlwZShjb21wbGV4X3R5cGUsIHR5cGVfbWFwKToKICAgICIiIgogICAgICAgIEFsbG93cyB0byBjYXN0IGVsZW1lbnRzIHdpdGhpbiBhIGRpY3Rpb25hcnkgdG8gYSBzcGVjaWZpYyB0eXBlCiAgICAgICAgRXhhbXBsZSBvZiB1c2FnZToKCiAgICAgICAgREVQTE9ZTUVOVF9DT05GSUdVUkFUSU9OX1RZUEVfTUFQID0gewogICAgICAgICAgICAnbWF4aW11bV9wZXJjZW50JzogJ2ludCcsCiAgICAgICAgICAgICdtaW5pbXVtX2hlYWx0aHlfcGVyY2VudCc6ICdpbnQnCiAgICAgICAgfQoKICAgICAgICBkZXBsb3ltZW50X2NvbmZpZ3VyYXRpb24gPSBtYXBfY29tcGxleF90eXBlKG1vZHVsZS5wYXJhbXNbJ2RlcGxveW1lbnRfY29uZmlndXJhdGlvbiddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgREVQTE9ZTUVOVF9DT05GSUdVUkFUSU9OX1RZUEVfTUFQKQoKICAgICAgICBUaGlzIGVuc3VyZXMgYWxsIGtleXMgd2l0aGluIHRoZSByb290IGVsZW1lbnQgYXJlIGNhc3RlZCBhbmQgdmFsaWQgaW50ZWdlcnMKICAgICIiIgoKICAgIGlmIGNvbXBsZXhfdHlwZSBpcyBOb25lOgogICAgICAgIHJldHVybgogICAgbmV3X3R5cGUgPSB0eXBlKGNvbXBsZXhfdHlwZSkoKQogICAgaWYgaXNpbnN0YW5jZShjb21wbGV4X3R5cGUsIGRpY3QpOgogICAgICAgIGZvciBrZXkgaW4gY29tcGxleF90eXBlOgogICAgICAgICAgICBpZiBrZXkgaW4gdHlwZV9tYXA6CiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKHR5cGVfbWFwW2tleV0sIGxpc3QpOgogICAgICAgICAgICAgICAgICAgIG5ld190eXBlW2tleV0gPSBtYXBfY29tcGxleF90eXBlKAogICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV4X3R5cGVba2V5XSwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZV9tYXBba2V5XVswXSkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgbmV3X3R5cGVba2V5XSA9IG1hcF9jb21wbGV4X3R5cGUoCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXhfdHlwZVtrZXldLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlX21hcFtrZXldKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXhfdHlwZQogICAgZWxpZiBpc2luc3RhbmNlKGNvbXBsZXhfdHlwZSwgbGlzdCk6CiAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKGNvbXBsZXhfdHlwZSkpOgogICAgICAgICAgICBuZXdfdHlwZS5hcHBlbmQobWFwX2NvbXBsZXhfdHlwZSgKICAgICAgICAgICAgICAgIGNvbXBsZXhfdHlwZVtpXSwKICAgICAgICAgICAgICAgIHR5cGVfbWFwKSkKICAgIGVsaWYgdHlwZV9tYXA6CiAgICAgICAgcmV0dXJuIGdsb2JhbHMoKVsnX19idWlsdGluc19fJ11bdHlwZV9tYXBdKGNvbXBsZXhfdHlwZSkKICAgIHJldHVybiBuZXdfdHlwZQoKCmRlZiBjb21wYXJlX2F3c190YWdzKGN1cnJlbnRfdGFnc19kaWN0LCBuZXdfdGFnc19kaWN0LCBwdXJnZV90YWdzPVRydWUpOgogICAgIiIiCiAgICBDb21wYXJlIHR3byBkaWN0cyBvZiBBV1MgdGFncy4gRGljdHMgYXJlIGV4cGVjdGVkIHRvIG9mIGJlZW4gY3JlYXRlZCB1c2luZyAnYm90bzNfdGFnX2xpc3RfdG9fYW5zaWJsZV9kaWN0JyBoZWxwZXIgZnVuY3Rpb24uCiAgICBUd28gZGljdHMgYXJlIHJldHVybmVkIC0gdGhlIGZpcnN0IGlzIHRhZ3MgdG8gYmUgc2V0LCB0aGUgc2Vjb25kIGlzIGFueSB0YWdzIHRvIHJlbW92ZQoKICAgIDpwYXJhbSBjdXJyZW50X3RhZ3NfZGljdDoKICAgIDpwYXJhbSBuZXdfdGFnc19kaWN0OgogICAgOnBhcmFtIHB1cmdlX3RhZ3M6CiAgICA6cmV0dXJuOiB0YWdfa2V5X3ZhbHVlX3BhaXJzX3RvX3NldDogYSBkaWN0IG9mIGtleSB2YWx1ZSBwYWlycyB0aGF0IG5lZWQgdG8gYmUgc2V0IGluIEFXUy4gSWYgYWxsIHRhZ3MgYXJlIGlkZW50aWNhbCB0aGlzIGRpY3Qgd2lsbCBiZSBlbXB0eQogICAgOnJldHVybjogdGFnX2tleXNfdG9fdW5zZXQ6IGEgbGlzdCBvZiBrZXkgbmFtZXMgdGhhdCBuZWVkIHRvIGJlIHVuc2V0IGluIEFXUy4gSWYgbm8gdGFncyBuZWVkIHRvIGJlIHVuc2V0IHRoaXMgbGlzdCB3aWxsIGJlIGVtcHR5CiAgICAiIiIKCiAgICB0YWdfa2V5X3ZhbHVlX3BhaXJzX3RvX3NldCA9IHt9CiAgICB0YWdfa2V5c190b191bnNldCA9IFtdCgogICAgZm9yIGtleSBpbiBjdXJyZW50X3RhZ3NfZGljdC5rZXlzKCk6CiAgICAgICAgaWYga2V5IG5vdCBpbiBuZXdfdGFnc19kaWN0IGFuZCBwdXJnZV90YWdzOgogICAgICAgICAgICB0YWdfa2V5c190b191bnNldC5hcHBlbmQoa2V5KQoKICAgIGZvciBrZXkgaW4gc2V0KG5ld190YWdzX2RpY3Qua2V5cygpKSAtIHNldCh0YWdfa2V5c190b191bnNldCk6CiAgICAgICAgaWYgbmV3X3RhZ3NfZGljdFtrZXldICE9IGN1cnJlbnRfdGFnc19kaWN0LmdldChrZXkpOgogICAgICAgICAgICB0YWdfa2V5X3ZhbHVlX3BhaXJzX3RvX3NldFtrZXldID0gbmV3X3RhZ3NfZGljdFtrZXldCgogICAgcmV0dXJuIHRhZ19rZXlfdmFsdWVfcGFpcnNfdG9fc2V0LCB0YWdfa2V5c190b191bnNldApQSwMEFAAAAAAABLwrSxgXcvUBEQAAAREAACQAAABhbnNpYmxlL21vZHVsZV91dGlscy9zaXgvX19pbml0X18ucHkjIFRoaXMgY29kZSBpcyBwYXJ0IG9mIEFuc2libGUsIGJ1dCBpcyBhbiBpbmRlcGVuZGVudCBjb21wb25lbnQuCiMgVGhpcyBwYXJ0aWN1bGFyIGZpbGUgc25pcHBldCwgYW5kIHRoaXMgZmlsZSBzbmlwcGV0IG9ubHksIGlzIEJTRCBsaWNlbnNlZC4KIyBNb2R1bGVzIHlvdSB3cml0ZSB1c2luZyB0aGlzIHNuaXBwZXQsIHdoaWNoIGlzIGVtYmVkZGVkIGR5bmFtaWNhbGx5IGJ5IEFuc2libGUKIyBzdGlsbCBiZWxvbmcgdG8gdGhlIGF1dGhvciBvZiB0aGUgbW9kdWxlLCBhbmQgbWF5IGFzc2lnbiB0aGVpciBvd24gbGljZW5zZQojIHRvIHRoZSBjb21wbGV0ZSB3b3JrLgojCiMgQ29weXJpZ2h0IChjKSAyMDE3LCBUb3NoaW8gS3VyYXRvbWkgPHRrdXJhdG9taUBhbnNpYmxlLmNvbT4KIwojIFRoaXMgY29kZSBpcyBiYXNlZCBvbiBjb2RlIGZyb20gQXN0cm9weSBhbmQgcmV0YWlucyB0aGVpciAzLWNsYXVzZSBCU0QgbGljZW5zZQojIHJlcHJvZHVjZWQgYmVsb3c6CiMKIyBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxNiwgQXN0cm9weSBEZXZlbG9wZXJzCiMKIyBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0CiMgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6CiMKIyAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcwojICAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuCiMgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsCiMgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uCiMgICBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KIyAqIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIEFzdHJvcHkgVGVhbSBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5CiMgICBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0CiMgICBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uCiMKIyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTICJBUyBJUyIKIyBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFCiMgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFCiMgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRQojIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMCiMgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IKIyBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUgojIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksCiMgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UKIyBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgojCiMgQXN0cm9weSBMaWNlbnNlOiBodHRwczovL2dpdGh1Yi5jb20vYXN0cm9weS9hc3Ryb3B5L2Jsb2IvY2YzMjY1ZTQyYTBkYjhlMDBiYjkwNjQ0ZGIzN2M4MTUwZjVhYzAwYy9saWNlbnNlcy9MSUNFTlNFLnJzdAojIEFzdHJvcHkgQ29kZTogaHR0cHM6Ly9naXRodWIuY29tL2FzdHJvcHkvYXN0cm9weS9ibG9iL2NmMzI2NWU0MmEwZGI4ZTAwYmI5MDY0NGRiMzdjODE1MGY1YWMwMGMvYXN0cm9weS9leHRlcm4vc2l4LnB5CgoiIiIKSGFuZGxlIGxvYWRpbmcgc2l4IHBhY2thZ2UgZnJvbSBzeXN0ZW0gb3IgZnJvbSB0aGUgYnVuZGxlZCBjb3B5CiIiIgpmcm9tIF9fZnV0dXJlX18gaW1wb3J0IGFic29sdXRlX2ltcG9ydAoKaW1wb3J0IGltcCBhcyBfaW1wCmltcG9ydCBzeXMgYXMgX3N5cwoKdHJ5OgogICAgZnJvbSBkaXN0dXRpbHMudmVyc2lvbiBpbXBvcnQgTG9vc2VWZXJzaW9uIGFzIF9Mb29zZVZlcnNpb24KZXhjZXB0IEltcG9ydEVycm9yOgogICAgIyBTb21lIHBsYXRmb3JtcyAqY291Z2gqU29sYXJpcypjb3VnaCogZG9uJ3Qgc2hpcCB0aGUgd2hvbGUgc3RkbGliCiAgICBfTG9vc2VWZXJzaW9uID0gTm9uZQoKdHJ5OgogICAgaW1wb3J0IHNpeCBhcyBfc3lzdGVtX3NpeApleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBfc3lzdGVtX3NpeCA9IE5vbmUKCmZyb20gLiBpbXBvcnQgX3NpeCBhcyBfYnVuZGxlZF9zaXgKCgpkZWYgX2ZpbmRfbW9kdWxlKG5hbWUsIHBhdGg9Tm9uZSk6CiAgICAiIiJBbHRlcm5hdGl2ZSB0byBgaW1wLmZpbmRfbW9kdWxlYCB0aGF0IGNhbiBhbHNvIHNlYXJjaCBpbiBzdWJwYWNrYWdlcyIiIgogICAgcGFydHMgPSBuYW1lLnNwbGl0KCcuJykKCiAgICBmb3IgcGFydCBpbiBwYXJ0czoKICAgICAgICBpZiBwYXRoIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwYXRoID0gW3BhdGhdCiAgICAgICAgZmgsIHBhdGgsIGRlc2NyID0gX2ltcC5maW5kX21vZHVsZShwYXJ0LCBwYXRoKQogICAgcmV0dXJuIGZoLCBwYXRoLCBkZXNjcgoKCmRlZiBfZ2V0X2J1bmRsZWRfc2l4X3NvdXJjZSgpOgogICAgIyBTcGVjaWFsIGltcG9ydCBsb2FkZXIgKHppcGltcG9ydCBmb3IgaW5zdGFuY2UpCiAgICBmb3VuZCA9IEZhbHNlCiAgICBmb3IgcGF0aCBpbiBfc3lzLnBhdGg6CiAgICAgICAgaW1wb3J0ZXIgPSBfc3lzLnBhdGhfaW1wb3J0ZXJfY2FjaGUuZ2V0KHBhdGgpCiAgICAgICAgaWYgaW1wb3J0ZXI6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGZvdW5kID0gaW1wb3J0ZXIuZmluZF9tb2R1bGUoJ2Fuc2libGUvbW9kdWxlX3V0aWxzL3NpeC9fc2l4JykKICAgICAgICAgICAgZXhjZXB0IEltcG9ydEVycm9yOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgaWYgZm91bmQ6CiAgICAgICAgICAgICAgICBicmVhawogICAgZWxzZToKICAgICAgICByYWlzZSBJbXBvcnRFcnJvcigiQ291bGQgbm90IGZpbmQgYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4Ll9zaXgiKQoKICAgIG1vZHVsZV9zb3VyY2UgPSBpbXBvcnRlci5nZXRfc291cmNlKCdhbnNpYmxlL21vZHVsZV91dGlscy9zaXgvX3NpeCcpCiAgICByZXR1cm4gbW9kdWxlX3NvdXJjZQoKCmRlZiBfZ2V0X3NpeF9zb3VyY2UoKToKICAgICIiIkltcG9ydCB0aGUgbmV3ZXN0IHZlcnNpb24gb2YgdGhlIHNpeCBsaWJyYXJ5IHRoYXQncyBhdmFpbGFibGUiIiIKICAgIG1vZF9pbmZvID0gTm9uZQogICAgdHJ5OgogICAgICAgIGlmIF9zeXN0ZW1fc2l4IGFuZCBfTG9vc2VWZXJzaW9uIGFuZCBcCiAgICAgICAgICAgICAgICBfTG9vc2VWZXJzaW9uKF9zeXN0ZW1fc2l4Ll9fdmVyc2lvbl9fKSA+PSBfTG9vc2VWZXJzaW9uKF9idW5kbGVkX3NpeC5fX3ZlcnNpb25fXyk6CiAgICAgICAgICAgIG1vZF9pbmZvID0gX2ZpbmRfbW9kdWxlKCdzaXgnKQogICAgZXhjZXB0OgogICAgICAgICMgQW55IGVycm9ycyBmaW5kaW5nIHRoZSBzeXN0ZW0gbGlicmFyeSwgdXNlIG91ciBidW5kbGVkIGxpYiBpbnN0ZWFkCiAgICAgICAgcGFzcwoKICAgIGlmIG5vdCBtb2RfaW5mbzoKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1vZF9pbmZvID0gX2ZpbmRfbW9kdWxlKCdhbnNpYmxlLm1vZHVsZV91dGlscy5zaXguX3NpeCcpCiAgICAgICAgZXhjZXB0IEltcG9ydEVycm9yOgogICAgICAgICAgICAjIHppcGltcG9ydAogICAgICAgICAgICBtb2R1bGVfc291cmNlID0gX2dldF9idW5kbGVkX3NpeF9zb3VyY2UoKQogICAgICAgICAgICByZXR1cm4gbW9kdWxlX3NvdXJjZQoKICAgIHJldHVybiBtb2RfaW5mb1swXS5yZWFkKCkKCnNvdXJjZSA9IF9nZXRfc2l4X3NvdXJjZSgpCmV4ZWMoc291cmNlKQpQSwMEFAAAAAAABLwrS7XYBAYlMAAAJTAAAB0AAABhbnNpYmxlL21vZHVsZV91dGlscy9fdGV4dC5weSMgVGhpcyBjb2RlIGlzIHBhcnQgb2YgQW5zaWJsZSwgYnV0IGlzIGFuIGluZGVwZW5kZW50IGNvbXBvbmVudC4KIyBUaGlzIHBhcnRpY3VsYXIgZmlsZSBzbmlwcGV0LCBhbmQgdGhpcyBmaWxlIHNuaXBwZXQgb25seSwgaXMgQlNEIGxpY2Vuc2VkLgojIE1vZHVsZXMgeW91IHdyaXRlIHVzaW5nIHRoaXMgc25pcHBldCwgd2hpY2ggaXMgZW1iZWRkZWQgZHluYW1pY2FsbHkgYnkgQW5zaWJsZQojIHN0aWxsIGJlbG9uZyB0byB0aGUgYXV0aG9yIG9mIHRoZSBtb2R1bGUsIGFuZCBtYXkgYXNzaWduIHRoZWlyIG93biBsaWNlbnNlCiMgdG8gdGhlIGNvbXBsZXRlIHdvcmsuCiMKIyBDb3B5cmlnaHQgKGMpLCBUb3NoaW8gS3VyYXRvbWkgPGEuYmFkZ2VyQGdtYWlsLmNvbT4sIDIwMTYKIwojIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sCiMgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OgojCiMgICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodAojICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLgojICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLAojICAgICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbgojICAgICAgYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uCiMKIyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTICJBUyBJUyIgQU5ECiMgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQKIyBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuCiMgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsCiMgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLAojIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUwojIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QKIyBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUKIyBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS4KIwoKIiIiCi4uIHdhcm46OiBUaGlzIG1vZHVsZV91dGlsIGlzIGN1cnJlbnRseSBpbnRlcm5hbCBpbXBsZW1lbnRhdGlvbi4KICAgIFdlIHdhbnQgdG8gZXZhbHVhdGUgdGhpcyBjb2RlIGZvciBzdGFiaWxpdHkgYW5kIEFQSSBzdWl0YWJpbGl0eSBiZWZvcmUKICAgIG1ha2luZyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzLiAgVGhlIEFQSSBtYXkgY2hhbmdlIGJldHdlZW4KICAgIHJlbGVhc2VzLiAgRG8gbm90IHVzZSB0aGlzIHVubGVzcyB5b3UgYXJlIHdpbGxpbmcgdG8gcG9ydCB5b3VyIG1vZHVsZSBjb2RlLgoiIiIKaW1wb3J0IGNvZGVjcwoKZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5zaXggaW1wb3J0IFBZMywgdGV4dF90eXBlLCBiaW5hcnlfdHlwZQoKCnRyeToKICAgIGNvZGVjcy5sb29rdXBfZXJyb3IoJ3N1cnJvZ2F0ZWVzY2FwZScpCiAgICBIQVNfU1VSUk9HQVRFRVNDQVBFID0gVHJ1ZQpleGNlcHQgTG9va3VwRXJyb3I6CiAgICBIQVNfU1VSUk9HQVRFRVNDQVBFID0gRmFsc2UKCgpfQ09NUE9TRURfRVJST1JfSEFORExFUlMgPSBmcm96ZW5zZXQoKE5vbmUsICdzdXJyb2dhdGVfb3JfZXNjYXBlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdXJyb2dhdGVfb3Jfc3RyaWN0JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdXJyb2dhdGVfdGhlbl9yZXBsYWNlJykpCgoKZGVmIHRvX2J5dGVzKG9iaiwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPU5vbmUsIG5vbnN0cmluZz0nc2ltcGxlcmVwcicpOgogICAgIiIiTWFrZSBzdXJlIHRoYXQgYSBzdHJpbmcgaXMgYSBieXRlIHN0cmluZwoKICAgIDphcmcgb2JqOiBBbiBvYmplY3QgdG8gbWFrZSBzdXJlIGlzIGEgYnl0ZSBzdHJpbmcuICBJbiBtb3N0IGNhc2VzIHRoaXMKICAgICAgICB3aWxsIGJlIGVpdGhlciBhIHRleHQgc3RyaW5nIG9yIGEgYnl0ZSBzdHJpbmcuICBIb3dldmVyLCB3aXRoCiAgICAgICAgYGBub25zdHJpbmc9J3NpbXBsZXJlcHInYGAsIHRoaXMgY2FuIGJlIHVzZWQgYXMgYSB0cmFjZWJhY2stZnJlZQogICAgICAgIHZlcnNpb24gb2YgYGBzdHIob2JqKWBgLgogICAgOmt3YXJnIGVuY29kaW5nOiBUaGUgZW5jb2RpbmcgdG8gdXNlIHRvIHRyYW5zZm9ybSBmcm9tIGEgdGV4dCBzdHJpbmcgdG8KICAgICAgICBhIGJ5dGUgc3RyaW5nLiAgRGVmYXVsdHMgdG8gdXNpbmcgJ3V0Zi04Jy4KICAgIDprd2FyZyBlcnJvcnM6IFRoZSBlcnJvciBoYW5kbGVyIHRvIHVzZSBpZiB0aGUgdGV4dCBzdHJpbmcgaXMgbm90CiAgICAgICAgZW5jb2RhYmxlIHVzaW5nIHRoZSBzcGVjaWZpZWQgZW5jb2RpbmcuICBBbnkgdmFsaWQgYGNvZGVjcyBlcnJvcgogICAgICAgIGhhbmRsZXIgPGh0dHBzOi8vZG9jcy5weXRob24ub3JnLzIvbGlicmFyeS9jb2RlY3MuaHRtbCNjb2RlYy1iYXNlLWNsYXNzZXM+YF8KICAgICAgICBtYXkgYmUgc3BlY2lmaWVkLiBUaGVyZSBhcmUgdGhyZWUgYWRkaXRpb25hbCBlcnJvciBzdHJhdGVnaWVzCiAgICAgICAgc3BlY2lmaWNhbGx5IGFpbWVkIGF0IGhlbHBpbmcgcGVvcGxlIHRvIHBvcnQgY29kZS4gIFRoZSBmaXJzdCB0d28gYXJlOgoKICAgICAgICAgICAgOnN1cnJvZ2F0ZV9vcl9zdHJpY3Q6IFdpbGwgdXNlIGBgc3Vycm9nYXRlZXNjYXBlYGAgaWYgaXQgaXMgYSB2YWxpZAogICAgICAgICAgICAgICAgaGFuZGxlciwgb3RoZXJ3aXNlIGl0IHdpbGwgdXNlIGBgc3RyaWN0YGAKICAgICAgICAgICAgOnN1cnJvZ2F0ZV9vcl9yZXBsYWNlOiBXaWxsIHVzZSBgYHN1cnJvZ2F0ZWVzY2FwZWBgIGlmIGl0IGlzIGEgdmFsaWQKICAgICAgICAgICAgICAgIGhhbmRsZXIsIG90aGVyd2lzZSBpdCB3aWxsIHVzZSBgYHJlcGxhY2VgYC4KCiAgICAgICAgQmVjYXVzZSBgYHN1cnJvZ2F0ZWVzY2FwZWBgIHdhcyBhZGRlZCBpbiBQeXRob24zIHRoaXMgdXN1YWxseSBtZWFucyB0aGF0CiAgICAgICAgUHl0aG9uMyB3aWxsIHVzZSBgYHN1cnJvZ2F0ZWVzY2FwZWBgIGFuZCBQeXRob24yIHdpbGwgdXNlIHRoZSBmYWxsYmFjawogICAgICAgIGVycm9yIGhhbmRsZXIuIE5vdGUgdGhhdCB0aGUgY29kZSBjaGVja3MgZm9yIGBgc3Vycm9nYXRlZXNjYXBlYGAgd2hlbiB0aGUKICAgICAgICBtb2R1bGUgaXMgaW1wb3J0ZWQuICBJZiB5b3UgaGF2ZSBhIGJhY2twb3J0IG9mIGBgc3Vycm9nYXRlZXNjYXBlYGAgZm9yCiAgICAgICAgUHl0aG9uMiwgYmUgc3VyZSB0byByZWdpc3RlciB0aGUgZXJyb3IgaGFuZGxlciBwcmlvciB0byBpbXBvcnRpbmcgdGhpcwogICAgICAgIG1vZHVsZS4KCiAgICAgICAgVGhlIGxhc3QgZXJyb3IgaGFuZGxlciBpczoKCiAgICAgICAgICAgIDpzdXJyb2dhdGVfdGhlbl9yZXBsYWNlOiBXaWxsIHVzZSBgYHN1cnJvZ2F0ZWVzY2FwZWBgIGlmIGl0IGlzIGEgdmFsaWQKICAgICAgICAgICAgICAgIGhhbmRsZXIuICBJZiBlbmNvZGluZyB3aXRoIGBgc3Vycm9nYXRlZXNjYXBlYGAgd291bGQgdHJhY2ViYWNrLAogICAgICAgICAgICAgICAgc3Vycm9nYXRlcyBhcmUgZmlyc3QgcmVwbGFjZWQgd2l0aCBhIHJlcGxhY2VtZW50IGNoYXJhY3RlcnMKICAgICAgICAgICAgICAgIGFuZCB0aGVuIHRoZSBzdHJpbmcgaXMgZW5jb2RlZCB1c2luZyBgYHJlcGxhY2VgYCAod2hpY2ggcmVwbGFjZXMKICAgICAgICAgICAgICAgIHRoZSByZXN0IG9mIHRoZSBub25lbmNvZGFibGUgYnl0ZXMpLiAgSWYgYGBzdXJyb2dhdGVlc2NhcGVgYCBpcwogICAgICAgICAgICAgICAgbm90IHByZXNlbnQgaXQgd2lsbCBzaW1wbHkgdXNlIGBgcmVwbGFjZWBgLiAgKEFkZGVkIGluIEFuc2libGUgMi4zKQogICAgICAgICAgICAgICAgVGhpcyBzdHJhdGVneSBpcyBkZXNpZ25lZCB0byBuZXZlciB0cmFjZWJhY2sgd2hlbiBpdCBhdHRlbXB0cwogICAgICAgICAgICAgICAgdG8gZW5jb2RlIGEgc3RyaW5nLgoKICAgICAgICBUaGUgZGVmYXVsdCB1bnRpbCBBbnNpYmxlLTIuMiB3YXMgYGBzdXJyb2dhdGVfb3JfcmVwbGFjZWBgCiAgICAgICAgRnJvbSBBbnNpYmxlLTIuMyBvbndhcmRzLCB0aGUgZGVmYXVsdCBpcyBgYHN1cnJvZ2F0ZV90aGVuX3JlcGxhY2VgYC4KCiAgICA6a3dhcmcgbm9uc3RyaW5nOiBUaGUgc3RyYXRlZ3kgdG8gdXNlIGlmIGEgbm9uc3RyaW5nIGlzIHNwZWNpZmllZCBpbgogICAgICAgIGBgb2JqYGAuICBEZWZhdWx0IGlzICdzaW1wbGVyZXByJy4gIFZhbGlkIHZhbHVlcyBhcmU6CgogICAgICAgIDpzaW1wbGVyZXByOiBUaGUgZGVmYXVsdC4gIFRoaXMgdGFrZXMgdGhlIGBgc3RyYGAgb2YgdGhlIG9iamVjdCBhbmQKICAgICAgICAgICAgdGhlbiByZXR1cm5zIHRoZSBieXRlcyB2ZXJzaW9uIG9mIHRoYXQgc3RyaW5nLgogICAgICAgIDplbXB0eTogUmV0dXJuIGFuIGVtcHR5IGJ5dGUgc3RyaW5nCiAgICAgICAgOnBhc3N0aHJ1OiBSZXR1cm4gdGhlIG9iamVjdCBwYXNzZWQgaW4KICAgICAgICA6c3RyaWN0OiBSYWlzZSBhIDpleGM6YFR5cGVFcnJvcmAKCiAgICA6cmV0dXJuczogVHlwaWNhbGx5IHRoaXMgcmV0dXJucyBhIGJ5dGUgc3RyaW5nLiAgSWYgYSBub25zdHJpbmcgb2JqZWN0IGlzCiAgICAgICAgcGFzc2VkIGluIHRoaXMgbWF5IGJlIGEgZGlmZmVyZW50IHR5cGUgZGVwZW5kaW5nIG9uIHRoZSBzdHJhdGVneQogICAgICAgIHNwZWNpZmllZCBieSBub25zdHJpbmcuICBUaGlzIHdpbGwgbmV2ZXIgcmV0dXJuIGEgdGV4dCBzdHJpbmcuCgogICAgLi4gbm90ZTo6IElmIHBhc3NlZCBhIGJ5dGUgc3RyaW5nLCB0aGlzIGZ1bmN0aW9uIGRvZXMgbm90IGNoZWNrIHRoYXQgdGhlCiAgICAgICAgc3RyaW5nIGlzIHZhbGlkIGluIHRoZSBzcGVjaWZpZWQgZW5jb2RpbmcuICBJZiBpdCdzIGltcG9ydGFudCB0aGF0IHRoZQogICAgICAgIGJ5dGUgc3RyaW5nIGlzIGluIHRoZSBzcGVjaWZpZWQgZW5jb2RpbmcgZG86OgoKICAgICAgICAgICAgZW5jb2RlZF9zdHJpbmcgPSB0b19ieXRlcyh0b190ZXh0KGlucHV0X3N0cmluZywgJ2xhdGluLTEnKSwgJ3V0Zi04JykKCiAgICAuLiB2ZXJzaW9uX2NoYW5nZWQ6OiAyLjMKCiAgICAgICAgQWRkZWQgdGhlIGBgc3Vycm9nYXRlX3RoZW5fcmVwbGFjZWBgIGVycm9yIGhhbmRsZXIgYW5kIG1hZGUgaXQgdGhlIGRlZmF1bHQgZXJyb3IgaGFuZGxlci4KICAgICIiIgogICAgaWYgaXNpbnN0YW5jZShvYmosIGJpbmFyeV90eXBlKToKICAgICAgICByZXR1cm4gb2JqCgogICAgIyBXZSdyZSBnaXZlbiBhIHRleHQgc3RyaW5nCiAgICAjIElmIGl0IGhhcyBzdXJyb2dhdGVzLCB3ZSBrbm93IGJlY2F1c2UgaXQgd2lsbCBkZWNvZGUKICAgIG9yaWdpbmFsX2Vycm9ycyA9IGVycm9ycwogICAgaWYgZXJyb3JzIGluIF9DT01QT1NFRF9FUlJPUl9IQU5ETEVSUzoKICAgICAgICBpZiBIQVNfU1VSUk9HQVRFRVNDQVBFOgogICAgICAgICAgICBlcnJvcnMgPSAnc3Vycm9nYXRlZXNjYXBlJwogICAgICAgIGVsaWYgZXJyb3JzID09ICdzdXJyb2dhdGVfb3Jfc3RyaWN0JzoKICAgICAgICAgICAgZXJyb3JzID0gJ3N0cmljdCcKICAgICAgICBlbHNlOgogICAgICAgICAgICBlcnJvcnMgPSAncmVwbGFjZScKCiAgICBpZiBpc2luc3RhbmNlKG9iaiwgdGV4dF90eXBlKToKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgVHJ5IHRoaXMgZmlyc3QgYXMgaXQncyB0aGUgZmFzdGVzdAogICAgICAgICAgICByZXR1cm4gb2JqLmVuY29kZShlbmNvZGluZywgZXJyb3JzKQogICAgICAgIGV4Y2VwdCBVbmljb2RlRW5jb2RlRXJyb3I6CiAgICAgICAgICAgIGlmIG9yaWdpbmFsX2Vycm9ycyBpbiAoTm9uZSwgJ3N1cnJvZ2F0ZV90aGVuX3JlcGxhY2UnKToKICAgICAgICAgICAgICAgICMgU2xvdyBidXQgd29ya3MKICAgICAgICAgICAgICAgIHJldHVybl9zdHJpbmcgPSBvYmouZW5jb2RlKCd1dGYtOCcsICdzdXJyb2dhdGVlc2NhcGUnKQogICAgICAgICAgICAgICAgcmV0dXJuX3N0cmluZyA9IHJldHVybl9zdHJpbmcuZGVjb2RlKCd1dGYtOCcsICdyZXBsYWNlJykKICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5fc3RyaW5nLmVuY29kZShlbmNvZGluZywgJ3JlcGxhY2UnKQogICAgICAgICAgICByYWlzZQoKICAgICMgTm90ZTogV2UgZG8gdGhlc2UgbGFzdCBldmVuIHRob3VnaCB3ZSBoYXZlIHRvIGNhbGwgdG9fYnl0ZXMgYWdhaW4gb24gdGhlCiAgICAjIHZhbHVlIGJlY2F1c2Ugd2UncmUgb3B0aW1pemluZyB0aGUgY29tbW9uIGNhc2UKICAgIGlmIG5vbnN0cmluZyA9PSAnc2ltcGxlcmVwcic6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB2YWx1ZSA9IHN0cihvYmopCiAgICAgICAgZXhjZXB0IFVuaWNvZGVFcnJvcjoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdmFsdWUgPSByZXByKG9iaikKICAgICAgICAgICAgZXhjZXB0IFVuaWNvZGVFcnJvcjoKICAgICAgICAgICAgICAgICMgR2l2aW5nIHVwCiAgICAgICAgICAgICAgICByZXR1cm4gdG9fYnl0ZXMoJycpCiAgICBlbGlmIG5vbnN0cmluZyA9PSAncGFzc3RocnUnOgogICAgICAgIHJldHVybiBvYmoKICAgIGVsaWYgbm9uc3RyaW5nID09ICdlbXB0eSc6CiAgICAgICAgIyBweXRob24yLjQgZG9lc24ndCBoYXZlIGInJwogICAgICAgIHJldHVybiB0b19ieXRlcygnJykKICAgIGVsaWYgbm9uc3RyaW5nID09ICdzdHJpY3QnOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignb2JqIG11c3QgYmUgYSBzdHJpbmcgdHlwZScpCiAgICBlbHNlOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignSW52YWxpZCB2YWx1ZSAlcyBmb3IgdG9fYnl0ZXNcJyBub25zdHJpbmcgcGFyYW1ldGVyJyAlIG5vbnN0cmluZykKCiAgICByZXR1cm4gdG9fYnl0ZXModmFsdWUsIGVuY29kaW5nLCBlcnJvcnMpCgoKZGVmIHRvX3RleHQob2JqLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9Tm9uZSwgbm9uc3RyaW5nPSdzaW1wbGVyZXByJyk6CiAgICAiIiJNYWtlIHN1cmUgdGhhdCBhIHN0cmluZyBpcyBhIHRleHQgc3RyaW5nCgogICAgOmFyZyBvYmo6IEFuIG9iamVjdCB0byBtYWtlIHN1cmUgaXMgYSB0ZXh0IHN0cmluZy4gIEluIG1vc3QgY2FzZXMgdGhpcwogICAgICAgIHdpbGwgYmUgZWl0aGVyIGEgdGV4dCBzdHJpbmcgb3IgYSBieXRlIHN0cmluZy4gIEhvd2V2ZXIsIHdpdGgKICAgICAgICBgYG5vbnN0cmluZz0nc2ltcGxlcmVwcidgYCwgdGhpcyBjYW4gYmUgdXNlZCBhcyBhIHRyYWNlYmFjay1mcmVlCiAgICAgICAgdmVyc2lvbiBvZiBgYHN0cihvYmopYGAuCiAgICA6a3dhcmcgZW5jb2Rpbmc6IFRoZSBlbmNvZGluZyB0byB1c2UgdG8gdHJhbnNmb3JtIGZyb20gYSBieXRlIHN0cmluZyB0bwogICAgICAgIGEgdGV4dCBzdHJpbmcuICBEZWZhdWx0cyB0byB1c2luZyAndXRmLTgnLgogICAgOmt3YXJnIGVycm9yczogVGhlIGVycm9yIGhhbmRsZXIgdG8gdXNlIGlmIHRoZSBieXRlIHN0cmluZyBpcyBub3QKICAgICAgICBkZWNvZGFibGUgdXNpbmcgdGhlIHNwZWNpZmllZCBlbmNvZGluZy4gIEFueSB2YWxpZCBgY29kZWNzIGVycm9yCiAgICAgICAgaGFuZGxlciA8aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMi9saWJyYXJ5L2NvZGVjcy5odG1sI2NvZGVjLWJhc2UtY2xhc3Nlcz5gXwogICAgICAgIG1heSBiZSBzcGVjaWZpZWQuICAgV2Ugc3VwcG9ydCB0aHJlZSBhZGRpdGlvbmFsIGVycm9yIHN0cmF0ZWdpZXMKICAgICAgICBzcGVjaWZpY2FsbHkgYWltZWQgYXQgaGVscGluZyBwZW9wbGUgdG8gcG9ydCBjb2RlOgoKICAgICAgICAgICAgOnN1cnJvZ2F0ZV9vcl9zdHJpY3Q6IFdpbGwgdXNlIHN1cnJvZ2F0ZWVzY2FwZSBpZiBpdCBpcyBhIHZhbGlkCiAgICAgICAgICAgICAgICBoYW5kbGVyLCBvdGhlcndpc2UgaXQgd2lsbCB1c2Ugc3RyaWN0CiAgICAgICAgICAgIDpzdXJyb2dhdGVfb3JfcmVwbGFjZTogV2lsbCB1c2Ugc3Vycm9nYXRlZXNjYXBlIGlmIGl0IGlzIGEgdmFsaWQKICAgICAgICAgICAgICAgIGhhbmRsZXIsIG90aGVyd2lzZSBpdCB3aWxsIHVzZSByZXBsYWNlLgogICAgICAgICAgICA6c3Vycm9nYXRlX3RoZW5fcmVwbGFjZTogRG9lcyB0aGUgc2FtZSBhcyBzdXJyb2dhdGVfb3JfcmVwbGFjZSBidXQKICAgICAgICAgICAgICAgIGB3YXMgYWRkZWQgZm9yIHN5bW1ldHJ5IHdpdGggdGhlIGVycm9yIGhhbmRsZXJzIGluCiAgICAgICAgICAgICAgICA6ZnVuYzpgYW5zaWJsZS5tb2R1bGVfdXRpbHMuX3RleHQudG9fYnl0ZXNgIChBZGRlZCBpbiBBbnNpYmxlIDIuMykKCiAgICAgICAgQmVjYXVzZSBzdXJyb2dhdGVlc2NhcGUgd2FzIGFkZGVkIGluIFB5dGhvbjMgdGhpcyB1c3VhbGx5IG1lYW5zIHRoYXQKICAgICAgICBQeXRob24zIHdpbGwgdXNlIGBzdXJyb2dhdGVlc2NhcGVgIGFuZCBQeXRob24yIHdpbGwgdXNlIHRoZSBmYWxsYmFjawogICAgICAgIGVycm9yIGhhbmRsZXIuIE5vdGUgdGhhdCB0aGUgY29kZSBjaGVja3MgZm9yIHN1cnJvZ2F0ZWVzY2FwZSB3aGVuIHRoZQogICAgICAgIG1vZHVsZSBpcyBpbXBvcnRlZC4gIElmIHlvdSBoYXZlIGEgYmFja3BvcnQgb2YgYHN1cnJvZ2F0ZWVzY2FwZWAgZm9yCiAgICAgICAgcHl0aG9uMiwgYmUgc3VyZSB0byByZWdpc3RlciB0aGUgZXJyb3IgaGFuZGxlciBwcmlvciB0byBpbXBvcnRpbmcgdGhpcwogICAgICAgIG1vZHVsZS4KCiAgICAgICAgVGhlIGRlZmF1bHQgdW50aWwgQW5zaWJsZS0yLjIgd2FzIGBzdXJyb2dhdGVfb3JfcmVwbGFjZWAKICAgICAgICBJbiBBbnNpYmxlLTIuMyB0aGlzIGRlZmF1bHRzIHRvIGBzdXJyb2dhdGVfdGhlbl9yZXBsYWNlYCBmb3Igc3ltbWV0cnkKICAgICAgICB3aXRoIDpmdW5jOmBhbnNpYmxlLm1vZHVsZV91dGlscy5fdGV4dC50b19ieXRlc2AgLgogICAgOmt3YXJnIG5vbnN0cmluZzogVGhlIHN0cmF0ZWd5IHRvIHVzZSBpZiBhIG5vbnN0cmluZyBpcyBzcGVjaWZpZWQgaW4KICAgICAgICBgYG9iamBgLiAgRGVmYXVsdCBpcyAnc2ltcGxlcmVwcicuICBWYWxpZCB2YWx1ZXMgYXJlOgoKICAgICAgICA6c2ltcGxlcmVwcjogVGhlIGRlZmF1bHQuICBUaGlzIHRha2VzIHRoZSBgYHN0cmBgIG9mIHRoZSBvYmplY3QgYW5kCiAgICAgICAgICAgIHRoZW4gcmV0dXJucyB0aGUgdGV4dCB2ZXJzaW9uIG9mIHRoYXQgc3RyaW5nLgogICAgICAgIDplbXB0eTogUmV0dXJuIGFuIGVtcHR5IHRleHQgc3RyaW5nCiAgICAgICAgOnBhc3N0aHJ1OiBSZXR1cm4gdGhlIG9iamVjdCBwYXNzZWQgaW4KICAgICAgICA6c3RyaWN0OiBSYWlzZSBhIDpleGM6YFR5cGVFcnJvcmAKCiAgICA6cmV0dXJuczogVHlwaWNhbGx5IHRoaXMgcmV0dXJucyBhIHRleHQgc3RyaW5nLiAgSWYgYSBub25zdHJpbmcgb2JqZWN0IGlzCiAgICAgICAgcGFzc2VkIGluIHRoaXMgbWF5IGJlIGEgZGlmZmVyZW50IHR5cGUgZGVwZW5kaW5nIG9uIHRoZSBzdHJhdGVneQogICAgICAgIHNwZWNpZmllZCBieSBub25zdHJpbmcuICBUaGlzIHdpbGwgbmV2ZXIgcmV0dXJuIGEgYnl0ZSBzdHJpbmcuCiAgICAgICAgRnJvbSBBbnNpYmxlLTIuMyBvbndhcmRzLCB0aGUgZGVmYXVsdCBpcyBgc3Vycm9nYXRlX3RoZW5fcmVwbGFjZWAuCgogICAgLi4gdmVyc2lvbl9jaGFuZ2VkOjogMi4zCgogICAgICAgIEFkZGVkIHRoZSBzdXJyb2dhdGVfdGhlbl9yZXBsYWNlIGVycm9yIGhhbmRsZXIgYW5kIG1hZGUgaXQgdGhlIGRlZmF1bHQgZXJyb3IgaGFuZGxlci4KICAgICIiIgogICAgaWYgaXNpbnN0YW5jZShvYmosIHRleHRfdHlwZSk6CiAgICAgICAgcmV0dXJuIG9iagoKICAgIGlmIGVycm9ycyBpbiBfQ09NUE9TRURfRVJST1JfSEFORExFUlM6CiAgICAgICAgaWYgSEFTX1NVUlJPR0FURUVTQ0FQRToKICAgICAgICAgICAgZXJyb3JzID0gJ3N1cnJvZ2F0ZWVzY2FwZScKICAgICAgICBlbGlmIGVycm9ycyA9PSAnc3Vycm9nYXRlX29yX3N0cmljdCc6CiAgICAgICAgICAgIGVycm9ycyA9ICdzdHJpY3QnCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZXJyb3JzID0gJ3JlcGxhY2UnCgogICAgaWYgaXNpbnN0YW5jZShvYmosIGJpbmFyeV90eXBlKToKICAgICAgICAjIE5vdGU6IFdlIGRvbid0IG5lZWQgc3BlY2lhbCBoYW5kbGluZyBmb3Igc3Vycm9nYXRlX3RoZW5fcmVwbGFjZQogICAgICAgICMgYmVjYXVzZSBhbGwgYnl0ZXMgd2lsbCBlaXRoZXIgYmUgbWFkZSBpbnRvIHN1cnJvZ2F0ZXMgb3IgYXJlIHZhbGlkCiAgICAgICAgIyB0byBkZWNvZGUuCiAgICAgICAgcmV0dXJuIG9iai5kZWNvZGUoZW5jb2RpbmcsIGVycm9ycykKCiAgICAjIE5vdGU6IFdlIGRvIHRoZXNlIGxhc3QgZXZlbiB0aG91Z2ggd2UgaGF2ZSB0byBjYWxsIHRvX3RleHQgYWdhaW4gb24gdGhlCiAgICAjIHZhbHVlIGJlY2F1c2Ugd2UncmUgb3B0aW1pemluZyB0aGUgY29tbW9uIGNhc2UKICAgIGlmIG5vbnN0cmluZyA9PSAnc2ltcGxlcmVwcic6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB2YWx1ZSA9IHN0cihvYmopCiAgICAgICAgZXhjZXB0IFVuaWNvZGVFcnJvcjoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdmFsdWUgPSByZXByKG9iaikKICAgICAgICAgICAgZXhjZXB0IFVuaWNvZGVFcnJvcjoKICAgICAgICAgICAgICAgICMgR2l2aW5nIHVwCiAgICAgICAgICAgICAgICByZXR1cm4gdScnCiAgICBlbGlmIG5vbnN0cmluZyA9PSAncGFzc3RocnUnOgogICAgICAgIHJldHVybiBvYmoKICAgIGVsaWYgbm9uc3RyaW5nID09ICdlbXB0eSc6CiAgICAgICAgcmV0dXJuIHUnJwogICAgZWxpZiBub25zdHJpbmcgPT0gJ3N0cmljdCc6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdvYmogbXVzdCBiZSBhIHN0cmluZyB0eXBlJykKICAgIGVsc2U6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdJbnZhbGlkIHZhbHVlICVzIGZvciB0b190ZXh0XCdzIG5vbnN0cmluZyBwYXJhbWV0ZXInICUgbm9uc3RyaW5nKQoKICAgIHJldHVybiB0b190ZXh0KHZhbHVlLCBlbmNvZGluZywgZXJyb3JzKQoKCiM6IDpweTpmdW5jOmB0b19uYXRpdmVgCiM6ICAgICAgVHJhbnNmb3JtIGEgdmFyaWFibGUgaW50byB0aGUgbmF0aXZlIHN0ciB0eXBlIGZvciB0aGUgcHl0aG9uIHZlcnNpb24KIzoKIzogICAgICBPbiBQeXRob24yLCB0aGlzIGlzIGFuIGFsaWFzIGZvcgojOiAgICAgIDpmdW5jOmB+YW5zaWJsZS5tb2R1bGVfdXRpbHMudG9fYnl0ZXNgLiAgT24gUHl0aG9uMyBpdCBpcyBhbiBhbGlhcyBmb3IKIzogICAgICA6ZnVuYzpgfmFuc2libGUubW9kdWxlX3V0aWxzLnRvX3RleHRgLiAgSXQgbWFrZXMgaXQgZWFzaWVyIHRvCiM6ICAgICAgdHJhbnNmb3JtIGEgdmFyaWFibGUgaW50byB0aGUgbmF0aXZlIHN0ciB0eXBlIGZvciB0aGUgcHl0aG9uIHZlcnNpb24KIzogICAgICB0aGUgY29kZSBpcyBydW5uaW5nIG9uLiAgVXNlIHRoaXMgd2hlbiBjb25zdHJ1Y3RpbmcgdGhlIG1lc3NhZ2UgdG8KIzogICAgICBzZW5kIHRvIGV4Y2VwdGlvbnMgb3Igd2hlbiBkZWFsaW5nIHdpdGggYW4gQVBJIHRoYXQgbmVlZHMgdG8gdGFrZQojOiAgICAgIGEgbmF0aXZlIHN0cmluZy4gIEV4YW1wbGU6OgojOgojOiAgICAgICAgICB0cnk6CiM6ICAgICAgICAgICAgICAxLy8wCiM6ICAgICAgICAgIGV4Y2VwdCBaZXJvRGl2aXNpb25FcnJvciBhcyBlOgojOiAgICAgICAgICAgICAgcmFpc2UgTXlFeGNlcHRpb24oJ0VuY291bnRlcmVkIGFuZCBlcnJvcjogJXMnICUgdG9fbmF0aXZlKGUpKQppZiBQWTM6CiAgICB0b19uYXRpdmUgPSB0b190ZXh0CmVsc2U6CiAgICB0b19uYXRpdmUgPSB0b19ieXRlcwpQSwMEFAAAAAAABLwrSyXctH4TEAAAExAAACIAAABhbnNpYmxlL21vZHVsZV91dGlscy9weWNvbXBhdDI0LnB5IyBUaGlzIGNvZGUgaXMgcGFydCBvZiBBbnNpYmxlLCBidXQgaXMgYW4gaW5kZXBlbmRlbnQgY29tcG9uZW50LgojIFRoaXMgcGFydGljdWxhciBmaWxlIHNuaXBwZXQsIGFuZCB0aGlzIGZpbGUgc25pcHBldCBvbmx5LCBpcyBCU0QgbGljZW5zZWQuCiMgTW9kdWxlcyB5b3Ugd3JpdGUgdXNpbmcgdGhpcyBzbmlwcGV0LCB3aGljaCBpcyBlbWJlZGRlZCBkeW5hbWljYWxseSBieSBBbnNpYmxlCiMgc3RpbGwgYmVsb25nIHRvIHRoZSBhdXRob3Igb2YgdGhlIG1vZHVsZSwgYW5kIG1heSBhc3NpZ24gdGhlaXIgb3duIGxpY2Vuc2UKIyB0byB0aGUgY29tcGxldGUgd29yay4KIwojIENvcHlyaWdodCAoYykgMjAxNiwgVG9zaGlvIEt1cmF0b21pIDx0a3VyYXRvbWlAYW5zaWJsZS5jb20+CiMgQ29weXJpZ2h0IChjKSAyMDE1LCBNYXJpdXMgR2VkbWluYXMKIwojIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sCiMgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OgojCiMgICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodAojICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLgojICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLAojICAgICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbgojICAgICAgYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uCiMKIyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTICJBUyBJUyIgQU5ECiMgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQKIyBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuCiMgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsCiMgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLAojIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUwojIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QKIyBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUKIyBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS4KIwoKaW1wb3J0IHN5cwoKZGVmIGdldF9leGNlcHRpb24oKToKICAgICIiIkdldCB0aGUgY3VycmVudCBleGNlcHRpb24uCgogICAgVGhpcyBjb2RlIG5lZWRzIHRvIHdvcmsgb24gUHl0aG9uIDIuNCB0aHJvdWdoIDMueCwgc28gd2UgY2Fubm90IHVzZQogICAgImV4Y2VwdCBFeGNlcHRpb24sIGU6IiAoU3ludGF4RXJyb3Igb24gUHl0aG9uIDMueCkgbm9yCiAgICAiZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOiIgKFN5bnRheEVycm9yIG9uIFB5dGhvbiAyLjQtMi41KS4KICAgIEluc3RlYWQgd2UgbXVzdCB1c2UgOjoKCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQoKICAgICIiIgogICAgcmV0dXJuIHN5cy5leGNfaW5mbygpWzFdCgp0cnk6CiAgICAjIFB5dGhvbiAyLjYrCiAgICBmcm9tIGFzdCBpbXBvcnQgbGl0ZXJhbF9ldmFsCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICMgYSByZXBsYWNlbWVudCBmb3IgbGl0ZXJhbF9ldmFsIHRoYXQgd29ya3Mgd2l0aCBweXRob24gMi40LiBmcm9tOgogICAgIyBodHRwczovL21haWwucHl0aG9uLm9yZy9waXBlcm1haWwvcHl0aG9uLWxpc3QvMjAwOS1TZXB0ZW1iZXIvNTUxODgwLmh0bWwKICAgICMgd2hpY2ggaXMgZXNzZW50aWFsbHkgYSBjdXQvcGFzdGUgZnJvbSBhbiBlYXJsaWVyICgyLjYpIHZlcnNpb24gb2YgcHl0aG9uJ3MKICAgICMgYXN0LnB5CiAgICBmcm9tIGNvbXBpbGVyIGltcG9ydCBhc3QsIHBhcnNlCiAgICBmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeCBpbXBvcnQgYmluYXJ5X3R5cGUsIHN0cmluZ190eXBlcywgdGV4dF90eXBlCgogICAgZGVmIGxpdGVyYWxfZXZhbChub2RlX29yX3N0cmluZyk6CiAgICAgICAgIiIiCiAgICAgICAgU2FmZWx5IGV2YWx1YXRlIGFuIGV4cHJlc3Npb24gbm9kZSBvciBhIHN0cmluZyBjb250YWluaW5nIGEgUHl0aG9uCiAgICAgICAgZXhwcmVzc2lvbi4gIFRoZSBzdHJpbmcgb3Igbm9kZSBwcm92aWRlZCBtYXkgb25seSBjb25zaXN0IG9mIHRoZSAgZm9sbG93aW5nCiAgICAgICAgUHl0aG9uIGxpdGVyYWwgc3RydWN0dXJlczogc3RyaW5ncywgbnVtYmVycywgdHVwbGVzLCBsaXN0cywgZGljdHMsICBib29sZWFucywKICAgICAgICBhbmQgTm9uZS4KICAgICAgICAiIiIKICAgICAgICBfc2FmZV9uYW1lcyA9IHsnTm9uZSc6IE5vbmUsICdUcnVlJzogVHJ1ZSwgJ0ZhbHNlJzogRmFsc2V9CiAgICAgICAgaWYgaXNpbnN0YW5jZShub2RlX29yX3N0cmluZywgc3RyaW5nX3R5cGVzKToKICAgICAgICAgICAgbm9kZV9vcl9zdHJpbmcgPSBwYXJzZShub2RlX29yX3N0cmluZywgbW9kZT0nZXZhbCcpCiAgICAgICAgaWYgaXNpbnN0YW5jZShub2RlX29yX3N0cmluZywgYXN0LkV4cHJlc3Npb24pOgogICAgICAgICAgICBub2RlX29yX3N0cmluZyA9IG5vZGVfb3Jfc3RyaW5nLm5vZGUKCiAgICAgICAgZGVmIF9jb252ZXJ0KG5vZGUpOgogICAgICAgICAgICAjIE9rYXkgdG8gdXNlIGxvbmcgaGVyZSBiZWNhdXNlIHRoaXMgaXMgb25seSBmb3IgcHl0aG9uIDIuNCBhbmQgMi41CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uobm9kZSwgYXN0LkNvbnN0KSBhbmQgaXNpbnN0YW5jZShub2RlLnZhbHVlLCAodGV4dF90eXBlLCBiaW5hcnlfdHlwZSwgaW50LCBmbG9hdCwgbG9uZywgY29tcGxleCkpOgogICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUudmFsdWUKICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKG5vZGUsIGFzdC5UdXBsZSk6CiAgICAgICAgICAgICAgICByZXR1cm4gdHVwbGUobWFwKF9jb252ZXJ0LCBub2RlLm5vZGVzKSkKICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKG5vZGUsIGFzdC5MaXN0KToKICAgICAgICAgICAgICAgIHJldHVybiBsaXN0KG1hcChfY29udmVydCwgbm9kZS5ub2RlcykpCiAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZShub2RlLCBhc3QuRGljdCk6CiAgICAgICAgICAgICAgICByZXR1cm4gZGljdCgoX2NvbnZlcnQoayksIF9jb252ZXJ0KHYpKSBmb3IgaywgdiBpbiBub2RlLml0ZW1zKCkpCiAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZShub2RlLCBhc3QuTmFtZSk6CiAgICAgICAgICAgICAgICBpZiBub2RlLm5hbWUgaW4gX3NhZmVfbmFtZXM6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9zYWZlX25hbWVzW25vZGUubmFtZV0KICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKG5vZGUsIGFzdC5VbmFyeVN1Yik6CiAgICAgICAgICAgICAgICByZXR1cm4gLV9jb252ZXJ0KG5vZGUuZXhwcikKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbWFsZm9ybWVkIHN0cmluZycpCiAgICAgICAgcmV0dXJuIF9jb252ZXJ0KG5vZGVfb3Jfc3RyaW5nKQoKX19hbGxfXyA9ICgnZ2V0X2V4Y2VwdGlvbicsICdsaXRlcmFsX2V2YWwnKQpQSwMEFAAAAAAABLwrSzQVZ06GDwAAhg8AAB0AAABhbnNpYmxlL21vZHVsZV91dGlscy9jbG91ZC5weSMKIyAoYykgMjAxNiBBbGxlbiBTYW5hYnJpYSwgPGFzYW5hYnJpYUBsaW51eGR5bmFzdHkub3JnPgojCiMgVGhpcyBmaWxlIGlzIHBhcnQgb2YgQW5zaWJsZQojCiMgQW5zaWJsZSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiMgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKIyB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcgojIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCiMKIyBBbnNpYmxlIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiMgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKIyBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCiMgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KIwojIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCiMgYWxvbmcgd2l0aCBBbnNpYmxlLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgojCiIiIgpUaGlzIG1vZHVsZSBhZGRzIHNoYXJlZCBzdXBwb3J0IGZvciBnZW5lcmljIGNsb3VkIG1vZHVsZXMKCkluIG9yZGVyIHRvIHVzZSB0aGlzIG1vZHVsZSwgaW5jbHVkZSBpdCBhcyBwYXJ0IG9mIGEgY3VzdG9tCm1vZHVsZSBhcyBzaG93biBiZWxvdy4KCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuY2xvdWQgaW1wb3J0ICoKClRoZSAnY2xvdWQnIG1vZHVsZSBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGNvbW1vbiBjbGFzc2VzOgoKICAgICogQ2xvdWRSZXRyeQogICAgICAgIC0gVGhlIGJhc2UgY2xhc3MgdG8gYmUgdXNlZCBieSBvdGhlciBjbG91ZCBwcm92aWRlcnMsIGluIG9yZGVyIHRvCiAgICAgICAgICBwcm92aWRlIGEgYmFja29mZi9yZXRyeSBkZWNvcmF0b3IgYmFzZWQgb24gc3RhdHVzIGNvZGVzLgoKICAgICAgICAtIEV4YW1wbGUgdXNpbmcgdGhlIEFXU1JldHJ5IGNsYXNzIHdoaWNoIGluaGVyaXRzIGZyb20gQ2xvdWRSZXRyeS4KICAgICAgICAgIEBBV1NSZXRyeS5yZXRyeSh0cmllcz0yMCwgZGVsYXk9MiwgYmFja29mZj0yKQogICAgICAgICAgZ2V0X2VjMl9zZWN1cml0eV9ncm91cF9pZHNfZnJvbV9uYW1lcygpCgoiIiIKZnJvbSBmdW5jdG9vbHMgaW1wb3J0IHdyYXBzCmltcG9ydCBzeXNsb2cKaW1wb3J0IHRpbWUKCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMucHljb21wYXQyNCBpbXBvcnQgZ2V0X2V4Y2VwdGlvbgoKCmNsYXNzIENsb3VkUmV0cnkob2JqZWN0KToKICAgICIiIiBDbG91ZFJldHJ5IGNhbiBiZSB1c2VkIGJ5IGFueSBjbG91ZCBwcm92aWRlciwgaW4gb3JkZXIgdG8gaW1wbGVtZW50IGEKICAgICAgICBiYWNrb2ZmIGFsZ29yaXRobS9yZXRyeSBlZmZlY3QgYmFzZWQgb24gU3RhdHVzIENvZGUgZnJvbSBFeGNlcHRpb25zLgogICAgIiIiCiAgICAjIFRoaXMgaXMgdGhlIGJhc2UgY2xhc3Mgb2YgdGhlIGV4Y2VwdGlvbi4KICAgICMgQVdTIEV4YW1wbGUgYm90b2NvcmUuZXhjZXB0aW9ucy5DbGllbnRFcnJvcgogICAgYmFzZV9jbGFzcyA9IE5vbmUKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgc3RhdHVzX2NvZGVfZnJvbV9leGNlcHRpb24oZXJyb3IpOgogICAgICAgICIiIiBSZXR1cm4gdGhlIHN0YXR1cyBjb2RlIGZyb20gdGhlIGV4Y2VwdGlvbiBvYmplY3QKICAgICAgICBBcmdzOgogICAgICAgICAgICBlcnJvciAob2JqZWN0KTogVGhlIGV4Y2VwdGlvbiBpdHNlbGYuCiAgICAgICAgIiIiCiAgICAgICAgcGFzcwoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBmb3VuZChyZXNwb25zZV9jb2RlKToKICAgICAgICAiIiIgUmV0dXJuIFRydWUgaWYgdGhlIFJlc3BvbnNlIENvZGUgdG8gcmV0cnkgb24gd2FzIGZvdW5kLgogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHJlc3BvbnNlX2NvZGUgKHN0cik6IFRoaXMgaXMgdGhlIFJlc3BvbnNlIENvZGUgdGhhdCBpcyBiZWluZyBtYXRjaGVkIGFnYWluc3QuCiAgICAgICAgIiIiCiAgICAgICAgcGFzcwoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGJhY2tvZmYoY2xzLCB0cmllcz0xMCwgZGVsYXk9MywgYmFja29mZj0xLjEpOgogICAgICAgICIiIiBSZXRyeSBjYWxsaW5nIHRoZSBDbG91ZCBkZWNvcmF0ZWQgZnVuY3Rpb24gdXNpbmcgYW4gZXhwb25lbnRpYWwgYmFja29mZi4KICAgICAgICBLd2FyZ3M6CiAgICAgICAgICAgIHRyaWVzIChpbnQpOiBOdW1iZXIgb2YgdGltZXMgdG8gdHJ5IChub3QgcmV0cnkpIGJlZm9yZSBnaXZpbmcgdXAKICAgICAgICAgICAgICAgIGRlZmF1bHQ9MTAKICAgICAgICAgICAgZGVsYXkgKGludCk6IEluaXRpYWwgZGVsYXkgYmV0d2VlbiByZXRyaWVzIGluIHNlY29uZHMKICAgICAgICAgICAgICAgIGRlZmF1bHQ9MwogICAgICAgICAgICBiYWNrb2ZmIChpbnQpOiBiYWNrb2ZmIG11bHRpcGxpZXIgZS5nLiB2YWx1ZSBvZiAyIHdpbGwgZG91YmxlIHRoZSBkZWxheSBlYWNoIHJldHJ5CiAgICAgICAgICAgICAgICBkZWZhdWx0PTIKCiAgICAgICAgIiIiCiAgICAgICAgZGVmIGRlY28oZik6CiAgICAgICAgICAgIEB3cmFwcyhmKQogICAgICAgICAgICBkZWYgcmV0cnlfZnVuYygqYXJncywgKiprd2FyZ3MpOgogICAgICAgICAgICAgICAgbWF4X3RyaWVzLCBtYXhfZGVsYXkgPSB0cmllcywgZGVsYXkKICAgICAgICAgICAgICAgIHdoaWxlIG1heF90cmllcyA+IDE6CiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZigqYXJncywgKiprd2FyZ3MpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKGUsIGNscy5iYXNlX2NsYXNzKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlX2NvZGUgPSBjbHMuc3RhdHVzX2NvZGVfZnJvbV9leGNlcHRpb24oZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNscy5mb3VuZChyZXNwb25zZV9jb2RlKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSAiezB9OiBSZXRyeWluZyBpbiB7MX0gc2Vjb25kcy4uLiIuZm9ybWF0KHN0cihlKSwgbWF4X2RlbGF5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5c2xvZy5zeXNsb2coc3lzbG9nLkxPR19JTkZPLCBtc2cpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcChtYXhfZGVsYXkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4X3RyaWVzIC09IDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhfZGVsYXkgKj0gYmFja29mZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFJldHVybiBvcmlnaW5hbCBleGNlcHRpb24gaWYgZXhjZXB0aW9uIGlzIG5vdCBhIENsaWVudEVycm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UgZQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBSZXR1cm4gb3JpZ2luYWwgZXhjZXB0aW9uIGlmIGV4Y2VwdGlvbiBpcyBub3QgYSBDbGllbnRFcnJvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UgZQogICAgICAgICAgICAgICAgcmV0dXJuIGYoKmFyZ3MsICoqa3dhcmdzKQoKICAgICAgICAgICAgcmV0dXJuIHJldHJ5X2Z1bmMgICMgdHJ1ZSBkZWNvcmF0b3IKCiAgICAgICAgcmV0dXJuIGRlY28KUEsDBBQAAAAAAAS8K0s44sfRkXUAAJF1AAAgAAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvc2l4L19zaXgucHkiIiJVdGlsaXRpZXMgZm9yIHdyaXRpbmcgY29kZSB0aGF0IHJ1bnMgb24gUHl0aG9uIDIgYW5kIDMiIiIKCiMgQ29weXJpZ2h0IChjKSAyMDEwLTIwMTUgQmVuamFtaW4gUGV0ZXJzb24KIwojIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKIyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbAojIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMKIyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCiMgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCiMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKIwojIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbAojIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCiMKIyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgojIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLAojIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQojIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKIyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLAojIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFCiMgU09GVFdBUkUuCgpmcm9tIF9fZnV0dXJlX18gaW1wb3J0IGFic29sdXRlX2ltcG9ydAoKaW1wb3J0IGZ1bmN0b29scwppbXBvcnQgaXRlcnRvb2xzCmltcG9ydCBvcGVyYXRvcgppbXBvcnQgc3lzCmltcG9ydCB0eXBlcwoKX19hdXRob3JfXyA9ICJCZW5qYW1pbiBQZXRlcnNvbiA8YmVuamFtaW5AcHl0aG9uLm9yZz4iCl9fdmVyc2lvbl9fID0gIjEuMTAuMCIKCgojIFVzZWZ1bCBmb3IgdmVyeSBjb2Fyc2UgdmVyc2lvbiBkaWZmZXJlbnRpYXRpb24uClBZMiA9IHN5cy52ZXJzaW9uX2luZm9bMF0gPT0gMgpQWTMgPSBzeXMudmVyc2lvbl9pbmZvWzBdID09IDMKUFkzNCA9IHN5cy52ZXJzaW9uX2luZm9bMDoyXSA+PSAoMywgNCkKCmlmIFBZMzoKICAgIHN0cmluZ190eXBlcyA9IHN0ciwKICAgIGludGVnZXJfdHlwZXMgPSBpbnQsCiAgICBjbGFzc190eXBlcyA9IHR5cGUsCiAgICB0ZXh0X3R5cGUgPSBzdHIKICAgIGJpbmFyeV90eXBlID0gYnl0ZXMKICAgIE1BWFNJWkUgPSBzeXMubWF4c2l6ZQplbHNlOgogICAgc3RyaW5nX3R5cGVzID0gYmFzZXN0cmluZywKICAgIGludGVnZXJfdHlwZXMgPSAoaW50LCBsb25nKQogICAgY2xhc3NfdHlwZXMgPSAodHlwZSwgdHlwZXMuQ2xhc3NUeXBlKQogICAgdGV4dF90eXBlID0gdW5pY29kZQogICAgYmluYXJ5X3R5cGUgPSBzdHIKCiAgICBpZiBzeXMucGxhdGZvcm0uc3RhcnRzd2l0aCgiamF2YSIpOgogICAgICAgICMgSnl0aG9uIGFsd2F5cyB1c2VzIDMyIGJpdHMuCiAgICAgICAgTUFYU0laRSA9IGludCgoMSA8PCAzMSkgLSAxKQogICAgZWxzZToKICAgICAgICAjIEl0J3MgcG9zc2libGUgdG8gaGF2ZSBzaXplb2YobG9uZykgIT0gc2l6ZW9mKFB5X3NzaXplX3QpLgogICAgICAgIGNsYXNzIFgob2JqZWN0KToKCiAgICAgICAgICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgICAgICAgICAgcmV0dXJuIDEgPDwgMzEKICAgICAgICB0cnk6CiAgICAgICAgICAgIGxlbihYKCkpCiAgICAgICAgZXhjZXB0IE92ZXJmbG93RXJyb3I6CiAgICAgICAgICAgICMgMzItYml0CiAgICAgICAgICAgIE1BWFNJWkUgPSBpbnQoKDEgPDwgMzEpIC0gMSkKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIDY0LWJpdAogICAgICAgICAgICBNQVhTSVpFID0gaW50KCgxIDw8IDYzKSAtIDEpCiAgICAgICAgZGVsIFgKCgpkZWYgX2FkZF9kb2MoZnVuYywgZG9jKToKICAgICIiIkFkZCBkb2N1bWVudGF0aW9uIHRvIGEgZnVuY3Rpb24uIiIiCiAgICBmdW5jLl9fZG9jX18gPSBkb2MKCgpkZWYgX2ltcG9ydF9tb2R1bGUobmFtZSk6CiAgICAiIiJJbXBvcnQgbW9kdWxlLCByZXR1cm5pbmcgdGhlIG1vZHVsZSBhZnRlciB0aGUgbGFzdCBkb3QuIiIiCiAgICBfX2ltcG9ydF9fKG5hbWUpCiAgICByZXR1cm4gc3lzLm1vZHVsZXNbbmFtZV0KCgpjbGFzcyBfTGF6eURlc2NyKG9iamVjdCk6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG5hbWUpOgogICAgICAgIHNlbGYubmFtZSA9IG5hbWUKCiAgICBkZWYgX19nZXRfXyhzZWxmLCBvYmosIHRwKToKICAgICAgICByZXN1bHQgPSBzZWxmLl9yZXNvbHZlKCkKICAgICAgICBzZXRhdHRyKG9iaiwgc2VsZi5uYW1lLCByZXN1bHQpICAjIEludm9rZXMgX19zZXRfXy4KICAgICAgICB0cnk6CiAgICAgICAgICAgICMgVGhpcyBpcyBhIGJpdCB1Z2x5LCBidXQgaXQgYXZvaWRzIHJ1bm5pbmcgdGhpcyBhZ2FpbiBieQogICAgICAgICAgICAjIHJlbW92aW5nIHRoaXMgZGVzY3JpcHRvci4KICAgICAgICAgICAgZGVsYXR0cihvYmouX19jbGFzc19fLCBzZWxmLm5hbWUpCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICBwYXNzCiAgICAgICAgcmV0dXJuIHJlc3VsdAoKCmNsYXNzIE1vdmVkTW9kdWxlKF9MYXp5RGVzY3IpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBuYW1lLCBvbGQsIG5ldz1Ob25lKToKICAgICAgICBzdXBlcihNb3ZlZE1vZHVsZSwgc2VsZikuX19pbml0X18obmFtZSkKICAgICAgICBpZiBQWTM6CiAgICAgICAgICAgIGlmIG5ldyBpcyBOb25lOgogICAgICAgICAgICAgICAgbmV3ID0gbmFtZQogICAgICAgICAgICBzZWxmLm1vZCA9IG5ldwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYubW9kID0gb2xkCgogICAgZGVmIF9yZXNvbHZlKHNlbGYpOgogICAgICAgIHJldHVybiBfaW1wb3J0X21vZHVsZShzZWxmLm1vZCkKCiAgICBkZWYgX19nZXRhdHRyX18oc2VsZiwgYXR0cik6CiAgICAgICAgX21vZHVsZSA9IHNlbGYuX3Jlc29sdmUoKQogICAgICAgIHZhbHVlID0gZ2V0YXR0cihfbW9kdWxlLCBhdHRyKQogICAgICAgIHNldGF0dHIoc2VsZiwgYXR0ciwgdmFsdWUpCiAgICAgICAgcmV0dXJuIHZhbHVlCgoKY2xhc3MgX0xhenlNb2R1bGUodHlwZXMuTW9kdWxlVHlwZSk6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG5hbWUpOgogICAgICAgIHN1cGVyKF9MYXp5TW9kdWxlLCBzZWxmKS5fX2luaXRfXyhuYW1lKQogICAgICAgIHNlbGYuX19kb2NfXyA9IHNlbGYuX19jbGFzc19fLl9fZG9jX18KCiAgICBkZWYgX19kaXJfXyhzZWxmKToKICAgICAgICBhdHRycyA9IFsiX19kb2NfXyIsICJfX25hbWVfXyJdCiAgICAgICAgYXR0cnMgKz0gW2F0dHIubmFtZSBmb3IgYXR0ciBpbiBzZWxmLl9tb3ZlZF9hdHRyaWJ1dGVzXQogICAgICAgIHJldHVybiBhdHRycwoKICAgICMgU3ViY2xhc3NlcyBzaG91bGQgb3ZlcnJpZGUgdGhpcwogICAgX21vdmVkX2F0dHJpYnV0ZXMgPSBbXQoKCmNsYXNzIE1vdmVkQXR0cmlidXRlKF9MYXp5RGVzY3IpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBuYW1lLCBvbGRfbW9kLCBuZXdfbW9kLCBvbGRfYXR0cj1Ob25lLCBuZXdfYXR0cj1Ob25lKToKICAgICAgICBzdXBlcihNb3ZlZEF0dHJpYnV0ZSwgc2VsZikuX19pbml0X18obmFtZSkKICAgICAgICBpZiBQWTM6CiAgICAgICAgICAgIGlmIG5ld19tb2QgaXMgTm9uZToKICAgICAgICAgICAgICAgIG5ld19tb2QgPSBuYW1lCiAgICAgICAgICAgIHNlbGYubW9kID0gbmV3X21vZAogICAgICAgICAgICBpZiBuZXdfYXR0ciBpcyBOb25lOgogICAgICAgICAgICAgICAgaWYgb2xkX2F0dHIgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICBuZXdfYXR0ciA9IG5hbWUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgbmV3X2F0dHIgPSBvbGRfYXR0cgogICAgICAgICAgICBzZWxmLmF0dHIgPSBuZXdfYXR0cgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYubW9kID0gb2xkX21vZAogICAgICAgICAgICBpZiBvbGRfYXR0ciBpcyBOb25lOgogICAgICAgICAgICAgICAgb2xkX2F0dHIgPSBuYW1lCiAgICAgICAgICAgIHNlbGYuYXR0ciA9IG9sZF9hdHRyCgogICAgZGVmIF9yZXNvbHZlKHNlbGYpOgogICAgICAgIG1vZHVsZSA9IF9pbXBvcnRfbW9kdWxlKHNlbGYubW9kKQogICAgICAgIHJldHVybiBnZXRhdHRyKG1vZHVsZSwgc2VsZi5hdHRyKQoKCmNsYXNzIF9TaXhNZXRhUGF0aEltcG9ydGVyKG9iamVjdCk6CgogICAgIiIiCiAgICBBIG1ldGEgcGF0aCBpbXBvcnRlciB0byBpbXBvcnQgc2l4Lm1vdmVzIGFuZCBpdHMgc3VibW9kdWxlcy4KCiAgICBUaGlzIGNsYXNzIGltcGxlbWVudHMgYSBQRVAzMDIgZmluZGVyIGFuZCBsb2FkZXIuIEl0IHNob3VsZCBiZSBjb21wYXRpYmxlCiAgICB3aXRoIFB5dGhvbiAyLjUgYW5kIGFsbCBleGlzdGluZyB2ZXJzaW9ucyBvZiBQeXRob24zCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgc2l4X21vZHVsZV9uYW1lKToKICAgICAgICBzZWxmLm5hbWUgPSBzaXhfbW9kdWxlX25hbWUKICAgICAgICBzZWxmLmtub3duX21vZHVsZXMgPSB7fQoKICAgIGRlZiBfYWRkX21vZHVsZShzZWxmLCBtb2QsICpmdWxsbmFtZXMpOgogICAgICAgIGZvciBmdWxsbmFtZSBpbiBmdWxsbmFtZXM6CiAgICAgICAgICAgIHNlbGYua25vd25fbW9kdWxlc1tzZWxmLm5hbWUgKyAiLiIgKyBmdWxsbmFtZV0gPSBtb2QKCiAgICBkZWYgX2dldF9tb2R1bGUoc2VsZiwgZnVsbG5hbWUpOgogICAgICAgIHJldHVybiBzZWxmLmtub3duX21vZHVsZXNbc2VsZi5uYW1lICsgIi4iICsgZnVsbG5hbWVdCgogICAgZGVmIGZpbmRfbW9kdWxlKHNlbGYsIGZ1bGxuYW1lLCBwYXRoPU5vbmUpOgogICAgICAgIGlmIGZ1bGxuYW1lIGluIHNlbGYua25vd25fbW9kdWxlczoKICAgICAgICAgICAgcmV0dXJuIHNlbGYKICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiBfX2dldF9tb2R1bGUoc2VsZiwgZnVsbG5hbWUpOgogICAgICAgIHRyeToKICAgICAgICAgICAgcmV0dXJuIHNlbGYua25vd25fbW9kdWxlc1tmdWxsbmFtZV0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHJhaXNlIEltcG9ydEVycm9yKCJUaGlzIGxvYWRlciBkb2VzIG5vdCBrbm93IG1vZHVsZSAiICsgZnVsbG5hbWUpCgogICAgZGVmIGxvYWRfbW9kdWxlKHNlbGYsIGZ1bGxuYW1lKToKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgaW4gY2FzZSBvZiBhIHJlbG9hZAogICAgICAgICAgICByZXR1cm4gc3lzLm1vZHVsZXNbZnVsbG5hbWVdCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBwYXNzCiAgICAgICAgbW9kID0gc2VsZi5fX2dldF9tb2R1bGUoZnVsbG5hbWUpCiAgICAgICAgaWYgaXNpbnN0YW5jZShtb2QsIE1vdmVkTW9kdWxlKToKICAgICAgICAgICAgbW9kID0gbW9kLl9yZXNvbHZlKCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBtb2QuX19sb2FkZXJfXyA9IHNlbGYKICAgICAgICBzeXMubW9kdWxlc1tmdWxsbmFtZV0gPSBtb2QKICAgICAgICByZXR1cm4gbW9kCgogICAgZGVmIGlzX3BhY2thZ2Uoc2VsZiwgZnVsbG5hbWUpOgogICAgICAgICIiIgogICAgICAgIFJldHVybiB0cnVlLCBpZiB0aGUgbmFtZWQgbW9kdWxlIGlzIGEgcGFja2FnZS4KCiAgICAgICAgV2UgbmVlZCB0aGlzIG1ldGhvZCB0byBnZXQgY29ycmVjdCBzcGVjIG9iamVjdHMgd2l0aAogICAgICAgIFB5dGhvbiAzLjQgKHNlZSBQRVA0NTEpCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIGhhc2F0dHIoc2VsZi5fX2dldF9tb2R1bGUoZnVsbG5hbWUpLCAiX19wYXRoX18iKQoKICAgIGRlZiBnZXRfY29kZShzZWxmLCBmdWxsbmFtZSk6CiAgICAgICAgIiIiUmV0dXJuIE5vbmUKCiAgICAgICAgUmVxdWlyZWQsIGlmIGlzX3BhY2thZ2UgaXMgaW1wbGVtZW50ZWQiIiIKICAgICAgICBzZWxmLl9fZ2V0X21vZHVsZShmdWxsbmFtZSkgICMgZXZlbnR1YWxseSByYWlzZXMgSW1wb3J0RXJyb3IKICAgICAgICByZXR1cm4gTm9uZQogICAgZ2V0X3NvdXJjZSA9IGdldF9jb2RlICAjIHNhbWUgYXMgZ2V0X2NvZGUKCl9pbXBvcnRlciA9IF9TaXhNZXRhUGF0aEltcG9ydGVyKF9fbmFtZV9fKQoKCmNsYXNzIF9Nb3ZlZEl0ZW1zKF9MYXp5TW9kdWxlKToKCiAgICAiIiJMYXp5IGxvYWRpbmcgb2YgbW92ZWQgb2JqZWN0cyIiIgogICAgX19wYXRoX18gPSBbXSAgIyBtYXJrIGFzIHBhY2thZ2UKCgpfbW92ZWRfYXR0cmlidXRlcyA9IFsKICAgIE1vdmVkQXR0cmlidXRlKCJjU3RyaW5nSU8iLCAiY1N0cmluZ0lPIiwgImlvIiwgIlN0cmluZ0lPIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiZmlsdGVyIiwgIml0ZXJ0b29scyIsICJidWlsdGlucyIsICJpZmlsdGVyIiwgImZpbHRlciIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImZpbHRlcmZhbHNlIiwgIml0ZXJ0b29scyIsICJpdGVydG9vbHMiLCAiaWZpbHRlcmZhbHNlIiwgImZpbHRlcmZhbHNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiaW5wdXQiLCAiX19idWlsdGluX18iLCAiYnVpbHRpbnMiLCAicmF3X2lucHV0IiwgImlucHV0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiaW50ZXJuIiwgIl9fYnVpbHRpbl9fIiwgInN5cyIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIm1hcCIsICJpdGVydG9vbHMiLCAiYnVpbHRpbnMiLCAiaW1hcCIsICJtYXAiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJnZXRjd2QiLCAib3MiLCAib3MiLCAiZ2V0Y3dkdSIsICJnZXRjd2QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJnZXRjd2RiIiwgIm9zIiwgIm9zIiwgImdldGN3ZCIsICJnZXRjd2RiIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicmFuZ2UiLCAiX19idWlsdGluX18iLCAiYnVpbHRpbnMiLCAieHJhbmdlIiwgInJhbmdlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicmVsb2FkX21vZHVsZSIsICJfX2J1aWx0aW5fXyIsICJpbXBvcnRsaWIiIGlmIFBZMzQgZWxzZSAiaW1wIiwgInJlbG9hZCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInJlZHVjZSIsICJfX2J1aWx0aW5fXyIsICJmdW5jdG9vbHMiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJzaGxleF9xdW90ZSIsICJwaXBlcyIsICJzaGxleCIsICJxdW90ZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlN0cmluZ0lPIiwgIlN0cmluZ0lPIiwgImlvIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiVXNlckRpY3QiLCAiVXNlckRpY3QiLCAiY29sbGVjdGlvbnMiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJVc2VyTGlzdCIsICJVc2VyTGlzdCIsICJjb2xsZWN0aW9ucyIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlVzZXJTdHJpbmciLCAiVXNlclN0cmluZyIsICJjb2xsZWN0aW9ucyIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInhyYW5nZSIsICJfX2J1aWx0aW5fXyIsICJidWlsdGlucyIsICJ4cmFuZ2UiLCAicmFuZ2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ6aXAiLCAiaXRlcnRvb2xzIiwgImJ1aWx0aW5zIiwgIml6aXAiLCAiemlwIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiemlwX2xvbmdlc3QiLCAiaXRlcnRvb2xzIiwgIml0ZXJ0b29scyIsICJpemlwX2xvbmdlc3QiLCAiemlwX2xvbmdlc3QiKSwKICAgIE1vdmVkTW9kdWxlKCJidWlsdGlucyIsICJfX2J1aWx0aW5fXyIpLAogICAgTW92ZWRNb2R1bGUoImNvbmZpZ3BhcnNlciIsICJDb25maWdQYXJzZXIiKSwKICAgIE1vdmVkTW9kdWxlKCJjb3B5cmVnIiwgImNvcHlfcmVnIiksCiAgICBNb3ZlZE1vZHVsZSgiZGJtX2dudSIsICJnZGJtIiwgImRibS5nbnUiKSwKICAgIE1vdmVkTW9kdWxlKCJfZHVtbXlfdGhyZWFkIiwgImR1bW15X3RocmVhZCIsICJfZHVtbXlfdGhyZWFkIiksCiAgICBNb3ZlZE1vZHVsZSgiaHR0cF9jb29raWVqYXIiLCAiY29va2llbGliIiwgImh0dHAuY29va2llamFyIiksCiAgICBNb3ZlZE1vZHVsZSgiaHR0cF9jb29raWVzIiwgIkNvb2tpZSIsICJodHRwLmNvb2tpZXMiKSwKICAgIE1vdmVkTW9kdWxlKCJodG1sX2VudGl0aWVzIiwgImh0bWxlbnRpdHlkZWZzIiwgImh0bWwuZW50aXRpZXMiKSwKICAgIE1vdmVkTW9kdWxlKCJodG1sX3BhcnNlciIsICJIVE1MUGFyc2VyIiwgImh0bWwucGFyc2VyIiksCiAgICBNb3ZlZE1vZHVsZSgiaHR0cF9jbGllbnQiLCAiaHR0cGxpYiIsICJodHRwLmNsaWVudCIpLAogICAgTW92ZWRNb2R1bGUoImVtYWlsX21pbWVfbXVsdGlwYXJ0IiwgImVtYWlsLk1JTUVNdWx0aXBhcnQiLCAiZW1haWwubWltZS5tdWx0aXBhcnQiKSwKICAgIE1vdmVkTW9kdWxlKCJlbWFpbF9taW1lX25vbm11bHRpcGFydCIsICJlbWFpbC5NSU1FTm9uTXVsdGlwYXJ0IiwgImVtYWlsLm1pbWUubm9ubXVsdGlwYXJ0IiksCiAgICBNb3ZlZE1vZHVsZSgiZW1haWxfbWltZV90ZXh0IiwgImVtYWlsLk1JTUVUZXh0IiwgImVtYWlsLm1pbWUudGV4dCIpLAogICAgTW92ZWRNb2R1bGUoImVtYWlsX21pbWVfYmFzZSIsICJlbWFpbC5NSU1FQmFzZSIsICJlbWFpbC5taW1lLmJhc2UiKSwKICAgIE1vdmVkTW9kdWxlKCJCYXNlSFRUUFNlcnZlciIsICJCYXNlSFRUUFNlcnZlciIsICJodHRwLnNlcnZlciIpLAogICAgTW92ZWRNb2R1bGUoIkNHSUhUVFBTZXJ2ZXIiLCAiQ0dJSFRUUFNlcnZlciIsICJodHRwLnNlcnZlciIpLAogICAgTW92ZWRNb2R1bGUoIlNpbXBsZUhUVFBTZXJ2ZXIiLCAiU2ltcGxlSFRUUFNlcnZlciIsICJodHRwLnNlcnZlciIpLAogICAgTW92ZWRNb2R1bGUoImNQaWNrbGUiLCAiY1BpY2tsZSIsICJwaWNrbGUiKSwKICAgIE1vdmVkTW9kdWxlKCJxdWV1ZSIsICJRdWV1ZSIpLAogICAgTW92ZWRNb2R1bGUoInJlcHJsaWIiLCAicmVwciIpLAogICAgTW92ZWRNb2R1bGUoInNvY2tldHNlcnZlciIsICJTb2NrZXRTZXJ2ZXIiKSwKICAgIE1vdmVkTW9kdWxlKCJfdGhyZWFkIiwgInRocmVhZCIsICJfdGhyZWFkIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlciIsICJUa2ludGVyIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9kaWFsb2ciLCAiRGlhbG9nIiwgInRraW50ZXIuZGlhbG9nIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9maWxlZGlhbG9nIiwgIkZpbGVEaWFsb2ciLCAidGtpbnRlci5maWxlZGlhbG9nIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9zY3JvbGxlZHRleHQiLCAiU2Nyb2xsZWRUZXh0IiwgInRraW50ZXIuc2Nyb2xsZWR0ZXh0IiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9zaW1wbGVkaWFsb2ciLCAiU2ltcGxlRGlhbG9nIiwgInRraW50ZXIuc2ltcGxlZGlhbG9nIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl90aXgiLCAiVGl4IiwgInRraW50ZXIudGl4IiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl90dGsiLCAidHRrIiwgInRraW50ZXIudHRrIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9jb25zdGFudHMiLCAiVGtjb25zdGFudHMiLCAidGtpbnRlci5jb25zdGFudHMiKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX2RuZCIsICJUa2RuZCIsICJ0a2ludGVyLmRuZCIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfY29sb3JjaG9vc2VyIiwgInRrQ29sb3JDaG9vc2VyIiwKICAgICAgICAgICAgICAgICJ0a2ludGVyLmNvbG9yY2hvb3NlciIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfY29tbW9uZGlhbG9nIiwgInRrQ29tbW9uRGlhbG9nIiwKICAgICAgICAgICAgICAgICJ0a2ludGVyLmNvbW1vbmRpYWxvZyIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfdGtmaWxlZGlhbG9nIiwgInRrRmlsZURpYWxvZyIsICJ0a2ludGVyLmZpbGVkaWFsb2ciKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX2ZvbnQiLCAidGtGb250IiwgInRraW50ZXIuZm9udCIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfbWVzc2FnZWJveCIsICJ0a01lc3NhZ2VCb3giLCAidGtpbnRlci5tZXNzYWdlYm94IiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl90a3NpbXBsZWRpYWxvZyIsICJ0a1NpbXBsZURpYWxvZyIsCiAgICAgICAgICAgICAgICAidGtpbnRlci5zaW1wbGVkaWFsb2ciKSwKICAgIE1vdmVkTW9kdWxlKCJ1cmxsaWJfcGFyc2UiLCBfX25hbWVfXyArICIubW92ZXMudXJsbGliX3BhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRNb2R1bGUoInVybGxpYl9lcnJvciIsIF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWJfZXJyb3IiLCAidXJsbGliLmVycm9yIiksCiAgICBNb3ZlZE1vZHVsZSgidXJsbGliIiwgX19uYW1lX18gKyAiLm1vdmVzLnVybGxpYiIsIF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWIiKSwKICAgIE1vdmVkTW9kdWxlKCJ1cmxsaWJfcm9ib3RwYXJzZXIiLCAicm9ib3RwYXJzZXIiLCAidXJsbGliLnJvYm90cGFyc2VyIiksCiAgICBNb3ZlZE1vZHVsZSgieG1scnBjX2NsaWVudCIsICJ4bWxycGNsaWIiLCAieG1scnBjLmNsaWVudCIpLAogICAgTW92ZWRNb2R1bGUoInhtbHJwY19zZXJ2ZXIiLCAiU2ltcGxlWE1MUlBDU2VydmVyIiwgInhtbHJwYy5zZXJ2ZXIiKSwKXQojIEFkZCB3aW5kb3dzIHNwZWNpZmljIG1vZHVsZXMuCmlmIHN5cy5wbGF0Zm9ybSA9PSAid2luMzIiOgogICAgX21vdmVkX2F0dHJpYnV0ZXMgKz0gWwogICAgICAgIE1vdmVkTW9kdWxlKCJ3aW5yZWciLCAiX3dpbnJlZyIpLAogICAgXQoKZm9yIGF0dHIgaW4gX21vdmVkX2F0dHJpYnV0ZXM6CiAgICBzZXRhdHRyKF9Nb3ZlZEl0ZW1zLCBhdHRyLm5hbWUsIGF0dHIpCiAgICBpZiBpc2luc3RhbmNlKGF0dHIsIE1vdmVkTW9kdWxlKToKICAgICAgICBfaW1wb3J0ZXIuX2FkZF9tb2R1bGUoYXR0ciwgIm1vdmVzLiIgKyBhdHRyLm5hbWUpCmRlbCBhdHRyCgpfTW92ZWRJdGVtcy5fbW92ZWRfYXR0cmlidXRlcyA9IF9tb3ZlZF9hdHRyaWJ1dGVzCgptb3ZlcyA9IF9Nb3ZlZEl0ZW1zKF9fbmFtZV9fICsgIi5tb3ZlcyIpCl9pbXBvcnRlci5fYWRkX21vZHVsZShtb3ZlcywgIm1vdmVzIikKCgpjbGFzcyBNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9wYXJzZShfTGF6eU1vZHVsZSk6CgogICAgIiIiTGF6eSBsb2FkaW5nIG9mIG1vdmVkIG9iamVjdHMgaW4gc2l4Lm1vdmVzLnVybGxpYl9wYXJzZSIiIgoKCl91cmxsaWJfcGFyc2VfbW92ZWRfYXR0cmlidXRlcyA9IFsKICAgIE1vdmVkQXR0cmlidXRlKCJQYXJzZVJlc3VsdCIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJTcGxpdFJlc3VsdCIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJwYXJzZV9xcyIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJwYXJzZV9xc2wiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsZGVmcmFnIiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVybGpvaW4iLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJscGFyc2UiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsc3BsaXQiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsdW5wYXJzZSIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1cmx1bnNwbGl0IiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInF1b3RlIiwgInVybGxpYiIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJxdW90ZV9wbHVzIiwgInVybGxpYiIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1bnF1b3RlIiwgInVybGxpYiIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1bnF1b3RlX3BsdXMiLCAidXJsbGliIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVybGVuY29kZSIsICJ1cmxsaWIiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgic3BsaXRxdWVyeSIsICJ1cmxsaWIiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgic3BsaXR0YWciLCAidXJsbGliIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInNwbGl0dXNlciIsICJ1cmxsaWIiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXNlc19mcmFnbWVudCIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1c2VzX25ldGxvYyIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1c2VzX3BhcmFtcyIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1c2VzX3F1ZXJ5IiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVzZXNfcmVsYXRpdmUiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCl0KZm9yIGF0dHIgaW4gX3VybGxpYl9wYXJzZV9tb3ZlZF9hdHRyaWJ1dGVzOgogICAgc2V0YXR0cihNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9wYXJzZSwgYXR0ci5uYW1lLCBhdHRyKQpkZWwgYXR0cgoKTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcGFyc2UuX21vdmVkX2F0dHJpYnV0ZXMgPSBfdXJsbGliX3BhcnNlX21vdmVkX2F0dHJpYnV0ZXMKCl9pbXBvcnRlci5fYWRkX21vZHVsZShNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9wYXJzZShfX25hbWVfXyArICIubW92ZXMudXJsbGliX3BhcnNlIiksCiAgICAgICAgICAgICAgICAgICAgICAibW92ZXMudXJsbGliX3BhcnNlIiwgIm1vdmVzLnVybGxpYi5wYXJzZSIpCgoKY2xhc3MgTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfZXJyb3IoX0xhenlNb2R1bGUpOgoKICAgICIiIkxhenkgbG9hZGluZyBvZiBtb3ZlZCBvYmplY3RzIGluIHNpeC5tb3Zlcy51cmxsaWJfZXJyb3IiIiIKCgpfdXJsbGliX2Vycm9yX21vdmVkX2F0dHJpYnV0ZXMgPSBbCiAgICBNb3ZlZEF0dHJpYnV0ZSgiVVJMRXJyb3IiLCAidXJsbGliMiIsICJ1cmxsaWIuZXJyb3IiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQRXJyb3IiLCAidXJsbGliMiIsICJ1cmxsaWIuZXJyb3IiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJDb250ZW50VG9vU2hvcnRFcnJvciIsICJ1cmxsaWIiLCAidXJsbGliLmVycm9yIiksCl0KZm9yIGF0dHIgaW4gX3VybGxpYl9lcnJvcl9tb3ZlZF9hdHRyaWJ1dGVzOgogICAgc2V0YXR0cihNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9lcnJvciwgYXR0ci5uYW1lLCBhdHRyKQpkZWwgYXR0cgoKTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfZXJyb3IuX21vdmVkX2F0dHJpYnV0ZXMgPSBfdXJsbGliX2Vycm9yX21vdmVkX2F0dHJpYnV0ZXMKCl9pbXBvcnRlci5fYWRkX21vZHVsZShNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9lcnJvcihfX25hbWVfXyArICIubW92ZXMudXJsbGliLmVycm9yIiksCiAgICAgICAgICAgICAgICAgICAgICAibW92ZXMudXJsbGliX2Vycm9yIiwgIm1vdmVzLnVybGxpYi5lcnJvciIpCgoKY2xhc3MgTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcmVxdWVzdChfTGF6eU1vZHVsZSk6CgogICAgIiIiTGF6eSBsb2FkaW5nIG9mIG1vdmVkIG9iamVjdHMgaW4gc2l4Lm1vdmVzLnVybGxpYl9yZXF1ZXN0IiIiCgoKX3VybGxpYl9yZXF1ZXN0X21vdmVkX2F0dHJpYnV0ZXMgPSBbCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsb3BlbiIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiaW5zdGFsbF9vcGVuZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImJ1aWxkX29wZW5lciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicGF0aG5hbWUydXJsIiwgInVybGxpYiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVybDJwYXRobmFtZSIsICJ1cmxsaWIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJnZXRwcm94aWVzIiwgInVybGxpYiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlJlcXVlc3QiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIk9wZW5lckRpcmVjdG9yIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQRGVmYXVsdEVycm9ySGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUFJlZGlyZWN0SGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUENvb2tpZVByb2Nlc3NvciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiUHJveHlIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJCYXNlSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUFBhc3N3b3JkTWdyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQUGFzc3dvcmRNZ3JXaXRoRGVmYXVsdFJlYWxtIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJBYnN0cmFjdEJhc2ljQXV0aEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBCYXNpY0F1dGhIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJQcm94eUJhc2ljQXV0aEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkFic3RyYWN0RGlnZXN0QXV0aEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBEaWdlc3RBdXRoSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiUHJveHlEaWdlc3RBdXRoSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBTSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiRmlsZUhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkZUUEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkNhY2hlRlRQSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiVW5rbm93bkhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBFcnJvclByb2Nlc3NvciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJscmV0cmlldmUiLCAidXJsbGliIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsY2xlYW51cCIsICJ1cmxsaWIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJVUkxvcGVuZXIiLCAidXJsbGliIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiRmFuY3lVUkxvcGVuZXIiLCAidXJsbGliIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicHJveHlfYnlwYXNzIiwgInVybGxpYiIsICJ1cmxsaWIucmVxdWVzdCIpLApdCmZvciBhdHRyIGluIF91cmxsaWJfcmVxdWVzdF9tb3ZlZF9hdHRyaWJ1dGVzOgogICAgc2V0YXR0cihNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yZXF1ZXN0LCBhdHRyLm5hbWUsIGF0dHIpCmRlbCBhdHRyCgpNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yZXF1ZXN0Ll9tb3ZlZF9hdHRyaWJ1dGVzID0gX3VybGxpYl9yZXF1ZXN0X21vdmVkX2F0dHJpYnV0ZXMKCl9pbXBvcnRlci5fYWRkX21vZHVsZShNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yZXF1ZXN0KF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWIucmVxdWVzdCIpLAogICAgICAgICAgICAgICAgICAgICAgIm1vdmVzLnVybGxpYl9yZXF1ZXN0IiwgIm1vdmVzLnVybGxpYi5yZXF1ZXN0IikKCgpjbGFzcyBNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yZXNwb25zZShfTGF6eU1vZHVsZSk6CgogICAgIiIiTGF6eSBsb2FkaW5nIG9mIG1vdmVkIG9iamVjdHMgaW4gc2l4Lm1vdmVzLnVybGxpYl9yZXNwb25zZSIiIgoKCl91cmxsaWJfcmVzcG9uc2VfbW92ZWRfYXR0cmlidXRlcyA9IFsKICAgIE1vdmVkQXR0cmlidXRlKCJhZGRiYXNlIiwgInVybGxpYiIsICJ1cmxsaWIucmVzcG9uc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJhZGRjbG9zZWhvb2siLCAidXJsbGliIiwgInVybGxpYi5yZXNwb25zZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImFkZGluZm8iLCAidXJsbGliIiwgInVybGxpYi5yZXNwb25zZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImFkZGluZm91cmwiLCAidXJsbGliIiwgInVybGxpYi5yZXNwb25zZSIpLApdCmZvciBhdHRyIGluIF91cmxsaWJfcmVzcG9uc2VfbW92ZWRfYXR0cmlidXRlczoKICAgIHNldGF0dHIoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcmVzcG9uc2UsIGF0dHIubmFtZSwgYXR0cikKZGVsIGF0dHIKCk1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3Jlc3BvbnNlLl9tb3ZlZF9hdHRyaWJ1dGVzID0gX3VybGxpYl9yZXNwb25zZV9tb3ZlZF9hdHRyaWJ1dGVzCgpfaW1wb3J0ZXIuX2FkZF9tb2R1bGUoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcmVzcG9uc2UoX19uYW1lX18gKyAiLm1vdmVzLnVybGxpYi5yZXNwb25zZSIpLAogICAgICAgICAgICAgICAgICAgICAgIm1vdmVzLnVybGxpYl9yZXNwb25zZSIsICJtb3Zlcy51cmxsaWIucmVzcG9uc2UiKQoKCmNsYXNzIE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3JvYm90cGFyc2VyKF9MYXp5TW9kdWxlKToKCiAgICAiIiJMYXp5IGxvYWRpbmcgb2YgbW92ZWQgb2JqZWN0cyBpbiBzaXgubW92ZXMudXJsbGliX3JvYm90cGFyc2VyIiIiCgoKX3VybGxpYl9yb2JvdHBhcnNlcl9tb3ZlZF9hdHRyaWJ1dGVzID0gWwogICAgTW92ZWRBdHRyaWJ1dGUoIlJvYm90RmlsZVBhcnNlciIsICJyb2JvdHBhcnNlciIsICJ1cmxsaWIucm9ib3RwYXJzZXIiKSwKXQpmb3IgYXR0ciBpbiBfdXJsbGliX3JvYm90cGFyc2VyX21vdmVkX2F0dHJpYnV0ZXM6CiAgICBzZXRhdHRyKE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3JvYm90cGFyc2VyLCBhdHRyLm5hbWUsIGF0dHIpCmRlbCBhdHRyCgpNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yb2JvdHBhcnNlci5fbW92ZWRfYXR0cmlidXRlcyA9IF91cmxsaWJfcm9ib3RwYXJzZXJfbW92ZWRfYXR0cmlidXRlcwoKX2ltcG9ydGVyLl9hZGRfbW9kdWxlKE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3JvYm90cGFyc2VyKF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWIucm9ib3RwYXJzZXIiKSwKICAgICAgICAgICAgICAgICAgICAgICJtb3Zlcy51cmxsaWJfcm9ib3RwYXJzZXIiLCAibW92ZXMudXJsbGliLnJvYm90cGFyc2VyIikKCgpjbGFzcyBNb2R1bGVfc2l4X21vdmVzX3VybGxpYih0eXBlcy5Nb2R1bGVUeXBlKToKCiAgICAiIiJDcmVhdGUgYSBzaXgubW92ZXMudXJsbGliIG5hbWVzcGFjZSB0aGF0IHJlc2VtYmxlcyB0aGUgUHl0aG9uIDMgbmFtZXNwYWNlIiIiCiAgICBfX3BhdGhfXyA9IFtdICAjIG1hcmsgYXMgcGFja2FnZQogICAgcGFyc2UgPSBfaW1wb3J0ZXIuX2dldF9tb2R1bGUoIm1vdmVzLnVybGxpYl9wYXJzZSIpCiAgICBlcnJvciA9IF9pbXBvcnRlci5fZ2V0X21vZHVsZSgibW92ZXMudXJsbGliX2Vycm9yIikKICAgIHJlcXVlc3QgPSBfaW1wb3J0ZXIuX2dldF9tb2R1bGUoIm1vdmVzLnVybGxpYl9yZXF1ZXN0IikKICAgIHJlc3BvbnNlID0gX2ltcG9ydGVyLl9nZXRfbW9kdWxlKCJtb3Zlcy51cmxsaWJfcmVzcG9uc2UiKQogICAgcm9ib3RwYXJzZXIgPSBfaW1wb3J0ZXIuX2dldF9tb2R1bGUoIm1vdmVzLnVybGxpYl9yb2JvdHBhcnNlciIpCgogICAgZGVmIF9fZGlyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIFsncGFyc2UnLCAnZXJyb3InLCAncmVxdWVzdCcsICdyZXNwb25zZScsICdyb2JvdHBhcnNlciddCgpfaW1wb3J0ZXIuX2FkZF9tb2R1bGUoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWIoX19uYW1lX18gKyAiLm1vdmVzLnVybGxpYiIpLAogICAgICAgICAgICAgICAgICAgICAgIm1vdmVzLnVybGxpYiIpCgoKZGVmIGFkZF9tb3ZlKG1vdmUpOgogICAgIiIiQWRkIGFuIGl0ZW0gdG8gc2l4Lm1vdmVzLiIiIgogICAgc2V0YXR0cihfTW92ZWRJdGVtcywgbW92ZS5uYW1lLCBtb3ZlKQoKCmRlZiByZW1vdmVfbW92ZShuYW1lKToKICAgICIiIlJlbW92ZSBpdGVtIGZyb20gc2l4Lm1vdmVzLiIiIgogICAgdHJ5OgogICAgICAgIGRlbGF0dHIoX01vdmVkSXRlbXMsIG5hbWUpCiAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBkZWwgbW92ZXMuX19kaWN0X19bbmFtZV0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKCJubyBzdWNoIG1vdmUsICVyIiAlIChuYW1lLCkpCgoKaWYgUFkzOgogICAgX21ldGhfZnVuYyA9ICJfX2Z1bmNfXyIKICAgIF9tZXRoX3NlbGYgPSAiX19zZWxmX18iCgogICAgX2Z1bmNfY2xvc3VyZSA9ICJfX2Nsb3N1cmVfXyIKICAgIF9mdW5jX2NvZGUgPSAiX19jb2RlX18iCiAgICBfZnVuY19kZWZhdWx0cyA9ICJfX2RlZmF1bHRzX18iCiAgICBfZnVuY19nbG9iYWxzID0gIl9fZ2xvYmFsc19fIgplbHNlOgogICAgX21ldGhfZnVuYyA9ICJpbV9mdW5jIgogICAgX21ldGhfc2VsZiA9ICJpbV9zZWxmIgoKICAgIF9mdW5jX2Nsb3N1cmUgPSAiZnVuY19jbG9zdXJlIgogICAgX2Z1bmNfY29kZSA9ICJmdW5jX2NvZGUiCiAgICBfZnVuY19kZWZhdWx0cyA9ICJmdW5jX2RlZmF1bHRzIgogICAgX2Z1bmNfZ2xvYmFscyA9ICJmdW5jX2dsb2JhbHMiCgoKdHJ5OgogICAgYWR2YW5jZV9pdGVyYXRvciA9IG5leHQKZXhjZXB0IE5hbWVFcnJvcjoKICAgIGRlZiBhZHZhbmNlX2l0ZXJhdG9yKGl0KToKICAgICAgICByZXR1cm4gaXQubmV4dCgpCm5leHQgPSBhZHZhbmNlX2l0ZXJhdG9yCgoKdHJ5OgogICAgY2FsbGFibGUgPSBjYWxsYWJsZQpleGNlcHQgTmFtZUVycm9yOgogICAgZGVmIGNhbGxhYmxlKG9iaik6CiAgICAgICAgcmV0dXJuIGFueSgiX19jYWxsX18iIGluIGtsYXNzLl9fZGljdF9fIGZvciBrbGFzcyBpbiB0eXBlKG9iaikuX19tcm9fXykKCgppZiBQWTM6CiAgICBkZWYgZ2V0X3VuYm91bmRfZnVuY3Rpb24odW5ib3VuZCk6CiAgICAgICAgcmV0dXJuIHVuYm91bmQKCiAgICBjcmVhdGVfYm91bmRfbWV0aG9kID0gdHlwZXMuTWV0aG9kVHlwZQoKICAgIGRlZiBjcmVhdGVfdW5ib3VuZF9tZXRob2QoZnVuYywgY2xzKToKICAgICAgICByZXR1cm4gZnVuYwoKICAgIEl0ZXJhdG9yID0gb2JqZWN0CmVsc2U6CiAgICBkZWYgZ2V0X3VuYm91bmRfZnVuY3Rpb24odW5ib3VuZCk6CiAgICAgICAgcmV0dXJuIHVuYm91bmQuaW1fZnVuYwoKICAgIGRlZiBjcmVhdGVfYm91bmRfbWV0aG9kKGZ1bmMsIG9iaik6CiAgICAgICAgcmV0dXJuIHR5cGVzLk1ldGhvZFR5cGUoZnVuYywgb2JqLCBvYmouX19jbGFzc19fKQoKICAgIGRlZiBjcmVhdGVfdW5ib3VuZF9tZXRob2QoZnVuYywgY2xzKToKICAgICAgICByZXR1cm4gdHlwZXMuTWV0aG9kVHlwZShmdW5jLCBOb25lLCBjbHMpCgogICAgY2xhc3MgSXRlcmF0b3Iob2JqZWN0KToKCiAgICAgICAgZGVmIG5leHQoc2VsZik6CiAgICAgICAgICAgIHJldHVybiB0eXBlKHNlbGYpLl9fbmV4dF9fKHNlbGYpCgogICAgY2FsbGFibGUgPSBjYWxsYWJsZQpfYWRkX2RvYyhnZXRfdW5ib3VuZF9mdW5jdGlvbiwKICAgICAgICAgIiIiR2V0IHRoZSBmdW5jdGlvbiBvdXQgb2YgYSBwb3NzaWJseSB1bmJvdW5kIGZ1bmN0aW9uIiIiKQoKCmdldF9tZXRob2RfZnVuY3Rpb24gPSBvcGVyYXRvci5hdHRyZ2V0dGVyKF9tZXRoX2Z1bmMpCmdldF9tZXRob2Rfc2VsZiA9IG9wZXJhdG9yLmF0dHJnZXR0ZXIoX21ldGhfc2VsZikKZ2V0X2Z1bmN0aW9uX2Nsb3N1cmUgPSBvcGVyYXRvci5hdHRyZ2V0dGVyKF9mdW5jX2Nsb3N1cmUpCmdldF9mdW5jdGlvbl9jb2RlID0gb3BlcmF0b3IuYXR0cmdldHRlcihfZnVuY19jb2RlKQpnZXRfZnVuY3Rpb25fZGVmYXVsdHMgPSBvcGVyYXRvci5hdHRyZ2V0dGVyKF9mdW5jX2RlZmF1bHRzKQpnZXRfZnVuY3Rpb25fZ2xvYmFscyA9IG9wZXJhdG9yLmF0dHJnZXR0ZXIoX2Z1bmNfZ2xvYmFscykKCgppZiBQWTM6CiAgICBkZWYgaXRlcmtleXMoZCwgKiprdyk6CiAgICAgICAgcmV0dXJuIGl0ZXIoZC5rZXlzKCoqa3cpKQoKICAgIGRlZiBpdGVydmFsdWVzKGQsICoqa3cpOgogICAgICAgIHJldHVybiBpdGVyKGQudmFsdWVzKCoqa3cpKQoKICAgIGRlZiBpdGVyaXRlbXMoZCwgKiprdyk6CiAgICAgICAgcmV0dXJuIGl0ZXIoZC5pdGVtcygqKmt3KSkKCiAgICBkZWYgaXRlcmxpc3RzKGQsICoqa3cpOgogICAgICAgIHJldHVybiBpdGVyKGQubGlzdHMoKiprdykpCgogICAgdmlld2tleXMgPSBvcGVyYXRvci5tZXRob2RjYWxsZXIoImtleXMiKQoKICAgIHZpZXd2YWx1ZXMgPSBvcGVyYXRvci5tZXRob2RjYWxsZXIoInZhbHVlcyIpCgogICAgdmlld2l0ZW1zID0gb3BlcmF0b3IubWV0aG9kY2FsbGVyKCJpdGVtcyIpCmVsc2U6CiAgICBkZWYgaXRlcmtleXMoZCwgKiprdyk6CiAgICAgICAgcmV0dXJuIGQuaXRlcmtleXMoKiprdykKCiAgICBkZWYgaXRlcnZhbHVlcyhkLCAqKmt3KToKICAgICAgICByZXR1cm4gZC5pdGVydmFsdWVzKCoqa3cpCgogICAgZGVmIGl0ZXJpdGVtcyhkLCAqKmt3KToKICAgICAgICByZXR1cm4gZC5pdGVyaXRlbXMoKiprdykKCiAgICBkZWYgaXRlcmxpc3RzKGQsICoqa3cpOgogICAgICAgIHJldHVybiBkLml0ZXJsaXN0cygqKmt3KQoKICAgIHZpZXdrZXlzID0gb3BlcmF0b3IubWV0aG9kY2FsbGVyKCJ2aWV3a2V5cyIpCgogICAgdmlld3ZhbHVlcyA9IG9wZXJhdG9yLm1ldGhvZGNhbGxlcigidmlld3ZhbHVlcyIpCgogICAgdmlld2l0ZW1zID0gb3BlcmF0b3IubWV0aG9kY2FsbGVyKCJ2aWV3aXRlbXMiKQoKX2FkZF9kb2MoaXRlcmtleXMsICJSZXR1cm4gYW4gaXRlcmF0b3Igb3ZlciB0aGUga2V5cyBvZiBhIGRpY3Rpb25hcnkuIikKX2FkZF9kb2MoaXRlcnZhbHVlcywgIlJldHVybiBhbiBpdGVyYXRvciBvdmVyIHRoZSB2YWx1ZXMgb2YgYSBkaWN0aW9uYXJ5LiIpCl9hZGRfZG9jKGl0ZXJpdGVtcywKICAgICAgICAgIlJldHVybiBhbiBpdGVyYXRvciBvdmVyIHRoZSAoa2V5LCB2YWx1ZSkgcGFpcnMgb2YgYSBkaWN0aW9uYXJ5LiIpCl9hZGRfZG9jKGl0ZXJsaXN0cywKICAgICAgICAgIlJldHVybiBhbiBpdGVyYXRvciBvdmVyIHRoZSAoa2V5LCBbdmFsdWVzXSkgcGFpcnMgb2YgYSBkaWN0aW9uYXJ5LiIpCgoKaWYgUFkzOgogICAgZGVmIGIocyk6CiAgICAgICAgcmV0dXJuIHMuZW5jb2RlKCJsYXRpbi0xIikKCiAgICBkZWYgdShzKToKICAgICAgICByZXR1cm4gcwogICAgdW5pY2hyID0gY2hyCiAgICBpbXBvcnQgc3RydWN0CiAgICBpbnQyYnl0ZSA9IHN0cnVjdC5TdHJ1Y3QoIj5CIikucGFjawogICAgZGVsIHN0cnVjdAogICAgYnl0ZTJpbnQgPSBvcGVyYXRvci5pdGVtZ2V0dGVyKDApCiAgICBpbmRleGJ5dGVzID0gb3BlcmF0b3IuZ2V0aXRlbQogICAgaXRlcmJ5dGVzID0gaXRlcgogICAgaW1wb3J0IGlvCiAgICBTdHJpbmdJTyA9IGlvLlN0cmluZ0lPCiAgICBCeXRlc0lPID0gaW8uQnl0ZXNJTwogICAgX2Fzc2VydENvdW50RXF1YWwgPSAiYXNzZXJ0Q291bnRFcXVhbCIKICAgIGlmIHN5cy52ZXJzaW9uX2luZm9bMV0gPD0gMToKICAgICAgICBfYXNzZXJ0UmFpc2VzUmVnZXggPSAiYXNzZXJ0UmFpc2VzUmVnZXhwIgogICAgICAgIF9hc3NlcnRSZWdleCA9ICJhc3NlcnRSZWdleHBNYXRjaGVzIgogICAgZWxzZToKICAgICAgICBfYXNzZXJ0UmFpc2VzUmVnZXggPSAiYXNzZXJ0UmFpc2VzUmVnZXgiCiAgICAgICAgX2Fzc2VydFJlZ2V4ID0gImFzc2VydFJlZ2V4IgplbHNlOgogICAgZGVmIGIocyk6CiAgICAgICAgcmV0dXJuIHMKICAgICMgV29ya2Fyb3VuZCBmb3Igc3RhbmRhbG9uZSBiYWNrc2xhc2gKCiAgICBkZWYgdShzKToKICAgICAgICByZXR1cm4gdW5pY29kZShzLnJlcGxhY2UocidcXCcsIHInXFxcXCcpLCAidW5pY29kZV9lc2NhcGUiKQogICAgdW5pY2hyID0gdW5pY2hyCiAgICBpbnQyYnl0ZSA9IGNocgoKICAgIGRlZiBieXRlMmludChicyk6CiAgICAgICAgcmV0dXJuIG9yZChic1swXSkKCiAgICBkZWYgaW5kZXhieXRlcyhidWYsIGkpOgogICAgICAgIHJldHVybiBvcmQoYnVmW2ldKQogICAgaXRlcmJ5dGVzID0gZnVuY3Rvb2xzLnBhcnRpYWwoaXRlcnRvb2xzLmltYXAsIG9yZCkKICAgIGltcG9ydCBTdHJpbmdJTwogICAgU3RyaW5nSU8gPSBCeXRlc0lPID0gU3RyaW5nSU8uU3RyaW5nSU8KICAgIF9hc3NlcnRDb3VudEVxdWFsID0gImFzc2VydEl0ZW1zRXF1YWwiCiAgICBfYXNzZXJ0UmFpc2VzUmVnZXggPSAiYXNzZXJ0UmFpc2VzUmVnZXhwIgogICAgX2Fzc2VydFJlZ2V4ID0gImFzc2VydFJlZ2V4cE1hdGNoZXMiCl9hZGRfZG9jKGIsICIiIkJ5dGUgbGl0ZXJhbCIiIikKX2FkZF9kb2ModSwgIiIiVGV4dCBsaXRlcmFsIiIiKQoKCmRlZiBhc3NlcnRDb3VudEVxdWFsKHNlbGYsICphcmdzLCAqKmt3YXJncyk6CiAgICByZXR1cm4gZ2V0YXR0cihzZWxmLCBfYXNzZXJ0Q291bnRFcXVhbCkoKmFyZ3MsICoqa3dhcmdzKQoKCmRlZiBhc3NlcnRSYWlzZXNSZWdleChzZWxmLCAqYXJncywgKiprd2FyZ3MpOgogICAgcmV0dXJuIGdldGF0dHIoc2VsZiwgX2Fzc2VydFJhaXNlc1JlZ2V4KSgqYXJncywgKiprd2FyZ3MpCgoKZGVmIGFzc2VydFJlZ2V4KHNlbGYsICphcmdzLCAqKmt3YXJncyk6CiAgICByZXR1cm4gZ2V0YXR0cihzZWxmLCBfYXNzZXJ0UmVnZXgpKCphcmdzLCAqKmt3YXJncykKCgppZiBQWTM6CiAgICBleGVjXyA9IGdldGF0dHIobW92ZXMuYnVpbHRpbnMsICJleGVjIikKCiAgICBkZWYgcmVyYWlzZSh0cCwgdmFsdWUsIHRiPU5vbmUpOgogICAgICAgIGlmIHZhbHVlIGlzIE5vbmU6CiAgICAgICAgICAgIHZhbHVlID0gdHAoKQogICAgICAgIGlmIHZhbHVlLl9fdHJhY2ViYWNrX18gaXMgbm90IHRiOgogICAgICAgICAgICByYWlzZSB2YWx1ZS53aXRoX3RyYWNlYmFjayh0YikKICAgICAgICByYWlzZSB2YWx1ZQoKZWxzZToKICAgIGRlZiBleGVjXyhfY29kZV8sIF9nbG9ic189Tm9uZSwgX2xvY3NfPU5vbmUpOgogICAgICAgICIiIkV4ZWN1dGUgY29kZSBpbiBhIG5hbWVzcGFjZS4iIiIKICAgICAgICBpZiBfZ2xvYnNfIGlzIE5vbmU6CiAgICAgICAgICAgIGZyYW1lID0gc3lzLl9nZXRmcmFtZSgxKQogICAgICAgICAgICBfZ2xvYnNfID0gZnJhbWUuZl9nbG9iYWxzCiAgICAgICAgICAgIGlmIF9sb2NzXyBpcyBOb25lOgogICAgICAgICAgICAgICAgX2xvY3NfID0gZnJhbWUuZl9sb2NhbHMKICAgICAgICAgICAgZGVsIGZyYW1lCiAgICAgICAgZWxpZiBfbG9jc18gaXMgTm9uZToKICAgICAgICAgICAgX2xvY3NfID0gX2dsb2JzXwogICAgICAgIGV4ZWMoIiIiZXhlYyBfY29kZV8gaW4gX2dsb2JzXywgX2xvY3NfIiIiKQoKICAgIGV4ZWNfKCIiImRlZiByZXJhaXNlKHRwLCB2YWx1ZSwgdGI9Tm9uZSk6CiAgICByYWlzZSB0cCwgdmFsdWUsIHRiCiIiIikKCgppZiBzeXMudmVyc2lvbl9pbmZvWzoyXSA9PSAoMywgMik6CiAgICBleGVjXygiIiJkZWYgcmFpc2VfZnJvbSh2YWx1ZSwgZnJvbV92YWx1ZSk6CiAgICBpZiBmcm9tX3ZhbHVlIGlzIE5vbmU6CiAgICAgICAgcmFpc2UgdmFsdWUKICAgIHJhaXNlIHZhbHVlIGZyb20gZnJvbV92YWx1ZQoiIiIpCmVsaWYgc3lzLnZlcnNpb25faW5mb1s6Ml0gPiAoMywgMik6CiAgICBleGVjXygiIiJkZWYgcmFpc2VfZnJvbSh2YWx1ZSwgZnJvbV92YWx1ZSk6CiAgICByYWlzZSB2YWx1ZSBmcm9tIGZyb21fdmFsdWUKIiIiKQplbHNlOgogICAgZGVmIHJhaXNlX2Zyb20odmFsdWUsIGZyb21fdmFsdWUpOgogICAgICAgIHJhaXNlIHZhbHVlCgoKcHJpbnRfID0gZ2V0YXR0cihtb3Zlcy5idWlsdGlucywgInByaW50IiwgTm9uZSkKaWYgcHJpbnRfIGlzIE5vbmU6CiAgICBkZWYgcHJpbnRfKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgIiIiVGhlIG5ldy1zdHlsZSBwcmludCBmdW5jdGlvbiBmb3IgUHl0aG9uIDIuNCBhbmQgMi41LiIiIgogICAgICAgIGZwID0ga3dhcmdzLnBvcCgiZmlsZSIsIHN5cy5zdGRvdXQpCiAgICAgICAgaWYgZnAgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIGRlZiB3cml0ZShkYXRhKToKICAgICAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoZGF0YSwgYmFzZXN0cmluZyk6CiAgICAgICAgICAgICAgICBkYXRhID0gc3RyKGRhdGEpCiAgICAgICAgICAgICMgSWYgdGhlIGZpbGUgaGFzIGFuIGVuY29kaW5nLCBlbmNvZGUgdW5pY29kZSB3aXRoIGl0LgogICAgICAgICAgICBpZiAoaXNpbnN0YW5jZShmcCwgZmlsZSkgYW5kCiAgICAgICAgICAgICAgICAgICAgaXNpbnN0YW5jZShkYXRhLCB1bmljb2RlKSBhbmQKICAgICAgICAgICAgICAgICAgICBmcC5lbmNvZGluZyBpcyBub3QgTm9uZSk6CiAgICAgICAgICAgICAgICBlcnJvcnMgPSBnZXRhdHRyKGZwLCAiZXJyb3JzIiwgTm9uZSkKICAgICAgICAgICAgICAgIGlmIGVycm9ycyBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgIGVycm9ycyA9ICJzdHJpY3QiCiAgICAgICAgICAgICAgICBkYXRhID0gZGF0YS5lbmNvZGUoZnAuZW5jb2RpbmcsIGVycm9ycykKICAgICAgICAgICAgZnAud3JpdGUoZGF0YSkKICAgICAgICB3YW50X3VuaWNvZGUgPSBGYWxzZQogICAgICAgIHNlcCA9IGt3YXJncy5wb3AoInNlcCIsIE5vbmUpCiAgICAgICAgaWYgc2VwIGlzIG5vdCBOb25lOgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHNlcCwgdW5pY29kZSk6CiAgICAgICAgICAgICAgICB3YW50X3VuaWNvZGUgPSBUcnVlCiAgICAgICAgICAgIGVsaWYgbm90IGlzaW5zdGFuY2Uoc2VwLCBzdHIpOgogICAgICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJzZXAgbXVzdCBiZSBOb25lIG9yIGEgc3RyaW5nIikKICAgICAgICBlbmQgPSBrd2FyZ3MucG9wKCJlbmQiLCBOb25lKQogICAgICAgIGlmIGVuZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShlbmQsIHVuaWNvZGUpOgogICAgICAgICAgICAgICAgd2FudF91bmljb2RlID0gVHJ1ZQogICAgICAgICAgICBlbGlmIG5vdCBpc2luc3RhbmNlKGVuZCwgc3RyKToKICAgICAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigiZW5kIG11c3QgYmUgTm9uZSBvciBhIHN0cmluZyIpCiAgICAgICAgaWYga3dhcmdzOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoImludmFsaWQga2V5d29yZCBhcmd1bWVudHMgdG8gcHJpbnQoKSIpCiAgICAgICAgaWYgbm90IHdhbnRfdW5pY29kZToKICAgICAgICAgICAgZm9yIGFyZyBpbiBhcmdzOgogICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShhcmcsIHVuaWNvZGUpOgogICAgICAgICAgICAgICAgICAgIHdhbnRfdW5pY29kZSA9IFRydWUKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGlmIHdhbnRfdW5pY29kZToKICAgICAgICAgICAgbmV3bGluZSA9IHVuaWNvZGUoIlxuIikKICAgICAgICAgICAgc3BhY2UgPSB1bmljb2RlKCIgIikKICAgICAgICBlbHNlOgogICAgICAgICAgICBuZXdsaW5lID0gIlxuIgogICAgICAgICAgICBzcGFjZSA9ICIgIgogICAgICAgIGlmIHNlcCBpcyBOb25lOgogICAgICAgICAgICBzZXAgPSBzcGFjZQogICAgICAgIGlmIGVuZCBpcyBOb25lOgogICAgICAgICAgICBlbmQgPSBuZXdsaW5lCiAgICAgICAgZm9yIGksIGFyZyBpbiBlbnVtZXJhdGUoYXJncyk6CiAgICAgICAgICAgIGlmIGk6CiAgICAgICAgICAgICAgICB3cml0ZShzZXApCiAgICAgICAgICAgIHdyaXRlKGFyZykKICAgICAgICB3cml0ZShlbmQpCmlmIHN5cy52ZXJzaW9uX2luZm9bOjJdIDwgKDMsIDMpOgogICAgX3ByaW50ID0gcHJpbnRfCgogICAgZGVmIHByaW50XygqYXJncywgKiprd2FyZ3MpOgogICAgICAgIGZwID0ga3dhcmdzLmdldCgiZmlsZSIsIHN5cy5zdGRvdXQpCiAgICAgICAgZmx1c2ggPSBrd2FyZ3MucG9wKCJmbHVzaCIsIEZhbHNlKQogICAgICAgIF9wcmludCgqYXJncywgKiprd2FyZ3MpCiAgICAgICAgaWYgZmx1c2ggYW5kIGZwIGlzIG5vdCBOb25lOgogICAgICAgICAgICBmcC5mbHVzaCgpCgpfYWRkX2RvYyhyZXJhaXNlLCAiIiJSZXJhaXNlIGFuIGV4Y2VwdGlvbi4iIiIpCgppZiBzeXMudmVyc2lvbl9pbmZvWzA6Ml0gPCAoMywgNCk6CiAgICBkZWYgd3JhcHMod3JhcHBlZCwgYXNzaWduZWQ9ZnVuY3Rvb2xzLldSQVBQRVJfQVNTSUdOTUVOVFMsCiAgICAgICAgICAgICAgdXBkYXRlZD1mdW5jdG9vbHMuV1JBUFBFUl9VUERBVEVTKToKICAgICAgICBkZWYgd3JhcHBlcihmKToKICAgICAgICAgICAgZiA9IGZ1bmN0b29scy53cmFwcyh3cmFwcGVkLCBhc3NpZ25lZCwgdXBkYXRlZCkoZikKICAgICAgICAgICAgZi5fX3dyYXBwZWRfXyA9IHdyYXBwZWQKICAgICAgICAgICAgcmV0dXJuIGYKICAgICAgICByZXR1cm4gd3JhcHBlcgplbHNlOgogICAgd3JhcHMgPSBmdW5jdG9vbHMud3JhcHMKCgpkZWYgd2l0aF9tZXRhY2xhc3MobWV0YSwgKmJhc2VzKToKICAgICIiIkNyZWF0ZSBhIGJhc2UgY2xhc3Mgd2l0aCBhIG1ldGFjbGFzcy4iIiIKICAgICMgVGhpcyByZXF1aXJlcyBhIGJpdCBvZiBleHBsYW5hdGlvbjogdGhlIGJhc2ljIGlkZWEgaXMgdG8gbWFrZSBhIGR1bW15CiAgICAjIG1ldGFjbGFzcyBmb3Igb25lIGxldmVsIG9mIGNsYXNzIGluc3RhbnRpYXRpb24gdGhhdCByZXBsYWNlcyBpdHNlbGYgd2l0aAogICAgIyB0aGUgYWN0dWFsIG1ldGFjbGFzcy4KICAgIGNsYXNzIG1ldGFjbGFzcyhtZXRhKToKCiAgICAgICAgZGVmIF9fbmV3X18oY2xzLCBuYW1lLCB0aGlzX2Jhc2VzLCBkKToKICAgICAgICAgICAgcmV0dXJuIG1ldGEobmFtZSwgYmFzZXMsIGQpCiAgICByZXR1cm4gdHlwZS5fX25ld19fKG1ldGFjbGFzcywgJ3RlbXBvcmFyeV9jbGFzcycsICgpLCB7fSkKCgpkZWYgYWRkX21ldGFjbGFzcyhtZXRhY2xhc3MpOgogICAgIiIiQ2xhc3MgZGVjb3JhdG9yIGZvciBjcmVhdGluZyBhIGNsYXNzIHdpdGggYSBtZXRhY2xhc3MuIiIiCiAgICBkZWYgd3JhcHBlcihjbHMpOgogICAgICAgIG9yaWdfdmFycyA9IGNscy5fX2RpY3RfXy5jb3B5KCkKICAgICAgICBzbG90cyA9IG9yaWdfdmFycy5nZXQoJ19fc2xvdHNfXycpCiAgICAgICAgaWYgc2xvdHMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoc2xvdHMsIHN0cik6CiAgICAgICAgICAgICAgICBzbG90cyA9IFtzbG90c10KICAgICAgICAgICAgZm9yIHNsb3RzX3ZhciBpbiBzbG90czoKICAgICAgICAgICAgICAgIG9yaWdfdmFycy5wb3Aoc2xvdHNfdmFyKQogICAgICAgIG9yaWdfdmFycy5wb3AoJ19fZGljdF9fJywgTm9uZSkKICAgICAgICBvcmlnX3ZhcnMucG9wKCdfX3dlYWtyZWZfXycsIE5vbmUpCiAgICAgICAgcmV0dXJuIG1ldGFjbGFzcyhjbHMuX19uYW1lX18sIGNscy5fX2Jhc2VzX18sIG9yaWdfdmFycykKICAgIHJldHVybiB3cmFwcGVyCgoKZGVmIHB5dGhvbl8yX3VuaWNvZGVfY29tcGF0aWJsZShrbGFzcyk6CiAgICAiIiIKICAgIEEgZGVjb3JhdG9yIHRoYXQgZGVmaW5lcyBfX3VuaWNvZGVfXyBhbmQgX19zdHJfXyBtZXRob2RzIHVuZGVyIFB5dGhvbiAyLgogICAgVW5kZXIgUHl0aG9uIDMgaXQgZG9lcyBub3RoaW5nLgoKICAgIFRvIHN1cHBvcnQgUHl0aG9uIDIgYW5kIDMgd2l0aCBhIHNpbmdsZSBjb2RlIGJhc2UsIGRlZmluZSBhIF9fc3RyX18gbWV0aG9kCiAgICByZXR1cm5pbmcgdGV4dCBhbmQgYXBwbHkgdGhpcyBkZWNvcmF0b3IgdG8gdGhlIGNsYXNzLgogICAgIiIiCiAgICBpZiBQWTI6CiAgICAgICAgaWYgJ19fc3RyX18nIG5vdCBpbiBrbGFzcy5fX2RpY3RfXzoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiQHB5dGhvbl8yX3VuaWNvZGVfY29tcGF0aWJsZSBjYW5ub3QgYmUgYXBwbGllZCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRvICVzIGJlY2F1c2UgaXQgZG9lc24ndCBkZWZpbmUgX19zdHJfXygpLiIgJQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtsYXNzLl9fbmFtZV9fKQogICAgICAgIGtsYXNzLl9fdW5pY29kZV9fID0ga2xhc3MuX19zdHJfXwogICAgICAgIGtsYXNzLl9fc3RyX18gPSBsYW1iZGEgc2VsZjogc2VsZi5fX3VuaWNvZGVfXygpLmVuY29kZSgndXRmLTgnKQogICAgcmV0dXJuIGtsYXNzCgoKIyBDb21wbGV0ZSB0aGUgbW92ZXMgaW1wbGVtZW50YXRpb24uCiMgVGhpcyBjb2RlIGlzIGF0IHRoZSBlbmQgb2YgdGhpcyBtb2R1bGUgdG8gc3BlZWQgdXAgbW9kdWxlIGxvYWRpbmcuCiMgVHVybiB0aGlzIG1vZHVsZSBpbnRvIGEgcGFja2FnZS4KX19wYXRoX18gPSBbXSAgIyByZXF1aXJlZCBmb3IgUEVQIDMwMiBhbmQgUEVQIDQ1MQpfX3BhY2thZ2VfXyA9IF9fbmFtZV9fICAjIHNlZSBQRVAgMzY2IEBSZXNlcnZlZEFzc2lnbm1lbnQKaWYgZ2xvYmFscygpLmdldCgiX19zcGVjX18iKSBpcyBub3QgTm9uZToKICAgIF9fc3BlY19fLnN1Ym1vZHVsZV9zZWFyY2hfbG9jYXRpb25zID0gW10gICMgUEVQIDQ1MSBAVW5kZWZpbmVkVmFyaWFibGUKIyBSZW1vdmUgb3RoZXIgc2l4IG1ldGEgcGF0aCBpbXBvcnRlcnMsIHNpbmNlIHRoZXkgY2F1c2UgcHJvYmxlbXMuIFRoaXMgY2FuCiMgaGFwcGVuIGlmIHNpeCBpcyByZW1vdmVkIGZyb20gc3lzLm1vZHVsZXMgYW5kIHRoZW4gcmVsb2FkZWQuIChTZXR1cHRvb2xzIGRvZXMKIyB0aGlzIGZvciBzb21lIHJlYXNvbi4pCmlmIHN5cy5tZXRhX3BhdGg6CiAgICBmb3IgaSwgaW1wb3J0ZXIgaW4gZW51bWVyYXRlKHN5cy5tZXRhX3BhdGgpOgogICAgICAgICMgSGVyZSdzIHNvbWUgcmVhbCBuYXN0aW5lc3M6IEFub3RoZXIgImluc3RhbmNlIiBvZiB0aGUgc2l4IG1vZHVsZSBtaWdodAogICAgICAgICMgYmUgZmxvYXRpbmcgYXJvdW5kLiBUaGVyZWZvcmUsIHdlIGNhbid0IHVzZSBpc2luc3RhbmNlKCkgdG8gY2hlY2sgZm9yCiAgICAgICAgIyB0aGUgc2l4IG1ldGEgcGF0aCBpbXBvcnRlciwgc2luY2UgdGhlIG90aGVyIHNpeCBpbnN0YW5jZSB3aWxsIGhhdmUKICAgICAgICAjIGluc2VydGVkIGFuIGltcG9ydGVyIHdpdGggZGlmZmVyZW50IGNsYXNzLgogICAgICAgIGlmICh0eXBlKGltcG9ydGVyKS5fX25hbWVfXyA9PSAiX1NpeE1ldGFQYXRoSW1wb3J0ZXIiIGFuZAogICAgICAgICAgICAgICAgaW1wb3J0ZXIubmFtZSA9PSBfX25hbWVfXyk6CiAgICAgICAgICAgIGRlbCBzeXMubWV0YV9wYXRoW2ldCiAgICAgICAgICAgIGJyZWFrCiAgICBkZWwgaSwgaW1wb3J0ZXIKIyBGaW5hbGx5LCBhZGQgdGhlIGltcG9ydGVyIHRvIHRoZSBtZXRhIHBhdGggaW1wb3J0IGhvb2suCnN5cy5tZXRhX3BhdGguYXBwZW5kKF9pbXBvcnRlcikKUEsBAhQDFAAAAAAABLwrS4+n8VJ3AAAAdwAAABMAAAAAAAAAAAAAAIABAAAAAGFuc2libGUvX19pbml0X18ucHlQSwECFAMUAAAAAAAEvCtLncXxa0gAAABIAAAAIAAAAAAAAAAAAAAAgAGoAAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvX19pbml0X18ucHlQSwECFAMUAAAAAAAEvCtLBTrsSmzzAABs8wAAFQAAAAAAAAAAAAAAgAEuAQAAYW5zaWJsZV9tb2R1bGVfZWMyLnB5UEsBAhQDFAAAAAAABLwrSzvfOZUwigEAMIoBAB0AAAAAAAAAAAAAAIABzfQAAGFuc2libGUvbW9kdWxlX3V0aWxzL2Jhc2ljLnB5UEsBAhQDFAAAAAAABLwrSyl0CnTvWwAA71sAABsAAAAAAAAAAAAAAIABOH8CAGFuc2libGUvbW9kdWxlX3V0aWxzL2VjMi5weVBLAQIUAxQAAAAAAAS8K0sYF3L1AREAAAERAAAkAAAAAAAAAAAAAACAAWDbAgBhbnNpYmxlL21vZHVsZV91dGlscy9zaXgvX19pbml0X18ucHlQSwECFAMUAAAAAAAEvCtLtdgEBiUwAAAlMAAAHQAAAAAAAAAAAAAAgAGj7AIAYW5zaWJsZS9tb2R1bGVfdXRpbHMvX3RleHQucHlQSwECFAMUAAAAAAAEvCtLJdy0fhMQAAATEAAAIgAAAAAAAAAAAAAAgAEDHQMAYW5zaWJsZS9tb2R1bGVfdXRpbHMvcHljb21wYXQyNC5weVBLAQIUAxQAAAAAAAS8K0s0FWdOhg8AAIYPAAAdAAAAAAAAAAAAAACAAVYtAwBhbnNpYmxlL21vZHVsZV91dGlscy9jbG91ZC5weVBLAQIUAxQAAAAAAAS8K0s44sfRkXUAAJF1AAAgAAAAAAAAAAAAAACAARc9AwBhbnNpYmxlL21vZHVsZV91dGlscy9zaXgvX3NpeC5weVBLBQYAAAAACgAKAOwCAADmsgMAAAA="""
def invoke_module(module, modlib_path, json_params):
    pythonpath = os.environ.get('PYTHONPATH')
    if pythonpath:
        os.environ['PYTHONPATH'] = ':'.join((modlib_path, pythonpath))
    else:
        os.environ['PYTHONPATH'] = modlib_path
    p = subprocess.Popen(['/usr/bin/python', module], env=os.environ, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
    (stdout, stderr) = p.communicate(json_params)
    if not isinstance(stderr, (bytes, unicode)):
        stderr = stderr.read()
    if not isinstance(stdout, (bytes, unicode)):
        stdout = stdout.read()
    if PY3:
        sys.stderr.buffer.write(stderr)
        sys.stdout.buffer.write(stdout)
    else:
        sys.stderr.write(stderr)
        sys.stdout.write(stdout)
    return p.returncode
def debug(command, zipped_mod, json_params):
    basedir = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'debug_dir')
    args_path = os.path.join(basedir, 'args')
    script_path = os.path.join(basedir, 'ansible_module_ec2.py')
    if command == 'explode':
        z = zipfile.ZipFile(zipped_mod)
        for filename in z.namelist():
            if filename.startswith('/'):
                raise Exception('Something wrong with this module zip file: should not contain absolute paths')
            dest_filename = os.path.join(basedir, filename)
            if dest_filename.endswith(os.path.sep) and not os.path.exists(dest_filename):
                os.makedirs(dest_filename)
            else:
                directory = os.path.dirname(dest_filename)
                if not os.path.exists(directory):
                    os.makedirs(directory)
                f = open(dest_filename, 'wb')
                f.write(z.read(filename))
                f.close()
        f = open(args_path, 'wb')
        f.write(json_params)
        f.close()
        print('Module expanded into:')
        print('%s' % basedir)
        exitcode = 0
    elif command == 'execute':
        pythonpath = os.environ.get('PYTHONPATH')
        if pythonpath:
            os.environ['PYTHONPATH'] = ':'.join((basedir, pythonpath))
        else:
            os.environ['PYTHONPATH'] = basedir
        p = subprocess.Popen(['/usr/bin/python', script_path, args_path],
                env=os.environ, shell=False, stdout=subprocess.PIPE,
                stderr=subprocess.PIPE, stdin=subprocess.PIPE)
        (stdout, stderr) = p.communicate()
        if not isinstance(stderr, (bytes, unicode)):
            stderr = stderr.read()
        if not isinstance(stdout, (bytes, unicode)):
            stdout = stdout.read()
        if PY3:
            sys.stderr.buffer.write(stderr)
            sys.stdout.buffer.write(stdout)
        else:
            sys.stderr.write(stderr)
            sys.stdout.write(stdout)
        return p.returncode
    elif command == 'excommunicate':
        sys.argv = ['ec2', args_path]
        sys.path.insert(0, basedir)
        from ansible_module_ec2 import main
        main()
        print('WARNING: Module returned to wrapper instead of exiting')
        sys.exit(1)
    else:
        print('WARNING: Unknown debug command.  Doing nothing.')
        exitcode = 0
    return exitcode
if __name__ == '__main__':
    ANSIBALLZ_PARAMS = json.dumps({"ANSIBLE_MODULE_ARGS": json.load(sys.stdin)})
    if PY3:
        ANSIBALLZ_PARAMS = ANSIBALLZ_PARAMS.encode('utf-8')
    try:
        temp_path = tempfile.mkdtemp(prefix='ansible_')
        zipped_mod = os.path.join(temp_path, 'ansible_modlib.zip')
        modlib = open(zipped_mod, 'wb')
        modlib.write(base64.b64decode(ZIPDATA))
        modlib.close()
        if len(sys.argv) == 2:
            exitcode = debug(sys.argv[1], zipped_mod, ANSIBALLZ_PARAMS)
        else:
            z = zipfile.ZipFile(zipped_mod, mode='r')
            module = os.path.join(temp_path, 'ansible_module_ec2.py')
            f = open(module, 'wb')
            f.write(z.read('ansible_module_ec2.py'))
            f.close()
            z = zipfile.ZipFile(zipped_mod, mode='a')
            sitecustomize = u'import sys\nsys.path.insert(0,"%s")\n' %  zipped_mod
            sitecustomize = sitecustomize.encode('utf-8')
            zinfo = zipfile.ZipInfo()
            zinfo.filename = 'sitecustomize.py'
            zinfo.date_time = ( 2017, 9, 11, 23, 32, 9)
            z.writestr(zinfo, sitecustomize)
            z.close()
            exitcode = invoke_module(module, zipped_mod, ANSIBALLZ_PARAMS)
    finally:
        try:
            shutil.rmtree(temp_path)
        except OSError:
            pass
    sys.exit(exitcode)