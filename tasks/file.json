{
  "input_method": "stdin", 
  "description": "Sets attributes of files, symlinks, and directories, or removes files/symlinks/directories. Many other modules support the same options as the C(file) module - including M(copy), M(template), and M(assemble).", 
  "parameters": {
    "src": {
      "type": "Optional[String[0]]", 
      "description": "path of the file to link to (applies only to C(state=link)). Will accept absolute, relative and nonexisting paths. Relative paths are not expanded."
    }, 
    "force": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "force the creation of the symlinks in two cases: the source file does not exist (but will appear later); the destination exists and is a file (so, we need to unlink the \"path\" file and create symlink to the \"src\" file in place of it)."
    }, 
    "unsafe_writes": {
      "type": "Optional[String[0]]", 
      "description": "Normally this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, sometimes systems are configured or just broken in ways that prevent this. One example are docker mounted files, they cannot be updated atomically and can only be done in an unsafe manner."
    }, 
    "selevel": {
      "type": "Optional[String[0]]", 
      "description": "Level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). C(_default) feature works as for I(seuser)."
    }, 
    "seuser": {
      "type": "Optional[String[0]]", 
      "description": "User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available."
    }, 
    "recurse": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "recursively set the specified file attributes (applies only to state=directory)"
    }, 
    "serole": {
      "type": "Optional[String[0]]", 
      "description": "Role part of SELinux file context, C(_default) feature works as for I(seuser)."
    }, 
    "state": {
      "type": "Optional[Enum[\"file\", \"link\", \"directory\", \"hard\", \"touch\", \"absent\"]]", 
      "description": "If C(directory), all immediate subdirectories will be created if they do not exist, since 1.7 they will be created with the supplied permissions. If C(file), the file will NOT be created if it does not exist, see the M(copy) or M(template) module if you want that behavior.  If C(link), the symbolic link will be created or changed. Use C(hard) for hardlinks. If C(absent), directories will be recursively deleted, and files or symlinks will be unlinked. Note that C(file) will not fail if the C(path) does not exist as the state did not change. If C(touch) (new in 1.4), an empty file will be created if the C(path) does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way `touch` works from the command line)."
    }, 
    "mode": {
      "type": "Optional[String[0]]", 
      "description": "Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r))."
    }, 
    "follow": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "This flag indicates that filesystem links, if they exist, should be followed."
    }, 
    "owner": {
      "type": "Optional[String[0]]", 
      "description": "Name of the user that should own the file/directory, as would be fed to I(chown)."
    }, 
    "group": {
      "type": "Optional[String[0]]", 
      "description": "Name of the group that should own the file/directory, as would be fed to I(chown)."
    }, 
    "path": {
      "type": "String[0]", 
      "description": "path to the file being managed.  Aliases: I(dest), I(name)"
    }, 
    "attributes": {
      "type": "Optional[String[0]]", 
      "description": "Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr)."
    }, 
    "setype": {
      "type": "Optional[String[0]]", 
      "description": "Type part of SELinux file context, C(_default) feature works as for I(seuser)."
    }
  }
}