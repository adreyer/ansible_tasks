#!/usr/bin/python
# -*- coding: utf-8 -*-
ANSIBALLZ_WRAPPER = True # For test-module script to tell this is a ANSIBALLZ_WRAPPER
import os
import os.path
import sys
import __main__
scriptdir = None
try:
    scriptdir = os.path.dirname(os.path.abspath(__main__.__file__))
except (AttributeError, OSError):
    pass
if scriptdir is not None:
    sys.path = [p for p in sys.path if p != scriptdir]
import base64
import json
import shutil
import zipfile
import tempfile
import subprocess
if sys.version_info < (3,):
    bytes = str
    PY3 = False
else:
    unicode = str
    PY3 = True
try:
    from io import BytesIO as IOStream
except ImportError:
    from StringIO import StringIO as IOStream
ZIPDATA = """UEsDBBQAAAAAAAC8K0uPp/FSdwAAAHcAAAATAAAAYW5zaWJsZS9fX2luaXRfXy5weWZyb20gcGtndXRpbCBpbXBvcnQgZXh0ZW5kX3BhdGgKX19wYXRoX189ZXh0ZW5kX3BhdGgoX19wYXRoX18sX19uYW1lX18pCl9fdmVyc2lvbl9fPSIyLjQuMCIKX19hdXRob3JfXz0iQW5zaWJsZSwgSW5jLiIKUEsDBBQAAAAAAAC8K0udxfFrSAAAAEgAAAAgAAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvX19pbml0X18ucHlmcm9tIHBrZ3V0aWwgaW1wb3J0IGV4dGVuZF9wYXRoCl9fcGF0aF9fPWV4dGVuZF9wYXRoKF9fcGF0aF9fLF9fbmFtZV9fKQpQSwMEFAAAAAAAALwrS+PuMfsSNAAAEjQAACUAAABhbnNpYmxlX21vZHVsZV9nY3BfYmFja2VuZF9zZXJ2aWNlLnB5IyEvdXNyL2Jpbi9weXRob24KIyBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLgojCiMgVGhpcyBmaWxlIGlzIHBhcnQgb2YgQW5zaWJsZQojCiMgQW5zaWJsZSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiMgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKIyB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcgojIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCiMKIyBBbnNpYmxlIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiMgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKIyBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCiMgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KIwojIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCiMgYWxvbmcgd2l0aCBBbnNpYmxlLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgoKQU5TSUJMRV9NRVRBREFUQSA9IHsnbWV0YWRhdGFfdmVyc2lvbic6ICcxLjAnLAogICAgICAgICAgICAgICAgICAgICdzdGF0dXMnOiBbJ3ByZXZpZXcnXSwKICAgICAgICAgICAgICAgICAgICAnc3VwcG9ydGVkX2J5JzogJ2NvbW11bml0eSd9CkRPQ1VNRU5UQVRJT04gPSAnJycKbW9kdWxlOiBnY3BfYmFja2VuZF9zZXJ2aWNlCnZlcnNpb25fYWRkZWQ6ICIyLjQiCnNob3J0X2Rlc2NyaXB0aW9uOiBDcmVhdGUgb3IgRGVzdHJveSBhIEJhY2tlbmQgU2VydmljZS4KZGVzY3JpcHRpb246CiAgICAtIENyZWF0ZSBvciBEZXN0cm95IGEgQmFja2VuZCBTZXJ2aWNlLiAgU2VlCiAgICAgIFUoaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2NvbXB1dGUvZG9jcy9sb2FkLWJhbGFuY2luZy9odHRwL2JhY2tlbmQtc2VydmljZSkgZm9yIGFuIG92ZXJ2aWV3LgogICAgICBGdWxsIGluc3RhbGwvY29uZmlndXJhdGlvbiBpbnN0cnVjdGlvbnMgZm9yIHRoZSBHb29nbGUgQ2xvdWQgbW9kdWxlcyBjYW4KICAgICAgYmUgZm91bmQgaW4gdGhlIGNvbW1lbnRzIG9mIGFuc2libGUvdGVzdC9nY2VfdGVzdHMucHkuCnJlcXVpcmVtZW50czoKICAtICJweXRob24gPj0gMi42IgogIC0gImFwYWNoZS1saWJjbG91ZCA+PSAxLjMuMCIKbm90ZXM6CiAgLSBVcGRhdGUgaXMgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQuCiAgLSBPbmx5IGdsb2JhbCBiYWNrZW5kIHNlcnZpY2VzIGFyZSBjdXJyZW50bHkgc3VwcG9ydGVkLiBSZWdpb25hbCBiYWNrZW5kcyBub3QgY3VycmVudGx5IHN1cHBvcnRlZC4KICAtIEludGVybmFsIGxvYWQgYmFsYW5jaW5nIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkLgphdXRob3I6CiAgLSAiVG9tIE1lbGVuZGV6IChAc3VwZXJ0b20pIDx0b21Ac3VwZXJ0b20uY29tPiIKb3B0aW9uczoKICBiYWNrZW5kX3NlcnZpY2VfbmFtZToKICAgIGRlc2NyaXB0aW9uOgogICAgICAgLSBOYW1lIG9mIHRoZSBCYWNrZW5kIFNlcnZpY2UuCiAgICByZXF1aXJlZDogdHJ1ZQogIGJhY2tlbmRzOgogICAgZGVzY3JpcHRpb246CiAgICAgICAtIExpc3Qgb2YgYmFja2VuZHMgdGhhdCBtYWtlIHVwIHRoZSBiYWNrZW5kIHNlcnZpY2UuIEEgYmFja2VuZCBpcyBtYWRlIHVwIG9mCiAgICAgICAgIGFuIGluc3RhbmNlIGdyb3VwIGFuZCBvcHRpb25hbGx5IHNldmVyYWwgb3RoZXIgcGFyYW1ldGVycy4gIFNlZQogICAgICAgICBVKGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9jb21wdXRlL2RvY3MvcmVmZXJlbmNlL2xhdGVzdC9iYWNrZW5kU2VydmljZXMpCiAgICAgICAgIGZvciBkZXRhaWxzLgogICAgcmVxdWlyZWQ6IHRydWUKICBoZWFsdGhjaGVja3M6CiAgICBkZXNjcmlwdGlvbjoKICAgICAgIC0gTGlzdCBvZiBoZWFsdGhjaGVja3MuIE9ubHkgb25lIGhlYWx0aGNoZWNrIGlzIHN1cHBvcnRlZC4KICAgIHJlcXVpcmVkOiB0cnVlCiAgZW5hYmxlX2NkbjoKICAgIGRlc2NyaXB0aW9uOgogICAgICAgLSBJZiB0cnVlLCBlbmFibGUgQ2xvdWQgQ0ROIGZvciB0aGlzIEJhY2tlbmQgU2VydmljZS4KICAgIHJlcXVpcmVkOiBmYWxzZQogIHBvcnRfbmFtZToKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIE5hbWUgb2YgdGhlIHBvcnQgb24gdGhlIG1hbmFnZWQgaW5zdGFuY2UgZ3JvdXAgKE1JRykgdGhhdCBiYWNrZW5kCiAgICAgICAgc2VydmljZXMgY2FuIGZvcndhcmQgZGF0YSB0by4gUmVxdWlyZWQgZm9yIGV4dGVybmFsIGxvYWQgYmFsYW5jaW5nLgogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBudWxsCiAgcHJvdG9jb2w6CiAgICBkZXNjcmlwdGlvbjoKICAgICAgIC0gVGhlIHByb3RvY29sIHRoaXMgQmFja2VuZCBTZXJ2aWNlIHVzZXMgdG8gY29tbXVuaWNhdGUgd2l0aCBiYWNrZW5kcy4KICAgICAgICAgUG9zc2libGUgdmFsdWVzIGFyZSBIVFRQLCBIVFRQUywgVENQLCBhbmQgU1NMLiBUaGUgZGVmYXVsdCBpcyBIVFRQLgogICAgcmVxdWlyZWQ6IGZhbHNlCiAgdGltZW91dDoKICAgIGRlc2NyaXB0aW9uOgogICAgICAgLSBIb3cgbWFueSBzZWNvbmRzIHRvIHdhaXQgZm9yIHRoZSBiYWNrZW5kIGJlZm9yZSBjb25zaWRlcmluZyBpdCBhIGZhaWxlZAogICAgICAgICByZXF1ZXN0LiBEZWZhdWx0IGlzIDMwIHNlY29uZHMuIFZhbGlkIHJhbmdlIGlzIDEtODY0MDAuCiAgICByZXF1aXJlZDogZmFsc2UKICBzZXJ2aWNlX2FjY291bnRfZW1haWw6CiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBTZXJ2aWNlIGFjY291bnQgZW1haWwKICAgIHJlcXVpcmVkOiBmYWxzZQogICAgZGVmYXVsdDogbnVsbAogIGNyZWRlbnRpYWxzX2ZpbGU6CiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBQYXRoIHRvIHRoZSBKU09OIGZpbGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBzZXJ2aWNlIGFjY291bnQgZW1haWwuCiAgICBkZWZhdWx0OiBudWxsCiAgICByZXF1aXJlZDogZmFsc2UKICBwcm9qZWN0X2lkOgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gR0NFIHByb2plY3QgSUQuCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6IG51bGwKICBzdGF0ZToKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIERlc2lyZWQgc3RhdGUgb2YgdGhlIHJlc291cmNlCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6ICJwcmVzZW50IgogICAgY2hvaWNlczogWyJhYnNlbnQiLCAicHJlc2VudCJdCicnJwoKRVhBTVBMRVMgPSAnJycKLSBuYW1lOiBDcmVhdGUgTWluaW11bSBCYWNrZW5kIFNlcnZpY2UKICBnY3BfYmFja2VuZF9zZXJ2aWNlOgogICAgc2VydmljZV9hY2NvdW50X2VtYWlsOiAie3sgc2VydmljZV9hY2NvdW50X2VtYWlsIH19IgogICAgY3JlZGVudGlhbHNfZmlsZTogInt7IGNyZWRlbnRpYWxzX2ZpbGUgfX0iCiAgICBwcm9qZWN0X2lkOiAie3sgcHJvamVjdF9pZCB9fSIKICAgIGJhY2tlbmRfc2VydmljZV9uYW1lOiAie3sgYmVzIH19IgogICAgYmFja2VuZHM6CiAgICAtIGluc3RhbmNlX2dyb3VwOiBtYW5hZ2VkX2luc3RhbmNlX2dyb3VwXzEKICAgIGhlYWx0aGNoZWNrczoKICAgIC0gbmFtZTogaGVhbHRoY2hlY2tfbmFtZV9mb3JfYmFja2VuZF9zZXJ2aWNlCiAgICBwb3J0X25hbWU6IG15aHR0cHBvcnQKICAgIHN0YXRlOiBwcmVzZW50CgotIG5hbWU6IENyZWF0ZSBCRVMgd2l0aCBleHRlbmRlZCBiYWNrZW5kIHBhcmFtZXRlcnMKICBnY3BfYmFja2VuZF9zZXJ2aWNlOgogICAgc2VydmljZV9hY2NvdW50X2VtYWlsOiAie3sgc2VydmljZV9hY2NvdW50X2VtYWlsIH19IgogICAgY3JlZGVudGlhbHNfZmlsZTogInt7IGNyZWRlbnRpYWxzX2ZpbGUgfX0iCiAgICBwcm9qZWN0X2lkOiAie3sgcHJvamVjdF9pZCB9fSIKICAgIGJhY2tlbmRfc2VydmljZV9uYW1lOiAie3sgYmVzIH19IgogICAgYmFja2VuZHM6CiAgICAtIGluc3RhbmNlX2dyb3VwOiBtYW5hZ2VkX2luc3RhbmNlX2dyb3VwXzEKICAgICAgbWF4X3V0aWxpemF0aW9uOiAwLjYKICAgICAgbWF4X3JhdGU6IDEwCiAgICAtIGluc3RhbmNlX2dyb3VwOiBtYW5hZ2VkX2luc3RhbmNlX2dyb3VwXzIKICAgICAgbWF4X3V0aWxpemF0aW9uOiAwLjUKICAgICAgbWF4X3JhdGU6IDQKICAgIGhlYWx0aGNoZWNrczoKICAgIC0gbmFtZTogaGVhbHRoY2hlY2tfbmFtZV9mb3JfYmFja2VuZF9zZXJ2aWNlCiAgICBwb3J0X25hbWU6IG15aHR0cHBvcnQKICAgIHN0YXRlOiBwcmVzZW50CiAgICB0aW1lb3V0OiA2MAonJycKClJFVFVSTiA9ICcnJwpiYWNrZW5kX3NlcnZpY2VfY3JlYXRlZDoKICAgIGRlc2NyaXB0aW9uOiBJbmRpY2F0b3IgQmFja2VuZCBTZXJ2aWNlIHdhcyBjcmVhdGVkLgogICAgcmV0dXJuZWQ6IFdoZW4gYSBCYWNrZW5kIFNlcnZpY2UgaXMgY3JlYXRlZC4KICAgIHR5cGU6IGJvb2xlYW4KICAgIHNhbXBsZTogIlRydWUiCmJhY2tlbmRfc2VydmljZV9kZWxldGVkOgogICAgZGVzY3JpcHRpb246IEluZGljYXRvciBCYWNrZW5kIFNlcnZpY2Ugd2FzIGRlbGV0ZWQuCiAgICByZXR1cm5lZDogV2hlbiBhIEJhY2tlbmQgU2VydmljZSBpcyBkZWxldGVkLgogICAgdHlwZTogYm9vbGVhbgogICAgc2FtcGxlOiAiVHJ1ZSIKYmFja2VuZF9zZXJ2aWNlX25hbWU6CiAgICBkZXNjcmlwdGlvbjogTmFtZSBvZiB0aGUgQmFja2VuZCBTZXJ2aWNlLgogICAgcmV0dXJuZWQ6IEFsd2F5cy4KICAgIHR5cGU6IHN0cmluZwogICAgc2FtcGxlOiAibXktYmFja2VuZC1zZXJ2aWNlIgpiYWNrZW5kczoKICAgIGRlc2NyaXB0aW9uOiBMaXN0IG9mIGJhY2tlbmRzIChjb21wcmlzZWQgb2YgaW5zdGFuY2VfZ3JvdXApIHRoYXQKICAgICAgICAgICAgICAgICBtYWtlIHVwIGEgQmFja2VuZCBTZXJ2aWNlLgogICAgcmV0dXJuZWQ6IFdoZW4gYSBCYWNrZW5kIFNlcnZpY2UgZXhpc3RzLgogICAgdHlwZTogbGlzdAogICAgc2FtcGxlOiAiWyB7ICdpbnN0YW5jZV9ncm91cCc6ICdtaWdfb25lJywgJ3pvbmUnOiAndXMtY2VudHJhbDEtYid9IF0iCmVuYWJsZV9jZG46CiAgICBkZXNjcmlwdGlvbjogSWYgQ2xvdWQgQ0ROIGlzIGVuYWJsZWQuIG51bGwgaWYgbm90IHNldC4KICAgIHJldHVybmVkOiBXaGVuIGEgYmFja2VuZCBzZXJ2aWNlIGV4aXN0cy4KICAgIHR5cGU6IGJvb2xlYW4KICAgIHNhbXBsZTogIlRydWUiCmhlYWx0aGNoZWNrczoKICAgIGRlc2NyaXB0aW9uOiBMaXN0IG9mIGhlYWx0aGNoZWNrcyBhcHBsaWVkIHRvIHRoZSBCYWNrZW5kIFNlcnZpY2UuCiAgICByZXR1cm5lZDogV2hlbiBhIEJhY2tlbmQgU2VydmljZSBleGlzdHMuCiAgICB0eXBlOiBsaXN0CiAgICBzYW1wbGU6ICJbICdteS1oZWFsdGhjaGVjaycgXSIKcHJvdG9jb2w6CiAgICBkZXNjcmlwdGlvbjogUHJvdG9jb2wgdXNlZCB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBCYWNrZW5kcy4KICAgIHJldHVybmVkOiBXaGVuIGEgQmFja2VuZCBTZXJ2aWNlIGV4aXN0cy4KICAgIHR5cGU6IHN0cmluZwogICAgc2FtcGxlOiAiSFRUUCIKcG9ydF9uYW1lOgogICAgZGVzY3JpcHRpb246IE5hbWUgb2YgQmFja2VuZCBQb3J0LgogICAgcmV0dXJuZWQ6IFdoZW4gYSBCYWNrZW5kIFNlcnZpY2UgZXhpc3RzLgogICAgdHlwZTogc3RyaW5nCiAgICBzYW1wbGU6ICJteWh0dHBwb3J0Igp0aW1lb3V0OgogICAgZGVzY3JpcHRpb246IEluIHNlY29uZHMsIGhvdyBsb25nIGJlZm9yZSBhIHJlcXVlc3Qgc2VudCB0byBhIGJhY2tlbmQgaXMKICAgICAgICAgICAgICAgICBjb25zaWRlcmVkIGZhaWxlZC4KICAgIHJldHVybmVkOiBJZiBzcGVjaWZpZWQuCiAgICB0eXBlOiBpbnQKICAgIHNhbXBsZTogIm15aHR0cHBvcnQiCicnJwoKCnRyeToKICAgIGltcG9ydCBsaWJjbG91ZAogICAgZnJvbSBsaWJjbG91ZC5jb21wdXRlLnR5cGVzIGltcG9ydCBQcm92aWRlcgogICAgZnJvbSBsaWJjbG91ZC5jb21wdXRlLnByb3ZpZGVycyBpbXBvcnQgZ2V0X2RyaXZlcgogICAgZnJvbSBsaWJjbG91ZC5jb21tb24uZ29vZ2xlIGltcG9ydCBHb29nbGVCYXNlRXJyb3IsIFF1b3RhRXhjZWVkZWRFcnJvciwgXAogICAgICAgIFJlc291cmNlRXhpc3RzRXJyb3IsIFJlc291cmNlSW5Vc2VFcnJvciwgUmVzb3VyY2VOb3RGb3VuZEVycm9yCiAgICBmcm9tIGxpYmNsb3VkLmNvbXB1dGUuZHJpdmVycy5nY2UgaW1wb3J0IEdDRUFkZHJlc3MKICAgIF8gPSBQcm92aWRlci5HQ0UKICAgIEhBU19MSUJDTE9VRCA9IFRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgSEFTX0xJQkNMT1VEID0gRmFsc2UKCnRyeToKICAgIGZyb20gYXN0IGltcG9ydCBsaXRlcmFsX2V2YWwKICAgIEhBU19QWVRIT04yNiA9IFRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgSEFTX1BZVEhPTjI2ID0gRmFsc2UKCiMgaW1wb3J0IG1vZHVsZSBzbmlwcGV0cwpmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLmJhc2ljIGltcG9ydCBBbnNpYmxlTW9kdWxlCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuZ2NlIGltcG9ydCBnY2VfY29ubmVjdApmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLmdjcCBpbXBvcnQgY2hlY2tfcGFyYW1zCgoKZGVmIF92YWxpZGF0ZV9wYXJhbXMocGFyYW1zKToKICAgICIiIgogICAgVmFsaWRhdGUgYmFja2VuZF9zZXJ2aWNlIHBhcmFtcy4KCiAgICBUaGlzIGZ1bmN0aW9uIGNhbGxzIF92YWxpZGF0ZV9iYWNrZW5kX3BhcmFtcyB0byB2ZXJpZnkKICAgIHRoZSBiYWNrZW5kLXNwZWNpZmljIHBhcmFtZXRlcnMuCgogICAgOnBhcmFtIHBhcmFtczogQW5zaWJsZSBkaWN0aW9uYXJ5IGNvbnRhaW5pbmcgY29uZmlndXJhdGlvbi4KICAgIDp0eXBlICBwYXJhbXM6IGBgZGljdGBgCgogICAgOnJldHVybjogVHJ1ZSBvciByYWlzZXMgVmFsdWVFcnJvcgogICAgOnJ0eXBlOiBgYGJvb2xgYCBvciBgY2xhc3M6VmFsdWVFcnJvcmAKICAgICIiIgogICAgZmllbGRzID0gWwogICAgICAgIHsnbmFtZSc6ICd0aW1lb3V0JywgJ3R5cGUnOiBpbnQsICdtaW4nOiAxLCAnbWF4JzogODY0MDB9LAogICAgXQogICAgdHJ5OgogICAgICAgIGNoZWNrX3BhcmFtcyhwYXJhbXMsIGZpZWxkcykKICAgICAgICBfdmFsaWRhdGVfYmFja2VuZF9wYXJhbXMocGFyYW1zWydiYWNrZW5kcyddKQogICAgZXhjZXB0OgogICAgICAgIHJhaXNlCgogICAgcmV0dXJuIChUcnVlLCAnJykKCgpkZWYgX3ZhbGlkYXRlX2JhY2tlbmRfcGFyYW1zKGJhY2tlbmRzKToKICAgICIiIgogICAgVmFsaWRhdGUgY29uZmlndXJhdGlvbiBmb3IgYmFja2VuZHMuCgogICAgOnBhcmFtIGJhY2tlbmRzOiBBbnNpYmxlIGRpY3Rpb25hcnkgY29udGFpbmluZyBiYWNrZW5kcyBjb25maWd1cmF0aW9uIChvbmx5KS4KICAgIDp0eXBlICBiYWNrZW5kczogYGBkaWN0YGAKCiAgICA6cmV0dXJuOiBUcnVlIG9yIHJhaXNlcyBWYWx1ZUVycm9yCiAgICA6cnR5cGU6IGBgYm9vbGBgIG9yIGBjbGFzczpWYWx1ZUVycm9yYAogICAgIiIiCiAgICBmaWVsZHMgPSBbCiAgICAgICAgeyduYW1lJzogJ2JhbGFuY2luZ19tb2RlJywgJ3R5cGUnOiBzdHIsICd2YWx1ZXMnOiBbJ1VUSUxJWkFUSU9OJywgJ1JBVEUnLCAnQ09OTkVDVElPTiddfSwKICAgICAgICB7J25hbWUnOiAnbWF4X3V0aWxpemF0aW9uJywgJ3R5cGUnOiBmbG9hdH0sCiAgICAgICAgeyduYW1lJzogJ21heF9jb25uZWN0aW9ucycsICd0eXBlJzogaW50fSwKICAgICAgICB7J25hbWUnOiAnbWF4X3JhdGUnLCAndHlwZSc6IGludH0sCiAgICAgICAgeyduYW1lJzogJ21heF9yYXRlX3Blcl9pbnN0YW5jZScsICd0eXBlJzogZmxvYXR9LAogICAgXQoKICAgIGlmIG5vdCBiYWNrZW5kczoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdiYWNrZW5kcyBzaG91bGQgYmUgYSBsaXN0LicpCgogICAgZm9yIGJhY2tlbmQgaW4gYmFja2VuZHM6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBjaGVja19wYXJhbXMoYmFja2VuZCwgZmllbGRzKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcmFpc2UKCiAgICAgICAgaWYgJ21heF9yYXRlJyBpbiBiYWNrZW5kIGFuZCAnbWF4X3JhdGVfcGVyX2luc3RhbmNlJyBpbiBiYWNrZW5kOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdCb3RoIG1heFJhdGUgb3IgbWF4UmF0ZVBlckluc3RhbmNlIGNhbm5vdCBiZSBzZXQuJykKCiAgICByZXR1cm4gKFRydWUsICcnKQoKCmRlZiBnZXRfYmFja2VuZF9zZXJ2aWNlKGdjZSwgbmFtZSk6CiAgICAiIiIKICAgIEdldCBhIEJhY2tlbmQgU2VydmljZSBmcm9tIEdDRS4KCiAgICA6cGFyYW0gZ2NlOiBBbiBpbml0aWFsaXplZCBHQ0UgZHJpdmVyIG9iamVjdC4KICAgIDp0eXBlIGdjZTogIDpjbGFzczogYEdDRU5vZGVEcml2ZXJgCgogICAgOnBhcmFtIG5hbWU6IE5hbWUgb2YgdGhlIEJhY2tlbmQgU2VydmljZS4KICAgIDp0eXBlIG5hbWU6ICBgYHN0cmBgCgogICAgOnJldHVybjogQSBHQ0VCYWNrZW5kU2VydmljZSBvYmplY3Qgb3IgTm9uZS4KICAgIDpydHlwZTogOmNsYXNzOiBgR0NFQmFja2VuZFNlcnZpY2VgIG9yIE5vbmUKICAgICIiIgogICAgdHJ5OgogICAgICAgICMgRG9lcyB0aGUgQmFja2VuZCBTZXJ2aWNlIGFscmVhZHkgZXhpc3Q/CiAgICAgICAgcmV0dXJuIGdjZS5leF9nZXRfYmFja2VuZHNlcnZpY2UobmFtZT1uYW1lKQoKICAgIGV4Y2VwdCBSZXNvdXJjZU5vdEZvdW5kRXJyb3I6CiAgICAgICAgcmV0dXJuIE5vbmUKCgpkZWYgZ2V0X2hlYWx0aGNoZWNrKGdjZSwgbmFtZSk6CiAgICByZXR1cm4gZ2NlLmV4X2dldF9oZWFsdGhjaGVjayhuYW1lKQoKCmRlZiBnZXRfaW5zdGFuY2Vncm91cChnY2UsIG5hbWUsIHpvbmU9Tm9uZSk6CiAgICByZXR1cm4gZ2NlLmV4X2dldF9pbnN0YW5jZWdyb3VwKG5hbWU9bmFtZSwgem9uZT16b25lKQoKCmRlZiBjcmVhdGVfYmFja2VuZF9zZXJ2aWNlKGdjZSwgcGFyYW1zKToKICAgICIiIgogICAgQ3JlYXRlIGEgbmV3IEJhY2tlbmQgU2VydmljZS4KCiAgICA6cGFyYW0gZ2NlOiBBbiBpbml0aWFsaXplZCBHQ0UgZHJpdmVyIG9iamVjdC4KICAgIDp0eXBlIGdjZTogIDpjbGFzczogYEdDRU5vZGVEcml2ZXJgCgogICAgOnBhcmFtIHBhcmFtczogRGljdGlvbmFyeSBvZiBwYXJhbWV0ZXJzIG5lZWRlZCBieSB0aGUgbW9kdWxlLgogICAgOnR5cGUgcGFyYW1zOiAgYGBkaWN0YGAKCiAgICA6cmV0dXJuOiBUdXBsZSB3aXRoIGNoYW5nZWQgc3RhdHMKICAgIDpydHlwZTogdHVwbGUgaW4gdGhlIGZvcm1hdCBvZiAoYm9vbCwgYm9vbCkKICAgICIiIgogICAgZnJvbSBjb3B5IGltcG9ydCBkZWVwY29weQoKICAgIGNoYW5nZWQgPSBGYWxzZQogICAgcmV0dXJuX2RhdGEgPSBGYWxzZQogICAgIyBvbmx5IG9uZSBoZWFsdGhjaGVjayBpcyBjdXJyZW50bHkgc3VwcG9ydGVkCiAgICBoY19uYW1lID0gcGFyYW1zWydoZWFsdGhjaGVja3MnXVswXQogICAgaGMgPSBnZXRfaGVhbHRoY2hlY2soZ2NlLCBoY19uYW1lKQogICAgYmFja2VuZHMgPSBbXQogICAgZm9yIGJhY2tlbmQgaW4gcGFyYW1zWydiYWNrZW5kcyddOgogICAgICAgIGlnID0gZ2V0X2luc3RhbmNlZ3JvdXAoZ2NlLCBiYWNrZW5kWydpbnN0YW5jZV9ncm91cCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2VuZC5nZXQoJ3pvbmUnLCBOb25lKSkKICAgICAgICBrd2FyZ3MgPSBkZWVwY29weShiYWNrZW5kKQogICAgICAgIGt3YXJnc1snaW5zdGFuY2VfZ3JvdXAnXSA9IGlnCiAgICAgICAgYmFja2VuZHMuYXBwZW5kKGdjZS5leF9jcmVhdGVfYmFja2VuZCgKICAgICAgICAgICAgKiprd2FyZ3MpKQoKICAgIGJlcyA9IGdjZS5leF9jcmVhdGVfYmFja2VuZHNlcnZpY2UoCiAgICAgICAgbmFtZT1wYXJhbXNbJ2JhY2tlbmRfc2VydmljZV9uYW1lJ10sIGhlYWx0aGNoZWNrcz1baGNdLCBiYWNrZW5kcz1iYWNrZW5kcywKICAgICAgICBlbmFibGVfY2RuPXBhcmFtc1snZW5hYmxlX2NkbiddLCBwb3J0X25hbWU9cGFyYW1zWydwb3J0X25hbWUnXSwKICAgICAgICB0aW1lb3V0X3NlYz1wYXJhbXNbJ3RpbWVvdXQnXSwgcHJvdG9jb2w9cGFyYW1zWydwcm90b2NvbCddKQoKICAgIGlmIGJlczoKICAgICAgICBjaGFuZ2VkID0gVHJ1ZQogICAgICAgIHJldHVybl9kYXRhID0gVHJ1ZQoKICAgIHJldHVybiAoY2hhbmdlZCwgcmV0dXJuX2RhdGEpCgoKZGVmIGRlbGV0ZV9iYWNrZW5kX3NlcnZpY2UoYmVzKToKICAgICIiIgogICAgRGVsZXRlIGEgQmFja2VuZCBTZXJ2aWNlLiBUaGUgSW5zdGFuY2UgR3JvdXBzIGFyZSBOT1QgZGVzdHJveWVkLgogICAgIiIiCiAgICBjaGFuZ2VkID0gRmFsc2UKICAgIHJldHVybl9kYXRhID0gRmFsc2UKICAgIGlmIGJlcy5kZXN0cm95KCk6CiAgICAgICAgY2hhbmdlZCA9IFRydWUKICAgICAgICByZXR1cm5fZGF0YSA9IFRydWUKICAgIHJldHVybiAoY2hhbmdlZCwgcmV0dXJuX2RhdGEpCgoKZGVmIG1haW4oKToKICAgIG1vZHVsZSA9IEFuc2libGVNb2R1bGUoYXJndW1lbnRfc3BlYz1kaWN0KAogICAgICAgIGJhY2tlbmRzPWRpY3QodHlwZT0nbGlzdCcsIHJlcXVpcmVkPVRydWUpLAogICAgICAgIGJhY2tlbmRfc2VydmljZV9uYW1lPWRpY3QocmVxdWlyZWQ9VHJ1ZSksCiAgICAgICAgaGVhbHRoY2hlY2tzPWRpY3QodHlwZT0nbGlzdCcsIHJlcXVpcmVkPVRydWUpLAogICAgICAgIHNlcnZpY2VfYWNjb3VudF9lbWFpbD1kaWN0KCksCiAgICAgICAgc2VydmljZV9hY2NvdW50X3Blcm1pc3Npb25zPWRpY3QodHlwZT0nbGlzdCcpLAogICAgICAgIGVuYWJsZV9jZG49ZGljdCh0eXBlPSdib29sJywgY2hvaWNlcz1bVHJ1ZSwgRmFsc2VdKSwKICAgICAgICBwb3J0X25hbWU9ZGljdCh0eXBlPSdzdHInKSwKICAgICAgICBwcm90b2NvbD1kaWN0KHR5cGU9J3N0cicsIGRlZmF1bHQ9J1RDUCcsCiAgICAgICAgICAgICAgICAgICAgICBjaG9pY2VzPVsnSFRUUCcsICdIVFRQUycsICdTU0wnLCAnVENQJ10pLAogICAgICAgIHRpbWVvdXQ9ZGljdCh0eXBlPSdpbnQnKSwKICAgICAgICBzdGF0ZT1kaWN0KGNob2ljZXM9WydhYnNlbnQnLCAncHJlc2VudCddLCBkZWZhdWx0PSdwcmVzZW50JyksCiAgICAgICAgcGVtX2ZpbGU9ZGljdCgpLAogICAgICAgIGNyZWRlbnRpYWxzX2ZpbGU9ZGljdCgpLAogICAgICAgIHByb2plY3RfaWQ9ZGljdCgpLCApLCApCgogICAgaWYgbm90IEhBU19QWVRIT04yNjoKICAgICAgICBtb2R1bGUuZmFpbF9qc29uKAogICAgICAgICAgICBtc2c9IkdDRSBtb2R1bGUgcmVxdWlyZXMgcHl0aG9uJ3MgJ2FzdCcgbW9kdWxlLCBweXRob24gdjIuNisiKQogICAgaWYgbm90IEhBU19MSUJDTE9VRDoKICAgICAgICBtb2R1bGUuZmFpbF9qc29uKAogICAgICAgICAgICBtc2c9J2xpYmNsb3VkIHdpdGggR0NFIEJhY2tlbmQgU2VydmljZSBzdXBwb3J0ICgxLjMrKSByZXF1aXJlZCBmb3IgdGhpcyBtb2R1bGUuJykKCiAgICBnY2UgPSBnY2VfY29ubmVjdChtb2R1bGUpCiAgICBpZiBub3QgaGFzYXR0cihnY2UsICdleF9jcmVhdGVfaW5zdGFuY2Vncm91cG1hbmFnZXInKToKICAgICAgICBtb2R1bGUuZmFpbF9qc29uKAogICAgICAgICAgICBtc2c9J2xpYmNsb3VkIHdpdGggR0NFIEJhY2tlbmQgU2VydmljZSBzdXBwb3J0ICgxLjMrKSByZXF1aXJlZCBmb3IgdGhpcyBtb2R1bGUuJywKICAgICAgICAgICAgY2hhbmdlZD1GYWxzZSkKCiAgICBwYXJhbXMgPSB7fQogICAgcGFyYW1zWydzdGF0ZSddID0gbW9kdWxlLnBhcmFtcy5nZXQoJ3N0YXRlJykKICAgIHBhcmFtc1snYmFja2VuZF9zZXJ2aWNlX25hbWUnXSA9IG1vZHVsZS5wYXJhbXMuZ2V0KCdiYWNrZW5kX3NlcnZpY2VfbmFtZScpCiAgICBwYXJhbXNbJ2JhY2tlbmRzJ10gPSBtb2R1bGUucGFyYW1zLmdldCgnYmFja2VuZHMnKQogICAgcGFyYW1zWydoZWFsdGhjaGVja3MnXSA9IG1vZHVsZS5wYXJhbXMuZ2V0KCdoZWFsdGhjaGVja3MnKQogICAgcGFyYW1zWydlbmFibGVfY2RuJ10gPSBtb2R1bGUucGFyYW1zLmdldCgnZW5hYmxlX2NkbicsIE5vbmUpCiAgICBwYXJhbXNbJ3BvcnRfbmFtZSddID0gbW9kdWxlLnBhcmFtcy5nZXQoJ3BvcnRfbmFtZScsIE5vbmUpCiAgICBwYXJhbXNbJ3Byb3RvY29sJ10gPSBtb2R1bGUucGFyYW1zLmdldCgncHJvdG9jb2wnLCBOb25lKQogICAgcGFyYW1zWyd0aW1lb3V0J10gPSBtb2R1bGUucGFyYW1zLmdldCgndGltZW91dCcsIE5vbmUpCgogICAgdHJ5OgogICAgICAgIF92YWxpZGF0ZV9wYXJhbXMocGFyYW1zKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPWUubWVzc2FnZSwgY2hhbmdlZD1GYWxzZSkKCiAgICBjaGFuZ2VkID0gRmFsc2UKICAgIGpzb25fb3V0cHV0ID0geydzdGF0ZSc6IHBhcmFtc1snc3RhdGUnXX0KICAgIGJlcyA9IGdldF9iYWNrZW5kX3NlcnZpY2UoZ2NlLCBwYXJhbXNbJ2JhY2tlbmRfc2VydmljZV9uYW1lJ10pCgogICAgaWYgbm90IGJlczoKICAgICAgICBpZiBwYXJhbXNbJ3N0YXRlJ10gPT0gJ2Fic2VudCc6CiAgICAgICAgICAgICMgRG9lc24ndCBleGlzdCBhbmQgc3RhdGU9PWFic2VudC4KICAgICAgICAgICAgY2hhbmdlZCA9IEZhbHNlCiAgICAgICAgICAgIG1vZHVsZS5mYWlsX2pzb24oCiAgICAgICAgICAgICAgICBtc2c9IkNhbm5vdCBkZWxldGUgdW5rbm93biBiYWNrZW5kIHNlcnZpY2U6ICVzIiAlCiAgICAgICAgICAgICAgICAocGFyYW1zWydiYWNrZW5kX3NlcnZpY2VfbmFtZSddKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIENyZWF0ZQogICAgICAgICAgICAoY2hhbmdlZCwganNvbl9vdXRwdXRbJ2JhY2tlbmRfc2VydmljZV9jcmVhdGVkJ10pID0gY3JlYXRlX2JhY2tlbmRfc2VydmljZShnY2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcykKICAgIGVsaWYgcGFyYW1zWydzdGF0ZSddID09ICdhYnNlbnQnOgogICAgICAgICMgRGVsZXRlCiAgICAgICAgKGNoYW5nZWQsIGpzb25fb3V0cHV0WydiYWNrZW5kX3NlcnZpY2VfZGVsZXRlZCddKSA9IGRlbGV0ZV9iYWNrZW5kX3NlcnZpY2UoYmVzKQogICAgZWxzZToKICAgICAgICAjIFRPRE8oc3VwZXJ0b20pOiBBZGQgdXBkYXRlIHN1cHBvcnQgd2hlbiBpdCBpcyBhdmFpbGFibGUgaW4gbGliY2xvdWQuCiAgICAgICAgY2hhbmdlZCA9IEZhbHNlCgogICAganNvbl9vdXRwdXRbJ2NoYW5nZWQnXSA9IGNoYW5nZWQKICAgIGpzb25fb3V0cHV0LnVwZGF0ZShwYXJhbXMpCiAgICBtb2R1bGUuZXhpdF9qc29uKCoqanNvbl9vdXRwdXQpCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgbWFpbigpClBLAwQUAAAAAAAAvCtLO985lTCKAQAwigEAHQAAAGFuc2libGUvbW9kdWxlX3V0aWxzL2Jhc2ljLnB5IyBUaGlzIGNvZGUgaXMgcGFydCBvZiBBbnNpYmxlLCBidXQgaXMgYW4gaW5kZXBlbmRlbnQgY29tcG9uZW50LgojIFRoaXMgcGFydGljdWxhciBmaWxlIHNuaXBwZXQsIGFuZCB0aGlzIGZpbGUgc25pcHBldCBvbmx5LCBpcyBCU0QgbGljZW5zZWQuCiMgTW9kdWxlcyB5b3Ugd3JpdGUgdXNpbmcgdGhpcyBzbmlwcGV0LCB3aGljaCBpcyBlbWJlZGRlZCBkeW5hbWljYWxseSBieSBBbnNpYmxlCiMgc3RpbGwgYmVsb25nIHRvIHRoZSBhdXRob3Igb2YgdGhlIG1vZHVsZSwgYW5kIG1heSBhc3NpZ24gdGhlaXIgb3duIGxpY2Vuc2UKIyB0byB0aGUgY29tcGxldGUgd29yay4KIwojIENvcHlyaWdodCAoYyksIE1pY2hhZWwgRGVIYWFuIDxtaWNoYWVsLmRlaGFhbkBnbWFpbC5jb20+LCAyMDEyLTIwMTMKIyBDb3B5cmlnaHQgKGMpLCBUb3NoaW8gS3VyYXRvbWkgPHRrdXJhdG9taUBhbnNpYmxlLmNvbT4gMjAxNgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLAojIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDoKIwojICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQKIyAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwKIyAgICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24KIyAgICAgIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgojCiMgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyAiQVMgSVMiIEFORAojIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVECiMgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELgojIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULAojIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywKIyBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MKIyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUCiMgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFCiMgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCiMKCkJPT0xFQU5TX1RSVUUgPSBbJ3knLCAneWVzJywgJ29uJywgJzEnLCAndHJ1ZScsIDEsIFRydWVdCkJPT0xFQU5TX0ZBTFNFID0gWyduJywgJ25vJywgJ29mZicsICcwJywgJ2ZhbHNlJywgMCwgRmFsc2VdCkJPT0xFQU5TID0gQk9PTEVBTlNfVFJVRSArIEJPT0xFQU5TX0ZBTFNFCgpTSVpFX1JBTkdFUyA9IHsgJ1knOiAxPDw4MCwgJ1onOiAxPDw3MCwgJ0UnOiAxPDw2MCwgJ1AnOiAxPDw1MCwgJ1QnOiAxPDw0MCwgJ0cnOiAxPDwzMCwgJ00nOiAxPDwyMCwgJ0snOiAxPDwxMCwgJ0InOiAxIH0KCkZJTEVfQVRUUklCVVRFUyA9IHsKICAgICdBJzogJ25vYXRpbWUnLAogICAgJ2EnOiAnYXBwZW5kJywKICAgICdjJzogJ2NvbXByZXNzZWQnLAogICAgJ0MnOiAnbm9jb3cnLAogICAgJ2QnOiAnbm9kdW1wJywKICAgICdEJzogJ2RpcnN5bmMnLAogICAgJ2UnOiAnZXh0ZW50cycsCiAgICAnRSc6ICdlbmNyeXB0ZWQnLAogICAgJ2gnOiAnYmxvY2tzaXplJywKICAgICdpJzogJ2ltbXV0YWJsZScsCiAgICAnSSc6ICdpbmRleGVkJywKICAgICdqJzogJ2pvdXJuYWxsZWQnLAogICAgJ04nOiAnaW5saW5lJywKICAgICdzJzogJ3plcm8nLAogICAgJ1MnOiAnc3luY2hyb25vdXMnLAogICAgJ3QnOiAnbm90YWlsJywKICAgICdUJzogJ2Jsb2Nrcm9vdCcsCiAgICAndSc6ICd1bmRlbGV0ZScsCiAgICAnWCc6ICdjb21wcmVzc2VkcmF3JywKICAgICdaJzogJ2NvbXByZXNzZWRkaXJ0eScsCn0KCiMgYW5zaWJsZSBtb2R1bGVzIGNhbiBiZSB3cml0dGVuIGluIGFueSBsYW5ndWFnZS4gIFRvIHNpbXBsaWZ5CiMgZGV2ZWxvcG1lbnQgb2YgUHl0aG9uIG1vZHVsZXMsIHRoZSBmdW5jdGlvbnMgYXZhaWxhYmxlIGhlcmUgY2FuCiMgYmUgdXNlZCB0byBkbyBtYW55IGNvbW1vbiB0YXNrcwoKaW1wb3J0IGxvY2FsZQppbXBvcnQgb3MKaW1wb3J0IHJlCmltcG9ydCBzaGxleAppbXBvcnQgc3VicHJvY2VzcwppbXBvcnQgc3lzCmltcG9ydCB0eXBlcwppbXBvcnQgdGltZQppbXBvcnQgc2VsZWN0CmltcG9ydCBzaHV0aWwKaW1wb3J0IHN0YXQKaW1wb3J0IHRlbXBmaWxlCmltcG9ydCB0cmFjZWJhY2sKaW1wb3J0IGdycAppbXBvcnQgcHdkCmltcG9ydCBwbGF0Zm9ybQppbXBvcnQgZXJybm8KaW1wb3J0IGRhdGV0aW1lCmZyb20gaXRlcnRvb2xzIGltcG9ydCByZXBlYXQsIGNoYWluCgp0cnk6CiAgICBpbXBvcnQgc3lzbG9nCiAgICBIQVNfU1lTTE9HPVRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgSEFTX1NZU0xPRz1GYWxzZQoKdHJ5OgogICAgZnJvbSBzeXN0ZW1kIGltcG9ydCBqb3VybmFsCiAgICBoYXNfam91cm5hbCA9IFRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgaGFzX2pvdXJuYWwgPSBGYWxzZQoKSEFWRV9TRUxJTlVYPUZhbHNlCnRyeToKICAgIGltcG9ydCBzZWxpbnV4CiAgICBIQVZFX1NFTElOVVg9VHJ1ZQpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBwYXNzCgojIFB5dGhvbjIgJiAzIHdheSB0byBnZXQgTm9uZVR5cGUKTm9uZVR5cGUgPSB0eXBlKE5vbmUpCgp0cnk6CiAgICBmcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBTZXF1ZW5jZSwgTWFwcGluZwpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAjIHB5dGhvbjIuNQogICAgU2VxdWVuY2UgPSAobGlzdCwgdHVwbGUpCiAgICBNYXBwaW5nID0gKGRpY3QsKQoKIyBOb3RlOiBXaGVuIGdldHRpbmcgU2VxdWVuY2UgZnJvbSBjb2xsZWN0aW9ucywgaXQgbWF0Y2hlcyB3aXRoIHN0cmluZ3MuICBJZgojIHRoaXMgbWF0dGVycywgbWFrZSBzdXJlIHRvIGNoZWNrIGZvciBzdHJpbmdzIGJlZm9yZSBjaGVja2luZyBmb3Igc2VxdWVuY2V0eXBlCnRyeToKICAgIGZyb20gY29sbGVjdGlvbnMuYWJjIGltcG9ydCBLZXlzVmlldwogICAgU0VRVUVOQ0VUWVBFID0gKFNlcXVlbmNlLCBLZXlzVmlldykKZXhjZXB0OgogICAgU0VRVUVOQ0VUWVBFID0gU2VxdWVuY2UKCnRyeToKICAgIGltcG9ydCBqc29uCiAgICAjIERldGVjdCB0aGUgcHl0aG9uLWpzb24gbGlicmFyeSB3aGljaCBpcyBpbmNvbXBhdGlibGUKICAgICMgTG9vayBmb3Igc2ltcGxlanNvbiBpZiB0aGF0J3MgdGhlIGNhc2UKICAgIHRyeToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShqc29uLmxvYWRzLCB0eXBlcy5GdW5jdGlvblR5cGUpIG9yIG5vdCBpc2luc3RhbmNlKGpzb24uZHVtcHMsIHR5cGVzLkZ1bmN0aW9uVHlwZSk6CiAgICAgICAgICAgIHJhaXNlIEltcG9ydEVycm9yCiAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgcmFpc2UgSW1wb3J0RXJyb3IKZXhjZXB0IEltcG9ydEVycm9yOgogICAgdHJ5OgogICAgICAgIGltcG9ydCBzaW1wbGVqc29uIGFzIGpzb24KICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBwcmludCgnXG57Im1zZyI6ICJFcnJvcjogYW5zaWJsZSByZXF1aXJlcyB0aGUgc3RkbGliIGpzb24gb3Igc2ltcGxlanNvbiBtb2R1bGUsIG5laXRoZXIgd2FzIGZvdW5kISIsICJmYWlsZWQiOiB0cnVlfScpCiAgICAgICAgc3lzLmV4aXQoMSkKICAgIGV4Y2VwdCBTeW50YXhFcnJvcjoKICAgICAgICBwcmludCgnXG57Im1zZyI6ICJTeW50YXhFcnJvcjogcHJvYmFibHkgZHVlIHRvIGluc3RhbGxlZCBzaW1wbGVqc29uIGJlaW5nIGZvciBhIGRpZmZlcmVudCBweXRob24gdmVyc2lvbiIsICJmYWlsZWQiOiB0cnVlfScpCiAgICAgICAgc3lzLmV4aXQoMSkKCkFWQUlMQUJMRV9IQVNIX0FMR09SSVRITVMgPSBkaWN0KCkKdHJ5OgogICAgaW1wb3J0IGhhc2hsaWIKCiAgICAjIHB5dGhvbiAyLjcuOSsgYW5kIDIuNy4wKwogICAgZm9yIGF0dHJpYnV0ZSBpbiAoJ2F2YWlsYWJsZV9hbGdvcml0aG1zJywgJ2FsZ29yaXRobXMnKToKICAgICAgICBhbGdvcml0aG1zID0gZ2V0YXR0cihoYXNobGliLCBhdHRyaWJ1dGUsIE5vbmUpCiAgICAgICAgaWYgYWxnb3JpdGhtczoKICAgICAgICAgICAgYnJlYWsKICAgIGlmIGFsZ29yaXRobXMgaXMgTm9uZToKICAgICAgICAjIHB5dGhvbiAyLjUrCiAgICAgICAgYWxnb3JpdGhtcyA9ICgnbWQ1JywgJ3NoYTEnLCAnc2hhMjI0JywgJ3NoYTI1NicsICdzaGEzODQnLCAnc2hhNTEyJykKICAgIGZvciBhbGdvcml0aG0gaW4gYWxnb3JpdGhtczoKICAgICAgICBBVkFJTEFCTEVfSEFTSF9BTEdPUklUSE1TW2FsZ29yaXRobV0gPSBnZXRhdHRyKGhhc2hsaWIsIGFsZ29yaXRobSkKZXhjZXB0IEltcG9ydEVycm9yOgogICAgaW1wb3J0IHNoYQogICAgQVZBSUxBQkxFX0hBU0hfQUxHT1JJVEhNUyA9IHsnc2hhMSc6IHNoYS5zaGF9CiAgICB0cnk6CiAgICAgICAgaW1wb3J0IG1kNQogICAgICAgIEFWQUlMQUJMRV9IQVNIX0FMR09SSVRITVNbJ21kNSddID0gbWQ1Lm1kNQogICAgZXhjZXB0IEltcG9ydEVycm9yOgogICAgICAgIHBhc3MKCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMucHljb21wYXQyNCBpbXBvcnQgZ2V0X2V4Y2VwdGlvbiwgbGl0ZXJhbF9ldmFsCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4IGltcG9ydCAoUFkyLCBQWTMsIGIsIGJpbmFyeV90eXBlLCBpbnRlZ2VyX3R5cGVzLAogICAgICAgIGl0ZXJpdGVtcywgdGV4dF90eXBlLCBzdHJpbmdfdHlwZXMpCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4Lm1vdmVzIGltcG9ydCBtYXAsIHJlZHVjZSwgc2hsZXhfcXVvdGUKZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5fdGV4dCBpbXBvcnQgdG9fbmF0aXZlLCB0b19ieXRlcywgdG9fdGV4dAoKUEFTU1dPUkRfTUFUQ0ggPSByZS5jb21waWxlKHInXig/Oi4rWy1fXHNdKT9wYXNzKD86Wy1fXHNdPyg/OndvcmR8cGhyYXNlfHdyZHx3ZCk/KSg/OlstX1xzXS4rKT8kJywgcmUuSSkKCl9OVU1CRVJUWVBFUyA9IHR1cGxlKGxpc3QoaW50ZWdlcl90eXBlcykgKyBbZmxvYXRdKQoKIyBEZXByZWNhdGVkIGNvbXBhdC4gIE9ubHkga2VwdCBpbiBjYXNlIGFub3RoZXIgbW9kdWxlIHVzZWQgdGhlc2UgbmFtZXMgIFVzaW5nCiMgYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4IGlzIHByZWZlcnJlZAoKTlVNQkVSVFlQRVMgPSBfTlVNQkVSVFlQRVMKCmltYXAgPSBtYXAKCnRyeToKICAgICMgUHl0aG9uIDIKICAgIHVuaWNvZGUKZXhjZXB0IE5hbWVFcnJvcjoKICAgICMgUHl0aG9uIDMKICAgIHVuaWNvZGUgPSB0ZXh0X3R5cGUKCnRyeToKICAgICMgUHl0aG9uIDIuNisKICAgIGJ5dGVzCmV4Y2VwdCBOYW1lRXJyb3I6CiAgICAjIFB5dGhvbiAyLjQKICAgIGJ5dGVzID0gYmluYXJ5X3R5cGUKCnRyeToKICAgICMgUHl0aG9uIDIKICAgIGJhc2VzdHJpbmcKZXhjZXB0IE5hbWVFcnJvcjoKICAgICMgUHl0aG9uIDMKICAgIGJhc2VzdHJpbmcgPSBzdHJpbmdfdHlwZXMKCl9saXRlcmFsX2V2YWwgPSBsaXRlcmFsX2V2YWwKCiMgRW5kIG9mIGRlcHJlY2F0ZWQgbmFtZXMKCiMgSW50ZXJuYWwgZ2xvYmFsIGhvbGRpbmcgcGFzc2VkIGluIHBhcmFtcy4gIFRoaXMgaXMgY29uc3VsdGVkIGluIGNhc2UKIyBtdWx0aXBsZSBBbnNpYmxlTW9kdWxlcyBhcmUgY3JlYXRlZC4gIE90aGVyd2lzZSBlYWNoIEFuc2libGVNb2R1bGUgd291bGQKIyBhdHRlbXB0IHRvIHJlYWQgZnJvbSBzdGRpbi4gIE90aGVyIGNvZGUgc2hvdWxkIG5vdCB1c2UgdGhpcyBkaXJlY3RseSBhcyBpdAojIGlzIGFuIGludGVybmFsIGltcGxlbWVudGF0aW9uIGRldGFpbApfQU5TSUJMRV9BUkdTID0gTm9uZQoKRklMRV9DT01NT05fQVJHVU1FTlRTPWRpY3QoCiAgICBzcmMgPSBkaWN0KCksCiAgICBtb2RlID0gZGljdCh0eXBlPSdyYXcnKSwKICAgIG93bmVyID0gZGljdCgpLAogICAgZ3JvdXAgPSBkaWN0KCksCiAgICBzZXVzZXIgPSBkaWN0KCksCiAgICBzZXJvbGUgPSBkaWN0KCksCiAgICBzZWxldmVsID0gZGljdCgpLAogICAgc2V0eXBlID0gZGljdCgpLAogICAgZm9sbG93ID0gZGljdCh0eXBlPSdib29sJywgZGVmYXVsdD1GYWxzZSksCiAgICAjIG5vdCB0YWtlbiBieSB0aGUgZmlsZSBtb2R1bGUsIGJ1dCBvdGhlciBtb2R1bGVzIGNhbGwgZmlsZSBzbyBpdCBtdXN0IGlnbm9yZSB0aGVtLgogICAgY29udGVudCA9IGRpY3Qobm9fbG9nPVRydWUpLAogICAgYmFja3VwID0gZGljdCgpLAogICAgZm9yY2UgPSBkaWN0KCksCiAgICByZW1vdGVfc3JjID0gZGljdCgpLCAjIHVzZWQgYnkgYXNzZW1ibGUKICAgIHJlZ2V4cCA9IGRpY3QoKSwgIyB1c2VkIGJ5IGFzc2VtYmxlCiAgICBkZWxpbWl0ZXIgPSBkaWN0KCksICMgdXNlZCBieSBhc3NlbWJsZQogICAgZGlyZWN0b3J5X21vZGUgPSBkaWN0KCksICMgdXNlZCBieSBjb3B5CiAgICB1bnNhZmVfd3JpdGVzICA9IGRpY3QodHlwZT0nYm9vbCcpLCAjIHNob3VsZCBiZSBhdmFpbGFibGUgdG8gYW55IG1vZHVsZSB1c2luZyBhdG9taWNfbW92ZQogICAgYXR0cmlidXRlcyA9IGRpY3QoYWxpYXNlcz1bJ2F0dHInXSksCikKClBBU1NXRF9BUkdfUkUgPSByZS5jb21waWxlKHInXlstXXswLDJ9cGFzc1stXT8od29yZHx3ZCk/JykKCiMgQ2FuJ3QgdXNlIDA3Nzc3IG9uIFB5dGhvbiAzLCBjYW4ndCB1c2UgMG83Nzc3IG9uIFB5dGhvbiAyLjQKUEVSTV9CSVRTID0gaW50KCcwNzc3NycsIDgpICAgICAgIyBmaWxlIG1vZGUgcGVybWlzc2lvbiBiaXRzCkVYRUNfUEVSTV9CSVRTID0gaW50KCcwMDExMScsIDgpICMgZXhlY3V0ZSBwZXJtaXNzaW9uIGJpdHMKREVGQVVMVF9QRVJNID0gaW50KCcwNjY2JywgOCkgICAgIyBkZWZhdWx0IGZpbGUgcGVybWlzc2lvbiBiaXRzCgoKZGVmIGdldF9wbGF0Zm9ybSgpOgogICAgJycnIHdoYXQncyB0aGUgcGxhdGZvcm0/ICBleGFtcGxlOiBMaW51eCBpcyBhIHBsYXRmb3JtLiAnJycKICAgIHJldHVybiBwbGF0Zm9ybS5zeXN0ZW0oKQoKZGVmIGdldF9kaXN0cmlidXRpb24oKToKICAgICcnJyByZXR1cm4gdGhlIGRpc3RyaWJ1dGlvbiBuYW1lICcnJwogICAgaWYgcGxhdGZvcm0uc3lzdGVtKCkgPT0gJ0xpbnV4JzoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHN1cHBvcnRlZF9kaXN0cyA9IHBsYXRmb3JtLl9zdXBwb3J0ZWRfZGlzdHMgKyAoJ2FyY2gnLCdhbHBpbmUnKQogICAgICAgICAgICBkaXN0cmlidXRpb24gPSBwbGF0Zm9ybS5saW51eF9kaXN0cmlidXRpb24oc3VwcG9ydGVkX2Rpc3RzPXN1cHBvcnRlZF9kaXN0cylbMF0uY2FwaXRhbGl6ZSgpCiAgICAgICAgICAgIGlmIG5vdCBkaXN0cmlidXRpb24gYW5kIG9zLnBhdGguaXNmaWxlKCcvZXRjL3N5c3RlbS1yZWxlYXNlJyk6CiAgICAgICAgICAgICAgICBkaXN0cmlidXRpb24gPSBwbGF0Zm9ybS5saW51eF9kaXN0cmlidXRpb24oc3VwcG9ydGVkX2Rpc3RzPVsnc3lzdGVtJ10pWzBdLmNhcGl0YWxpemUoKQogICAgICAgICAgICAgICAgaWYgJ0FtYXpvbicgaW4gZGlzdHJpYnV0aW9uOgogICAgICAgICAgICAgICAgICAgIGRpc3RyaWJ1dGlvbiA9ICdBbWF6b24nCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGRpc3RyaWJ1dGlvbiA9ICdPdGhlckxpbnV4JwogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgIyBGSVhNRTogTWV0aG9kTWlzc2luZywgSSBhc3N1bWU/CiAgICAgICAgICAgIGRpc3RyaWJ1dGlvbiA9IHBsYXRmb3JtLmRpc3QoKVswXS5jYXBpdGFsaXplKCkKICAgIGVsc2U6CiAgICAgICAgZGlzdHJpYnV0aW9uID0gTm9uZQogICAgcmV0dXJuIGRpc3RyaWJ1dGlvbgoKZGVmIGdldF9kaXN0cmlidXRpb25fdmVyc2lvbigpOgogICAgJycnIHJldHVybiB0aGUgZGlzdHJpYnV0aW9uIHZlcnNpb24gJycnCiAgICBpZiBwbGF0Zm9ybS5zeXN0ZW0oKSA9PSAnTGludXgnOgogICAgICAgIHRyeToKICAgICAgICAgICAgZGlzdHJpYnV0aW9uX3ZlcnNpb24gPSBwbGF0Zm9ybS5saW51eF9kaXN0cmlidXRpb24oKVsxXQogICAgICAgICAgICBpZiBub3QgZGlzdHJpYnV0aW9uX3ZlcnNpb24gYW5kIG9zLnBhdGguaXNmaWxlKCcvZXRjL3N5c3RlbS1yZWxlYXNlJyk6CiAgICAgICAgICAgICAgICBkaXN0cmlidXRpb25fdmVyc2lvbiA9IHBsYXRmb3JtLmxpbnV4X2Rpc3RyaWJ1dGlvbihzdXBwb3J0ZWRfZGlzdHM9WydzeXN0ZW0nXSlbMV0KICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICMgRklYTUU6IE1ldGhvZE1pc3NpbmcsIEkgYXNzdW1lPwogICAgICAgICAgICBkaXN0cmlidXRpb25fdmVyc2lvbiA9IHBsYXRmb3JtLmRpc3QoKVsxXQogICAgZWxzZToKICAgICAgICBkaXN0cmlidXRpb25fdmVyc2lvbiA9IE5vbmUKICAgIHJldHVybiBkaXN0cmlidXRpb25fdmVyc2lvbgoKZGVmIGdldF9hbGxfc3ViY2xhc3NlcyhjbHMpOgogICAgJycnCiAgICB1c2VkIGJ5IG1vZHVsZXMgbGlrZSBIYXJkd2FyZSBvciBOZXR3b3JrIGZhY3QgY2xhc3NlcyB0byByZXRyaWV2ZSBhbGwgc3ViY2xhc3NlcyBvZiBhIGdpdmVuIGNsYXNzLgogICAgX19zdWJjbGFzc2VzX18gcmV0dXJuIG9ubHkgZGlyZWN0IHN1YiBjbGFzc2VzLiBUaGlzIG9uZSBnbyBkb3duIGludG8gdGhlIGNsYXNzIHRyZWUuCiAgICAnJycKICAgICMgUmV0cmlldmUgZGlyZWN0IHN1YmNsYXNzZXMKICAgIHN1YmNsYXNzZXMgPSBjbHMuX19zdWJjbGFzc2VzX18oKQogICAgdG9fdmlzaXQgPSBsaXN0KHN1YmNsYXNzZXMpCiAgICAjIFRoZW4gdmlzaXQgYWxsIHN1YmNsYXNzZXMKICAgIHdoaWxlIHRvX3Zpc2l0OgogICAgICAgIGZvciBzYyBpbiB0b192aXNpdDoKICAgICAgICAgICAgIyBUaGUgY3VycmVudCBjbGFzcyBpcyBub3cgdmlzaXRlZCwgc28gcmVtb3ZlIGl0IGZyb20gbGlzdAogICAgICAgICAgICB0b192aXNpdC5yZW1vdmUoc2MpCiAgICAgICAgICAgICMgQXBwZW5kaW5nIGFsbCBzdWJjbGFzc2VzIHRvIHZpc2l0IGFuZCBrZWVwIGEgcmVmZXJlbmNlIG9mIGF2YWlsYWJsZSBjbGFzcwogICAgICAgICAgICBmb3Igc3NjIGluIHNjLl9fc3ViY2xhc3Nlc19fKCk6CiAgICAgICAgICAgICAgICBzdWJjbGFzc2VzLmFwcGVuZChzc2MpCiAgICAgICAgICAgICAgICB0b192aXNpdC5hcHBlbmQoc3NjKQogICAgcmV0dXJuIHN1YmNsYXNzZXMKCgpkZWYgbG9hZF9wbGF0Zm9ybV9zdWJjbGFzcyhjbHMsICphcmdzLCAqKmt3YXJncyk6CiAgICAnJycKICAgIHVzZWQgYnkgbW9kdWxlcyBsaWtlIFVzZXIgdG8gaGF2ZSBkaWZmZXJlbnQgaW1wbGVtZW50YXRpb25zIGJhc2VkIG9uIGRldGVjdGVkIHBsYXRmb3JtLiAgU2VlIFVzZXIKICAgIG1vZHVsZSBmb3IgYW4gZXhhbXBsZS4KICAgICcnJwoKICAgIHRoaXNfcGxhdGZvcm0gPSBnZXRfcGxhdGZvcm0oKQogICAgZGlzdHJpYnV0aW9uID0gZ2V0X2Rpc3RyaWJ1dGlvbigpCiAgICBzdWJjbGFzcyA9IE5vbmUKCiAgICAjIGdldCB0aGUgbW9zdCBzcGVjaWZpYyBzdXBlcmNsYXNzIGZvciB0aGlzIHBsYXRmb3JtCiAgICBpZiBkaXN0cmlidXRpb24gaXMgbm90IE5vbmU6CiAgICAgICAgZm9yIHNjIGluIGdldF9hbGxfc3ViY2xhc3NlcyhjbHMpOgogICAgICAgICAgICBpZiBzYy5kaXN0cmlidXRpb24gaXMgbm90IE5vbmUgYW5kIHNjLmRpc3RyaWJ1dGlvbiA9PSBkaXN0cmlidXRpb24gYW5kIHNjLnBsYXRmb3JtID09IHRoaXNfcGxhdGZvcm06CiAgICAgICAgICAgICAgICBzdWJjbGFzcyA9IHNjCiAgICBpZiBzdWJjbGFzcyBpcyBOb25lOgogICAgICAgIGZvciBzYyBpbiBnZXRfYWxsX3N1YmNsYXNzZXMoY2xzKToKICAgICAgICAgICAgaWYgc2MucGxhdGZvcm0gPT0gdGhpc19wbGF0Zm9ybSBhbmQgc2MuZGlzdHJpYnV0aW9uIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBzdWJjbGFzcyA9IHNjCiAgICBpZiBzdWJjbGFzcyBpcyBOb25lOgogICAgICAgIHN1YmNsYXNzID0gY2xzCgogICAgcmV0dXJuIHN1cGVyKGNscywgc3ViY2xhc3MpLl9fbmV3X18oc3ViY2xhc3MpCgoKZGVmIGpzb25fZGljdF91bmljb2RlX3RvX2J5dGVzKGQsIGVuY29kaW5nPSd1dGYtOCcsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpOgogICAgJycnIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgZGljdCBrZXlzIGFuZCB2YWx1ZXMgdG8gYnl0ZSBzdHIKCiAgICAgICAgU3BlY2lhbGl6ZWQgZm9yIGpzb24gcmV0dXJuIGJlY2F1c2UgdGhpcyBvbmx5IGhhbmRsZXMsIGxpc3RzLCB0dXBsZXMsCiAgICAgICAgYW5kIGRpY3QgY29udGFpbmVyIHR5cGVzICh0aGUgY29udGFpbmVycyB0aGF0IHRoZSBqc29uIG1vZHVsZSByZXR1cm5zKQogICAgJycnCgogICAgaWYgaXNpbnN0YW5jZShkLCB0ZXh0X3R5cGUpOgogICAgICAgIHJldHVybiB0b19ieXRlcyhkLCBlbmNvZGluZz1lbmNvZGluZywgZXJyb3JzPWVycm9ycykKICAgIGVsaWYgaXNpbnN0YW5jZShkLCBkaWN0KToKICAgICAgICByZXR1cm4gZGljdChtYXAoanNvbl9kaWN0X3VuaWNvZGVfdG9fYnl0ZXMsIGl0ZXJpdGVtcyhkKSwgcmVwZWF0KGVuY29kaW5nKSwgcmVwZWF0KGVycm9ycykpKQogICAgZWxpZiBpc2luc3RhbmNlKGQsIGxpc3QpOgogICAgICAgIHJldHVybiBsaXN0KG1hcChqc29uX2RpY3RfdW5pY29kZV90b19ieXRlcywgZCwgcmVwZWF0KGVuY29kaW5nKSwgcmVwZWF0KGVycm9ycykpKQogICAgZWxpZiBpc2luc3RhbmNlKGQsIHR1cGxlKToKICAgICAgICByZXR1cm4gdHVwbGUobWFwKGpzb25fZGljdF91bmljb2RlX3RvX2J5dGVzLCBkLCByZXBlYXQoZW5jb2RpbmcpLCByZXBlYXQoZXJyb3JzKSkpCiAgICBlbHNlOgogICAgICAgIHJldHVybiBkCgpkZWYganNvbl9kaWN0X2J5dGVzX3RvX3VuaWNvZGUoZCwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0Jyk6CiAgICAnJycgUmVjdXJzaXZlbHkgY29udmVydCBkaWN0IGtleXMgYW5kIHZhbHVlcyB0byBieXRlIHN0cgoKICAgICAgICBTcGVjaWFsaXplZCBmb3IganNvbiByZXR1cm4gYmVjYXVzZSB0aGlzIG9ubHkgaGFuZGxlcywgbGlzdHMsIHR1cGxlcywKICAgICAgICBhbmQgZGljdCBjb250YWluZXIgdHlwZXMgKHRoZSBjb250YWluZXJzIHRoYXQgdGhlIGpzb24gbW9kdWxlIHJldHVybnMpCiAgICAnJycKCiAgICBpZiBpc2luc3RhbmNlKGQsIGJpbmFyeV90eXBlKToKICAgICAgICAjIFdhcm5pbmcsIGNhbiB0cmFjZWJhY2sKICAgICAgICByZXR1cm4gdG9fdGV4dChkLCBlbmNvZGluZz1lbmNvZGluZywgZXJyb3JzPWVycm9ycykKICAgIGVsaWYgaXNpbnN0YW5jZShkLCBkaWN0KToKICAgICAgICByZXR1cm4gZGljdChtYXAoanNvbl9kaWN0X2J5dGVzX3RvX3VuaWNvZGUsIGl0ZXJpdGVtcyhkKSwgcmVwZWF0KGVuY29kaW5nKSwgcmVwZWF0KGVycm9ycykpKQogICAgZWxpZiBpc2luc3RhbmNlKGQsIGxpc3QpOgogICAgICAgIHJldHVybiBsaXN0KG1hcChqc29uX2RpY3RfYnl0ZXNfdG9fdW5pY29kZSwgZCwgcmVwZWF0KGVuY29kaW5nKSwgcmVwZWF0KGVycm9ycykpKQogICAgZWxpZiBpc2luc3RhbmNlKGQsIHR1cGxlKToKICAgICAgICByZXR1cm4gdHVwbGUobWFwKGpzb25fZGljdF9ieXRlc190b191bmljb2RlLCBkLCByZXBlYXQoZW5jb2RpbmcpLCByZXBlYXQoZXJyb3JzKSkpCiAgICBlbHNlOgogICAgICAgIHJldHVybiBkCgpkZWYgcmV0dXJuX3ZhbHVlcyhvYmopOgogICAgIiIiIFJldHVybiBuYXRpdmUgc3RyaW5naWZpZWQgdmFsdWVzIGZyb20gZGF0YXN0cnVjdHVyZXMuCgogICAgRm9yIHVzZSB3aXRoIHJlbW92aW5nIHNlbnNpdGl2ZSB2YWx1ZXMgcHJlLWpzb25pZmljYXRpb24uIiIiCiAgICBpZiBpc2luc3RhbmNlKG9iaiwgKHRleHRfdHlwZSwgYmluYXJ5X3R5cGUpKToKICAgICAgICBpZiBvYmo6CiAgICAgICAgICAgIHlpZWxkIHRvX25hdGl2ZShvYmosIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgcmV0dXJuCiAgICBlbGlmIGlzaW5zdGFuY2Uob2JqLCBTRVFVRU5DRVRZUEUpOgogICAgICAgIGZvciBlbGVtZW50IGluIG9iajoKICAgICAgICAgICAgZm9yIHN1YmVsZW1lbnQgaW4gcmV0dXJuX3ZhbHVlcyhlbGVtZW50KToKICAgICAgICAgICAgICAgIHlpZWxkIHN1YmVsZW1lbnQKICAgIGVsaWYgaXNpbnN0YW5jZShvYmosIE1hcHBpbmcpOgogICAgICAgIGZvciBlbGVtZW50IGluIG9iai5pdGVtcygpOgogICAgICAgICAgICBmb3Igc3ViZWxlbWVudCBpbiByZXR1cm5fdmFsdWVzKGVsZW1lbnRbMV0pOgogICAgICAgICAgICAgICAgeWllbGQgc3ViZWxlbWVudAogICAgZWxpZiBpc2luc3RhbmNlKG9iaiwgKGJvb2wsIE5vbmVUeXBlKSk6CiAgICAgICAgIyBUaGlzIG11c3QgY29tZSBiZWZvcmUgaW50IGJlY2F1c2UgYm9vbHMgYXJlIGFsc28gaW50cwogICAgICAgIHJldHVybgogICAgZWxpZiBpc2luc3RhbmNlKG9iaiwgTlVNQkVSVFlQRVMpOgogICAgICAgIHlpZWxkIHRvX25hdGl2ZShvYmosIG5vbnN0cmluZz0nc2ltcGxlcmVwcicpCiAgICBlbHNlOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignVW5rbm93biBwYXJhbWV0ZXIgdHlwZTogJXMsICVzJyAlICh0eXBlKG9iaiksIG9iaikpCgpkZWYgcmVtb3ZlX3ZhbHVlcyh2YWx1ZSwgbm9fbG9nX3N0cmluZ3MpOgogICAgIiIiIFJlbW92ZSBzdHJpbmdzIGluIG5vX2xvZ19zdHJpbmdzIGZyb20gdmFsdWUuICBJZiB2YWx1ZSBpcyBhIGNvbnRhaW5lcgogICAgdHlwZSwgdGhlbiByZW1vdmUgYSBsb3QgbW9yZSIiIgogICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgKHRleHRfdHlwZSwgYmluYXJ5X3R5cGUpKToKICAgICAgICAjIE5lZWQgbmF0aXZlIHN0ciB0eXBlCiAgICAgICAgbmF0aXZlX3N0cl92YWx1ZSA9IHZhbHVlCiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgdGV4dF90eXBlKToKICAgICAgICAgICAgdmFsdWVfaXNfdGV4dCA9IFRydWUKICAgICAgICAgICAgaWYgUFkyOgogICAgICAgICAgICAgICAgbmF0aXZlX3N0cl92YWx1ZSA9IHRvX2J5dGVzKHZhbHVlLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQogICAgICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgYmluYXJ5X3R5cGUpOgogICAgICAgICAgICB2YWx1ZV9pc190ZXh0ID0gRmFsc2UKICAgICAgICAgICAgaWYgUFkzOgogICAgICAgICAgICAgICAgbmF0aXZlX3N0cl92YWx1ZSA9IHRvX3RleHQodmFsdWUsIGVuY29kaW5nPSd1dGYtOCcsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCgogICAgICAgIGlmIG5hdGl2ZV9zdHJfdmFsdWUgaW4gbm9fbG9nX3N0cmluZ3M6CiAgICAgICAgICAgIHJldHVybiAnVkFMVUVfU1BFQ0lGSUVEX0lOX05PX0xPR19QQVJBTUVURVInCiAgICAgICAgZm9yIG9taXRfbWUgaW4gbm9fbG9nX3N0cmluZ3M6CiAgICAgICAgICAgIG5hdGl2ZV9zdHJfdmFsdWUgPSBuYXRpdmVfc3RyX3ZhbHVlLnJlcGxhY2Uob21pdF9tZSwgJyonICogOCkKCiAgICAgICAgaWYgdmFsdWVfaXNfdGV4dCBhbmQgaXNpbnN0YW5jZShuYXRpdmVfc3RyX3ZhbHVlLCBiaW5hcnlfdHlwZSk6CiAgICAgICAgICAgIHZhbHVlID0gdG9fdGV4dChuYXRpdmVfc3RyX3ZhbHVlLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3JlcGxhY2UnKQogICAgICAgIGVsaWYgbm90IHZhbHVlX2lzX3RleHQgYW5kIGlzaW5zdGFuY2UobmF0aXZlX3N0cl92YWx1ZSwgdGV4dF90eXBlKToKICAgICAgICAgICAgdmFsdWUgPSB0b19ieXRlcyhuYXRpdmVfc3RyX3ZhbHVlLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3JlcGxhY2UnKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHZhbHVlID0gbmF0aXZlX3N0cl92YWx1ZQogICAgZWxpZiBpc2luc3RhbmNlKHZhbHVlLCBTRVFVRU5DRVRZUEUpOgogICAgICAgIHJldHVybiBbcmVtb3ZlX3ZhbHVlcyhlbGVtLCBub19sb2dfc3RyaW5ncykgZm9yIGVsZW0gaW4gdmFsdWVdCiAgICBlbGlmIGlzaW5zdGFuY2UodmFsdWUsIE1hcHBpbmcpOgogICAgICAgIHJldHVybiBkaWN0KChrLCByZW1vdmVfdmFsdWVzKHYsIG5vX2xvZ19zdHJpbmdzKSkgZm9yIGssIHYgaW4gdmFsdWUuaXRlbXMoKSkKICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgdHVwbGUoY2hhaW4oTlVNQkVSVFlQRVMsIChib29sLCBOb25lVHlwZSkpKSk6CiAgICAgICAgc3RyaW5neV92YWx1ZSA9IHRvX25hdGl2ZSh2YWx1ZSwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKICAgICAgICBpZiBzdHJpbmd5X3ZhbHVlIGluIG5vX2xvZ19zdHJpbmdzOgogICAgICAgICAgICByZXR1cm4gJ1ZBTFVFX1NQRUNJRklFRF9JTl9OT19MT0dfUEFSQU1FVEVSJwogICAgICAgIGZvciBvbWl0X21lIGluIG5vX2xvZ19zdHJpbmdzOgogICAgICAgICAgICBpZiBvbWl0X21lIGluIHN0cmluZ3lfdmFsdWU6CiAgICAgICAgICAgICAgICByZXR1cm4gJ1ZBTFVFX1NQRUNJRklFRF9JTl9OT19MT0dfUEFSQU1FVEVSJwogICAgZWxpZiBpc2luc3RhbmNlKHZhbHVlLCBkYXRldGltZS5kYXRldGltZSk6CiAgICAgICAgdmFsdWUgPSB2YWx1ZS5pc29mb3JtYXQoKQogICAgZWxzZToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ1ZhbHVlIG9mIHVua25vd24gdHlwZTogJXMsICVzJyAlICh0eXBlKHZhbHVlKSwgdmFsdWUpKQogICAgcmV0dXJuIHZhbHVlCgoKZGVmIGhldXJpc3RpY19sb2dfc2FuaXRpemUoZGF0YSwgbm9fbG9nX3ZhbHVlcz1Ob25lKToKICAgICcnJyBSZW1vdmUgc3RyaW5ncyB0aGF0IGxvb2sgbGlrZSBwYXNzd29yZHMgZnJvbSBsb2cgbWVzc2FnZXMgJycnCiAgICAjIEN1cnJlbnRseSBmaWx0ZXJzOgogICAgIyB1c2VyOnBhc3NAZm9vL3doYXRldmVyIGFuZCBodHRwOi8vdXNlcm5hbWU6cGFzc0B3aGVyZXZlci9mb28KICAgICMgVGhpcyBjb2RlIGhhcyBmYWxzZSBwb3NpdGl2ZXMgYW5kIGNvbnN1bWVzIHBhcnRzIG9mIGxvZ3MgdGhhdCBhcmUKICAgICMgbm90IHBhc3N3ZHMKCiAgICAjIGJlZ2luOiBzdGFydCBvZiBhIHBhc3N3ZCBjb250YWluaW5nIHN0cmluZwogICAgIyBlbmQ6IGVuZCBvZiBhIHBhc3N3ZCBjb250YWluaW5nIHN0cmluZwogICAgIyBzZXA6IGNoYXIgYmV0d2VlbiB1c2VyIGFuZCBwYXNzd2QKICAgICMgcHJldl9iZWdpbjogd2hlcmUgaW4gdGhlIG92ZXJhbGwgc3RyaW5nIHRvIHN0YXJ0IGEgc2VhcmNoIGZvcgogICAgIyAgIGEgcGFzc3dkCiAgICAjIHNlcF9zZWFyY2hfZW5kOiB3aGVyZSBpbiB0aGUgc3RyaW5nIHRvIGVuZCBhIHNlYXJjaCBmb3IgdGhlIHNlcAogICAgZGF0YSA9IHRvX25hdGl2ZShkYXRhKQoKICAgIG91dHB1dCA9IFtdCiAgICBiZWdpbiA9IGxlbihkYXRhKQogICAgcHJldl9iZWdpbiA9IGJlZ2luCiAgICBzZXAgPSAxCiAgICB3aGlsZSBzZXA6CiAgICAgICAgIyBGaW5kIHRoZSBwb3RlbnRpYWwgZW5kIG9mIGEgcGFzc3dkCiAgICAgICAgdHJ5OgogICAgICAgICAgICBlbmQgPSBkYXRhLnJpbmRleCgnQCcsIDAsIGJlZ2luKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICAjIE5vIHBhc3N3ZCBpbiB0aGUgcmVzdCBvZiB0aGUgZGF0YQogICAgICAgICAgICBvdXRwdXQuaW5zZXJ0KDAsIGRhdGFbMDpiZWdpbl0pCiAgICAgICAgICAgIGJyZWFrCgogICAgICAgICMgU2VhcmNoIGZvciB0aGUgYmVnaW5uaW5nIG9mIGEgcGFzc3dkCiAgICAgICAgc2VwID0gTm9uZQogICAgICAgIHNlcF9zZWFyY2hfZW5kID0gZW5kCiAgICAgICAgd2hpbGUgbm90IHNlcDoKICAgICAgICAgICAgIyBVUkwtc3R5bGUgdXNlcm5hbWUrcGFzc3dvcmQKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgYmVnaW4gPSBkYXRhLnJpbmRleCgnOi8vJywgMCwgc2VwX3NlYXJjaF9lbmQpCiAgICAgICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICAgICAgIyBObyB1cmwgc3R5bGUgaW4gdGhlIGRhdGEsIGNoZWNrIGZvciBzc2ggc3R5bGUgaW4gdGhlCiAgICAgICAgICAgICAgICAjIHJlc3Qgb2YgdGhlIHN0cmluZwogICAgICAgICAgICAgICAgYmVnaW4gPSAwCiAgICAgICAgICAgICMgU2VhcmNoIGZvciBzZXBhcmF0b3IKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VwID0gZGF0YS5pbmRleCgnOicsIGJlZ2luICsgMywgZW5kKQogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgICAgICMgTm8gc2VwYXJhdG9yOyBjaG9pY2VzOgogICAgICAgICAgICAgICAgaWYgYmVnaW4gPT0gMDoKICAgICAgICAgICAgICAgICAgICAjIFNlYXJjaGVkIHRoZSB3aG9sZSBzdHJpbmcgc28gdGhlcmUncyBubyBwYXNzd29yZAogICAgICAgICAgICAgICAgICAgICMgaGVyZS4gIFJldHVybiB0aGUgcmVtYWluaW5nIGRhdGEKICAgICAgICAgICAgICAgICAgICBvdXRwdXQuaW5zZXJ0KDAsIGRhdGFbMDpiZWdpbl0pCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICMgU2VhcmNoIGZvciBhIGRpZmZlcmVudCBiZWdpbm5pbmcgb2YgdGhlIHBhc3N3b3JkIGZpZWxkLgogICAgICAgICAgICAgICAgc2VwX3NlYXJjaF9lbmQgPSBiZWdpbgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICBpZiBzZXA6CiAgICAgICAgICAgICMgUGFzc3dvcmQgd2FzIGZvdW5kOyByZW1vdmUgaXQuCiAgICAgICAgICAgIG91dHB1dC5pbnNlcnQoMCwgZGF0YVtlbmQ6cHJldl9iZWdpbl0pCiAgICAgICAgICAgIG91dHB1dC5pbnNlcnQoMCwgJyoqKioqKioqJykKICAgICAgICAgICAgb3V0cHV0Lmluc2VydCgwLCBkYXRhW2JlZ2luOnNlcCArIDFdKQogICAgICAgICAgICBwcmV2X2JlZ2luID0gYmVnaW4KCiAgICBvdXRwdXQgPSAnJy5qb2luKG91dHB1dCkKICAgIGlmIG5vX2xvZ192YWx1ZXM6CiAgICAgICAgb3V0cHV0ID0gcmVtb3ZlX3ZhbHVlcyhvdXRwdXQsIG5vX2xvZ192YWx1ZXMpCiAgICByZXR1cm4gb3V0cHV0CgpkZWYgYnl0ZXNfdG9faHVtYW4oc2l6ZSwgaXNiaXRzPUZhbHNlLCB1bml0PU5vbmUpOgoKICAgIGJhc2UgPSAnQnl0ZXMnCiAgICBpZiBpc2JpdHM6CiAgICAgICAgYmFzZSA9ICdiaXRzJwogICAgc3VmZml4ID0gJycKCiAgICBmb3Igc3VmZml4LCBsaW1pdCBpbiBzb3J0ZWQoaXRlcml0ZW1zKFNJWkVfUkFOR0VTKSwga2V5PWxhbWJkYSBpdGVtOiAtaXRlbVsxXSk6CiAgICAgICAgaWYgKHVuaXQgaXMgTm9uZSBhbmQgc2l6ZSA+PSBsaW1pdCkgb3IgdW5pdCBpcyBub3QgTm9uZSBhbmQgdW5pdC51cHBlcigpID09IHN1ZmZpeFswXToKICAgICAgICAgICAgYnJlYWsKCiAgICBpZiBsaW1pdCAhPSAxOgogICAgICAgIHN1ZmZpeCArPSBiYXNlWzBdCiAgICBlbHNlOgogICAgICAgIHN1ZmZpeCA9IGJhc2UKCiAgICByZXR1cm4gJyUuMmYgJXMnICUgKGZsb2F0KHNpemUpLyBsaW1pdCwgc3VmZml4KQoKZGVmIGh1bWFuX3RvX2J5dGVzKG51bWJlciwgZGVmYXVsdF91bml0PU5vbmUsIGlzYml0cz1GYWxzZSk6CgogICAgJycnCiAgICBDb252ZXJ0IG51bWJlciBpbiBzdHJpbmcgZm9ybWF0IGludG8gYnl0ZXMgKGV4OiAnMksnID0+IDIwNDgpIG9yIHVzaW5nIHVuaXQgYXJndW1lbnQKICAgIGV4OgogICAgICBodW1hbl90b19ieXRlcygnMTBNJykgPD0+IGh1bWFuX3RvX2J5dGVzKDEwLCAnTScpCiAgICAnJycKICAgIG0gPSByZS5zZWFyY2goJ15ccyooXGQqXC4/XGQqKVxzKihbQS1aYS16XSspPycsIHN0cihudW1iZXIpLCBmbGFncz1yZS5JR05PUkVDQVNFKQogICAgaWYgbSBpcyBOb25lOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImh1bWFuX3RvX2J5dGVzKCkgY2FuJ3QgaW50ZXJwcmV0IGZvbGxvd2luZyBzdHJpbmc6ICVzIiAlIHN0cihudW1iZXIpKQogICAgdHJ5OgogICAgICAgIG51bSA9IGZsb2F0KG0uZ3JvdXAoMSkpCiAgICBleGNlcHQ6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiaHVtYW5fdG9fYnl0ZXMoKSBjYW4ndCBpbnRlcnByZXQgZm9sbG93aW5nIG51bWJlcjogJXMgKG9yaWdpbmFsIGlucHV0IHN0cmluZzogJXMpIiAlIChtLmdyb3VwKDEpLCBudW1iZXIpKQoKICAgIHVuaXQgPSBtLmdyb3VwKDIpCiAgICBpZiB1bml0IGlzIE5vbmU6CiAgICAgICAgdW5pdCA9IGRlZmF1bHRfdW5pdAoKICAgIGlmIHVuaXQgaXMgTm9uZToKICAgICAgICAnJycgTm8gdW5pdCBnaXZlbiwgcmV0dXJuaW5nIHJhdyBudW1iZXIgJycnCiAgICAgICAgcmV0dXJuIGludChyb3VuZChudW0pKQogICAgcmFuZ2Vfa2V5ID0gdW5pdFswXS51cHBlcigpCiAgICB0cnk6CiAgICAgICAgbGltaXQgPSBTSVpFX1JBTkdFU1tyYW5nZV9rZXldCiAgICBleGNlcHQ6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiaHVtYW5fdG9fYnl0ZXMoKSBmYWlsZWQgdG8gY29udmVydCAlcyAodW5pdCA9ICVzKS4gVGhlIHN1ZmZpeCBtdXN0IGJlIG9uZSBvZiAlcyIgJSAobnVtYmVyLCB1bml0LCAiLCAiLmpvaW4oU0laRV9SQU5HRVMua2V5cygpKSkpCgogICAgIyBkZWZhdWx0IHZhbHVlCiAgICB1bml0X2NsYXNzID0gJ0InCiAgICB1bml0X2NsYXNzX25hbWUgPSAnYnl0ZScKICAgICMgaGFuZGxpbmcgYml0cyBjYXNlCiAgICBpZiBpc2JpdHM6CiAgICAgICAgdW5pdF9jbGFzcyA9ICdiJwogICAgICAgIHVuaXRfY2xhc3NfbmFtZSA9ICdiaXQnCiAgICAjIGNoZWNrIHVuaXQgdmFsdWUgaWYgbW9yZSB0aGFuIG9uZSBjaGFyYWN0ZXIgKEtCLCBNQikKICAgIGlmIGxlbih1bml0KSA+IDE6CiAgICAgICAgZXhwZWN0X21lc3NhZ2UgPSAnZXhwZWN0ICVzJXMgb3IgJXMnICUgKHJhbmdlX2tleSwgdW5pdF9jbGFzcywgcmFuZ2Vfa2V5KQogICAgICAgIGlmIHJhbmdlX2tleSA9PSAnQic6CiAgICAgICAgICAgIGV4cGVjdF9tZXNzYWdlID0gJ2V4cGVjdCAlcyBvciAlcycgJSAodW5pdF9jbGFzcywgdW5pdF9jbGFzc19uYW1lKQoKICAgICAgICBpZiB1bml0X2NsYXNzX25hbWUgaW4gdW5pdC5sb3dlcigpOgogICAgICAgICAgICBwYXNzCiAgICAgICAgZWxpZiB1bml0WzFdICE9IHVuaXRfY2xhc3M6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImh1bWFuX3RvX2J5dGVzKCkgZmFpbGVkIHRvIGNvbnZlcnQgJXMuIFZhbHVlIGlzIG5vdCBhIHZhbGlkIHN0cmluZyAoJXMpIiAlIChudW1iZXIsIGV4cGVjdF9tZXNzYWdlKSkKCiAgICByZXR1cm4gaW50KHJvdW5kKG51bSAqIGxpbWl0KSkKCmRlZiBpc19leGVjdXRhYmxlKHBhdGgpOgogICAgJycnaXMgdGhlIGdpdmVuIHBhdGggZXhlY3V0YWJsZT8KCiAgICBMaW1pdGF0aW9uczoKICAgICogRG9lcyBub3QgYWNjb3VudCBmb3IgRlNBQ0xzLgogICAgKiBNb3N0IHRpbWVzIHdlIHJlYWxseSB3YW50IHRvIGtub3cgIkNhbiB0aGUgY3VycmVudCB1c2VyIGV4ZWN1dGUgdGhpcwogICAgICBmaWxlIiAgVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCB0ZWxsIHVzIHRoYXQsIG9ubHkgaWYgYW4gZXhlY3V0ZSBiaXQgaXMgc2V0LgogICAgJycnCiAgICAjIFRoZXNlIGFyZSBhbGwgYml0ZmllbGRzIHNvIGZpcnN0IGJpdHdpc2Utb3IgYWxsIHRoZSBwZXJtaXNzaW9ucyB3ZSdyZQogICAgIyBsb29raW5nIGZvciwgdGhlbiBiaXR3aXNlLWFuZCB3aXRoIHRoZSBmaWxlJ3MgbW9kZSB0byBkZXRlcm1pbmUgaWYgYW55CiAgICAjIGV4ZWN1dGUgYml0cyBhcmUgc2V0LgogICAgcmV0dXJuICgoc3RhdC5TX0lYVVNSIHwgc3RhdC5TX0lYR1JQIHwgc3RhdC5TX0lYT1RIKSAmIG9zLnN0YXQocGF0aClbc3RhdC5TVF9NT0RFXSkKCmRlZiBfbG9hZF9wYXJhbXMoKToKICAgICcnJyByZWFkIHRoZSBtb2R1bGVzIHBhcmFtZXRlcnMgYW5kIHN0b3JlIHRoZW0gZ2xvYmFsbHkuCgogICAgVGhpcyBmdW5jdGlvbiBtYXkgYmUgbmVlZGVkIGZvciBjZXJ0YWluIHZlcnkgZHluYW1pYyBjdXN0b20gbW9kdWxlcyB3aGljaAogICAgd2FudCB0byBwcm9jZXNzIHRoZSBwYXJhbWV0ZXJzIHRoYXQgYXJlIGJlaW5nIGhhbmRlZCB0aGUgbW9kdWxlLiAgU2luY2UKICAgIHRoaXMgaXMgc28gY2xvc2VseSB0aWVkIHRvIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiBtb2R1bGVzIHdlIGNhbm5vdAogICAgZ3VhcmFudGVlIEFQSSBzdGFiaWxpdHkgZm9yIGl0IChpdCBtYXkgY2hhbmdlIGJldHdlZW4gdmVyc2lvbnMpIGhvd2V2ZXIgd2UKICAgIHdpbGwgdHJ5IG5vdCB0byBicmVhayBpdCBncmF0dWl0b3VzbHkuICBJdCBpcyBjZXJ0YWlubHkgbW9yZSBmdXR1cmUtcHJvb2YKICAgIHRvIGNhbGwgdGhpcyBmdW5jdGlvbiBhbmQgY29uc3VtZSBpdHMgb3V0cHV0cyB0aGFuIHRvIGltcGxlbWVudCB0aGUgbG9naWMKICAgIGluc2lkZSBpdCBhcyBhIGNvcHkgaW4geW91ciBvd24gY29kZS4KICAgICcnJwogICAgZ2xvYmFsIF9BTlNJQkxFX0FSR1MKICAgIGlmIF9BTlNJQkxFX0FSR1MgaXMgbm90IE5vbmU6CiAgICAgICAgYnVmZmVyID0gX0FOU0lCTEVfQVJHUwogICAgZWxzZToKICAgICAgICAjIGRlYnVnIG92ZXJyaWRlcyB0byByZWFkIGFyZ3MgZnJvbSBmaWxlIG9yIGNtZGxpbmUKCiAgICAgICAgIyBBdm9pZCB0cmFjZWJhY2tzIHdoZW4gbG9jYWxlIGlzIG5vbi11dGY4CiAgICAgICAgIyBXZSBjb250cm9sIHRoZSBhcmdzIGFuZCB3ZSBwYXNzIHRoZW0gYXMgdXRmOAogICAgICAgIGlmIGxlbihzeXMuYXJndikgPiAxOgogICAgICAgICAgICBpZiBvcy5wYXRoLmlzZmlsZShzeXMuYXJndlsxXSk6CiAgICAgICAgICAgICAgICBmZCA9IG9wZW4oc3lzLmFyZ3ZbMV0sICdyYicpCiAgICAgICAgICAgICAgICBidWZmZXIgPSBmZC5yZWFkKCkKICAgICAgICAgICAgICAgIGZkLmNsb3NlKCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGJ1ZmZlciA9IHN5cy5hcmd2WzFdCiAgICAgICAgICAgICAgICBpZiBQWTM6CiAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gYnVmZmVyLmVuY29kZSgndXRmLTgnLCBlcnJvcnM9J3N1cnJvZ2F0ZWVzY2FwZScpCiAgICAgICAgIyBkZWZhdWx0IGNhc2UsIHJlYWQgZnJvbSBzdGRpbgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGlmIFBZMjoKICAgICAgICAgICAgICAgIGJ1ZmZlciA9IHN5cy5zdGRpbi5yZWFkKCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGJ1ZmZlciA9IHN5cy5zdGRpbi5idWZmZXIucmVhZCgpCiAgICAgICAgX0FOU0lCTEVfQVJHUyA9IGJ1ZmZlcgoKICAgIHRyeToKICAgICAgICBwYXJhbXMgPSBqc29uLmxvYWRzKGJ1ZmZlci5kZWNvZGUoJ3V0Zi04JykpCiAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAjIFRoaXMgaGVscGVyIHVzZWQgdG9vIGVhcmx5IGZvciBmYWlsX2pzb24gdG8gd29yay4KICAgICAgICBwcmludCgnXG57Im1zZyI6ICJFcnJvcjogTW9kdWxlIHVuYWJsZSB0byBkZWNvZGUgdmFsaWQgSlNPTiBvbiBzdGRpbi4gIFVuYWJsZSB0byBmaWd1cmUgb3V0IHdoYXQgcGFyYW1ldGVycyB3ZXJlIHBhc3NlZCIsICJmYWlsZWQiOiB0cnVlfScpCiAgICAgICAgc3lzLmV4aXQoMSkKCiAgICBpZiBQWTI6CiAgICAgICAgcGFyYW1zID0ganNvbl9kaWN0X3VuaWNvZGVfdG9fYnl0ZXMocGFyYW1zKQoKICAgIHRyeToKICAgICAgICByZXR1cm4gcGFyYW1zWydBTlNJQkxFX01PRFVMRV9BUkdTJ10KICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAjIFRoaXMgaGVscGVyIGRvZXMgbm90IGhhdmUgYWNjZXNzIHRvIGZhaWxfanNvbiBzbyB3ZSBoYXZlIHRvIHByaW50CiAgICAgICAgIyBqc29uIG91dHB1dCBvbiBvdXIgb3duLgogICAgICAgIHByaW50KCdcbnsibXNnIjogIkVycm9yOiBNb2R1bGUgdW5hYmxlIHRvIGxvY2F0ZSBBTlNJQkxFX01PRFVMRV9BUkdTIGluIGpzb24gZGF0YSBmcm9tIHN0ZGluLiAgVW5hYmxlIHRvIGZpZ3VyZSBvdXQgd2hhdCBwYXJhbWV0ZXJzIHdlcmUgcGFzc2VkIiwgJwogICAgICAgICAgICAgICciZmFpbGVkIjogdHJ1ZX0nKQogICAgICAgIHN5cy5leGl0KDEpCgpkZWYgZW52X2ZhbGxiYWNrKCphcmdzLCAqKmt3YXJncyk6CiAgICAnJycgTG9hZCB2YWx1ZSBmcm9tIGVudmlyb25tZW50ICcnJwogICAgZm9yIGFyZyBpbiBhcmdzOgogICAgICAgIGlmIGFyZyBpbiBvcy5lbnZpcm9uOgogICAgICAgICAgICByZXR1cm4gb3MuZW52aXJvblthcmddCiAgICBlbHNlOgogICAgICAgIHJhaXNlIEFuc2libGVGYWxsYmFja05vdEZvdW5kCgpkZWYgX2xlbmllbnRfbG93ZXJjYXNlKGxzdCk6CiAgICAiIiJMb3dlcmNhc2UgZWxlbWVudHMgb2YgYSBsaXN0LgoKICAgIElmIGFuIGVsZW1lbnQgaXMgbm90IGEgc3RyaW5nLCBwYXNzIGl0IHRocm91Z2ggdW50b3VjaGVkLgogICAgIiIiCiAgICBsb3dlcmVkID0gW10KICAgIGZvciB2YWx1ZSBpbiBsc3Q6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBsb3dlcmVkLmFwcGVuZCh2YWx1ZS5sb3dlcigpKQogICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoKICAgICAgICAgICAgbG93ZXJlZC5hcHBlbmQodmFsdWUpCiAgICByZXR1cm4gbG93ZXJlZAoKZGVmIGZvcm1hdF9hdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpOgogICAgYXR0cmlidXRlX2xpc3QgPSBbXQogICAgZm9yIGF0dHIgaW4gYXR0cmlidXRlczoKICAgICAgICBpZiBhdHRyIGluIEZJTEVfQVRUUklCVVRFUzoKICAgICAgICAgICAgYXR0cmlidXRlX2xpc3QuYXBwZW5kKEZJTEVfQVRUUklCVVRFU1thdHRyXSkKICAgIHJldHVybiBhdHRyaWJ1dGVfbGlzdAoKZGVmIGdldF9mbGFnc19mcm9tX2F0dHJpYnV0ZXMoYXR0cmlidXRlcyk6CiAgICBmbGFncyA9IFtdCiAgICBmb3Iga2V5LGF0dHIgaW4gRklMRV9BVFRSSUJVVEVTLml0ZW1zKCk6CiAgICAgICAgaWYgYXR0ciBpbiBhdHRyaWJ1dGVzOgogICAgICAgICAgICBmbGFncy5hcHBlbmQoa2V5KQogICAgcmV0dXJuICcnLmpvaW4oZmxhZ3MpCgpjbGFzcyBBbnNpYmxlRmFsbGJhY2tOb3RGb3VuZChFeGNlcHRpb24pOgogICAgcGFzcwoKCmNsYXNzIEFuc2libGVNb2R1bGUob2JqZWN0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBhcmd1bWVudF9zcGVjLCBieXBhc3NfY2hlY2tzPUZhbHNlLCBub19sb2c9RmFsc2UsCiAgICAgICAgICAgICAgICAgY2hlY2tfaW52YWxpZF9hcmd1bWVudHM9VHJ1ZSwgbXV0dWFsbHlfZXhjbHVzaXZlPU5vbmUsIHJlcXVpcmVkX3RvZ2V0aGVyPU5vbmUsCiAgICAgICAgICAgICAgICAgcmVxdWlyZWRfb25lX29mPU5vbmUsIGFkZF9maWxlX2NvbW1vbl9hcmdzPUZhbHNlLCBzdXBwb3J0c19jaGVja19tb2RlPUZhbHNlLAogICAgICAgICAgICAgICAgIHJlcXVpcmVkX2lmPU5vbmUpOgoKICAgICAgICAnJycKICAgICAgICBjb21tb24gY29kZSBmb3IgcXVpY2tseSBidWlsZGluZyBhbiBhbnNpYmxlIG1vZHVsZSBpbiBQeXRob24KICAgICAgICAoYWx0aG91Z2ggeW91IGNhbiB3cml0ZSBtb2R1bGVzIGluIGFueXRoaW5nIHRoYXQgY2FuIHJldHVybiBKU09OKQogICAgICAgIHNlZSBsaWJyYXJ5LyogZm9yIGV4YW1wbGVzCiAgICAgICAgJycnCgogICAgICAgIHNlbGYuX25hbWUgPSBvcy5wYXRoLmJhc2VuYW1lKF9fZmlsZV9fKSAjaW5pdGlhbGl6ZSBuYW1lIHVudGlsIHdlIGNhbiBwYXJzZSBmcm9tIG9wdGlvbnMKICAgICAgICBzZWxmLmFyZ3VtZW50X3NwZWMgPSBhcmd1bWVudF9zcGVjCiAgICAgICAgc2VsZi5zdXBwb3J0c19jaGVja19tb2RlID0gc3VwcG9ydHNfY2hlY2tfbW9kZQogICAgICAgIHNlbGYuY2hlY2tfbW9kZSA9IEZhbHNlCiAgICAgICAgc2VsZi5ub19sb2cgPSBub19sb2cKICAgICAgICBzZWxmLmNsZWFudXBfZmlsZXMgPSBbXQogICAgICAgIHNlbGYuX2RlYnVnID0gRmFsc2UKICAgICAgICBzZWxmLl9kaWZmID0gRmFsc2UKICAgICAgICBzZWxmLl9zb2NrZXRfcGF0aCA9IE5vbmUKICAgICAgICBzZWxmLl92ZXJib3NpdHkgPSAwCiAgICAgICAgIyBNYXkgYmUgdXNlZCB0byBzZXQgbW9kaWZpY2F0aW9ucyB0byB0aGUgZW52aXJvbm1lbnQgZm9yIGFueQogICAgICAgICMgcnVuX2NvbW1hbmQgaW52b2NhdGlvbgogICAgICAgIHNlbGYucnVuX2NvbW1hbmRfZW52aXJvbl91cGRhdGUgPSB7fQogICAgICAgIHNlbGYuX3dhcm5pbmdzID0gW10KICAgICAgICBzZWxmLl9kZXByZWNhdGlvbnMgPSBbXQoKICAgICAgICBzZWxmLmFsaWFzZXMgPSB7fQogICAgICAgIHNlbGYuX2xlZ2FsX2lucHV0cyA9IFsnX2Fuc2libGVfY2hlY2tfbW9kZScsICdfYW5zaWJsZV9ub19sb2cnLCAnX2Fuc2libGVfZGVidWcnLCAnX2Fuc2libGVfZGlmZicsICdfYW5zaWJsZV92ZXJib3NpdHknLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnX2Fuc2libGVfc2VsaW51eF9zcGVjaWFsX2ZzJywgJ19hbnNpYmxlX21vZHVsZV9uYW1lJywgJ19hbnNpYmxlX3ZlcnNpb24nLCAnX2Fuc2libGVfc3lzbG9nX2ZhY2lsaXR5JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ19hbnNpYmxlX3NvY2tldCddCgogICAgICAgIGlmIGFkZF9maWxlX2NvbW1vbl9hcmdzOgogICAgICAgICAgICBmb3IgaywgdiBpbiBGSUxFX0NPTU1PTl9BUkdVTUVOVFMuaXRlbXMoKToKICAgICAgICAgICAgICAgIGlmIGsgbm90IGluIHNlbGYuYXJndW1lbnRfc3BlYzoKICAgICAgICAgICAgICAgICAgICBzZWxmLmFyZ3VtZW50X3NwZWNba10gPSB2CgogICAgICAgIHNlbGYuX2xvYWRfcGFyYW1zKCkKICAgICAgICBzZWxmLl9zZXRfZmFsbGJhY2tzKCkKCiAgICAgICAgIyBhcHBlbmQgdG8gbGVnYWxfaW5wdXRzIGFuZCB0aGVuIHBvc3NpYmx5IGNoZWNrIGFnYWluc3QgdGhlbQogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5hbGlhc2VzID0gc2VsZi5faGFuZGxlX2FsaWFzZXMoKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgIyBVc2UgZXhjZXB0aW9ucyBoZXJlIGJlY2F1c2UgaXQgaXNuJ3Qgc2FmZSB0byBjYWxsIGZhaWxfanNvbiB1bnRpbCBub19sb2cgaXMgcHJvY2Vzc2VkCiAgICAgICAgICAgIHByaW50KCdcbnsiZmFpbGVkIjogdHJ1ZSwgIm1zZyI6ICJNb2R1bGUgYWxpYXMgZXJyb3I6ICVzIn0nICUgc3RyKGUpKQogICAgICAgICAgICBzeXMuZXhpdCgxKQoKICAgICAgICAjIFNhdmUgcGFyYW1ldGVyIHZhbHVlcyB0aGF0IHNob3VsZCBuZXZlciBiZSBsb2dnZWQKICAgICAgICBzZWxmLm5vX2xvZ192YWx1ZXMgPSBzZXQoKQogICAgICAgICMgVXNlIHRoZSBhcmdzcGVjIHRvIGRldGVybWluZSB3aGljaCBhcmdzIGFyZSBub19sb2cKICAgICAgICBmb3IgYXJnX25hbWUsIGFyZ19vcHRzIGluIHNlbGYuYXJndW1lbnRfc3BlYy5pdGVtcygpOgogICAgICAgICAgICBpZiBhcmdfb3B0cy5nZXQoJ25vX2xvZycsIEZhbHNlKToKICAgICAgICAgICAgICAgICMgRmluZCB0aGUgdmFsdWUgZm9yIHRoZSBub19sb2cnZCBwYXJhbQogICAgICAgICAgICAgICAgbm9fbG9nX29iamVjdCA9IHNlbGYucGFyYW1zLmdldChhcmdfbmFtZSwgTm9uZSkKICAgICAgICAgICAgICAgIGlmIG5vX2xvZ19vYmplY3Q6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5ub19sb2dfdmFsdWVzLnVwZGF0ZShyZXR1cm5fdmFsdWVzKG5vX2xvZ19vYmplY3QpKQoKICAgICAgICAgICAgaWYgYXJnX29wdHMuZ2V0KCdyZW1vdmVkX2luX3ZlcnNpb24nKSBpcyBub3QgTm9uZSBhbmQgYXJnX25hbWUgaW4gc2VsZi5wYXJhbXM6CiAgICAgICAgICAgICAgICBzZWxmLl9kZXByZWNhdGlvbnMuYXBwZW5kKHsKICAgICAgICAgICAgICAgICAgICAnbXNnJzogIlBhcmFtICclcycgaXMgZGVwcmVjYXRlZC4gU2VlIHRoZSBtb2R1bGUgZG9jcyBmb3IgbW9yZSBpbmZvcm1hdGlvbiIgJSBhcmdfbmFtZSwKICAgICAgICAgICAgICAgICAgICAndmVyc2lvbic6IGFyZ19vcHRzLmdldCgncmVtb3ZlZF9pbl92ZXJzaW9uJykKICAgICAgICAgICAgICAgIH0pCgogICAgICAgICMgY2hlY2sgdGhlIGxvY2FsZSBhcyBzZXQgYnkgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQsIGFuZCByZXNldCB0bwogICAgICAgICMgYSBrbm93biB2YWxpZCAoTEFORz1DKSBpZiBpdCdzIGFuIGludmFsaWQvdW5hdmFpbGFibGUgbG9jYWxlCiAgICAgICAgc2VsZi5fY2hlY2tfbG9jYWxlKCkKCiAgICAgICAgc2VsZi5fY2hlY2tfYXJndW1lbnRzKGNoZWNrX2ludmFsaWRfYXJndW1lbnRzKQoKICAgICAgICAjIGNoZWNrIGV4Y2x1c2l2ZSBlYXJseQogICAgICAgIGlmIG5vdCBieXBhc3NfY2hlY2tzOgogICAgICAgICAgICBzZWxmLl9jaGVja19tdXR1YWxseV9leGNsdXNpdmUobXV0dWFsbHlfZXhjbHVzaXZlKQoKICAgICAgICBzZWxmLl9zZXRfZGVmYXVsdHMocHJlPVRydWUpCgogICAgICAgIHNlbGYuX0NIRUNLX0FSR1VNRU5UX1RZUEVTX0RJU1BBVENIRVIgPSB7CiAgICAgICAgICAgICdzdHInOiBzZWxmLl9jaGVja190eXBlX3N0ciwKICAgICAgICAgICAgJ2xpc3QnOiBzZWxmLl9jaGVja190eXBlX2xpc3QsCiAgICAgICAgICAgICdkaWN0Jzogc2VsZi5fY2hlY2tfdHlwZV9kaWN0LAogICAgICAgICAgICAnYm9vbCc6IHNlbGYuX2NoZWNrX3R5cGVfYm9vbCwKICAgICAgICAgICAgJ2ludCc6IHNlbGYuX2NoZWNrX3R5cGVfaW50LAogICAgICAgICAgICAnZmxvYXQnOiBzZWxmLl9jaGVja190eXBlX2Zsb2F0LAogICAgICAgICAgICAncGF0aCc6IHNlbGYuX2NoZWNrX3R5cGVfcGF0aCwKICAgICAgICAgICAgJ3Jhdyc6IHNlbGYuX2NoZWNrX3R5cGVfcmF3LAogICAgICAgICAgICAnanNvbmFyZyc6IHNlbGYuX2NoZWNrX3R5cGVfanNvbmFyZywKICAgICAgICAgICAgJ2pzb24nOiBzZWxmLl9jaGVja190eXBlX2pzb25hcmcsCiAgICAgICAgICAgICdieXRlcyc6IHNlbGYuX2NoZWNrX3R5cGVfYnl0ZXMsCiAgICAgICAgICAgICdiaXRzJzogc2VsZi5fY2hlY2tfdHlwZV9iaXRzLAogICAgICAgIH0KICAgICAgICBpZiBub3QgYnlwYXNzX2NoZWNrczoKICAgICAgICAgICAgc2VsZi5fY2hlY2tfcmVxdWlyZWRfYXJndW1lbnRzKCkKICAgICAgICAgICAgc2VsZi5fY2hlY2tfYXJndW1lbnRfdHlwZXMoKQogICAgICAgICAgICBzZWxmLl9jaGVja19hcmd1bWVudF92YWx1ZXMoKQogICAgICAgICAgICBzZWxmLl9jaGVja19yZXF1aXJlZF90b2dldGhlcihyZXF1aXJlZF90b2dldGhlcikKICAgICAgICAgICAgc2VsZi5fY2hlY2tfcmVxdWlyZWRfb25lX29mKHJlcXVpcmVkX29uZV9vZikKICAgICAgICAgICAgc2VsZi5fY2hlY2tfcmVxdWlyZWRfaWYocmVxdWlyZWRfaWYpCgogICAgICAgIHNlbGYuX3NldF9kZWZhdWx0cyhwcmU9RmFsc2UpCgogICAgICAgIGlmIG5vdCBzZWxmLm5vX2xvZzoKICAgICAgICAgICAgc2VsZi5fbG9nX2ludm9jYXRpb24oKQoKICAgICAgICAjIGZpbmFsbHksIG1ha2Ugc3VyZSB3ZSdyZSBpbiBhIHNhbmUgd29ya2luZyBkaXIKICAgICAgICBzZWxmLl9zZXRfY3dkKCkKCiAgICBkZWYgd2FybihzZWxmLCB3YXJuaW5nKToKCiAgICAgICAgaWYgaXNpbnN0YW5jZSh3YXJuaW5nLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICBzZWxmLl93YXJuaW5ncy5hcHBlbmQod2FybmluZykKICAgICAgICAgICAgc2VsZi5sb2coJ1tXQVJOSU5HXSAlcycgJSB3YXJuaW5nKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigid2FybiByZXF1aXJlcyBhIHN0cmluZyBub3QgYSAlcyIgJSB0eXBlKHdhcm5pbmcpKQoKICAgIGRlZiBkZXByZWNhdGUoc2VsZiwgbXNnLCB2ZXJzaW9uPU5vbmUpOgogICAgICAgIGlmIGlzaW5zdGFuY2UobXNnLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICBzZWxmLl9kZXByZWNhdGlvbnMuYXBwZW5kKHsKICAgICAgICAgICAgICAgICdtc2cnOiBtc2csCiAgICAgICAgICAgICAgICAndmVyc2lvbic6IHZlcnNpb24KICAgICAgICAgICAgfSkKICAgICAgICAgICAgc2VsZi5sb2coJ1tERVBSRUNBVElPTiBXQVJOSU5HXSAlcyAlcycgJSAobXNnLCB2ZXJzaW9uKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoImRlcHJlY2F0ZSByZXF1aXJlcyBhIHN0cmluZyBub3QgYSAlcyIgJSB0eXBlKG1zZykpCgogICAgZGVmIGxvYWRfZmlsZV9jb21tb25fYXJndW1lbnRzKHNlbGYsIHBhcmFtcyk6CiAgICAgICAgJycnCiAgICAgICAgbWFueSBtb2R1bGVzIGRlYWwgd2l0aCBmaWxlcywgdGhpcyBlbmNhcHN1bGF0ZXMgY29tbW9uCiAgICAgICAgb3B0aW9ucyB0aGF0IHRoZSBmaWxlIG1vZHVsZSBhY2NlcHRzIHN1Y2ggdGhhdCBpdCBpcyBkaXJlY3RseQogICAgICAgIGF2YWlsYWJsZSB0byBhbGwgbW9kdWxlcyBhbmQgdGhleSBjYW4gc2hhcmUgY29kZS4KICAgICAgICAnJycKCiAgICAgICAgcGF0aCA9IHBhcmFtcy5nZXQoJ3BhdGgnLCBwYXJhbXMuZ2V0KCdkZXN0JywgTm9uZSkpCiAgICAgICAgaWYgcGF0aCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4ge30KICAgICAgICBlbHNlOgogICAgICAgICAgICBwYXRoID0gb3MucGF0aC5leHBhbmR1c2VyKG9zLnBhdGguZXhwYW5kdmFycyhwYXRoKSkKCiAgICAgICAgYl9wYXRoID0gdG9fYnl0ZXMocGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKICAgICAgICAjIGlmIHRoZSBwYXRoIGlzIGEgc3ltbGluaywgYW5kIHdlJ3JlIGZvbGxvd2luZyBsaW5rcywgZ2V0CiAgICAgICAgIyB0aGUgdGFyZ2V0IG9mIHRoZSBsaW5rIGluc3RlYWQgZm9yIHRlc3RpbmcKICAgICAgICBpZiBwYXJhbXMuZ2V0KCdmb2xsb3cnLCBGYWxzZSkgYW5kIG9zLnBhdGguaXNsaW5rKGJfcGF0aCk6CiAgICAgICAgICAgIGJfcGF0aCA9IG9zLnBhdGgucmVhbHBhdGgoYl9wYXRoKQogICAgICAgICAgICBwYXRoID0gdG9fbmF0aXZlKGJfcGF0aCkKCiAgICAgICAgbW9kZSAgID0gcGFyYW1zLmdldCgnbW9kZScsIE5vbmUpCiAgICAgICAgb3duZXIgID0gcGFyYW1zLmdldCgnb3duZXInLCBOb25lKQogICAgICAgIGdyb3VwICA9IHBhcmFtcy5nZXQoJ2dyb3VwJywgTm9uZSkKCiAgICAgICAgIyBzZWxpbnV4IHJlbGF0ZWQgb3B0aW9ucwogICAgICAgIHNldXNlciAgICA9IHBhcmFtcy5nZXQoJ3NldXNlcicsIE5vbmUpCiAgICAgICAgc2Vyb2xlICAgID0gcGFyYW1zLmdldCgnc2Vyb2xlJywgTm9uZSkKICAgICAgICBzZXR5cGUgICAgPSBwYXJhbXMuZ2V0KCdzZXR5cGUnLCBOb25lKQogICAgICAgIHNlbGV2ZWwgICA9IHBhcmFtcy5nZXQoJ3NlbGV2ZWwnLCBOb25lKQogICAgICAgIHNlY29udGV4dCA9IFtzZXVzZXIsIHNlcm9sZSwgc2V0eXBlXQoKICAgICAgICBpZiBzZWxmLnNlbGludXhfbWxzX2VuYWJsZWQoKToKICAgICAgICAgICAgc2Vjb250ZXh0LmFwcGVuZChzZWxldmVsKQoKICAgICAgICBkZWZhdWx0X3NlY29udGV4dCA9IHNlbGYuc2VsaW51eF9kZWZhdWx0X2NvbnRleHQocGF0aCkKICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4oZGVmYXVsdF9zZWNvbnRleHQpKToKICAgICAgICAgICAgaWYgaSBpcyBub3QgTm9uZSBhbmQgc2Vjb250ZXh0W2ldID09ICdfZGVmYXVsdCc6CiAgICAgICAgICAgICAgICBzZWNvbnRleHRbaV0gPSBkZWZhdWx0X3NlY29udGV4dFtpXQoKICAgICAgICBhdHRyaWJ1dGVzID0gcGFyYW1zLmdldCgnYXR0cmlidXRlcycsIE5vbmUpCiAgICAgICAgcmV0dXJuIGRpY3QoCiAgICAgICAgICAgIHBhdGg9cGF0aCwgbW9kZT1tb2RlLCBvd25lcj1vd25lciwgZ3JvdXA9Z3JvdXAsCiAgICAgICAgICAgIHNldXNlcj1zZXVzZXIsIHNlcm9sZT1zZXJvbGUsIHNldHlwZT1zZXR5cGUsCiAgICAgICAgICAgIHNlbGV2ZWw9c2VsZXZlbCwgc2Vjb250ZXh0PXNlY29udGV4dCwgYXR0cmlidXRlcz1hdHRyaWJ1dGVzLAogICAgICAgICkKCgogICAgIyBEZXRlY3Qgd2hldGhlciB1c2luZyBzZWxpbnV4IHRoYXQgaXMgTUxTLWF3YXJlLgogICAgIyBXaGlsZSB0aGlzIG1lYW5zIHlvdSBjYW4gc2V0IHRoZSBsZXZlbC9yYW5nZSB3aXRoCiAgICAjIHNlbGludXgubHNldGZpbGVjb24oKSwgaXQgbWF5IG9yIG1heSBub3QgbWVhbiB0aGF0IHlvdQogICAgIyB3aWxsIGdldCB0aGUgc2VsZXZlbCBhcyBwYXJ0IG9mIHRoZSBjb250ZXh0IHJldHVybmVkCiAgICAjIGJ5IHNlbGludXgubGdldGZpbGVjb24oKS4KCiAgICBkZWYgc2VsaW51eF9tbHNfZW5hYmxlZChzZWxmKToKICAgICAgICBpZiBub3QgSEFWRV9TRUxJTlVYOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICBpZiBzZWxpbnV4LmlzX3NlbGludXhfbWxzX2VuYWJsZWQoKSA9PSAxOgogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBzZWxpbnV4X2VuYWJsZWQoc2VsZik6CiAgICAgICAgaWYgbm90IEhBVkVfU0VMSU5VWDoKICAgICAgICAgICAgc2VlbmFibGVkID0gc2VsZi5nZXRfYmluX3BhdGgoJ3NlbGludXhlbmFibGVkJykKICAgICAgICAgICAgaWYgc2VlbmFibGVkIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgKHJjLG91dCxlcnIpID0gc2VsZi5ydW5fY29tbWFuZChzZWVuYWJsZWQpCiAgICAgICAgICAgICAgICBpZiByYyA9PSAwOgogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0iQWJvcnRpbmcsIHRhcmdldCB1c2VzIHNlbGludXggYnV0IHB5dGhvbiBiaW5kaW5ncyAobGlic2VsaW51eC1weXRob24pIGFyZW4ndCBpbnN0YWxsZWQhIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgaWYgc2VsaW51eC5pc19zZWxpbnV4X2VuYWJsZWQoKSA9PSAxOgogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICMgRGV0ZXJtaW5lIHdoZXRoZXIgd2UgbmVlZCBhIHBsYWNlaG9sZGVyIGZvciBzZWxldmVsL21scwogICAgZGVmIHNlbGludXhfaW5pdGlhbF9jb250ZXh0KHNlbGYpOgogICAgICAgIGNvbnRleHQgPSBbTm9uZSwgTm9uZSwgTm9uZV0KICAgICAgICBpZiBzZWxmLnNlbGludXhfbWxzX2VuYWJsZWQoKToKICAgICAgICAgICAgY29udGV4dC5hcHBlbmQoTm9uZSkKICAgICAgICByZXR1cm4gY29udGV4dAoKICAgICMgSWYgc2VsaW51eCBmYWlscyB0byBmaW5kIGEgZGVmYXVsdCwgcmV0dXJuIGFuIGFycmF5IG9mIE5vbmUKICAgIGRlZiBzZWxpbnV4X2RlZmF1bHRfY29udGV4dChzZWxmLCBwYXRoLCBtb2RlPTApOgogICAgICAgIGNvbnRleHQgPSBzZWxmLnNlbGludXhfaW5pdGlhbF9jb250ZXh0KCkKICAgICAgICBpZiBub3QgSEFWRV9TRUxJTlVYIG9yIG5vdCBzZWxmLnNlbGludXhfZW5hYmxlZCgpOgogICAgICAgICAgICByZXR1cm4gY29udGV4dAogICAgICAgIHRyeToKICAgICAgICAgICAgcmV0ID0gc2VsaW51eC5tYXRjaHBhdGhjb24odG9fbmF0aXZlKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpLCBtb2RlKQogICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICByZXR1cm4gY29udGV4dAogICAgICAgIGlmIHJldFswXSA9PSAtMToKICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQKICAgICAgICAjIExpbWl0IHNwbGl0IHRvIDQgYmVjYXVzZSB0aGUgc2VsZXZlbCwgdGhlIGxhc3QgaW4gdGhlIGxpc3QsCiAgICAgICAgIyBtYXkgY29udGFpbiAnOicgY2hhcmFjdGVycwogICAgICAgIGNvbnRleHQgPSByZXRbMV0uc3BsaXQoJzonLCAzKQogICAgICAgIHJldHVybiBjb250ZXh0CgogICAgZGVmIHNlbGludXhfY29udGV4dChzZWxmLCBwYXRoKToKICAgICAgICBjb250ZXh0ID0gc2VsZi5zZWxpbnV4X2luaXRpYWxfY29udGV4dCgpCiAgICAgICAgaWYgbm90IEhBVkVfU0VMSU5VWCBvciBub3Qgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldCA9IHNlbGludXgubGdldGZpbGVjb25fcmF3KHRvX25hdGl2ZShwYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKSkKICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICBpZiBlLmVycm5vID09IGVycm5vLkVOT0VOVDoKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSdwYXRoICVzIGRvZXMgbm90IGV4aXN0JyAlIHBhdGgpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nZmFpbGVkIHRvIHJldHJpZXZlIHNlbGludXggY29udGV4dCcpCiAgICAgICAgaWYgcmV0WzBdID09IC0xOgogICAgICAgICAgICByZXR1cm4gY29udGV4dAogICAgICAgICMgTGltaXQgc3BsaXQgdG8gNCBiZWNhdXNlIHRoZSBzZWxldmVsLCB0aGUgbGFzdCBpbiB0aGUgbGlzdCwKICAgICAgICAjIG1heSBjb250YWluICc6JyBjaGFyYWN0ZXJzCiAgICAgICAgY29udGV4dCA9IHJldFsxXS5zcGxpdCgnOicsIDMpCiAgICAgICAgcmV0dXJuIGNvbnRleHQKCiAgICBkZWYgdXNlcl9hbmRfZ3JvdXAoc2VsZiwgcGF0aCwgZXhwYW5kPVRydWUpOgogICAgICAgIGJfcGF0aCA9IHRvX2J5dGVzKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBpZiBleHBhbmQ6CiAgICAgICAgICAgIGJfcGF0aCA9IG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnMoYl9wYXRoKSkKICAgICAgICBzdCA9IG9zLmxzdGF0KGJfcGF0aCkKICAgICAgICB1aWQgPSBzdC5zdF91aWQKICAgICAgICBnaWQgPSBzdC5zdF9naWQKICAgICAgICByZXR1cm4gKHVpZCwgZ2lkKQoKICAgIGRlZiBmaW5kX21vdW50X3BvaW50KHNlbGYsIHBhdGgpOgogICAgICAgIHBhdGhfaXNfYnl0ZXMgPSBGYWxzZQogICAgICAgIGlmIGlzaW5zdGFuY2UocGF0aCwgYmluYXJ5X3R5cGUpOgogICAgICAgICAgICBwYXRoX2lzX2J5dGVzID0gVHJ1ZQoKICAgICAgICBiX3BhdGggPSBvcy5wYXRoLnJlYWxwYXRoKHRvX2J5dGVzKG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnMocGF0aCkpLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKSkKICAgICAgICB3aGlsZSBub3Qgb3MucGF0aC5pc21vdW50KGJfcGF0aCk6CiAgICAgICAgICAgIGJfcGF0aCA9IG9zLnBhdGguZGlybmFtZShiX3BhdGgpCgogICAgICAgIGlmIHBhdGhfaXNfYnl0ZXM6CiAgICAgICAgICAgIHJldHVybiBiX3BhdGgKCiAgICAgICAgcmV0dXJuIHRvX3RleHQoYl9wYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQoKICAgIGRlZiBpc19zcGVjaWFsX3NlbGludXhfcGF0aChzZWxmLCBwYXRoKToKICAgICAgICAiIiIKICAgICAgICBSZXR1cm5zIGEgdHVwbGUgY29udGFpbmluZyAoVHJ1ZSwgc2VsaW51eF9jb250ZXh0KSBpZiB0aGUgZ2l2ZW4gcGF0aCBpcyBvbiBhCiAgICAgICAgTkZTIG9yIG90aGVyICdzcGVjaWFsJyBmcyAgbW91bnQgcG9pbnQsIG90aGVyd2lzZSB0aGUgcmV0dXJuIHdpbGwgYmUgKEZhbHNlLCBOb25lKS4KICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGYgPSBvcGVuKCcvcHJvYy9tb3VudHMnLCAncicpCiAgICAgICAgICAgIG1vdW50X2RhdGEgPSBmLnJlYWRsaW5lcygpCiAgICAgICAgICAgIGYuY2xvc2UoKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcmV0dXJuIChGYWxzZSwgTm9uZSkKICAgICAgICBwYXRoX21vdW50X3BvaW50ID0gc2VsZi5maW5kX21vdW50X3BvaW50KHBhdGgpCiAgICAgICAgZm9yIGxpbmUgaW4gbW91bnRfZGF0YToKICAgICAgICAgICAgKGRldmljZSwgbW91bnRfcG9pbnQsIGZzdHlwZSwgb3B0aW9ucywgcmVzdCkgPSBsaW5lLnNwbGl0KCcgJywgNCkKCiAgICAgICAgICAgIGlmIHBhdGhfbW91bnRfcG9pbnQgPT0gbW91bnRfcG9pbnQ6CiAgICAgICAgICAgICAgICBmb3IgZnMgaW4gc2VsZi5fc2VsaW51eF9zcGVjaWFsX2ZzOgogICAgICAgICAgICAgICAgICAgIGlmIGZzIGluIGZzdHlwZToKICAgICAgICAgICAgICAgICAgICAgICAgc3BlY2lhbF9jb250ZXh0ID0gc2VsZi5zZWxpbnV4X2NvbnRleHQocGF0aF9tb3VudF9wb2ludCkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChUcnVlLCBzcGVjaWFsX2NvbnRleHQpCgogICAgICAgIHJldHVybiAoRmFsc2UsIE5vbmUpCgogICAgZGVmIHNldF9kZWZhdWx0X3NlbGludXhfY29udGV4dChzZWxmLCBwYXRoLCBjaGFuZ2VkKToKICAgICAgICBpZiBub3QgSEFWRV9TRUxJTlVYIG9yIG5vdCBzZWxmLnNlbGludXhfZW5hYmxlZCgpOgogICAgICAgICAgICByZXR1cm4gY2hhbmdlZAogICAgICAgIGNvbnRleHQgPSBzZWxmLnNlbGludXhfZGVmYXVsdF9jb250ZXh0KHBhdGgpCiAgICAgICAgcmV0dXJuIHNlbGYuc2V0X2NvbnRleHRfaWZfZGlmZmVyZW50KHBhdGgsIGNvbnRleHQsIEZhbHNlKQoKICAgIGRlZiBzZXRfY29udGV4dF9pZl9kaWZmZXJlbnQoc2VsZiwgcGF0aCwgY29udGV4dCwgY2hhbmdlZCwgZGlmZj1Ob25lKToKCiAgICAgICAgaWYgbm90IEhBVkVfU0VMSU5VWCBvciBub3Qgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQKICAgICAgICBjdXJfY29udGV4dCA9IHNlbGYuc2VsaW51eF9jb250ZXh0KHBhdGgpCiAgICAgICAgbmV3X2NvbnRleHQgPSBsaXN0KGN1cl9jb250ZXh0KQogICAgICAgICMgSXRlcmF0ZSBvdmVyIHRoZSBjdXJyZW50IGNvbnRleHQgaW5zdGVhZCBvZiB0aGUKICAgICAgICAjIGFyZ3VtZW50IGNvbnRleHQsIHdoaWNoIG1heSBoYXZlIHNlbGV2ZWwuCgogICAgICAgIChpc19zcGVjaWFsX3NlLCBzcF9jb250ZXh0KSA9IHNlbGYuaXNfc3BlY2lhbF9zZWxpbnV4X3BhdGgocGF0aCkKICAgICAgICBpZiBpc19zcGVjaWFsX3NlOgogICAgICAgICAgICBuZXdfY29udGV4dCA9IHNwX2NvbnRleHQKICAgICAgICBlbHNlOgogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4oY3VyX2NvbnRleHQpKToKICAgICAgICAgICAgICAgIGlmIGxlbihjb250ZXh0KSA+IGk6CiAgICAgICAgICAgICAgICAgICAgaWYgY29udGV4dFtpXSBpcyBub3QgTm9uZSBhbmQgY29udGV4dFtpXSAhPSBjdXJfY29udGV4dFtpXToKICAgICAgICAgICAgICAgICAgICAgICAgbmV3X2NvbnRleHRbaV0gPSBjb250ZXh0W2ldCiAgICAgICAgICAgICAgICAgICAgZWxpZiBjb250ZXh0W2ldIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19jb250ZXh0W2ldID0gY3VyX2NvbnRleHRbaV0KCiAgICAgICAgaWYgY3VyX2NvbnRleHQgIT0gbmV3X2NvbnRleHQ6CiAgICAgICAgICAgIGlmIGRpZmYgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBpZiAnYmVmb3JlJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXVsnc2Vjb250ZXh0J10gPSBjdXJfY29udGV4dAogICAgICAgICAgICAgICAgaWYgJ2FmdGVyJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddID0ge30KICAgICAgICAgICAgICAgIGRpZmZbJ2FmdGVyJ11bJ3NlY29udGV4dCddID0gbmV3X2NvbnRleHQKCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIHNlbGYuY2hlY2tfbW9kZToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgcmMgPSBzZWxpbnV4LmxzZXRmaWxlY29uKHRvX25hdGl2ZShwYXRoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIoJzonLmpvaW4obmV3X2NvbnRleHQpKSkKICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0naW52YWxpZCBzZWxpbnV4IGNvbnRleHQ6ICVzJyAlIHN0cihlKSwgbmV3X2NvbnRleHQ9bmV3X2NvbnRleHQsIGN1cl9jb250ZXh0PWN1cl9jb250ZXh0LCBpbnB1dF93YXM9Y29udGV4dCkKICAgICAgICAgICAgaWYgcmMgIT0gMDoKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSdzZXQgc2VsaW51eCBjb250ZXh0IGZhaWxlZCcpCiAgICAgICAgICAgIGNoYW5nZWQgPSBUcnVlCiAgICAgICAgcmV0dXJuIGNoYW5nZWQKCiAgICBkZWYgc2V0X293bmVyX2lmX2RpZmZlcmVudChzZWxmLCBwYXRoLCBvd25lciwgY2hhbmdlZCwgZGlmZj1Ob25lLCBleHBhbmQ9VHJ1ZSk6CiAgICAgICAgYl9wYXRoID0gdG9fYnl0ZXMocGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9zdHJpY3QnKQogICAgICAgIGlmIGV4cGFuZDoKICAgICAgICAgICAgYl9wYXRoID0gb3MucGF0aC5leHBhbmR1c2VyKG9zLnBhdGguZXhwYW5kdmFycyhiX3BhdGgpKQogICAgICAgIHBhdGggPSB0b190ZXh0KGJfcGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9zdHJpY3QnKQogICAgICAgIGlmIG93bmVyIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VkCiAgICAgICAgb3JpZ191aWQsIG9yaWdfZ2lkID0gc2VsZi51c2VyX2FuZF9ncm91cChwYXRoLCBleHBhbmQpCiAgICAgICAgdHJ5OgogICAgICAgICAgICB1aWQgPSBpbnQob3duZXIpCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHVpZCA9IHB3ZC5nZXRwd25hbShvd25lcikucHdfdWlkCiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSdjaG93biBmYWlsZWQ6IGZhaWxlZCB0byBsb29rIHVwIHVzZXIgJXMnICUgb3duZXIpCiAgICAgICAgaWYgb3JpZ191aWQgIT0gdWlkOgoKICAgICAgICAgICAgaWYgZGlmZiBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIGlmICdiZWZvcmUnIG5vdCBpbiBkaWZmOgogICAgICAgICAgICAgICAgICAgIGRpZmZbJ2JlZm9yZSddID0ge30KICAgICAgICAgICAgICAgIGRpZmZbJ2JlZm9yZSddWydvd25lciddID0gb3JpZ191aWQKICAgICAgICAgICAgICAgIGlmICdhZnRlcicgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYWZ0ZXInXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddWydvd25lciddID0gdWlkCgogICAgICAgICAgICBpZiBzZWxmLmNoZWNrX21vZGU6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBvcy5sY2hvd24oYl9wYXRoLCB1aWQsIC0xKQogICAgICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSdjaG93biBmYWlsZWQnKQogICAgICAgICAgICBjaGFuZ2VkID0gVHJ1ZQogICAgICAgIHJldHVybiBjaGFuZ2VkCgogICAgZGVmIHNldF9ncm91cF9pZl9kaWZmZXJlbnQoc2VsZiwgcGF0aCwgZ3JvdXAsIGNoYW5nZWQsIGRpZmY9Tm9uZSwgZXhwYW5kPVRydWUpOgogICAgICAgIGJfcGF0aCA9IHRvX2J5dGVzKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBpZiBleHBhbmQ6CiAgICAgICAgICAgIGJfcGF0aCA9IG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnMoYl9wYXRoKSkKICAgICAgICBwYXRoID0gdG9fdGV4dChiX3BhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBpZiBncm91cCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gY2hhbmdlZAogICAgICAgIG9yaWdfdWlkLCBvcmlnX2dpZCA9IHNlbGYudXNlcl9hbmRfZ3JvdXAoYl9wYXRoLCBleHBhbmQpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBnaWQgPSBpbnQoZ3JvdXApCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGdpZCA9IGdycC5nZXRncm5hbShncm91cCkuZ3JfZ2lkCiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSdjaGdycCBmYWlsZWQ6IGZhaWxlZCB0byBsb29rIHVwIGdyb3VwICVzJyAlIGdyb3VwKQogICAgICAgIGlmIG9yaWdfZ2lkICE9IGdpZDoKCiAgICAgICAgICAgIGlmIGRpZmYgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBpZiAnYmVmb3JlJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXVsnZ3JvdXAnXSA9IG9yaWdfZ2lkCiAgICAgICAgICAgICAgICBpZiAnYWZ0ZXInIG5vdCBpbiBkaWZmOgogICAgICAgICAgICAgICAgICAgIGRpZmZbJ2FmdGVyJ10gPSB7fQogICAgICAgICAgICAgICAgZGlmZlsnYWZ0ZXInXVsnZ3JvdXAnXSA9IGdpZAoKICAgICAgICAgICAgaWYgc2VsZi5jaGVja19tb2RlOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgb3MubGNob3duKGJfcGF0aCwgLTEsIGdpZCkKICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nY2hncnAgZmFpbGVkJykKICAgICAgICAgICAgY2hhbmdlZCA9IFRydWUKICAgICAgICByZXR1cm4gY2hhbmdlZAoKICAgIGRlZiBzZXRfbW9kZV9pZl9kaWZmZXJlbnQoc2VsZiwgcGF0aCwgbW9kZSwgY2hhbmdlZCwgZGlmZj1Ob25lLCBleHBhbmQ9VHJ1ZSk6CiAgICAgICAgYl9wYXRoID0gdG9fYnl0ZXMocGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9zdHJpY3QnKQogICAgICAgIGlmIGV4cGFuZDoKICAgICAgICAgICAgYl9wYXRoID0gb3MucGF0aC5leHBhbmR1c2VyKG9zLnBhdGguZXhwYW5kdmFycyhiX3BhdGgpKQogICAgICAgIHBhdGggPSB0b190ZXh0KGJfcGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9zdHJpY3QnKQogICAgICAgIHBhdGhfc3RhdCA9IG9zLmxzdGF0KGJfcGF0aCkKCiAgICAgICAgaWYgbW9kZSBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gY2hhbmdlZAoKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShtb2RlLCBpbnQpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBtb2RlID0gaW50KG1vZGUsIDgpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgbW9kZSA9IHNlbGYuX3N5bWJvbGljX21vZGVfdG9fb2N0YWwocGF0aF9zdGF0LCBtb2RlKQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocGF0aD1wYXRoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZz0ibW9kZSBtdXN0IGJlIGluIG9jdGFsIG9yIHN5bWJvbGljIGZvcm0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM9c3RyKGUpKQoKICAgICAgICAgICAgICAgIGlmIG1vZGUgIT0gc3RhdC5TX0lNT0RFKG1vZGUpOgogICAgICAgICAgICAgICAgICAgICMgcHJldmVudCBtb2RlIGZyb20gaGF2aW5nIGV4dHJhIGluZm8gb3JiZWluZyBpbnZhbGlkIGxvbmcgbnVtYmVyCiAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocGF0aD1wYXRoLCBtc2c9IkludmFsaWQgbW9kZSBzdXBwbGllZCwgb25seSBwZXJtaXNzaW9uIGluZm8gaXMgYWxsb3dlZCIsIGRldGFpbHM9bW9kZSkKCiAgICAgICAgcHJldl9tb2RlID0gc3RhdC5TX0lNT0RFKHBhdGhfc3RhdC5zdF9tb2RlKQoKICAgICAgICBpZiBwcmV2X21vZGUgIT0gbW9kZToKCiAgICAgICAgICAgIGlmIGRpZmYgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBpZiAnYmVmb3JlJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXVsnbW9kZSddID0gJzAlMDNvJyAlIHByZXZfbW9kZQogICAgICAgICAgICAgICAgaWYgJ2FmdGVyJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddID0ge30KICAgICAgICAgICAgICAgIGRpZmZbJ2FmdGVyJ11bJ21vZGUnXSA9ICcwJTAzbycgJSBtb2RlCgogICAgICAgICAgICBpZiBzZWxmLmNoZWNrX21vZGU6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAjIEZJWE1FOiBjb21wYXJpc29uIGFnYWluc3Qgc3RyaW5nIGFib3ZlIHdpbGwgY2F1c2UgdGhpcyB0byBiZSBleGVjdXRlZAogICAgICAgICAgICAjIGV2ZXJ5IHRpbWUKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgaWYgaGFzYXR0cihvcywgJ2xjaG1vZCcpOgogICAgICAgICAgICAgICAgICAgIG9zLmxjaG1vZChiX3BhdGgsIG1vZGUpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBvcy5wYXRoLmlzbGluayhiX3BhdGgpOgogICAgICAgICAgICAgICAgICAgICAgICBvcy5jaG1vZChiX3BhdGgsIG1vZGUpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgIyBBdHRlbXB0IHRvIHNldCB0aGUgcGVybXMgb2YgdGhlIHN5bWxpbmsgYnV0IGJlCiAgICAgICAgICAgICAgICAgICAgICAgICMgY2FyZWZ1bCBub3QgdG8gY2hhbmdlIHRoZSBwZXJtcyBvZiB0aGUgdW5kZXJseWluZwogICAgICAgICAgICAgICAgICAgICAgICAjIGZpbGUgd2hpbGUgdHJ5aW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVybHlpbmdfc3RhdCA9IG9zLnN0YXQoYl9wYXRoKQogICAgICAgICAgICAgICAgICAgICAgICBvcy5jaG1vZChiX3BhdGgsIG1vZGUpCiAgICAgICAgICAgICAgICAgICAgICAgIG5ld191bmRlcmx5aW5nX3N0YXQgPSBvcy5zdGF0KGJfcGF0aCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgdW5kZXJseWluZ19zdGF0LnN0X21vZGUgIT0gbmV3X3VuZGVybHlpbmdfc3RhdC5zdF9tb2RlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3MuY2htb2QoYl9wYXRoLCBzdGF0LlNfSU1PREUodW5kZXJseWluZ19zdGF0LnN0X21vZGUpKQogICAgICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgIGlmIG9zLnBhdGguaXNsaW5rKGJfcGF0aCkgYW5kIGUuZXJybm8gPT0gZXJybm8uRVBFUk06ICAjIENhbid0IHNldCBtb2RlIG9uIHN5bWJvbGljIGxpbmtzCiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgZWxpZiBlLmVycm5vIGluIChlcnJuby5FTk9FTlQsIGVycm5vLkVMT09QKTogIyBDYW4ndCBzZXQgbW9kZSBvbiBicm9rZW4gc3ltYm9saWMgbGlua3MKICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHJhaXNlIGUKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSdjaG1vZCBmYWlsZWQnLCBkZXRhaWxzPXN0cihlKSkKCiAgICAgICAgICAgIHBhdGhfc3RhdCA9IG9zLmxzdGF0KGJfcGF0aCkKICAgICAgICAgICAgbmV3X21vZGUgPSBzdGF0LlNfSU1PREUocGF0aF9zdGF0LnN0X21vZGUpCgogICAgICAgICAgICBpZiBuZXdfbW9kZSAhPSBwcmV2X21vZGU6CiAgICAgICAgICAgICAgICBjaGFuZ2VkID0gVHJ1ZQogICAgICAgIHJldHVybiBjaGFuZ2VkCgogICAgZGVmIHNldF9hdHRyaWJ1dGVzX2lmX2RpZmZlcmVudChzZWxmLCBwYXRoLCBhdHRyaWJ1dGVzLCBjaGFuZ2VkLCBkaWZmPU5vbmUsIGV4cGFuZD1UcnVlKToKCiAgICAgICAgaWYgYXR0cmlidXRlcyBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gY2hhbmdlZAoKICAgICAgICBiX3BhdGggPSB0b19ieXRlcyhwYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3N0cmljdCcpCiAgICAgICAgaWYgZXhwYW5kOgogICAgICAgICAgICBiX3BhdGggPSBvcy5wYXRoLmV4cGFuZHVzZXIob3MucGF0aC5leHBhbmR2YXJzKGJfcGF0aCkpCiAgICAgICAgcGF0aCA9IHRvX3RleHQoYl9wYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3N0cmljdCcpCgogICAgICAgIGV4aXN0aW5nID0gc2VsZi5nZXRfZmlsZV9hdHRyaWJ1dGVzKGJfcGF0aCkKCiAgICAgICAgaWYgZXhpc3RpbmcuZ2V0KCdhdHRyX2ZsYWdzJywnJykgIT0gYXR0cmlidXRlczoKICAgICAgICAgICAgYXR0cmNtZCA9IHNlbGYuZ2V0X2Jpbl9wYXRoKCdjaGF0dHInKQogICAgICAgICAgICBpZiBhdHRyY21kOgogICAgICAgICAgICAgICAgYXR0cmNtZCA9IFthdHRyY21kLCAnPSVzJyAlIGF0dHJpYnV0ZXMsIGJfcGF0aF0KICAgICAgICAgICAgICAgIGNoYW5nZWQgPSBUcnVlCgogICAgICAgICAgICAgICAgaWYgZGlmZiBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICBpZiAnYmVmb3JlJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ10gPSB7fQogICAgICAgICAgICAgICAgICAgIGRpZmZbJ2JlZm9yZSddWydhdHRyaWJ1dGVzJ10gPSBleGlzdGluZy5nZXQoJ2F0dHJfZmxhZ3MnKQogICAgICAgICAgICAgICAgICAgIGlmICdhZnRlcicgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZbJ2FmdGVyJ10gPSB7fQogICAgICAgICAgICAgICAgICAgIGRpZmZbJ2FmdGVyJ11bJ2F0dHJpYnV0ZXMnXSA9IGF0dHJpYnV0ZXMKCiAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5jaGVja19tb2RlOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgcmMsIG91dCwgZXJyID0gc2VsZi5ydW5fY29tbWFuZChhdHRyY21kKQogICAgICAgICAgICAgICAgICAgICAgICBpZiByYyAhPSAwIG9yIGVycjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbigiRXJyb3Igd2hpbGUgc2V0dGluZyBhdHRyaWJ1dGVzOiAlcyIgJSAob3V0ICsgZXJyKSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocGF0aD1wYXRoLCBtc2c9J2NoYXR0ciBmYWlsZWQnLCBkZXRhaWxzPXN0cihlKSkKICAgICAgICByZXR1cm4gY2hhbmdlZAoKICAgIGRlZiBnZXRfZmlsZV9hdHRyaWJ1dGVzKHNlbGYsIHBhdGgpOgogICAgICAgIG91dHB1dCA9IHt9CiAgICAgICAgYXR0cmNtZCA9IHNlbGYuZ2V0X2Jpbl9wYXRoKCdsc2F0dHInLCBGYWxzZSkKICAgICAgICBpZiBhdHRyY21kOgogICAgICAgICAgICBhdHRyY21kID0gW2F0dHJjbWQsICctdmQnLCBwYXRoXQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByYywgb3V0LCBlcnIgPSBzZWxmLnJ1bl9jb21tYW5kKGF0dHJjbWQpCiAgICAgICAgICAgICAgICBpZiByYyA9PSAwOgogICAgICAgICAgICAgICAgICAgIHJlcyA9IG91dC5zcGxpdCgnICcpWzA6Ml0KICAgICAgICAgICAgICAgICAgICBvdXRwdXRbJ2F0dHJfZmxhZ3MnXSA9ICByZXNbMV0ucmVwbGFjZSgnLScsJycpLnN0cmlwKCkKICAgICAgICAgICAgICAgICAgICBvdXRwdXRbJ3ZlcnNpb24nXSA9IHJlc1swXS5zdHJpcCgpCiAgICAgICAgICAgICAgICAgICAgb3V0cHV0WydhdHRyaWJ1dGVzJ10gPSBmb3JtYXRfYXR0cmlidXRlcyhvdXRwdXRbJ2F0dHJfZmxhZ3MnXSkKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgIHJldHVybiBvdXRwdXQKCgogICAgZGVmIF9zeW1ib2xpY19tb2RlX3RvX29jdGFsKHNlbGYsIHBhdGhfc3RhdCwgc3ltYm9saWNfbW9kZSk6CiAgICAgICAgbmV3X21vZGUgPSBzdGF0LlNfSU1PREUocGF0aF9zdGF0LnN0X21vZGUpCgogICAgICAgIG1vZGVfcmUgPSByZS5jb21waWxlKHInXig/UDx1c2Vycz5bdWdvYV0rKSg/UDxvcGVyYXRvcj5bLSs9XSkoP1A8cGVybXM+W3J3eFhzdC1dKnxbdWdvXSkkJykKICAgICAgICBmb3IgbW9kZSBpbiBzeW1ib2xpY19tb2RlLnNwbGl0KCcsJyk6CiAgICAgICAgICAgIG1hdGNoID0gbW9kZV9yZS5tYXRjaChtb2RlKQogICAgICAgICAgICBpZiBtYXRjaDoKICAgICAgICAgICAgICAgIHVzZXJzID0gbWF0Y2guZ3JvdXAoJ3VzZXJzJykKICAgICAgICAgICAgICAgIG9wZXJhdG9yID0gbWF0Y2guZ3JvdXAoJ29wZXJhdG9yJykKICAgICAgICAgICAgICAgIHBlcm1zID0gbWF0Y2guZ3JvdXAoJ3Blcm1zJykKCiAgICAgICAgICAgICAgICBpZiB1c2VycyA9PSAnYSc6CiAgICAgICAgICAgICAgICAgICAgdXNlcnMgPSAndWdvJwoKICAgICAgICAgICAgICAgIGZvciB1c2VyIGluIHVzZXJzOgogICAgICAgICAgICAgICAgICAgIG1vZGVfdG9fYXBwbHkgPSBzZWxmLl9nZXRfb2N0YWxfbW9kZV9mcm9tX3N5bWJvbGljX3Blcm1zKHBhdGhfc3RhdCwgdXNlciwgcGVybXMpCiAgICAgICAgICAgICAgICAgICAgbmV3X21vZGUgPSBzZWxmLl9hcHBseV9vcGVyYXRpb25fdG9fbW9kZSh1c2VyLCBvcGVyYXRvciwgbW9kZV90b19hcHBseSwgbmV3X21vZGUpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJiYWQgc3ltYm9saWMgcGVybWlzc2lvbiBmb3IgbW9kZTogJXMiICUgbW9kZSkKICAgICAgICByZXR1cm4gbmV3X21vZGUKCiAgICBkZWYgX2FwcGx5X29wZXJhdGlvbl90b19tb2RlKHNlbGYsIHVzZXIsIG9wZXJhdG9yLCBtb2RlX3RvX2FwcGx5LCBjdXJyZW50X21vZGUpOgogICAgICAgIGlmIG9wZXJhdG9yICA9PSAgJz0nOgogICAgICAgICAgICBpZiB1c2VyID09ICd1JzoKICAgICAgICAgICAgICAgIG1hc2sgPSBzdGF0LlNfSVJXWFUgfCBzdGF0LlNfSVNVSUQKICAgICAgICAgICAgZWxpZiB1c2VyID09ICdnJzoKICAgICAgICAgICAgICAgIG1hc2sgPSBzdGF0LlNfSVJXWEcgfCBzdGF0LlNfSVNHSUQKICAgICAgICAgICAgZWxpZiB1c2VyID09ICdvJzoKICAgICAgICAgICAgICAgIG1hc2sgPSBzdGF0LlNfSVJXWE8gfCBzdGF0LlNfSVNWVFgKCiAgICAgICAgICAgICMgbWFzayBvdXQgdSwgZywgb3IgbyBwZXJtaXNzaW9ucyBmcm9tIGN1cnJlbnRfbW9kZSBhbmQgYXBwbHkgbmV3IHBlcm1pc3Npb25zCiAgICAgICAgICAgIGludmVyc2VfbWFzayA9IG1hc2sgXiBQRVJNX0JJVFMKICAgICAgICAgICAgbmV3X21vZGUgPSAoY3VycmVudF9tb2RlICYgaW52ZXJzZV9tYXNrKSB8IG1vZGVfdG9fYXBwbHkKICAgICAgICBlbGlmIG9wZXJhdG9yID09ICcrJzoKICAgICAgICAgICAgbmV3X21vZGUgPSBjdXJyZW50X21vZGUgfCBtb2RlX3RvX2FwcGx5CiAgICAgICAgZWxpZiBvcGVyYXRvciA9PSAnLSc6CiAgICAgICAgICAgIG5ld19tb2RlID0gY3VycmVudF9tb2RlIC0gKGN1cnJlbnRfbW9kZSAmIG1vZGVfdG9fYXBwbHkpCiAgICAgICAgcmV0dXJuIG5ld19tb2RlCgogICAgZGVmIF9nZXRfb2N0YWxfbW9kZV9mcm9tX3N5bWJvbGljX3Blcm1zKHNlbGYsIHBhdGhfc3RhdCwgdXNlciwgcGVybXMpOgogICAgICAgIHByZXZfbW9kZSA9IHN0YXQuU19JTU9ERShwYXRoX3N0YXQuc3RfbW9kZSkKCiAgICAgICAgaXNfZGlyZWN0b3J5ID0gc3RhdC5TX0lTRElSKHBhdGhfc3RhdC5zdF9tb2RlKQogICAgICAgIGhhc194X3Blcm1pc3Npb25zID0gKHByZXZfbW9kZSAmIEVYRUNfUEVSTV9CSVRTKSA+IDAKICAgICAgICBhcHBseV9YX3Blcm1pc3Npb24gPSBpc19kaXJlY3Rvcnkgb3IgaGFzX3hfcGVybWlzc2lvbnMKCiAgICAgICAgIyBQZXJtaXNzaW9uIGJpdHMgY29uc3RhbnRzIGRvY3VtZW50ZWQgYXQ6CiAgICAgICAgIyBodHRwOi8vZG9jcy5weXRob24ub3JnLzIvbGlicmFyeS9zdGF0Lmh0bWwjc3RhdC5TX0lTVUlECiAgICAgICAgaWYgYXBwbHlfWF9wZXJtaXNzaW9uOgogICAgICAgICAgICBYX3Blcm1zID0gewogICAgICAgICAgICAgICAgJ3UnOiB7J1gnOiBzdGF0LlNfSVhVU1J9LAogICAgICAgICAgICAgICAgJ2cnOiB7J1gnOiBzdGF0LlNfSVhHUlB9LAogICAgICAgICAgICAgICAgJ28nOiB7J1gnOiBzdGF0LlNfSVhPVEh9CiAgICAgICAgICAgIH0KICAgICAgICBlbHNlOgogICAgICAgICAgICBYX3Blcm1zID0gewogICAgICAgICAgICAgICAgJ3UnOiB7J1gnOiAwfSwKICAgICAgICAgICAgICAgICdnJzogeydYJzogMH0sCiAgICAgICAgICAgICAgICAnbyc6IHsnWCc6IDB9CiAgICAgICAgICAgIH0KCiAgICAgICAgdXNlcl9wZXJtc190b19tb2RlcyA9IHsKICAgICAgICAgICAgJ3UnOiB7CiAgICAgICAgICAgICAgICAncic6IHN0YXQuU19JUlVTUiwKICAgICAgICAgICAgICAgICd3Jzogc3RhdC5TX0lXVVNSLAogICAgICAgICAgICAgICAgJ3gnOiBzdGF0LlNfSVhVU1IsCiAgICAgICAgICAgICAgICAncyc6IHN0YXQuU19JU1VJRCwKICAgICAgICAgICAgICAgICd0JzogMCwKICAgICAgICAgICAgICAgICd1JzogcHJldl9tb2RlICYgc3RhdC5TX0lSV1hVLAogICAgICAgICAgICAgICAgJ2cnOiAocHJldl9tb2RlICYgc3RhdC5TX0lSV1hHKSA8PCAzLAogICAgICAgICAgICAgICAgJ28nOiAocHJldl9tb2RlICYgc3RhdC5TX0lSV1hPKSA8PCA2IH0sCiAgICAgICAgICAgICdnJzogewogICAgICAgICAgICAgICAgJ3InOiBzdGF0LlNfSVJHUlAsCiAgICAgICAgICAgICAgICAndyc6IHN0YXQuU19JV0dSUCwKICAgICAgICAgICAgICAgICd4Jzogc3RhdC5TX0lYR1JQLAogICAgICAgICAgICAgICAgJ3MnOiBzdGF0LlNfSVNHSUQsCiAgICAgICAgICAgICAgICAndCc6IDAsCiAgICAgICAgICAgICAgICAndSc6IChwcmV2X21vZGUgJiBzdGF0LlNfSVJXWFUpID4+IDMsCiAgICAgICAgICAgICAgICAnZyc6IHByZXZfbW9kZSAmIHN0YXQuU19JUldYRywKICAgICAgICAgICAgICAgICdvJzogKHByZXZfbW9kZSAmIHN0YXQuU19JUldYTykgPDwgMyB9LAogICAgICAgICAgICAnbyc6IHsKICAgICAgICAgICAgICAgICdyJzogc3RhdC5TX0lST1RILAogICAgICAgICAgICAgICAgJ3cnOiBzdGF0LlNfSVdPVEgsCiAgICAgICAgICAgICAgICAneCc6IHN0YXQuU19JWE9USCwKICAgICAgICAgICAgICAgICdzJzogMCwKICAgICAgICAgICAgICAgICd0Jzogc3RhdC5TX0lTVlRYLAogICAgICAgICAgICAgICAgJ3UnOiAocHJldl9tb2RlICYgc3RhdC5TX0lSV1hVKSA+PiA2LAogICAgICAgICAgICAgICAgJ2cnOiAocHJldl9tb2RlICYgc3RhdC5TX0lSV1hHKSA+PiAzLAogICAgICAgICAgICAgICAgJ28nOiBwcmV2X21vZGUgJiBzdGF0LlNfSVJXWE8gfQogICAgICAgIH0KCiAgICAgICAgIyBJbnNlcnQgWF9wZXJtcyBpbnRvIHVzZXJfcGVybXNfdG9fbW9kZXMKICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBYX3Blcm1zLml0ZW1zKCk6CiAgICAgICAgICAgIHVzZXJfcGVybXNfdG9fbW9kZXNba2V5XS51cGRhdGUodmFsdWUpCgogICAgICAgIG9yX3JlZHVjZSA9IGxhbWJkYSBtb2RlLCBwZXJtOiBtb2RlIHwgdXNlcl9wZXJtc190b19tb2Rlc1t1c2VyXVtwZXJtXQogICAgICAgIHJldHVybiByZWR1Y2Uob3JfcmVkdWNlLCBwZXJtcywgMCkKCiAgICBkZWYgc2V0X2ZzX2F0dHJpYnV0ZXNfaWZfZGlmZmVyZW50KHNlbGYsIGZpbGVfYXJncywgY2hhbmdlZCwgZGlmZj1Ob25lLCBleHBhbmQ9VHJ1ZSk6CiAgICAgICAgIyBzZXQgbW9kZXMgb3duZXJzIGFuZCBjb250ZXh0IGFzIG5lZWRlZAogICAgICAgIGNoYW5nZWQgPSBzZWxmLnNldF9jb250ZXh0X2lmX2RpZmZlcmVudCgKICAgICAgICAgICAgZmlsZV9hcmdzWydwYXRoJ10sIGZpbGVfYXJnc1snc2Vjb250ZXh0J10sIGNoYW5nZWQsIGRpZmYKICAgICAgICApCiAgICAgICAgY2hhbmdlZCA9IHNlbGYuc2V0X293bmVyX2lmX2RpZmZlcmVudCgKICAgICAgICAgICAgZmlsZV9hcmdzWydwYXRoJ10sIGZpbGVfYXJnc1snb3duZXInXSwgY2hhbmdlZCwgZGlmZiwgZXhwYW5kCiAgICAgICAgKQogICAgICAgIGNoYW5nZWQgPSBzZWxmLnNldF9ncm91cF9pZl9kaWZmZXJlbnQoCiAgICAgICAgICAgIGZpbGVfYXJnc1sncGF0aCddLCBmaWxlX2FyZ3NbJ2dyb3VwJ10sIGNoYW5nZWQsIGRpZmYsIGV4cGFuZAogICAgICAgICkKICAgICAgICBjaGFuZ2VkID0gc2VsZi5zZXRfbW9kZV9pZl9kaWZmZXJlbnQoCiAgICAgICAgICAgIGZpbGVfYXJnc1sncGF0aCddLCBmaWxlX2FyZ3NbJ21vZGUnXSwgY2hhbmdlZCwgZGlmZiwgZXhwYW5kCiAgICAgICAgKQogICAgICAgIGNoYW5nZWQgPSBzZWxmLnNldF9hdHRyaWJ1dGVzX2lmX2RpZmZlcmVudCgKICAgICAgICAgICAgZmlsZV9hcmdzWydwYXRoJ10sIGZpbGVfYXJnc1snYXR0cmlidXRlcyddLCBjaGFuZ2VkLCBkaWZmLCBleHBhbmQKICAgICAgICApCiAgICAgICAgcmV0dXJuIGNoYW5nZWQKCiAgICBkZWYgc2V0X2RpcmVjdG9yeV9hdHRyaWJ1dGVzX2lmX2RpZmZlcmVudChzZWxmLCBmaWxlX2FyZ3MsIGNoYW5nZWQsIGRpZmY9Tm9uZSwgZXhwYW5kPVRydWUpOgogICAgICAgIHJldHVybiBzZWxmLnNldF9mc19hdHRyaWJ1dGVzX2lmX2RpZmZlcmVudChmaWxlX2FyZ3MsIGNoYW5nZWQsIGRpZmYsIGV4cGFuZCkKCiAgICBkZWYgc2V0X2ZpbGVfYXR0cmlidXRlc19pZl9kaWZmZXJlbnQoc2VsZiwgZmlsZV9hcmdzLCBjaGFuZ2VkLCBkaWZmPU5vbmUsIGV4cGFuZD1UcnVlKToKICAgICAgICByZXR1cm4gc2VsZi5zZXRfZnNfYXR0cmlidXRlc19pZl9kaWZmZXJlbnQoZmlsZV9hcmdzLCBjaGFuZ2VkLCBkaWZmLCBleHBhbmQpCgogICAgZGVmIGFkZF9wYXRoX2luZm8oc2VsZiwga3dhcmdzKToKICAgICAgICAnJycKICAgICAgICBmb3IgcmVzdWx0cyB0aGF0IGFyZSBmaWxlcywgc3VwcGxlbWVudCB0aGUgaW5mbyBhYm91dCB0aGUgZmlsZQogICAgICAgIGluIHRoZSByZXR1cm4gcGF0aCB3aXRoIHN0YXRzIGFib3V0IHRoZSBmaWxlIHBhdGguCiAgICAgICAgJycnCgogICAgICAgIHBhdGggPSBrd2FyZ3MuZ2V0KCdwYXRoJywga3dhcmdzLmdldCgnZGVzdCcsIE5vbmUpKQogICAgICAgIGlmIHBhdGggaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIGt3YXJncwogICAgICAgIGJfcGF0aCA9IHRvX2J5dGVzKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMoYl9wYXRoKToKICAgICAgICAgICAgKHVpZCwgZ2lkKSA9IHNlbGYudXNlcl9hbmRfZ3JvdXAocGF0aCkKICAgICAgICAgICAga3dhcmdzWyd1aWQnXSA9IHVpZAogICAgICAgICAgICBrd2FyZ3NbJ2dpZCddID0gZ2lkCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHVzZXIgPSBwd2QuZ2V0cHd1aWQodWlkKVswXQogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICB1c2VyID0gc3RyKHVpZCkKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZ3JvdXAgPSBncnAuZ2V0Z3JnaWQoZ2lkKVswXQogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICBncm91cCA9IHN0cihnaWQpCiAgICAgICAgICAgIGt3YXJnc1snb3duZXInXSA9IHVzZXIKICAgICAgICAgICAga3dhcmdzWydncm91cCddID0gZ3JvdXAKICAgICAgICAgICAgc3QgPSBvcy5sc3RhdChiX3BhdGgpCiAgICAgICAgICAgIGt3YXJnc1snbW9kZSddID0gJzAlMDNvJyAlIHN0YXQuU19JTU9ERShzdFtzdGF0LlNUX01PREVdKQogICAgICAgICAgICAjIHNlY29udGV4dCBub3QgeWV0IHN1cHBvcnRlZAogICAgICAgICAgICBpZiBvcy5wYXRoLmlzbGluayhiX3BhdGgpOgogICAgICAgICAgICAgICAga3dhcmdzWydzdGF0ZSddID0gJ2xpbmsnCiAgICAgICAgICAgIGVsaWYgb3MucGF0aC5pc2RpcihiX3BhdGgpOgogICAgICAgICAgICAgICAga3dhcmdzWydzdGF0ZSddID0gJ2RpcmVjdG9yeScKICAgICAgICAgICAgZWxpZiBvcy5zdGF0KGJfcGF0aCkuc3RfbmxpbmsgPiAxOgogICAgICAgICAgICAgICAga3dhcmdzWydzdGF0ZSddID0gJ2hhcmQnCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBrd2FyZ3NbJ3N0YXRlJ10gPSAnZmlsZScKICAgICAgICAgICAgaWYgSEFWRV9TRUxJTlVYIGFuZCBzZWxmLnNlbGludXhfZW5hYmxlZCgpOgogICAgICAgICAgICAgICAga3dhcmdzWydzZWNvbnRleHQnXSA9ICc6Jy5qb2luKHNlbGYuc2VsaW51eF9jb250ZXh0KHBhdGgpKQogICAgICAgICAgICBrd2FyZ3NbJ3NpemUnXSA9IHN0W3N0YXQuU1RfU0laRV0KICAgICAgICBlbHNlOgogICAgICAgICAgICBrd2FyZ3NbJ3N0YXRlJ10gPSAnYWJzZW50JwogICAgICAgIHJldHVybiBrd2FyZ3MKCiAgICBkZWYgX2NoZWNrX2xvY2FsZShzZWxmKToKICAgICAgICAnJycKICAgICAgICBVc2VzIHRoZSBsb2NhbGUgbW9kdWxlIHRvIHRlc3QgdGhlIGN1cnJlbnRseSBzZXQgbG9jYWxlCiAgICAgICAgKHBlciB0aGUgTEFORyBhbmQgTENfQ1RZUEUgZW52aXJvbm1lbnQgc2V0dGluZ3MpCiAgICAgICAgJycnCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIHNldHRpbmcgdGhlIGxvY2FsZSB0byAnJyB1c2VzIHRoZSBkZWZhdWx0IGxvY2FsZQogICAgICAgICAgICAjIGFzIGl0IHdvdWxkIGJlIHJldHVybmVkIGJ5IGxvY2FsZS5nZXRkZWZhdWx0bG9jYWxlKCkKICAgICAgICAgICAgbG9jYWxlLnNldGxvY2FsZShsb2NhbGUuTENfQUxMLCAnJykKICAgICAgICBleGNlcHQgbG9jYWxlLkVycm9yOgogICAgICAgICAgICAjIGZhbGxiYWNrIHRvIHRoZSAnQycgbG9jYWxlLCB3aGljaCBtYXkgY2F1c2UgdW5pY29kZQogICAgICAgICAgICAjIGlzc3VlcyBidXQgaXMgcHJlZmVyYWJsZSB0byBzaW1wbHkgZmFpbGluZyBiZWNhdXNlCiAgICAgICAgICAgICMgb2YgYW4gdW5rbm93biBsb2NhbGUKICAgICAgICAgICAgbG9jYWxlLnNldGxvY2FsZShsb2NhbGUuTENfQUxMLCAnQycpCiAgICAgICAgICAgIG9zLmVudmlyb25bJ0xBTkcnXSA9ICdDJwogICAgICAgICAgICBvcy5lbnZpcm9uWydMQ19BTEwnXSA9ICdDJwogICAgICAgICAgICBvcy5lbnZpcm9uWydMQ19NRVNTQUdFUyddID0gJ0MnCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9IkFuIHVua25vd24gZXJyb3Igd2FzIGVuY291bnRlcmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gdmFsaWRhdGUgdGhlIGxvY2FsZTogJXMiICUgZSkKCiAgICBkZWYgX2hhbmRsZV9hbGlhc2VzKHNlbGYsIHNwZWM9Tm9uZSk6CiAgICAgICAgIyB0aGlzIHVzZXMgZXhjZXB0aW9ucyBhcyBpdCBoYXBwZW5zIGJlZm9yZSB3ZSBjYW4gc2FmZWx5IGNhbGwgZmFpbF9qc29uCiAgICAgICAgYWxpYXNlc19yZXN1bHRzID0ge30gI2FsaWFzOmNhbm9uCiAgICAgICAgaWYgc3BlYyBpcyBOb25lOgogICAgICAgICAgICBzcGVjID0gc2VsZi5hcmd1bWVudF9zcGVjCiAgICAgICAgZm9yIChrLHYpIGluIHNwZWMuaXRlbXMoKToKICAgICAgICAgICAgc2VsZi5fbGVnYWxfaW5wdXRzLmFwcGVuZChrKQogICAgICAgICAgICBhbGlhc2VzID0gdi5nZXQoJ2FsaWFzZXMnLCBOb25lKQogICAgICAgICAgICBkZWZhdWx0ID0gdi5nZXQoJ2RlZmF1bHQnLCBOb25lKQogICAgICAgICAgICByZXF1aXJlZCA9IHYuZ2V0KCdyZXF1aXJlZCcsIEZhbHNlKQogICAgICAgICAgICBpZiBkZWZhdWx0IGlzIG5vdCBOb25lIGFuZCByZXF1aXJlZDoKICAgICAgICAgICAgICAgICMgbm90IGFsaWFzIHNwZWNpZmljIGJ1dCB0aGlzIGlzIGEgZ29vZCBwbGFjZSB0byBjaGVjayB0aGlzCiAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oImludGVybmFsIGVycm9yOiByZXF1aXJlZCBhbmQgZGVmYXVsdCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlIGZvciAlcyIgJSBrKQogICAgICAgICAgICBpZiBhbGlhc2VzIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShhbGlhc2VzLCBTRVFVRU5DRVRZUEUpIG9yIGlzaW5zdGFuY2UoYWxpYXNlcywgKGJpbmFyeV90eXBlLCB0ZXh0X3R5cGUpKToKICAgICAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbignaW50ZXJuYWwgZXJyb3I6IGFsaWFzZXMgbXVzdCBiZSBhIGxpc3Qgb3IgdHVwbGUnKQogICAgICAgICAgICBmb3IgYWxpYXMgaW4gYWxpYXNlczoKICAgICAgICAgICAgICAgIHNlbGYuX2xlZ2FsX2lucHV0cy5hcHBlbmQoYWxpYXMpCiAgICAgICAgICAgICAgICBhbGlhc2VzX3Jlc3VsdHNbYWxpYXNdID0gawogICAgICAgICAgICAgICAgaWYgYWxpYXMgaW4gc2VsZi5wYXJhbXM6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5wYXJhbXNba10gPSBzZWxmLnBhcmFtc1thbGlhc10KCiAgICAgICAgcmV0dXJuIGFsaWFzZXNfcmVzdWx0cwoKICAgIGRlZiBfY2hlY2tfYXJndW1lbnRzKHNlbGYsIGNoZWNrX2ludmFsaWRfYXJndW1lbnRzKToKICAgICAgICBzZWxmLl9zeXNsb2dfZmFjaWxpdHkgPSAnTE9HX1VTRVInCiAgICAgICAgdW5zdXBwb3J0ZWRfcGFyYW1ldGVycyA9IHNldCgpCiAgICAgICAgZm9yIChrLHYpIGluIGxpc3Qoc2VsZi5wYXJhbXMuaXRlbXMoKSk6CgogICAgICAgICAgICBpZiBrID09ICdfYW5zaWJsZV9jaGVja19tb2RlJyBhbmQgdjoKICAgICAgICAgICAgICAgIHNlbGYuY2hlY2tfbW9kZSA9IFRydWUKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfbm9fbG9nJzoKICAgICAgICAgICAgICAgIHNlbGYubm9fbG9nID0gc2VsZi5ib29sZWFuKHYpCgogICAgICAgICAgICBlbGlmIGsgPT0gJ19hbnNpYmxlX2RlYnVnJzoKICAgICAgICAgICAgICAgIHNlbGYuX2RlYnVnID0gc2VsZi5ib29sZWFuKHYpCgogICAgICAgICAgICBlbGlmIGsgPT0gJ19hbnNpYmxlX2RpZmYnOgogICAgICAgICAgICAgICAgc2VsZi5fZGlmZiA9IHNlbGYuYm9vbGVhbih2KQoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV92ZXJib3NpdHknOgogICAgICAgICAgICAgICAgc2VsZi5fdmVyYm9zaXR5ID0gdgoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV9zZWxpbnV4X3NwZWNpYWxfZnMnOgogICAgICAgICAgICAgICAgc2VsZi5fc2VsaW51eF9zcGVjaWFsX2ZzID0gdgoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV9zeXNsb2dfZmFjaWxpdHknOgogICAgICAgICAgICAgICAgc2VsZi5fc3lzbG9nX2ZhY2lsaXR5ID0gdgoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV92ZXJzaW9uJzoKICAgICAgICAgICAgICAgIHNlbGYuYW5zaWJsZV92ZXJzaW9uID0gdgoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV9tb2R1bGVfbmFtZSc6CiAgICAgICAgICAgICAgICBzZWxmLl9uYW1lID0gdgoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV9zb2NrZXQnOgogICAgICAgICAgICAgICAgc2VsZi5fc29ja2V0X3BhdGggPSB2CgogICAgICAgICAgICBlbGlmIGNoZWNrX2ludmFsaWRfYXJndW1lbnRzIGFuZCBrIG5vdCBpbiBzZWxmLl9sZWdhbF9pbnB1dHM6CiAgICAgICAgICAgICAgICB1bnN1cHBvcnRlZF9wYXJhbWV0ZXJzLmFkZChrKQoKICAgICAgICAgICAgI2NsZWFuIHVwIGludGVybmFsIHBhcmFtczoKICAgICAgICAgICAgaWYgay5zdGFydHN3aXRoKCdfYW5zaWJsZV8nKToKICAgICAgICAgICAgICAgIGRlbCBzZWxmLnBhcmFtc1trXQoKICAgICAgICBpZiB1bnN1cHBvcnRlZF9wYXJhbWV0ZXJzOgogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9IlVuc3VwcG9ydGVkIHBhcmFtZXRlcnMgZm9yICglcykgbW9kdWxlOiAlcy4gU3VwcG9ydGVkIHBhcmFtZXRlcnMgaW5jbHVkZTogJXMiICUgKHNlbGYuX25hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJywnLmpvaW4oc29ydGVkKGxpc3QodW5zdXBwb3J0ZWRfcGFyYW1ldGVycykpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLCcuam9pbihzb3J0ZWQoc2VsZi5hcmd1bWVudF9zcGVjLmtleXMoKSkpKSkKICAgICAgICBpZiBzZWxmLmNoZWNrX21vZGUgYW5kIG5vdCBzZWxmLnN1cHBvcnRzX2NoZWNrX21vZGU6CiAgICAgICAgICAgIHNlbGYuZXhpdF9qc29uKHNraXBwZWQ9VHJ1ZSwgbXNnPSJyZW1vdGUgbW9kdWxlICglcykgZG9lcyBub3Qgc3VwcG9ydCBjaGVjayBtb2RlIiAlIHNlbGYuX25hbWUpCgogICAgZGVmIF9jb3VudF90ZXJtcyhzZWxmLCBjaGVjayk6CiAgICAgICAgY291bnQgPSAwCiAgICAgICAgZm9yIHRlcm0gaW4gY2hlY2s6CiAgICAgICAgICAgIGlmIHRlcm0gaW4gc2VsZi5wYXJhbXM6CiAgICAgICAgICAgICAgICBjb3VudCArPSAxCiAgICAgICAgcmV0dXJuIGNvdW50CgogICAgZGVmIF9jaGVja19tdXR1YWxseV9leGNsdXNpdmUoc2VsZiwgc3BlYyk6CiAgICAgICAgaWYgc3BlYyBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4KICAgICAgICBmb3IgY2hlY2sgaW4gc3BlYzoKICAgICAgICAgICAgY291bnQgPSBzZWxmLl9jb3VudF90ZXJtcyhjaGVjaykKICAgICAgICAgICAgaWYgY291bnQgPiAxOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJwYXJhbWV0ZXJzIGFyZSBtdXR1YWxseSBleGNsdXNpdmU6ICVzIiAlIChjaGVjaywpKQoKICAgIGRlZiBfY2hlY2tfcmVxdWlyZWRfb25lX29mKHNlbGYsIHNwZWMpOgogICAgICAgIGlmIHNwZWMgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZm9yIGNoZWNrIGluIHNwZWM6CiAgICAgICAgICAgIGNvdW50ID0gc2VsZi5fY291bnRfdGVybXMoY2hlY2spCiAgICAgICAgICAgIGlmIGNvdW50ID09IDA6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9Im9uZSBvZiB0aGUgZm9sbG93aW5nIGlzIHJlcXVpcmVkOiAlcyIgJSAnLCcuam9pbihjaGVjaykpCgogICAgZGVmIF9jaGVja19yZXF1aXJlZF90b2dldGhlcihzZWxmLCBzcGVjKToKICAgICAgICBpZiBzcGVjIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGZvciBjaGVjayBpbiBzcGVjOgogICAgICAgICAgICBjb3VudHMgPSBbIHNlbGYuX2NvdW50X3Rlcm1zKFtmaWVsZF0pIGZvciBmaWVsZCBpbiBjaGVjayBdCiAgICAgICAgICAgIG5vbl96ZXJvID0gWyBjIGZvciBjIGluIGNvdW50cyBpZiBjID4gMCBdCiAgICAgICAgICAgIGlmIGxlbihub25femVybykgPiAwOgogICAgICAgICAgICAgICAgaWYgMCBpbiBjb3VudHM6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJwYXJhbWV0ZXJzIGFyZSByZXF1aXJlZCB0b2dldGhlcjogJXMiICUgKGNoZWNrLCkpCgogICAgZGVmIF9jaGVja19yZXF1aXJlZF9hcmd1bWVudHMoc2VsZiwgc3BlYz1Ob25lLCBwYXJhbT1Ob25lICk6CiAgICAgICAgJycnIGVuc3VyZSBhbGwgcmVxdWlyZWQgYXJndW1lbnRzIGFyZSBwcmVzZW50ICcnJwogICAgICAgIG1pc3NpbmcgPSBbXQogICAgICAgIGlmIHNwZWMgaXMgTm9uZToKICAgICAgICAgICAgc3BlYyA9IHNlbGYuYXJndW1lbnRfc3BlYwogICAgICAgIGlmIHBhcmFtIGlzIE5vbmU6CiAgICAgICAgICAgIHBhcmFtID0gc2VsZi5wYXJhbXMKICAgICAgICBmb3IgKGssdikgaW4gc3BlYy5pdGVtcygpOgogICAgICAgICAgICByZXF1aXJlZCA9IHYuZ2V0KCdyZXF1aXJlZCcsIEZhbHNlKQogICAgICAgICAgICBpZiByZXF1aXJlZCBhbmQgayBub3QgaW4gcGFyYW06CiAgICAgICAgICAgICAgICBtaXNzaW5nLmFwcGVuZChrKQogICAgICAgIGlmIGxlbihtaXNzaW5nKSA+IDA6CiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0ibWlzc2luZyByZXF1aXJlZCBhcmd1bWVudHM6ICVzIiAlICIsIi5qb2luKG1pc3NpbmcpKQoKICAgIGRlZiBfY2hlY2tfcmVxdWlyZWRfaWYoc2VsZiwgc3BlYyk6CiAgICAgICAgJycnIGVuc3VyZSB0aGF0IHBhcmFtZXRlcnMgd2hpY2ggY29uZGl0aW9uYWxseSByZXF1aXJlZCBhcmUgcHJlc2VudCAnJycKICAgICAgICBpZiBzcGVjIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGZvciBzcCBpbiBzcGVjOgogICAgICAgICAgICBtaXNzaW5nID0gW10KICAgICAgICAgICAgbWF4X21pc3NpbmdfY291bnQgPSAwCiAgICAgICAgICAgIGlzX29uZV9vZiA9IEZhbHNlCiAgICAgICAgICAgIGlmIGxlbihzcCkgPT0gNDoKICAgICAgICAgICAgICAgIGtleSwgdmFsLCByZXF1aXJlbWVudHMsIGlzX29uZV9vZiA9IHNwCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBrZXksIHZhbCwgcmVxdWlyZW1lbnRzID0gc3AKCiAgICAgICAgICAgICMgaXNfb25lX29mIGlzIFRydWUgYXQgbGVhc3Qgb25lIHJlcXVpcmVtZW50IHNob3VsZCBiZQogICAgICAgICAgICAjIHByZXNlbnQsIGVsc2UgYWxsIHJlcXVpcmVtZW50cyBzaG91bGQgYmUgcHJlc2VudC4KICAgICAgICAgICAgaWYgaXNfb25lX29mOgogICAgICAgICAgICAgICAgbWF4X21pc3NpbmdfY291bnQgPSBsZW4ocmVxdWlyZW1lbnRzKQoKICAgICAgICAgICAgaWYga2V5IGluIHNlbGYucGFyYW1zIGFuZCBzZWxmLnBhcmFtc1trZXldID09IHZhbDoKICAgICAgICAgICAgICAgIGZvciBjaGVjayBpbiByZXF1aXJlbWVudHM6CiAgICAgICAgICAgICAgICAgICAgY291bnQgPSBzZWxmLl9jb3VudF90ZXJtcygoY2hlY2ssKSkKICAgICAgICAgICAgICAgICAgICBpZiBjb3VudCA9PSAwOgogICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nLmFwcGVuZChjaGVjaykKICAgICAgICAgICAgaWYgbGVuKG1pc3NpbmcpIGFuZCBsZW4obWlzc2luZykgPj0gbWF4X21pc3NpbmdfY291bnQ6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9IiVzIGlzICVzIGJ1dCB0aGUgZm9sbG93aW5nIGFyZSBtaXNzaW5nOiAlcyIgJSAoa2V5LCB2YWwsICcsJy5qb2luKG1pc3NpbmcpKSkKCiAgICBkZWYgX2NoZWNrX2FyZ3VtZW50X3ZhbHVlcyhzZWxmLCBzcGVjPU5vbmUsIHBhcmFtPU5vbmUpOgogICAgICAgICcnJyBlbnN1cmUgYWxsIGFyZ3VtZW50cyBoYXZlIHRoZSByZXF1ZXN0ZWQgdmFsdWVzLCBhbmQgdGhlcmUgYXJlIG5vIHN0cmF5IGFyZ3VtZW50cyAnJycKICAgICAgICBpZiBzcGVjIGlzIE5vbmU6CiAgICAgICAgICAgIHNwZWMgPSBzZWxmLmFyZ3VtZW50X3NwZWMKICAgICAgICBpZiBwYXJhbSBpcyBOb25lOgogICAgICAgICAgICBwYXJhbSA9IHNlbGYucGFyYW1zCiAgICAgICAgZm9yIChrLHYpIGluIHNwZWMuaXRlbXMoKToKICAgICAgICAgICAgY2hvaWNlcyA9IHYuZ2V0KCdjaG9pY2VzJyxOb25lKQogICAgICAgICAgICBpZiBjaG9pY2VzIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGNob2ljZXMsIFNFUVVFTkNFVFlQRSkgYW5kIG5vdCBpc2luc3RhbmNlKGNob2ljZXMsIChiaW5hcnlfdHlwZSwgdGV4dF90eXBlKSk6CiAgICAgICAgICAgICAgICBpZiBrIGluIHBhcmFtOgogICAgICAgICAgICAgICAgICAgIGlmIHBhcmFtW2tdIG5vdCBpbiBjaG9pY2VzOgogICAgICAgICAgICAgICAgICAgICAgICAjIFB5WWFtbCBjb252ZXJ0cyBjZXJ0YWluIHN0cmluZ3MgdG8gYm9vbHMuICBJZiB3ZSBjYW4gdW5hbWJpZ3VvdXNseSBjb252ZXJ0IGJhY2ssIGRvIHNvIGJlZm9yZSBjaGVja2luZwogICAgICAgICAgICAgICAgICAgICAgICAjIHRoZSB2YWx1ZS4gIElmIHdlIGNhbid0IGZpZ3VyZSB0aGlzIG91dCwgbW9kdWxlIGF1dGhvciBpcyByZXNwb25zaWJsZS4KICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXJlZF9jaG9pY2VzID0gTm9uZQogICAgICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbVtrXSA9PSAnRmFsc2UnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXJlZF9jaG9pY2VzID0gX2xlbmllbnRfbG93ZXJjYXNlKGNob2ljZXMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGQUxTRVkgPSBmcm96ZW5zZXQoQk9PTEVBTlNfRkFMU0UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVybGFwID0gRkFMU0VZLmludGVyc2VjdGlvbihjaG9pY2VzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKG92ZXJsYXApID09IDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBFeHRyYWN0IGZyb20gYSBzZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocGFyYW1ba10sKSA9IG92ZXJsYXAKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHBhcmFtW2tdID09ICdUcnVlJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxvd2VyZWRfY2hvaWNlcyBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyZWRfY2hvaWNlcyA9IF9sZW5pZW50X2xvd2VyY2FzZShjaG9pY2VzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgVFJVVEhZID0gZnJvemVuc2V0KEJPT0xFQU5TX1RSVUUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVybGFwID0gVFJVVEhZLmludGVyc2VjdGlvbihjaG9pY2VzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKG92ZXJsYXApID09IDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBhcmFtW2tdLCkgPSBvdmVybGFwCgogICAgICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbVtrXSBub3QgaW4gY2hvaWNlczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNob2ljZXNfc3RyPSIsIi5qb2luKFt0b19uYXRpdmUoYykgZm9yIGMgaW4gY2hvaWNlc10pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2c9InZhbHVlIG9mICVzIG11c3QgYmUgb25lIG9mOiAlcywgZ290OiAlcyIgJSAoaywgY2hvaWNlc19zdHIsIHBhcmFtW2tdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPW1zZykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0iaW50ZXJuYWwgZXJyb3I6IGNob2ljZXMgZm9yIGFyZ3VtZW50ICVzIGFyZSBub3QgaXRlcmFibGU6ICVzIiAlIChrLCBjaG9pY2VzKSkKCiAgICBkZWYgc2FmZV9ldmFsKHNlbGYsIHZhbHVlLCBsb2NhbHM9Tm9uZSwgaW5jbHVkZV9leGNlcHRpb25zPUZhbHNlKToKCiAgICAgICAgIyBkbyBub3QgYWxsb3cgbWV0aG9kIGNhbGxzIHRvIG1vZHVsZXMKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZSh2YWx1ZSwgc3RyaW5nX3R5cGVzKToKICAgICAgICAgICAgIyBhbHJlYWR5IHRlbXBsYXRlZCB0byBhIGRhdGF2YWx1ZXN0cnVjdHVyZSwgcGVyaGFwcz8KICAgICAgICAgICAgaWYgaW5jbHVkZV9leGNlcHRpb25zOgogICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSwgTm9uZSkKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCiAgICAgICAgaWYgcmUuc2VhcmNoKHInXHdcLlx3K1woJywgdmFsdWUpOgogICAgICAgICAgICBpZiBpbmNsdWRlX2V4Y2VwdGlvbnM6CiAgICAgICAgICAgICAgICByZXR1cm4gKHZhbHVlLCBOb25lKQogICAgICAgICAgICByZXR1cm4gdmFsdWUKICAgICAgICAjIGRvIG5vdCBhbGxvdyBpbXBvcnRzCiAgICAgICAgaWYgcmUuc2VhcmNoKHInaW1wb3J0IFx3KycsIHZhbHVlKToKICAgICAgICAgICAgaWYgaW5jbHVkZV9leGNlcHRpb25zOgogICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSwgTm9uZSkKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXN1bHQgPSBsaXRlcmFsX2V2YWwodmFsdWUpCiAgICAgICAgICAgIGlmIGluY2x1ZGVfZXhjZXB0aW9uczoKICAgICAgICAgICAgICAgIHJldHVybiAocmVzdWx0LCBOb25lKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgaWYgaW5jbHVkZV9leGNlcHRpb25zOgogICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSwgZSkKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCgogICAgZGVmIF9jaGVja190eXBlX3N0cihzZWxmLCB2YWx1ZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgc3RyaW5nX3R5cGVzKToKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCiAgICAgICAgIyBOb3RlOiBUaGlzIGNvdWxkIHRocm93IGEgdW5pY29kZSBlcnJvciBpZiB2YWx1ZSdzIF9fc3RyX18oKSBtZXRob2QKICAgICAgICAjIHJldHVybnMgbm9uLWFzY2lpLiAgSGF2ZSB0byBwb3J0IHV0aWxzLnRvX2J5dGVzKCkgaWYgdGhhdCBoYXBwZW5zCiAgICAgICAgcmV0dXJuIHN0cih2YWx1ZSkKCiAgICBkZWYgX2NoZWNrX3R5cGVfbGlzdChzZWxmLCB2YWx1ZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgbGlzdCk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQoKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICByZXR1cm4gdmFsdWUuc3BsaXQoIiwiKQogICAgICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgaW50KSBvciBpc2luc3RhbmNlKHZhbHVlLCBmbG9hdCk6CiAgICAgICAgICAgIHJldHVybiBbIHN0cih2YWx1ZSkgXQoKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYSBsaXN0JyAlIHR5cGUodmFsdWUpKQoKICAgIGRlZiBfY2hlY2tfdHlwZV9kaWN0KHNlbGYsIHZhbHVlKToKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBkaWN0KToKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIHN0cmluZ190eXBlcyk6CiAgICAgICAgICAgIGlmIHZhbHVlLnN0YXJ0c3dpdGgoInsiKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICByZXR1cm4ganNvbi5sb2Fkcyh2YWx1ZSkKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAocmVzdWx0LCBleGMpID0gc2VsZi5zYWZlX2V2YWwodmFsdWUsIGRpY3QoKSwgaW5jbHVkZV9leGNlcHRpb25zPVRydWUpCiAgICAgICAgICAgICAgICAgICAgaWYgZXhjIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ3VuYWJsZSB0byBldmFsdWF0ZSBzdHJpbmcgYXMgZGljdGlvbmFyeScpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgICAgICAgICBlbGlmICc9JyBpbiB2YWx1ZToKICAgICAgICAgICAgICAgIGZpZWxkcyA9IFtdCiAgICAgICAgICAgICAgICBmaWVsZF9idWZmZXIgPSBbXQogICAgICAgICAgICAgICAgaW5fcXVvdGUgPSBGYWxzZQogICAgICAgICAgICAgICAgaW5fZXNjYXBlID0gRmFsc2UKICAgICAgICAgICAgICAgIGZvciBjIGluIHZhbHVlLnN0cmlwKCk6CiAgICAgICAgICAgICAgICAgICAgaWYgaW5fZXNjYXBlOgogICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9idWZmZXIuYXBwZW5kKGMpCiAgICAgICAgICAgICAgICAgICAgICAgIGluX2VzY2FwZSA9IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgZWxpZiBjID09ICdcXCc6CiAgICAgICAgICAgICAgICAgICAgICAgIGluX2VzY2FwZSA9IFRydWUKICAgICAgICAgICAgICAgICAgICBlbGlmIG5vdCBpbl9xdW90ZSBhbmQgYyBpbiAoJ1wnJywgJyInKToKICAgICAgICAgICAgICAgICAgICAgICAgaW5fcXVvdGUgPSBjCiAgICAgICAgICAgICAgICAgICAgZWxpZiBpbl9xdW90ZSBhbmQgaW5fcXVvdGUgPT0gYzoKICAgICAgICAgICAgICAgICAgICAgICAgaW5fcXVvdGUgPSBGYWxzZQogICAgICAgICAgICAgICAgICAgIGVsaWYgbm90IGluX3F1b3RlIGFuZCBjIGluICgnLCcsICcgJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkID0gJycuam9pbihmaWVsZF9idWZmZXIpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGZpZWxkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRzLmFwcGVuZChmaWVsZCkKICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfYnVmZmVyID0gW10KICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9idWZmZXIuYXBwZW5kKGMpCgogICAgICAgICAgICAgICAgZmllbGQgPSAnJy5qb2luKGZpZWxkX2J1ZmZlcikKICAgICAgICAgICAgICAgIGlmIGZpZWxkOgogICAgICAgICAgICAgICAgICAgIGZpZWxkcy5hcHBlbmQoZmllbGQpCiAgICAgICAgICAgICAgICByZXR1cm4gZGljdCh4LnNwbGl0KCI9IiwgMSkgZm9yIHggaW4gZmllbGRzKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJkaWN0aW9uYXJ5IHJlcXVlc3RlZCwgY291bGQgbm90IHBhcnNlIEpTT04gb3Iga2V5PXZhbHVlIikKCiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCclcyBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgZGljdCcgJSB0eXBlKHZhbHVlKSkKCiAgICBkZWYgX2NoZWNrX3R5cGVfYm9vbChzZWxmLCB2YWx1ZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgYm9vbCk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQoKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBzdHJpbmdfdHlwZXMpIG9yIGlzaW5zdGFuY2UodmFsdWUsIGludCk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLmJvb2xlYW4odmFsdWUpCgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignJXMgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIGJvb2wnICUgdHlwZSh2YWx1ZSkpCgogICAgZGVmIF9jaGVja190eXBlX2ludChzZWxmLCB2YWx1ZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgaW50KToKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIHN0cmluZ190eXBlcyk6CiAgICAgICAgICAgIHJldHVybiBpbnQodmFsdWUpCgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignJXMgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhbiBpbnQnICUgdHlwZSh2YWx1ZSkpCgogICAgZGVmIF9jaGVja190eXBlX2Zsb2F0KHNlbGYsIHZhbHVlKToKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBmbG9hdCk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQoKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCAoYmluYXJ5X3R5cGUsIHRleHRfdHlwZSwgaW50KSk6CiAgICAgICAgICAgIHJldHVybiBmbG9hdCh2YWx1ZSkKCiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCclcyBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgZmxvYXQnICUgdHlwZSh2YWx1ZSkpCgogICAgZGVmIF9jaGVja190eXBlX3BhdGgoc2VsZiwgdmFsdWUpOgogICAgICAgIHZhbHVlID0gc2VsZi5fY2hlY2tfdHlwZV9zdHIodmFsdWUpCiAgICAgICAgcmV0dXJuIG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnModmFsdWUpKQoKICAgIGRlZiBfY2hlY2tfdHlwZV9qc29uYXJnKHNlbGYsIHZhbHVlKToKICAgICAgICAjIFJldHVybiBhIGpzb25pZmllZCBzdHJpbmcuICBTb21ldGltZXMgdGhlIGNvbnRyb2xsZXIgdHVybnMgYSBqc29uCiAgICAgICAgIyBzdHJpbmcgaW50byBhIGRpY3QvbGlzdCBzbyB0cmFuc2Zvcm0gaXQgYmFjayBpbnRvIGpzb24gaGVyZQogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsICh0ZXh0X3R5cGUsIGJpbmFyeV90eXBlKSk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5zdHJpcCgpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgKGxpc3QsIHR1cGxlLCBkaWN0KSk6CiAgICAgICAgICAgICAgICByZXR1cm4ganNvbi5kdW1wcyh2YWx1ZSkKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYSBqc29uIHN0cmluZycgJSB0eXBlKHZhbHVlKSkKCiAgICBkZWYgX2NoZWNrX3R5cGVfcmF3KHNlbGYsIHZhbHVlKToKICAgICAgICByZXR1cm4gdmFsdWUKCgogICAgZGVmIF9jaGVja190eXBlX2J5dGVzKHNlbGYsIHZhbHVlKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYuaHVtYW5fdG9fYnl0ZXModmFsdWUpCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcignJXMgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIEJ5dGUgdmFsdWUnICUgdHlwZSh2YWx1ZSkpCgoKICAgIGRlZiBfY2hlY2tfdHlwZV9iaXRzKHNlbGYsIHZhbHVlKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYuaHVtYW5fdG9fYnl0ZXModmFsdWUsIGlzYml0cz1UcnVlKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYSBCaXQgdmFsdWUnICUgdHlwZSh2YWx1ZSkpCgogICAgZGVmIF9jaGVja19hcmd1bWVudF90eXBlcyhzZWxmLCBzcGVjPU5vbmUsIHBhcmFtPU5vbmUpOgogICAgICAgICcnJyBlbnN1cmUgYWxsIGFyZ3VtZW50cyBoYXZlIHRoZSByZXF1ZXN0ZWQgdHlwZSAnJycKCiAgICAgICAgaWYgc3BlYyBpcyBOb25lOgogICAgICAgICAgICBzcGVjID0gc2VsZi5hcmd1bWVudF9zcGVjCiAgICAgICAgaWYgcGFyYW0gaXMgTm9uZToKICAgICAgICAgICAgcGFyYW0gPSBzZWxmLnBhcmFtcwoKICAgICAgICBmb3IgKGssIHYpIGluIHNwZWMuaXRlbXMoKToKICAgICAgICAgICAgd2FudGVkID0gdi5nZXQoJ3R5cGUnLCBOb25lKQogICAgICAgICAgICBpZiBrIG5vdCBpbiBwYXJhbToKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGlmIHdhbnRlZCBpcyBOb25lOgogICAgICAgICAgICAgICAgIyBNb3N0bHkgd2Ugd2FudCB0byBkZWZhdWx0IHRvIHN0ci4KICAgICAgICAgICAgICAgICMgRm9yIHZhbHVlcyBzZXQgdG8gTm9uZSBleHBsaWNpdGx5LCByZXR1cm4gTm9uZSBpbnN0ZWFkIGFzCiAgICAgICAgICAgICAgICAjIHRoYXQgYWxsb3dzIGEgdXNlciB0byB1bnNldCBhIHBhcmFtZXRlcgogICAgICAgICAgICAgICAgaWYgcGFyYW1ba10gaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgd2FudGVkID0gJ3N0cicKCiAgICAgICAgICAgIHZhbHVlID0gcGFyYW1ba10KICAgICAgICAgICAgaWYgdmFsdWUgaXMgTm9uZToKICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB0eXBlX2NoZWNrZXIgPSBzZWxmLl9DSEVDS19BUkdVTUVOVF9UWVBFU19ESVNQQVRDSEVSW3dhbnRlZF0KICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJpbXBsZW1lbnRhdGlvbiBlcnJvcjogdW5rbm93biB0eXBlICVzIHJlcXVlc3RlZCBmb3IgJXMiICUgKHdhbnRlZCwgaykpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHBhcmFtW2tdID0gdHlwZV9jaGVja2VyKHZhbHVlKQogICAgICAgICAgICBleGNlcHQgKFR5cGVFcnJvciwgVmFsdWVFcnJvcik6CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9ImFyZ3VtZW50ICVzIGlzIG9mIHR5cGUgJXMgYW5kIHdlIHdlcmUgdW5hYmxlIHRvIGNvbnZlcnQgdG8gJXM6ICVzIiAlIChrLCB0eXBlKHZhbHVlKSwgd2FudGVkLCBlKSkKCiAgICAgICAgICAgICMgZGVhbCB3aXRoIHN1YiBvcHRpb25zIHRvIGNyZWF0ZSBzdWIgc3BlYwogICAgICAgICAgICBzcGVjID0gTm9uZQogICAgICAgICAgICBpZiB3YW50ZWQgPT0gJ2RpY3QnIG9yICh3YW50ZWQgPT0gJ2xpc3QnIGFuZCB2LmdldCgnZWxlbWVudHMnLCAnJykgPT0gJ2RpY3QnKToKICAgICAgICAgICAgICAgIHNwZWMgPSB2LmdldCgnb3B0aW9ucycsIE5vbmUpCiAgICAgICAgICAgICAgICBpZiBzcGVjOgogICAgICAgICAgICAgICAgICAgIHNlbGYuX2NoZWNrX3JlcXVpcmVkX2FyZ3VtZW50cyhzcGVjLCBwYXJhbVtrXSkKICAgICAgICAgICAgICAgICAgICBzZWxmLl9jaGVja19hcmd1bWVudF90eXBlcyhzcGVjLCBwYXJhbVtrXSkKICAgICAgICAgICAgICAgICAgICBzZWxmLl9jaGVja19hcmd1bWVudF92YWx1ZXMoc3BlYywgcGFyYW1ba10pCgogICAgZGVmIF9zZXRfZGVmYXVsdHMoc2VsZiwgcHJlPVRydWUpOgogICAgICAgIGZvciAoayx2KSBpbiBzZWxmLmFyZ3VtZW50X3NwZWMuaXRlbXMoKToKICAgICAgICAgICAgZGVmYXVsdCA9IHYuZ2V0KCdkZWZhdWx0JywgTm9uZSkKICAgICAgICAgICAgaWYgcHJlIGlzIFRydWU6CiAgICAgICAgICAgICAgICAjIHRoaXMgcHJldmVudHMgc2V0dGluZyBkZWZhdWx0cyBvbiByZXF1aXJlZCBpdGVtcwogICAgICAgICAgICAgICAgaWYgZGVmYXVsdCBpcyBub3QgTm9uZSBhbmQgayBub3QgaW4gc2VsZi5wYXJhbXM6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5wYXJhbXNba10gPSBkZWZhdWx0CiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIG1ha2Ugc3VyZSB0aGluZ3Mgd2l0aG91dCBhIGRlZmF1bHQgc3RpbGwgZ2V0IHNldCBOb25lCiAgICAgICAgICAgICAgICBpZiBrIG5vdCBpbiBzZWxmLnBhcmFtczoKICAgICAgICAgICAgICAgICAgICBzZWxmLnBhcmFtc1trXSA9IGRlZmF1bHQKCiAgICBkZWYgX3NldF9mYWxsYmFja3Moc2VsZik6CiAgICAgICAgZm9yIGssdiBpbiBzZWxmLmFyZ3VtZW50X3NwZWMuaXRlbXMoKToKICAgICAgICAgICAgZmFsbGJhY2sgPSB2LmdldCgnZmFsbGJhY2snLCAoTm9uZSwpKQogICAgICAgICAgICBmYWxsYmFja19zdHJhdGVneSA9IGZhbGxiYWNrWzBdCiAgICAgICAgICAgIGZhbGxiYWNrX2FyZ3MgPSBbXQogICAgICAgICAgICBmYWxsYmFja19rd2FyZ3MgPSB7fQogICAgICAgICAgICBpZiBrIG5vdCBpbiBzZWxmLnBhcmFtcyBhbmQgZmFsbGJhY2tfc3RyYXRlZ3kgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBmb3IgaXRlbSBpbiBmYWxsYmFja1sxOl06CiAgICAgICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShpdGVtLCBkaWN0KToKICAgICAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tfa3dhcmdzID0gaXRlbQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrX2FyZ3MgPSBpdGVtCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5wYXJhbXNba10gPSBmYWxsYmFja19zdHJhdGVneSgqZmFsbGJhY2tfYXJncywgKipmYWxsYmFja19rd2FyZ3MpCiAgICAgICAgICAgICAgICBleGNlcHQgQW5zaWJsZUZhbGxiYWNrTm90Rm91bmQ6CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKCiAgICBkZWYgX2xvYWRfcGFyYW1zKHNlbGYpOgogICAgICAgICcnJyByZWFkIHRoZSBpbnB1dCBhbmQgc2V0IHRoZSBwYXJhbXMgYXR0cmlidXRlLgoKICAgICAgICBUaGlzIG1ldGhvZCBpcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuICBUaGUgZ3V0cyBvZiB0aGUgZnVuY3Rpb24KICAgICAgICB3ZXJlIG1vdmVkIG91dCBpbiAyLjEgc28gdGhhdCBjdXN0b20gbW9kdWxlcyBjb3VsZCByZWFkIHRoZSBwYXJhbWV0ZXJzLgogICAgICAgICcnJwogICAgICAgICMgZGVidWcgb3ZlcnJpZGVzIHRvIHJlYWQgYXJncyBmcm9tIGZpbGUgb3IgY21kbGluZQogICAgICAgIHNlbGYucGFyYW1zID0gX2xvYWRfcGFyYW1zKCkKCiAgICBkZWYgX2xvZ190b19zeXNsb2coc2VsZiwgbXNnKToKICAgICAgICBpZiBIQVNfU1lTTE9HOgogICAgICAgICAgICBtb2R1bGUgPSAnYW5zaWJsZS0lcycgJSBzZWxmLl9uYW1lCiAgICAgICAgICAgIGZhY2lsaXR5ID0gZ2V0YXR0cihzeXNsb2csIHNlbGYuX3N5c2xvZ19mYWNpbGl0eSwgc3lzbG9nLkxPR19VU0VSKQogICAgICAgICAgICBzeXNsb2cub3BlbmxvZyhzdHIobW9kdWxlKSwgMCwgZmFjaWxpdHkpCiAgICAgICAgICAgIHN5c2xvZy5zeXNsb2coc3lzbG9nLkxPR19JTkZPLCBtc2cpCgogICAgZGVmIGRlYnVnKHNlbGYsIG1zZyk6CiAgICAgICAgaWYgc2VsZi5fZGVidWc6CiAgICAgICAgICAgIHNlbGYubG9nKCdbZGVidWddICVzJyAlIG1zZykKCiAgICBkZWYgbG9nKHNlbGYsIG1zZywgbG9nX2FyZ3M9Tm9uZSk6CgogICAgICAgIGlmIG5vdCBzZWxmLm5vX2xvZzoKCiAgICAgICAgICAgIGlmIGxvZ19hcmdzIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBsb2dfYXJncyA9IGRpY3QoKQoKICAgICAgICAgICAgbW9kdWxlID0gJ2Fuc2libGUtJXMnICUgc2VsZi5fbmFtZQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKG1vZHVsZSwgYmluYXJ5X3R5cGUpOgogICAgICAgICAgICAgICAgbW9kdWxlID0gbW9kdWxlLmRlY29kZSgndXRmLTgnLCAncmVwbGFjZScpCgogICAgICAgICAgICAjIDY2NTUgLSBhbGxvdyBmb3IgYWNjZW50ZWQgY2hhcmFjdGVycwogICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShtc2csIChiaW5hcnlfdHlwZSwgdGV4dF90eXBlKSk6CiAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoIm1zZyBzaG91bGQgYmUgYSBzdHJpbmcgKGdvdCAlcykiICUgdHlwZShtc2cpKQoKICAgICAgICAgICAgIyBXZSB3YW50IGpvdXJuYWwgdG8gYWx3YXlzIHRha2UgdGV4dCB0eXBlCiAgICAgICAgICAgICMgc3lzbG9nIHRha2VzIGJ5dGVzIG9uIHB5MiwgdGV4dCB0eXBlIG9uIHB5MwogICAgICAgICAgICBpZiBpc2luc3RhbmNlKG1zZywgYmluYXJ5X3R5cGUpOgogICAgICAgICAgICAgICAgam91cm5hbF9tc2cgPSByZW1vdmVfdmFsdWVzKG1zZy5kZWNvZGUoJ3V0Zi04JywgJ3JlcGxhY2UnKSwgc2VsZi5ub19sb2dfdmFsdWVzKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBUT0RPOiBzdXJyb2dhdGVlc2NhcGUgaXMgYSBkYW5nZXIgaGVyZSBvbiBQeTMKICAgICAgICAgICAgICAgIGpvdXJuYWxfbXNnID0gcmVtb3ZlX3ZhbHVlcyhtc2csIHNlbGYubm9fbG9nX3ZhbHVlcykKCiAgICAgICAgICAgIGlmIFBZMzoKICAgICAgICAgICAgICAgIHN5c2xvZ19tc2cgPSBqb3VybmFsX21zZwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc3lzbG9nX21zZyA9IGpvdXJuYWxfbXNnLmVuY29kZSgndXRmLTgnLCAncmVwbGFjZScpCgogICAgICAgICAgICBpZiBoYXNfam91cm5hbDoKICAgICAgICAgICAgICAgIGpvdXJuYWxfYXJncyA9IFsoIk1PRFVMRSIsIG9zLnBhdGguYmFzZW5hbWUoX19maWxlX18pKV0KICAgICAgICAgICAgICAgIGZvciBhcmcgaW4gbG9nX2FyZ3M6CiAgICAgICAgICAgICAgICAgICAgam91cm5hbF9hcmdzLmFwcGVuZCgoYXJnLnVwcGVyKCksIHN0cihsb2dfYXJnc1thcmddKSkpCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgam91cm5hbC5zZW5kKHUiJXMgJXMiICUgKG1vZHVsZSwgam91cm5hbF9tc2cpLCAqKmRpY3Qoam91cm5hbF9hcmdzKSkKICAgICAgICAgICAgICAgIGV4Y2VwdCBJT0Vycm9yOgogICAgICAgICAgICAgICAgICAgICMgZmFsbCBiYWNrIHRvIHN5c2xvZyBzaW5jZSBsb2dnaW5nIHRvIGpvdXJuYWwgZmFpbGVkCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fbG9nX3RvX3N5c2xvZyhzeXNsb2dfbXNnKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5fbG9nX3RvX3N5c2xvZyhzeXNsb2dfbXNnKQoKICAgIGRlZiBfbG9nX2ludm9jYXRpb24oc2VsZik6CiAgICAgICAgJycnIGxvZyB0aGF0IGFuc2libGUgcmFuIHRoZSBtb2R1bGUgJycnCiAgICAgICAgIyBUT0RPOiBnZW5lcmFsaXplIGEgc2VwYXJhdGUgbG9nIGZ1bmN0aW9uIGFuZCBtYWtlIGxvZ19pbnZvY2F0aW9uIHVzZSBpdAogICAgICAgICMgU2FuaXRpemUgcG9zc2libGUgcGFzc3dvcmQgYXJndW1lbnQgd2hlbiBsb2dnaW5nLgogICAgICAgIGxvZ19hcmdzID0gZGljdCgpCgogICAgICAgIGZvciBwYXJhbSBpbiBzZWxmLnBhcmFtczoKICAgICAgICAgICAgY2Fub24gID0gc2VsZi5hbGlhc2VzLmdldChwYXJhbSwgcGFyYW0pCiAgICAgICAgICAgIGFyZ19vcHRzID0gc2VsZi5hcmd1bWVudF9zcGVjLmdldChjYW5vbiwge30pCiAgICAgICAgICAgIG5vX2xvZyA9IGFyZ19vcHRzLmdldCgnbm9fbG9nJywgRmFsc2UpCgogICAgICAgICAgICBpZiBzZWxmLmJvb2xlYW4obm9fbG9nKToKICAgICAgICAgICAgICAgIGxvZ19hcmdzW3BhcmFtXSA9ICdOT1RfTE9HR0lOR19QQVJBTUVURVInCiAgICAgICAgICAgICMgdHJ5IHRvIGNhcHR1cmUgYWxsIHBhc3N3b3Jkcy9wYXNzcGhyYXNlIG5hbWVkIGZpZWxkcyBtaXNzZWQgYnkgbm9fbG9nCiAgICAgICAgICAgIGVsaWYgUEFTU1dPUkRfTUFUQ0guc2VhcmNoKHBhcmFtKSBhbmQgXAogICAgICAgICAgICAgIGFyZ19vcHRzLmdldCgndHlwZScsICdzdHInKSAhPSAnYm9vbCcgYW5kIFwKICAgICAgICAgICAgICBub3QgYXJnX29wdHMuZ2V0KCdjaG9pY2VzJywgRmFsc2UpOgogICAgICAgICAgICAgICAgIyBza2lwIGJvb2xlYW4gYW5kIGVudW1zIGFzIHRoZXkgYXJlIGFib3V0ICdwYXNzd29yZCcgc3RhdGUKICAgICAgICAgICAgICAgIGxvZ19hcmdzW3BhcmFtXSA9ICdOT1RfTE9HR0lOR19QQVNTV09SRCcKICAgICAgICAgICAgICAgIHNlbGYud2FybignTW9kdWxlIGRpZCBub3Qgc2V0IG5vX2xvZyBmb3IgJXMnICUgcGFyYW0pCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwYXJhbV92YWwgPSBzZWxmLnBhcmFtc1twYXJhbV0KICAgICAgICAgICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKHBhcmFtX3ZhbCwgKHRleHRfdHlwZSwgYmluYXJ5X3R5cGUpKToKICAgICAgICAgICAgICAgICAgICBwYXJhbV92YWwgPSBzdHIocGFyYW1fdmFsKQogICAgICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKHBhcmFtX3ZhbCwgdGV4dF90eXBlKToKICAgICAgICAgICAgICAgICAgICBwYXJhbV92YWwgPSBwYXJhbV92YWwuZW5jb2RlKCd1dGYtOCcpCiAgICAgICAgICAgICAgICBsb2dfYXJnc1twYXJhbV0gPSBoZXVyaXN0aWNfbG9nX3Nhbml0aXplKHBhcmFtX3ZhbCwgc2VsZi5ub19sb2dfdmFsdWVzKQoKICAgICAgICBtc2cgPSBbJyVzPSVzJyAlICh0b19uYXRpdmUoYXJnKSwgdG9fbmF0aXZlKHZhbCkpIGZvciBhcmcsIHZhbCBpbiBsb2dfYXJncy5pdGVtcygpXQogICAgICAgIGlmIG1zZzoKICAgICAgICAgICAgbXNnID0gJ0ludm9rZWQgd2l0aCAlcycgJSAnICcuam9pbihtc2cpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbXNnID0gJ0ludm9rZWQnCgogICAgICAgIHNlbGYubG9nKG1zZywgbG9nX2FyZ3M9bG9nX2FyZ3MpCgoKICAgIGRlZiBfc2V0X2N3ZChzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGN3ZCA9IG9zLmdldGN3ZCgpCiAgICAgICAgICAgIGlmIG5vdCBvcy5hY2Nlc3MoY3dkLCBvcy5GX09LfG9zLlJfT0spOgogICAgICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCkKICAgICAgICAgICAgcmV0dXJuIGN3ZAogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgIyB3ZSBkb24ndCBoYXZlIGFjY2VzcyB0byB0aGUgY3dkLCBwcm9iYWJseSBiZWNhdXNlIG9mIHN1ZG8uCiAgICAgICAgICAgICMgVHJ5IGFuZCBtb3ZlIHRvIGEgbmV1dHJhbCBsb2NhdGlvbiB0byBwcmV2ZW50IGVycm9ycwogICAgICAgICAgICBmb3IgY3dkIGluIFtvcy5wYXRoLmV4cGFuZHZhcnMoJyRIT01FJyksIHRlbXBmaWxlLmdldHRlbXBkaXIoKV06CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgaWYgb3MuYWNjZXNzKGN3ZCwgb3MuRl9PS3xvcy5SX09LKToKICAgICAgICAgICAgICAgICAgICAgICAgb3MuY2hkaXIoY3dkKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3dkCiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICMgd2Ugd29uJ3QgZXJyb3IgaGVyZSwgYXMgaXQgbWF5ICpub3QqIGJlIGEgcHJvYmxlbSwKICAgICAgICAjIGFuZCB3ZSBkb24ndCB3YW50IHRvIGJyZWFrIG1vZHVsZXMgdW5uZWNlc3NhcmlseQogICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIGdldF9iaW5fcGF0aChzZWxmLCBhcmcsIHJlcXVpcmVkPUZhbHNlLCBvcHRfZGlycz1bXSk6CiAgICAgICAgJycnCiAgICAgICAgZmluZCBzeXN0ZW0gZXhlY3V0YWJsZSBpbiBQQVRILgogICAgICAgIE9wdGlvbmFsIGFyZ3VtZW50czoKICAgICAgICAgICAtIHJlcXVpcmVkOiAgaWYgZXhlY3V0YWJsZSBpcyBub3QgZm91bmQgYW5kIHJlcXVpcmVkIGlzIHRydWUsIGZhaWxfanNvbgogICAgICAgICAgIC0gb3B0X2RpcnM6ICBvcHRpb25hbCBsaXN0IG9mIGRpcmVjdG9yaWVzIHRvIHNlYXJjaCBpbiBhZGRpdGlvbiB0byBQQVRICiAgICAgICAgaWYgZm91bmQgcmV0dXJuIGZ1bGwgcGF0aDsgb3RoZXJ3aXNlIHJldHVybiBOb25lCiAgICAgICAgJycnCiAgICAgICAgc2Jpbl9wYXRocyA9IFsnL3NiaW4nLCAnL3Vzci9zYmluJywgJy91c3IvbG9jYWwvc2JpbiddCiAgICAgICAgcGF0aHMgPSBbXQogICAgICAgIGZvciBkIGluIG9wdF9kaXJzOgogICAgICAgICAgICBpZiBkIGlzIG5vdCBOb25lIGFuZCBvcy5wYXRoLmV4aXN0cyhkKToKICAgICAgICAgICAgICAgIHBhdGhzLmFwcGVuZChkKQogICAgICAgIHBhdGhzICs9IG9zLmVudmlyb24uZ2V0KCdQQVRIJywgJycpLnNwbGl0KG9zLnBhdGhzZXApCiAgICAgICAgYmluX3BhdGggPSBOb25lCiAgICAgICAgIyBtYW5nbGUgUEFUSCB0byBpbmNsdWRlIC9zYmluIGRpcnMKICAgICAgICBmb3IgcCBpbiBzYmluX3BhdGhzOgogICAgICAgICAgICBpZiBwIG5vdCBpbiBwYXRocyBhbmQgb3MucGF0aC5leGlzdHMocCk6CiAgICAgICAgICAgICAgICBwYXRocy5hcHBlbmQocCkKICAgICAgICBmb3IgZCBpbiBwYXRoczoKICAgICAgICAgICAgaWYgbm90IGQ6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBwYXRoID0gb3MucGF0aC5qb2luKGQsIGFyZykKICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMocGF0aCkgYW5kIG5vdCBvcy5wYXRoLmlzZGlyKHBhdGgpIGFuZCBpc19leGVjdXRhYmxlKHBhdGgpOgogICAgICAgICAgICAgICAgYmluX3BhdGggPSBwYXRoCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGlmIHJlcXVpcmVkIGFuZCBiaW5fcGF0aCBpcyBOb25lOgogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9J0ZhaWxlZCB0byBmaW5kIHJlcXVpcmVkIGV4ZWN1dGFibGUgJXMgaW4gcGF0aHM6ICVzJyAlIChhcmcsIG9zLnBhdGhzZXAuam9pbihwYXRocykpKQogICAgICAgIHJldHVybiBiaW5fcGF0aAoKICAgIGRlZiBib29sZWFuKHNlbGYsIGFyZyk6CiAgICAgICAgJycnIHJldHVybiBhIGJvb2wgZm9yIHRoZSBhcmcgJycnCiAgICAgICAgaWYgYXJnIGlzIE5vbmUgb3IgaXNpbnN0YW5jZShhcmcsIGJvb2wpOgogICAgICAgICAgICByZXR1cm4gYXJnCiAgICAgICAgaWYgaXNpbnN0YW5jZShhcmcsIHN0cmluZ190eXBlcyk6CiAgICAgICAgICAgIGFyZyA9IGFyZy5sb3dlcigpCiAgICAgICAgaWYgYXJnIGluIEJPT0xFQU5TX1RSVUU6CiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZWxpZiBhcmcgaW4gQk9PTEVBTlNfRkFMU0U6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0nJXMgaXMgbm90IGEgdmFsaWQgYm9vbGVhbi4gVmFsaWQgYm9vbGVhbnMgaW5jbHVkZTogJXMnICUgKHRvX3RleHQoYXJnKSwgJywnLmpvaW4oWyclcycgJSB4IGZvciB4IGluIEJPT0xFQU5TXSkpKQoKICAgIGRlZiBqc29uaWZ5KHNlbGYsIGRhdGEpOgogICAgICAgIGZvciBlbmNvZGluZyBpbiAoInV0Zi04IiwgImxhdGluLTEiKToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmV0dXJuIGpzb24uZHVtcHMoZGF0YSwgZW5jb2Rpbmc9ZW5jb2RpbmcpCiAgICAgICAgICAgICMgT2xkIHN5c3RlbXMgdXNpbmcgb2xkIHNpbXBsZWpzb24gbW9kdWxlIGRvZXMgbm90IHN1cHBvcnQgZW5jb2Rpbmcga2V5d29yZC4KICAgICAgICAgICAgZXhjZXB0IFR5cGVFcnJvcjoKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBuZXdfZGF0YSA9IGpzb25fZGljdF9ieXRlc190b191bmljb2RlKGRhdGEsIGVuY29kaW5nPWVuY29kaW5nKQogICAgICAgICAgICAgICAgZXhjZXB0IFVuaWNvZGVEZWNvZGVFcnJvcjoKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgcmV0dXJuIGpzb24uZHVtcHMobmV3X2RhdGEpCiAgICAgICAgICAgIGV4Y2VwdCBVbmljb2RlRGVjb2RlRXJyb3I6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0nSW52YWxpZCB1bmljb2RlIGVuY29kaW5nIGVuY291bnRlcmVkJykKCiAgICBkZWYgZnJvbV9qc29uKHNlbGYsIGRhdGEpOgogICAgICAgIHJldHVybiBqc29uLmxvYWRzKGRhdGEpCgogICAgZGVmIGFkZF9jbGVhbnVwX2ZpbGUoc2VsZiwgcGF0aCk6CiAgICAgICAgaWYgcGF0aCBub3QgaW4gc2VsZi5jbGVhbnVwX2ZpbGVzOgogICAgICAgICAgICBzZWxmLmNsZWFudXBfZmlsZXMuYXBwZW5kKHBhdGgpCgogICAgZGVmIGRvX2NsZWFudXBfZmlsZXMoc2VsZik6CiAgICAgICAgZm9yIHBhdGggaW4gc2VsZi5jbGVhbnVwX2ZpbGVzOgogICAgICAgICAgICBzZWxmLmNsZWFudXAocGF0aCkKCiAgICBkZWYgX3JldHVybl9mb3JtYXR0ZWQoc2VsZiwga3dhcmdzKToKCiAgICAgICAgc2VsZi5hZGRfcGF0aF9pbmZvKGt3YXJncykKCiAgICAgICAgaWYgJ2ludm9jYXRpb24nIG5vdCBpbiBrd2FyZ3M6CiAgICAgICAgICAgIGt3YXJnc1snaW52b2NhdGlvbiddID0geydtb2R1bGVfYXJncyc6IHNlbGYucGFyYW1zfQoKICAgICAgICBpZiAnd2FybmluZ3MnIGluIGt3YXJnczoKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShrd2FyZ3NbJ3dhcm5pbmdzJ10sIGxpc3QpOgogICAgICAgICAgICAgICAgZm9yIHcgaW4ga3dhcmdzWyd3YXJuaW5ncyddOgogICAgICAgICAgICAgICAgICAgIHNlbGYud2Fybih3KQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi53YXJuKGt3YXJnc1snd2FybmluZ3MnXSkKCiAgICAgICAgaWYgc2VsZi5fd2FybmluZ3M6CiAgICAgICAgICAgIGt3YXJnc1snd2FybmluZ3MnXSA9IHNlbGYuX3dhcm5pbmdzCgogICAgICAgIGlmICdkZXByZWNhdGlvbnMnIGluIGt3YXJnczoKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShrd2FyZ3NbJ2RlcHJlY2F0aW9ucyddLCBsaXN0KToKICAgICAgICAgICAgICAgIGZvciBkIGluIGt3YXJnc1snZGVwcmVjYXRpb25zJ106CiAgICAgICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShkLCBTRVFVRU5DRVRZUEUpIGFuZCBsZW4oZCkgPT0gMjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kZXByZWNhdGUoZFswXSwgdmVyc2lvbj1kWzFdKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGVwcmVjYXRlKGQpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmRlcHJlY2F0ZShrd2FyZ3NbJ2RlcHJlY2F0aW9ucyddKQoKICAgICAgICBpZiBzZWxmLl9kZXByZWNhdGlvbnM6CiAgICAgICAgICAgIGt3YXJnc1snZGVwcmVjYXRpb25zJ10gPSBzZWxmLl9kZXByZWNhdGlvbnMKCiAgICAgICAga3dhcmdzID0gcmVtb3ZlX3ZhbHVlcyhrd2FyZ3MsIHNlbGYubm9fbG9nX3ZhbHVlcykKICAgICAgICBwcmludCgnXG4lcycgJSBzZWxmLmpzb25pZnkoa3dhcmdzKSkKCiAgICBkZWYgZXhpdF9qc29uKHNlbGYsICoqa3dhcmdzKToKICAgICAgICAnJycgcmV0dXJuIGZyb20gdGhlIG1vZHVsZSwgd2l0aG91dCBlcnJvciAnJycKCiAgICAgICAgaWYgbm90ICdjaGFuZ2VkJyBpbiBrd2FyZ3M6CiAgICAgICAgICAgIGt3YXJnc1snY2hhbmdlZCddID0gRmFsc2UKCiAgICAgICAgc2VsZi5kb19jbGVhbnVwX2ZpbGVzKCkKICAgICAgICBzZWxmLl9yZXR1cm5fZm9ybWF0dGVkKGt3YXJncykKICAgICAgICBzeXMuZXhpdCgwKQoKICAgIGRlZiBmYWlsX2pzb24oc2VsZiwgKiprd2FyZ3MpOgogICAgICAgICcnJyByZXR1cm4gZnJvbSB0aGUgbW9kdWxlLCB3aXRoIGFuIGVycm9yIG1lc3NhZ2UgJycnCgogICAgICAgIGFzc2VydCAnbXNnJyBpbiBrd2FyZ3MsICJpbXBsZW1lbnRhdGlvbiBlcnJvciAtLSBtc2cgdG8gZXhwbGFpbiB0aGUgZXJyb3IgaXMgcmVxdWlyZWQiCiAgICAgICAga3dhcmdzWydmYWlsZWQnXSA9IFRydWUKCiAgICAgICAgaWYgbm90ICdjaGFuZ2VkJyBpbiBrd2FyZ3M6CiAgICAgICAgICAgIGt3YXJnc1snY2hhbmdlZCddID0gRmFsc2UKCiAgICAgICAgc2VsZi5kb19jbGVhbnVwX2ZpbGVzKCkKICAgICAgICBzZWxmLl9yZXR1cm5fZm9ybWF0dGVkKGt3YXJncykKICAgICAgICBzeXMuZXhpdCgxKQoKICAgIGRlZiBmYWlsX29uX21pc3NpbmdfcGFyYW1zKHNlbGYsIHJlcXVpcmVkX3BhcmFtcz1Ob25lKToKICAgICAgICAnJycgVGhpcyBpcyBmb3IgY2hlY2tpbmcgZm9yIHJlcXVpcmVkIHBhcmFtcyB3aGVuIHdlIGNhbiBub3QgY2hlY2sgdmlhIGFyZ3NwZWMgYmVjYXVzZSB3ZQogICAgICAgIG5lZWQgbW9yZSBpbmZvcm1hdGlvbiB0aGFuIGlzIHNpbXBseSBnaXZlbiBpbiB0aGUgYXJnc3BlYy4KICAgICAgICAnJycKICAgICAgICBpZiBub3QgcmVxdWlyZWRfcGFyYW1zOgogICAgICAgICAgICByZXR1cm4KICAgICAgICBtaXNzaW5nX3BhcmFtcyA9IFtdCiAgICAgICAgZm9yIHJlcXVpcmVkX3BhcmFtIGluIHJlcXVpcmVkX3BhcmFtczoKICAgICAgICAgICAgaWYgbm90IHNlbGYucGFyYW1zLmdldChyZXF1aXJlZF9wYXJhbSk6CiAgICAgICAgICAgICAgICBtaXNzaW5nX3BhcmFtcy5hcHBlbmQocmVxdWlyZWRfcGFyYW0pCiAgICAgICAgaWYgbWlzc2luZ19wYXJhbXM6CiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0ibWlzc2luZyByZXF1aXJlZCBhcmd1bWVudHM6ICVzIiAlICcsJy5qb2luKG1pc3NpbmdfcGFyYW1zKSkKCiAgICBkZWYgZGlnZXN0X2Zyb21fZmlsZShzZWxmLCBmaWxlbmFtZSwgYWxnb3JpdGhtKToKICAgICAgICAnJycgUmV0dXJuIGhleCBkaWdlc3Qgb2YgbG9jYWwgZmlsZSBmb3IgYSBkaWdlc3RfbWV0aG9kIHNwZWNpZmllZCBieSBuYW1lLCBvciBOb25lIGlmIGZpbGUgaXMgbm90IHByZXNlbnQuICcnJwogICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhmaWxlbmFtZSk6CiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgaWYgb3MucGF0aC5pc2RpcihmaWxlbmFtZSk6CiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0iYXR0ZW1wdGVkIHRvIHRha2UgY2hlY2tzdW0gb2YgZGlyZWN0b3J5OiAlcyIgJSBmaWxlbmFtZSkKCiAgICAgICAgIyBwcmVzZXJ2ZSBvbGQgYmVoYXZpb3VyIHdoZXJlIHRoZSB0aGlyZCBwYXJhbWV0ZXIgd2FzIGEgaGFzaCBhbGdvcml0aG0gb2JqZWN0CiAgICAgICAgaWYgaGFzYXR0cihhbGdvcml0aG0sICdoZXhkaWdlc3QnKToKICAgICAgICAgICAgZGlnZXN0X21ldGhvZCA9IGFsZ29yaXRobQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGRpZ2VzdF9tZXRob2QgPSBBVkFJTEFCTEVfSEFTSF9BTEdPUklUSE1TW2FsZ29yaXRobV0oKQogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9IkNvdWxkIG5vdCBoYXNoIGZpbGUgJyVzJyB3aXRoIGFsZ29yaXRobSAnJXMnLiBBdmFpbGFibGUgYWxnb3JpdGhtczogJXMiICUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZmlsZW5hbWUsIGFsZ29yaXRobSwgJywgJy5qb2luKEFWQUlMQUJMRV9IQVNIX0FMR09SSVRITVMpKSkKCiAgICAgICAgYmxvY2tzaXplID0gNjQgKiAxMDI0CiAgICAgICAgaW5maWxlID0gb3Blbihvcy5wYXRoLnJlYWxwYXRoKGZpbGVuYW1lKSwgJ3JiJykKICAgICAgICBibG9jayA9IGluZmlsZS5yZWFkKGJsb2Nrc2l6ZSkKICAgICAgICB3aGlsZSBibG9jazoKICAgICAgICAgICAgZGlnZXN0X21ldGhvZC51cGRhdGUoYmxvY2spCiAgICAgICAgICAgIGJsb2NrID0gaW5maWxlLnJlYWQoYmxvY2tzaXplKQogICAgICAgIGluZmlsZS5jbG9zZSgpCiAgICAgICAgcmV0dXJuIGRpZ2VzdF9tZXRob2QuaGV4ZGlnZXN0KCkKCiAgICBkZWYgbWQ1KHNlbGYsIGZpbGVuYW1lKToKICAgICAgICAnJycgUmV0dXJuIE1ENSBoZXggZGlnZXN0IG9mIGxvY2FsIGZpbGUgdXNpbmcgZGlnZXN0X2Zyb21fZmlsZSgpLgoKICAgICAgICBEbyBub3QgdXNlIHRoaXMgZnVuY3Rpb24gdW5sZXNzIHlvdSBoYXZlIG5vIG90aGVyIGNob2ljZSBmb3I6CiAgICAgICAgICAgIDEpIE9wdGlvbmFsIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5CiAgICAgICAgICAgIDIpIENvbXBhdGliaWxpdHkgd2l0aCBhIHRoaXJkIHBhcnR5IHByb3RvY29sCgogICAgICAgIFRoaXMgZnVuY3Rpb24gd2lsbCBub3Qgd29yayBvbiBzeXN0ZW1zIGNvbXBseWluZyB3aXRoIEZJUFMtMTQwLTIuCgogICAgICAgIE1vc3QgdXNlcyBvZiB0aGlzIGZ1bmN0aW9uIGNhbiB1c2UgdGhlIG1vZHVsZS5zaGExIGZ1bmN0aW9uIGluc3RlYWQuCiAgICAgICAgJycnCiAgICAgICAgaWYgJ21kNScgbm90IGluIEFWQUlMQUJMRV9IQVNIX0FMR09SSVRITVM6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ01ENSBub3QgYXZhaWxhYmxlLiAgUG9zc2libHkgcnVubmluZyBpbiBGSVBTIG1vZGUnKQogICAgICAgIHJldHVybiBzZWxmLmRpZ2VzdF9mcm9tX2ZpbGUoZmlsZW5hbWUsICdtZDUnKQoKICAgIGRlZiBzaGExKHNlbGYsIGZpbGVuYW1lKToKICAgICAgICAnJycgUmV0dXJuIFNIQTEgaGV4IGRpZ2VzdCBvZiBsb2NhbCBmaWxlIHVzaW5nIGRpZ2VzdF9mcm9tX2ZpbGUoKS4gJycnCiAgICAgICAgcmV0dXJuIHNlbGYuZGlnZXN0X2Zyb21fZmlsZShmaWxlbmFtZSwgJ3NoYTEnKQoKICAgIGRlZiBzaGEyNTYoc2VsZiwgZmlsZW5hbWUpOgogICAgICAgICcnJyBSZXR1cm4gU0hBLTI1NiBoZXggZGlnZXN0IG9mIGxvY2FsIGZpbGUgdXNpbmcgZGlnZXN0X2Zyb21fZmlsZSgpLiAnJycKICAgICAgICByZXR1cm4gc2VsZi5kaWdlc3RfZnJvbV9maWxlKGZpbGVuYW1lLCAnc2hhMjU2JykKCiAgICBkZWYgYmFja3VwX2xvY2FsKHNlbGYsIGZuKToKICAgICAgICAnJydtYWtlIGEgZGF0ZS1tYXJrZWQgYmFja3VwIG9mIHRoZSBzcGVjaWZpZWQgZmlsZSwgcmV0dXJuIFRydWUgb3IgRmFsc2Ugb24gc3VjY2VzcyBvciBmYWlsdXJlJycnCgogICAgICAgIGJhY2t1cGRlc3QgPSAnJwogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKGZuKToKICAgICAgICAgICAgIyBiYWNrdXBzIG5hbWVkIGJhc2VuYW1lLlBJRC5ZWVlZLU1NLUREQEhIOk1NOlNTfgogICAgICAgICAgICBleHQgPSB0aW1lLnN0cmZ0aW1lKCIlWS0lbS0lZEAlSDolTTolU34iLCB0aW1lLmxvY2FsdGltZSh0aW1lLnRpbWUoKSkpCiAgICAgICAgICAgIGJhY2t1cGRlc3QgPSAnJXMuJXMuJXMnICUgKGZuLCBvcy5nZXRwaWQoKSwgZXh0KQoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2h1dGlsLmNvcHkyKGZuLCBiYWNrdXBkZXN0KQogICAgICAgICAgICBleGNlcHQgKHNodXRpbC5FcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9J0NvdWxkIG5vdCBtYWtlIGJhY2t1cCBvZiAlcyB0byAlczogJXMnICUgKGZuLCBiYWNrdXBkZXN0LCBlKSkKCiAgICAgICAgcmV0dXJuIGJhY2t1cGRlc3QKCiAgICBkZWYgY2xlYW51cChzZWxmLCB0bXBmaWxlKToKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyh0bXBmaWxlKToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgb3MudW5saW5rKHRtcGZpbGUpCiAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgc3lzLnN0ZGVyci53cml0ZSgiY291bGQgbm90IGNsZWFudXAgJXM6ICVzIiAlICh0bXBmaWxlLCBlKSkKCiAgICBkZWYgYXRvbWljX21vdmUoc2VsZiwgc3JjLCBkZXN0LCB1bnNhZmVfd3JpdGVzPUZhbHNlKToKICAgICAgICAnJydhdG9taWNhbGx5IG1vdmUgc3JjIHRvIGRlc3QsIGNvcHlpbmcgYXR0cmlidXRlcyBmcm9tIGRlc3QsIHJldHVybnMgdHJ1ZSBvbiBzdWNjZXNzCiAgICAgICAgaXQgdXNlcyBvcy5yZW5hbWUgdG8gZW5zdXJlIHRoaXMgYXMgaXQgaXMgYW4gYXRvbWljIG9wZXJhdGlvbiwgcmVzdCBvZiB0aGUgZnVuY3Rpb24gaXMKICAgICAgICB0byB3b3JrIGFyb3VuZCBsaW1pdGF0aW9ucywgY29ybmVyIGNhc2VzIGFuZCBlbnN1cmUgc2VsaW51eCBjb250ZXh0IGlzIHNhdmVkIGlmIHBvc3NpYmxlJycnCiAgICAgICAgY29udGV4dCA9IE5vbmUKICAgICAgICBkZXN0X3N0YXQgPSBOb25lCiAgICAgICAgYl9zcmMgPSB0b19ieXRlcyhzcmMsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgYl9kZXN0ID0gdG9fYnl0ZXMoZGVzdCwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhiX2Rlc3QpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBkZXN0X3N0YXQgPSBvcy5zdGF0KGJfZGVzdCkKCiAgICAgICAgICAgICAgICAjIGNvcHkgbW9kZSBhbmQgb3duZXJzaGlwCiAgICAgICAgICAgICAgICBvcy5jaG1vZChiX3NyYywgZGVzdF9zdGF0LnN0X21vZGUgJiBQRVJNX0JJVFMpCiAgICAgICAgICAgICAgICBvcy5jaG93bihiX3NyYywgZGVzdF9zdGF0LnN0X3VpZCwgZGVzdF9zdGF0LnN0X2dpZCkKCiAgICAgICAgICAgICAgICAjIHRyeSB0byBjb3B5IGZsYWdzIGlmIHBvc3NpYmxlCiAgICAgICAgICAgICAgICBpZiBoYXNhdHRyKG9zLCAnY2hmbGFncycpIGFuZCBoYXNhdHRyKGRlc3Rfc3RhdCwgJ3N0X2ZsYWdzJyk6CiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICBvcy5jaGZsYWdzKGJfc3JjLCBkZXN0X3N0YXQuc3RfZmxhZ3MpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGVyciBpbiAnRU9QTk9UU1VQUCcsICdFTk9UU1VQJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGhhc2F0dHIoZXJybm8sIGVycikgYW5kIGUuZXJybm8gPT0gZ2V0YXR0cihlcnJubywgZXJyKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UKICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBpZiBlLmVycm5vICE9IGVycm5vLkVQRVJNOgogICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgIGlmIHNlbGYuc2VsaW51eF9lbmFibGVkKCk6CiAgICAgICAgICAgICAgICBjb250ZXh0ID0gc2VsZi5zZWxpbnV4X2NvbnRleHQoZGVzdCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBzZWxmLnNlbGludXhfZW5hYmxlZCgpOgogICAgICAgICAgICAgICAgY29udGV4dCA9IHNlbGYuc2VsaW51eF9kZWZhdWx0X2NvbnRleHQoZGVzdCkKCiAgICAgICAgY3JlYXRpbmcgPSBub3Qgb3MucGF0aC5leGlzdHMoYl9kZXN0KQoKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgT3B0aW1pc3RpY2FsbHkgdHJ5IGEgcmVuYW1lLCBzb2x2ZXMgc29tZSBjb3JuZXIgY2FzZXMgYW5kIGNhbiBhdm9pZCB1c2VsZXNzIHdvcmssIHRocm93cyBleGNlcHRpb24gaWYgbm90IGF0b21pYy4KICAgICAgICAgICAgb3MucmVuYW1lKGJfc3JjLCBiX2Rlc3QpCiAgICAgICAgZXhjZXB0IChJT0Vycm9yLCBPU0Vycm9yKToKICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICBpZiBlLmVycm5vIG5vdCBpbiBbZXJybm8uRVBFUk0sIGVycm5vLkVYREVWLCBlcnJuby5FQUNDRVMsIGVycm5vLkVUWFRCU1ksIGVycm5vLkVCVVNZXToKICAgICAgICAgICAgICAgICMgb25seSB0cnkgd29ya2Fyb3VuZHMgZm9yIGVycm5vIDE4IChjcm9zcyBkZXZpY2UpLCAxIChub3QgcGVybWl0dGVkKSwgIDEzIChwZXJtaXNzaW9uIGRlbmllZCkKICAgICAgICAgICAgICAgICMgYW5kIDI2ICh0ZXh0IGZpbGUgYnVzeSkgd2hpY2ggaGFwcGVucyBvbiB2YWdyYW50IHN5bmNlZCBmb2xkZXJzIGFuZCBvdGhlciAnZXhvdGljJyBub24gcG9zaXggZmlsZSBzeXN0ZW1zCiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9J0NvdWxkIG5vdCByZXBsYWNlIGZpbGU6ICVzIHRvICVzOiAlcycgJSAoc3JjLCBkZXN0LCBlKSwgZXhjZXB0aW9uPXRyYWNlYmFjay5mb3JtYXRfZXhjKCkpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBiX2Rlc3RfZGlyID0gb3MucGF0aC5kaXJuYW1lKGJfZGVzdCkKICAgICAgICAgICAgICAgICMgVXNlIGJ5dGVzIGhlcmUuICBJbiB0aGUgc2hpcHBhYmxlIENJLCB0aGlzIGZhaWxzIHdpdGgKICAgICAgICAgICAgICAgICMgYSBVbmljb2RlRXJyb3Igd2l0aCBzdXJyb2dhdGVlc2NhcGUnZCBzdHJpbmdzIGZvciBhbiB1bmtub3duCiAgICAgICAgICAgICAgICAjIHJlYXNvbiAoZG9lc24ndCBoYXBwZW4gaW4gYSBsb2NhbCBVYnVudHUxNi4wNCBWTSkKICAgICAgICAgICAgICAgIG5hdGl2ZV9kZXN0X2RpciA9IGJfZGVzdF9kaXIKICAgICAgICAgICAgICAgIG5hdGl2ZV9zdWZmaXggPSBvcy5wYXRoLmJhc2VuYW1lKGJfZGVzdCkKICAgICAgICAgICAgICAgIG5hdGl2ZV9wcmVmaXggPSBiKCcuYW5zaWJsZV90bXAnKQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHRtcF9kZXN0X2ZkLCB0bXBfZGVzdF9uYW1lID0gdGVtcGZpbGUubWtzdGVtcCggcHJlZml4PW5hdGl2ZV9wcmVmaXgsIGRpcj1uYXRpdmVfZGVzdF9kaXIsIHN1ZmZpeD1uYXRpdmVfc3VmZml4KQogICAgICAgICAgICAgICAgZXhjZXB0IChPU0Vycm9yLCBJT0Vycm9yKToKICAgICAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdUaGUgZGVzdGluYXRpb24gZGlyZWN0b3J5ICglcykgaXMgbm90IHdyaXRhYmxlIGJ5IHRoZSBjdXJyZW50IHVzZXIuIEVycm9yIHdhczogJXMnICUgKG9zLnBhdGguZGlybmFtZShkZXN0KSwgZSkpCiAgICAgICAgICAgICAgICBleGNlcHQgVHlwZUVycm9yOgogICAgICAgICAgICAgICAgICAgICMgV2UgZXhwZWN0IHRoYXQgdGhpcyBpcyBoYXBwZW5pbmcgYmVjYXVzZSBweXRob24zLjQueCBhbmQKICAgICAgICAgICAgICAgICAgICAjIGJlbG93IGNhbid0IGhhbmRsZSBieXRlIHN0cmluZ3MgaW4gbWtzdGVtcCgpLiAgVHJhY2ViYWNrCiAgICAgICAgICAgICAgICAgICAgIyB3b3VsZCBlbmQgaW4gc29tZXRoaW5nIGxpa2U6CiAgICAgICAgICAgICAgICAgICAgIyAgICAgZmlsZSA9IF9vcy5wYXRoLmpvaW4oZGlyLCBwcmUgKyBuYW1lICsgc3VmKQogICAgICAgICAgICAgICAgICAgICMgVHlwZUVycm9yOiBjYW4ndCBjb25jYXQgYnl0ZXMgdG8gc3RyCiAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdGYWlsZWQgY3JlYXRpbmcgdGVtcCBmaWxlIGZvciBhdG9taWMgbW92ZS4gIFRoaXMgdXN1YWxseSBoYXBwZW5zIHdoZW4gdXNpbmcgUHl0aG9uMyBsZXNzIHRoYW4gUHl0aG9uMy41LiAnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdQbGVhc2UgdXNlIFB5dGhvbjIueCBvciBQeXRob24zLjUgb3IgZ3JlYXRlci4nLCBleGNlcHRpb249dHJhY2ViYWNrLmZvcm1hdF9leGMoKSkKCiAgICAgICAgICAgICAgICBiX3RtcF9kZXN0X25hbWUgPSB0b19ieXRlcyh0bXBfZGVzdF9uYW1lLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQoKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICMgY2xvc2UgdG1wIGZpbGUgaGFuZGxlIGJlZm9yZSBmaWxlIG9wZXJhdGlvbnMgdG8gcHJldmVudCB0ZXh0IGZpbGUgYnVzeSBlcnJvcnMgb24gdmJveGZzIHN5bmNlZCBmb2xkZXJzICh3aW5kb3dzIGhvc3QpCiAgICAgICAgICAgICAgICAgICAgICAgIG9zLmNsb3NlKHRtcF9kZXN0X2ZkKQogICAgICAgICAgICAgICAgICAgICAgICAjIGxlYXZlcyB0bXAgZmlsZSBiZWhpbmQgd2hlbiBzdWRvIGFuZCBub3Qgcm9vdAogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaHV0aWwubW92ZShiX3NyYywgYl90bXBfZGVzdF9uYW1lKQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgY2xlYW51cCB3aWxsIGhhcHBlbiBieSAncm0nIG9mIHRlbXBkaXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgY29weTIgd2lsbCBwcmVzZXJ2ZSBzb21lIG1ldGFkYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaHV0aWwuY29weTIoYl9zcmMsIGJfdG1wX2Rlc3RfbmFtZSkKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNlbGYuc2VsaW51eF9lbmFibGVkKCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldF9jb250ZXh0X2lmX2RpZmZlcmVudCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiX3RtcF9kZXN0X25hbWUsIGNvbnRleHQsIEZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBfc3RhdCA9IG9zLnN0YXQoYl90bXBfZGVzdF9uYW1lKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgZGVzdF9zdGF0IGFuZCAodG1wX3N0YXQuc3RfdWlkICE9IGRlc3Rfc3RhdC5zdF91aWQgb3IgdG1wX3N0YXQuc3RfZ2lkICE9IGRlc3Rfc3RhdC5zdF9naWQpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zLmNob3duKGJfdG1wX2Rlc3RfbmFtZSwgZGVzdF9zdGF0LnN0X3VpZCwgZGVzdF9zdGF0LnN0X2dpZCkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBlLmVycm5vICE9IGVycm5vLkVQRVJNOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zLnJlbmFtZShiX3RtcF9kZXN0X25hbWUsIGJfZGVzdCkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IChzaHV0aWwuRXJyb3IsIE9TRXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdW5zYWZlX3dyaXRlcyBhbmQgZS5lcnJubyA9PSBlcnJuby5FQlVTWToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl91bnNhZmVfd3JpdGVzKGJfdG1wX2Rlc3RfbmFtZSwgYl9kZXN0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9J1VuYWJsZSB0byByZW5hbWUgZmlsZTogJXMgdG8gJXM6ICVzJyAlIChzcmMsIGRlc3QsIGUpLCBleGNlcHRpb249dHJhY2ViYWNrLmZvcm1hdF9leGMoKSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQgKHNodXRpbC5FcnJvciwgT1NFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdGYWlsZWQgdG8gcmVwbGFjZSBmaWxlOiAlcyB0byAlczogJXMnICUgKHNyYywgZGVzdCwgZSksIGV4Y2VwdGlvbj10cmFjZWJhY2suZm9ybWF0X2V4YygpKQogICAgICAgICAgICAgICAgZmluYWxseToKICAgICAgICAgICAgICAgICAgICBzZWxmLmNsZWFudXAoYl90bXBfZGVzdF9uYW1lKQoKICAgICAgICBpZiBjcmVhdGluZzoKICAgICAgICAgICAgIyBtYWtlIHN1cmUgdGhlIGZpbGUgaGFzIHRoZSBjb3JyZWN0IHBlcm1pc3Npb25zCiAgICAgICAgICAgICMgYmFzZWQgb24gdGhlIGN1cnJlbnQgdmFsdWUgb2YgdW1hc2sKICAgICAgICAgICAgdW1hc2sgPSBvcy51bWFzaygwKQogICAgICAgICAgICBvcy51bWFzayh1bWFzaykKICAgICAgICAgICAgb3MuY2htb2QoYl9kZXN0LCBERUZBVUxUX1BFUk0gJiB+dW1hc2spCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG9zLmNob3duKGJfZGVzdCwgb3MuZ2V0ZXVpZCgpLCBvcy5nZXRlZ2lkKCkpCiAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgIyBXZSdyZSBva2F5IHdpdGggdHJ5aW5nIG91ciBiZXN0IGhlcmUuICBJZiB0aGUgdXNlciBpcyBub3QKICAgICAgICAgICAgICAgICMgcm9vdCAob3Igb2xkIFVuaWNlcykgdGhleSB3b24ndCBiZSBhYmxlIHRvIGNob3duLgogICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICBpZiBzZWxmLnNlbGludXhfZW5hYmxlZCgpOgogICAgICAgICAgICAjIHJlbmFtZSBtaWdodCBub3QgcHJlc2VydmUgY29udGV4dAogICAgICAgICAgICBzZWxmLnNldF9jb250ZXh0X2lmX2RpZmZlcmVudChkZXN0LCBjb250ZXh0LCBGYWxzZSkKCiAgICBkZWYgX3Vuc2FmZV93cml0ZXMoc2VsZiwgc3JjLCBkZXN0KToKICAgICAgICAjIHNhZGx5IHRoZXJlIGFyZSBzb21lIHNpdHVhdGlvbnMgd2hlcmUgd2UgY2Fubm90IGVuc3VyZSBhdG9taWNpdHksIGJ1dCBvbmx5IGlmCiAgICAgICAgIyB0aGUgdXNlciBpbnNpc3RzIGFuZCB3ZSBnZXQgdGhlIGFwcHJvcHJpYXRlIGVycm9yIHdlIHVwZGF0ZSB0aGUgZmlsZSB1bnNhZmVseQogICAgICAgIHRyeToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgb3V0X2Rlc3QgPSBvcGVuKGRlc3QsICd3YicpCiAgICAgICAgICAgICAgICBpbl9zcmMgPSBvcGVuKHNyYywgJ3JiJykKICAgICAgICAgICAgICAgIHNodXRpbC5jb3B5ZmlsZW9iaihpbl9zcmMsIG91dF9kZXN0KQogICAgICAgICAgICBmaW5hbGx5OiAgIyBhc3N1cmluZyBjbG9zZWQgZmlsZXMgaW4gMi40IGNvbXBhdGlibGUgd2F5CiAgICAgICAgICAgICAgICBpZiBvdXRfZGVzdDoKICAgICAgICAgICAgICAgICAgICBvdXRfZGVzdC5jbG9zZSgpCiAgICAgICAgICAgICAgICBpZiBpbl9zcmM6CiAgICAgICAgICAgICAgICAgICAgaW5fc3JjLmNsb3NlKCkKICAgICAgICBleGNlcHQgKHNodXRpbC5FcnJvciwgT1NFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdDb3VsZCBub3Qgd3JpdGUgZGF0YSB0byBmaWxlICglcykgZnJvbSAoJXMpOiAlcycgJSAoZGVzdCwgc3JjLCBlKSwgZXhjZXB0aW9uPXRyYWNlYmFjay5mb3JtYXRfZXhjKCkpCgoKICAgIGRlZiBfcmVhZF9mcm9tX3BpcGVzKHNlbGYsIHJwaXBlcywgcmZkcywgZmlsZV9kZXNjcmlwdG9yKToKICAgICAgICBkYXRhID0gYignJykKICAgICAgICBpZiBmaWxlX2Rlc2NyaXB0b3IgaW4gcmZkczoKICAgICAgICAgICAgZGF0YSA9IG9zLnJlYWQoZmlsZV9kZXNjcmlwdG9yLmZpbGVubygpLCA5MDAwKQogICAgICAgICAgICBpZiBkYXRhID09IGIoJycpOgogICAgICAgICAgICAgICAgcnBpcGVzLnJlbW92ZShmaWxlX2Rlc2NyaXB0b3IpCgogICAgICAgIHJldHVybiBkYXRhCgogICAgZGVmIHJ1bl9jb21tYW5kKHNlbGYsIGFyZ3MsIGNoZWNrX3JjPUZhbHNlLCBjbG9zZV9mZHM9VHJ1ZSwgZXhlY3V0YWJsZT1Ob25lLCBkYXRhPU5vbmUsIGJpbmFyeV9kYXRhPUZhbHNlLCBwYXRoX3ByZWZpeD1Ob25lLCBjd2Q9Tm9uZSwKICAgICAgICAgICAgICAgICAgICB1c2VfdW5zYWZlX3NoZWxsPUZhbHNlLCBwcm9tcHRfcmVnZXg9Tm9uZSwgZW52aXJvbl91cGRhdGU9Tm9uZSwgdW1hc2s9Tm9uZSwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0Jyk6CiAgICAgICAgJycnCiAgICAgICAgRXhlY3V0ZSBhIGNvbW1hbmQsIHJldHVybnMgcmMsIHN0ZG91dCwgYW5kIHN0ZGVyci4KCiAgICAgICAgOmFyZyBhcmdzOiBpcyB0aGUgY29tbWFuZCB0byBydW4KICAgICAgICAgICAgKiBJZiBhcmdzIGlzIGEgbGlzdCwgdGhlIGNvbW1hbmQgd2lsbCBiZSBydW4gd2l0aCBzaGVsbD1GYWxzZS4KICAgICAgICAgICAgKiBJZiBhcmdzIGlzIGEgc3RyaW5nIGFuZCB1c2VfdW5zYWZlX3NoZWxsPUZhbHNlIGl0IHdpbGwgc3BsaXQgYXJncyB0byBhIGxpc3QgYW5kIHJ1biB3aXRoIHNoZWxsPUZhbHNlCiAgICAgICAgICAgICogSWYgYXJncyBpcyBhIHN0cmluZyBhbmQgdXNlX3Vuc2FmZV9zaGVsbD1UcnVlIGl0IHJ1bnMgd2l0aCBzaGVsbD1UcnVlLgogICAgICAgIDprdyBjaGVja19yYzogV2hldGhlciB0byBjYWxsIGZhaWxfanNvbiBpbiBjYXNlIG9mIG5vbiB6ZXJvIFJDLgogICAgICAgICAgICBEZWZhdWx0IEZhbHNlCiAgICAgICAgOmt3IGNsb3NlX2ZkczogU2VlIGRvY3VtZW50YXRpb24gZm9yIHN1YnByb2Nlc3MuUG9wZW4oKS4gRGVmYXVsdCBUcnVlCiAgICAgICAgOmt3IGV4ZWN1dGFibGU6IFNlZSBkb2N1bWVudGF0aW9uIGZvciBzdWJwcm9jZXNzLlBvcGVuKCkuIERlZmF1bHQgTm9uZQogICAgICAgIDprdyBkYXRhOiBJZiBnaXZlbiwgaW5mb3JtYXRpb24gdG8gd3JpdGUgdG8gdGhlIHN0ZGluIG9mIHRoZSBjb21tYW5kCiAgICAgICAgOmt3IGJpbmFyeV9kYXRhOiBJZiBGYWxzZSwgYXBwZW5kIGEgbmV3bGluZSB0byB0aGUgZGF0YS4gIERlZmF1bHQgRmFsc2UKICAgICAgICA6a3cgcGF0aF9wcmVmaXg6IElmIGdpdmVuLCBhZGRpdGlvbmFsIHBhdGggdG8gZmluZCB0aGUgY29tbWFuZCBpbi4KICAgICAgICAgICAgVGhpcyBhZGRzIHRvIHRoZSBQQVRIIGVudmlyb25tZW50IHZhaXJhYmxlIHNvIGhlbHBlciBjb21tYW5kcyBpbgogICAgICAgICAgICB0aGUgc2FtZSBkaXJlY3RvcnkgY2FuIGFsc28gYmUgZm91bmQKICAgICAgICA6a3cgY3dkOiBJZiBnaXZlbiwgd29ya2luZyBkaXJlY3RvcnkgdG8gcnVuIHRoZSBjb21tYW5kIGluc2lkZQogICAgICAgIDprdyB1c2VfdW5zYWZlX3NoZWxsOiBTZWUgYGFyZ3NgIHBhcmFtZXRlci4gIERlZmF1bHQgRmFsc2UKICAgICAgICA6a3cgcHJvbXB0X3JlZ2V4OiBSZWdleCBzdHJpbmcgKG5vdCBhIGNvbXBpbGVkIHJlZ2V4KSB3aGljaCBjYW4gYmUKICAgICAgICAgICAgdXNlZCB0byBkZXRlY3QgcHJvbXB0cyBpbiB0aGUgc3Rkb3V0IHdoaWNoIHdvdWxkIG90aGVyd2lzZSBjYXVzZQogICAgICAgICAgICB0aGUgZXhlY3V0aW9uIHRvIGhhbmcgKGVzcGVjaWFsbHkgaWYgbm8gaW5wdXQgZGF0YSBpcyBzcGVjaWZpZWQpCiAgICAgICAgOmt3IGVudmlyb25fdXBkYXRlOiBkaWN0aW9uYXJ5IHRvICp1cGRhdGUqIG9zLmVudmlyb24gd2l0aAogICAgICAgIDprdyB1bWFzazogVW1hc2sgdG8gYmUgdXNlZCB3aGVuIHJ1bm5pbmcgdGhlIGNvbW1hbmQuIERlZmF1bHQgTm9uZQogICAgICAgIDprdyBlbmNvZGluZzogU2luY2Ugd2UgcmV0dXJuIG5hdGl2ZSBzdHJpbmdzLCBvbiBweXRob24zIHdlIG5lZWQgdG8KICAgICAgICAgICAga25vdyB0aGUgZW5jb2RpbmcgdG8gdXNlIHRvIHRyYW5zZm9ybSBmcm9tIGJ5dGVzIHRvIHRleHQuICBJZiB5b3UKICAgICAgICAgICAgd2FudCB0byBhbHdheXMgZ2V0IGJ5dGVzIGJhY2ssIHVzZSBlbmNvZGluZz1Ob25lLiAgVGhlIGRlZmF1bHQgaXMKICAgICAgICAgICAgInV0Zi04Ii4gIFRoaXMgZG9lcyBub3QgYWZmZWN0IHRyYW5zZm9ybWF0aW9uIG9mIHN0cmluZ3MgZ2l2ZW4gYXMKICAgICAgICAgICAgYXJncy4KICAgICAgICA6a3cgZXJyb3JzOiBTaW5jZSB3ZSByZXR1cm4gbmF0aXZlIHN0cmluZ3MsIG9uIHB5dGhvbjMgd2UgbmVlZCB0bwogICAgICAgICAgICB0cmFuc2Zvcm0gc3Rkb3V0IGFuZCBzdGRlcnIgZnJvbSBieXRlcyB0byB0ZXh0LiAgSWYgdGhlIGJ5dGVzIGFyZQogICAgICAgICAgICB1bmRlY29kYWJsZSBpbiB0aGUgYGBlbmNvZGluZ2BgIHNwZWNpZmllZCwgdGhlbiB1c2UgdGhpcyBlcnJvcgogICAgICAgICAgICBoYW5kbGVyIHRvIGRlYWwgd2l0aCB0aGVtLiAgVGhlIGRlZmF1bHQgaXMgYGBzdXJyb2dhdGVfb3Jfc3RyaWN0YGAKICAgICAgICAgICAgd2hpY2ggbWVhbnMgdGhhdCB0aGUgYnl0ZXMgd2lsbCBiZSBkZWNvZGVkIHVzaW5nIHRoZQogICAgICAgICAgICBzdXJyb2dhdGVlc2NhcGUgZXJyb3IgaGFuZGxlciBpZiBhdmFpbGFibGUgKGF2YWlsYWJsZSBvbiBhbGwKICAgICAgICAgICAgcHl0aG9uMyB2ZXJzaW9ucyB3ZSBzdXBwb3J0KSBvdGhlcndpc2UgYSBVbmljb2RlRXJyb3IgdHJhY2ViYWNrCiAgICAgICAgICAgIHdpbGwgYmUgcmFpc2VkLiAgVGhpcyBkb2VzIG5vdCBhZmZlY3QgdHJhbnNmb3JtYXRpb25zIG9mIHN0cmluZ3MKICAgICAgICAgICAgZ2l2ZW4gYXMgYXJncy4KICAgICAgICA6cmV0dXJuczogQSAzLXR1cGxlIG9mIHJldHVybiBjb2RlIChpbnRlZ2VyKSwgc3Rkb3V0IChuYXRpdmUgc3RyaW5nKSwKICAgICAgICAgICAgYW5kIHN0ZGVyciAobmF0aXZlIHN0cmluZykuICBPbiBweXRob24yLCBzdGRvdXQgYW5kIHN0ZGVyciBhcmUgYm90aAogICAgICAgICAgICBieXRlIHN0cmluZ3MuICBPbiBweXRob24zLCBzdGRvdXQgYW5kIHN0ZGVyciBhcmUgdGV4dCBzdHJpbmdzIGNvbnZlcnRlZAogICAgICAgICAgICBhY2NvcmRpbmcgdG8gdGhlIGVuY29kaW5nIGFuZCBlcnJvcnMgcGFyYW1ldGVycy4gIElmIHlvdSB3YW50IGJ5dGUKICAgICAgICAgICAgc3RyaW5ncyBvbiBweXRob24zLCB1c2UgZW5jb2Rpbmc9Tm9uZSB0byB0dXJuIGRlY29kaW5nIHRvIHRleHQgb2ZmLgogICAgICAgICcnJwoKICAgICAgICBpZiBpc2luc3RhbmNlKGFyZ3MsIGxpc3QpOgogICAgICAgICAgICBpZiB1c2VfdW5zYWZlX3NoZWxsOgogICAgICAgICAgICAgICAgYXJncyA9ICIgIi5qb2luKFtzaGxleF9xdW90ZSh4KSBmb3IgeCBpbiBhcmdzXSkKICAgICAgICAgICAgICAgIHNoZWxsID0gVHJ1ZQogICAgICAgIGVsaWYgaXNpbnN0YW5jZShhcmdzLCAoYmluYXJ5X3R5cGUsIHRleHRfdHlwZSkpIGFuZCB1c2VfdW5zYWZlX3NoZWxsOgogICAgICAgICAgICBzaGVsbCA9IFRydWUKICAgICAgICBlbGlmIGlzaW5zdGFuY2UoYXJncywgKGJpbmFyeV90eXBlLCB0ZXh0X3R5cGUpKToKICAgICAgICAgICAgaWYgbm90IHVzZV91bnNhZmVfc2hlbGw6CiAgICAgICAgICAgICAgICAjIE9uIHB5dGhvbjIuNiBhbmQgYmVsb3csIHNobGV4IGhhcyBwcm9ibGVtcyB3aXRoIHRleHQgdHlwZQogICAgICAgICAgICAgICAgIyBPbiBweXRob24zLCBzaGxleCBuZWVkcyBhIHRleHQgdHlwZS4KICAgICAgICAgICAgICAgIGlmIFBZMjoKICAgICAgICAgICAgICAgICAgICBhcmdzID0gdG9fYnl0ZXMoYXJncywgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKICAgICAgICAgICAgICAgIGVsaWYgUFkzOgogICAgICAgICAgICAgICAgICAgIGFyZ3MgPSB0b190ZXh0KGFyZ3MsIGVycm9ycz0nc3Vycm9nYXRlZXNjYXBlJykKICAgICAgICAgICAgICAgIGFyZ3MgPSBzaGxleC5zcGxpdChhcmdzKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG1zZyA9ICJBcmd1bWVudCAnYXJncycgdG8gcnVuX2NvbW1hbmQgbXVzdCBiZSBsaXN0IG9yIHN0cmluZyIKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocmM9MjU3LCBjbWQ9YXJncywgbXNnPW1zZykKCiAgICAgICAgc2hlbGwgPSBGYWxzZQogICAgICAgIGlmIHVzZV91bnNhZmVfc2hlbGw6CiAgICAgICAgICAgIGlmIGV4ZWN1dGFibGUgaXMgTm9uZToKICAgICAgICAgICAgICAgIGV4ZWN1dGFibGUgPSBvcy5lbnZpcm9uLmdldCgnU0hFTEwnKQogICAgICAgICAgICBpZiBleGVjdXRhYmxlOgogICAgICAgICAgICAgICAgYXJncyA9IFtleGVjdXRhYmxlLCAnLWMnLCBhcmdzXQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2hlbGwgPSBUcnVlCgogICAgICAgIHByb21wdF9yZSA9IE5vbmUKICAgICAgICBpZiBwcm9tcHRfcmVnZXg6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocHJvbXB0X3JlZ2V4LCB0ZXh0X3R5cGUpOgogICAgICAgICAgICAgICAgaWYgUFkzOgogICAgICAgICAgICAgICAgICAgIHByb21wdF9yZWdleCA9IHRvX2J5dGVzKHByb21wdF9yZWdleCwgZXJyb3JzPSdzdXJyb2dhdGVlc2NhcGUnKQogICAgICAgICAgICAgICAgZWxpZiBQWTI6CiAgICAgICAgICAgICAgICAgICAgcHJvbXB0X3JlZ2V4ID0gdG9fYnl0ZXMocHJvbXB0X3JlZ2V4LCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBwcm9tcHRfcmUgPSByZS5jb21waWxlKHByb21wdF9yZWdleCwgcmUuTVVMVElMSU5FKQogICAgICAgICAgICBleGNlcHQgcmUuZXJyb3I6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9ImludmFsaWQgcHJvbXB0IHJlZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiB0byBydW5fY29tbWFuZCIpCgogICAgICAgICMgZXhwYW5kIHRoaW5ncyBsaWtlICRIT01FIGFuZCB+CiAgICAgICAgaWYgbm90IHNoZWxsOgogICAgICAgICAgICBhcmdzID0gWyBvcy5wYXRoLmV4cGFuZHVzZXIob3MucGF0aC5leHBhbmR2YXJzKHgpKSBmb3IgeCBpbiBhcmdzIGlmIHggaXMgbm90IE5vbmUgXQoKICAgICAgICByYyA9IDAKICAgICAgICBtc2cgPSBOb25lCiAgICAgICAgc3RfaW4gPSBOb25lCgogICAgICAgICMgTWFuaXB1bGF0ZSB0aGUgZW52aXJvbiB3ZSdsbCBzZW5kIHRvIHRoZSBuZXcgcHJvY2VzcwogICAgICAgIG9sZF9lbnZfdmFscyA9IHt9CiAgICAgICAgIyBXZSBjYW4gc2V0IHRoaXMgZnJvbSBib3RoIGFuIGF0dHJpYnV0ZSBhbmQgcGVyIGNhbGwKICAgICAgICBmb3Iga2V5LCB2YWwgaW4gc2VsZi5ydW5fY29tbWFuZF9lbnZpcm9uX3VwZGF0ZS5pdGVtcygpOgogICAgICAgICAgICBvbGRfZW52X3ZhbHNba2V5XSA9IG9zLmVudmlyb24uZ2V0KGtleSwgTm9uZSkKICAgICAgICAgICAgb3MuZW52aXJvbltrZXldID0gdmFsCiAgICAgICAgaWYgZW52aXJvbl91cGRhdGU6CiAgICAgICAgICAgIGZvciBrZXksIHZhbCBpbiBlbnZpcm9uX3VwZGF0ZS5pdGVtcygpOgogICAgICAgICAgICAgICAgb2xkX2Vudl92YWxzW2tleV0gPSBvcy5lbnZpcm9uLmdldChrZXksIE5vbmUpCiAgICAgICAgICAgICAgICBvcy5lbnZpcm9uW2tleV0gPSB2YWwKICAgICAgICBpZiBwYXRoX3ByZWZpeDoKICAgICAgICAgICAgb2xkX2Vudl92YWxzWydQQVRIJ10gPSBvcy5lbnZpcm9uWydQQVRIJ10KICAgICAgICAgICAgb3MuZW52aXJvblsnUEFUSCddID0gIiVzOiVzIiAlIChwYXRoX3ByZWZpeCwgb3MuZW52aXJvblsnUEFUSCddKQoKICAgICAgICAjIElmIHVzaW5nIHRlc3QtbW9kdWxlIGFuZCBleHBsb2RlLCB0aGUgcmVtb3RlIGxpYiBwYXRoIHdpbGwgcmVzZW1ibGUgLi4uCiAgICAgICAgIyAgIC90bXAvdGVzdF9tb2R1bGVfc2NyYXRjaC9kZWJ1Z19kaXIvYW5zaWJsZS9tb2R1bGVfdXRpbHMvYmFzaWMucHkKICAgICAgICAjIElmIHVzaW5nIGFuc2libGUgb3IgYW5zaWJsZS1wbGF5Ym9vayB3aXRoIGEgcmVtb3RlIHN5c3RlbSAuLi4KICAgICAgICAjICAgL3RtcC9hbnNpYmxlX3Ztd2VMUS9hbnNpYmxlX21vZGxpYi56aXAvYW5zaWJsZS9tb2R1bGVfdXRpbHMvYmFzaWMucHkKCiAgICAgICAgIyBDbGVhbiBvdXQgcHl0aG9uIHBhdGhzIHNldCBieSBhbnNpYmFsbHoKICAgICAgICBpZiAnUFlUSE9OUEFUSCcgaW4gb3MuZW52aXJvbjoKICAgICAgICAgICAgcHlwYXRocyA9IG9zLmVudmlyb25bJ1BZVEhPTlBBVEgnXS5zcGxpdCgnOicpCiAgICAgICAgICAgIHB5cGF0aHMgPSBbeCBmb3IgeCBpbiBweXBhdGhzIFwKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IHguZW5kc3dpdGgoJy9hbnNpYmxlX21vZGxpYi56aXAnKSBcCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBub3QgeC5lbmRzd2l0aCgnL2RlYnVnX2RpcicpXQogICAgICAgICAgICBvcy5lbnZpcm9uWydQWVRIT05QQVRIJ10gPSAnOicuam9pbihweXBhdGhzKQogICAgICAgICAgICBpZiBub3Qgb3MuZW52aXJvblsnUFlUSE9OUEFUSCddOgogICAgICAgICAgICAgICAgZGVsIG9zLmVudmlyb25bJ1BZVEhPTlBBVEgnXQoKICAgICAgICAjIGNyZWF0ZSBhIHByaW50YWJsZSB2ZXJzaW9uIG9mIHRoZSBjb21tYW5kIGZvciB1c2UKICAgICAgICAjIGluIHJlcG9ydGluZyBsYXRlciwgd2hpY2ggc3RyaXBzIG91dCB0aGluZ3MgbGlrZQogICAgICAgICMgcGFzc3dvcmRzIGZyb20gdGhlIGFyZ3MgbGlzdAogICAgICAgIHRvX2NsZWFuX2FyZ3MgPSBhcmdzCiAgICAgICAgaWYgUFkyOgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGFyZ3MsIHRleHRfdHlwZSk6CiAgICAgICAgICAgICAgICB0b19jbGVhbl9hcmdzID0gdG9fYnl0ZXMoYXJncykKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGFyZ3MsIGJpbmFyeV90eXBlKToKICAgICAgICAgICAgICAgIHRvX2NsZWFuX2FyZ3MgPSB0b190ZXh0KGFyZ3MpCiAgICAgICAgaWYgaXNpbnN0YW5jZShhcmdzLCAodGV4dF90eXBlLCBiaW5hcnlfdHlwZSkpOgogICAgICAgICAgICB0b19jbGVhbl9hcmdzID0gc2hsZXguc3BsaXQodG9fY2xlYW5fYXJncykKCiAgICAgICAgY2xlYW5fYXJncyA9IFtdCiAgICAgICAgaXNfcGFzc3dkID0gRmFsc2UKICAgICAgICBmb3IgYXJnIGluIHRvX2NsZWFuX2FyZ3M6CiAgICAgICAgICAgIGlmIGlzX3Bhc3N3ZDoKICAgICAgICAgICAgICAgIGlzX3Bhc3N3ZCA9IEZhbHNlCiAgICAgICAgICAgICAgICBjbGVhbl9hcmdzLmFwcGVuZCgnKioqKioqKionKQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgaWYgUEFTU1dEX0FSR19SRS5tYXRjaChhcmcpOgogICAgICAgICAgICAgICAgc2VwX2lkeCA9IGFyZy5maW5kKCc9JykKICAgICAgICAgICAgICAgIGlmIHNlcF9pZHggPiAtMToKICAgICAgICAgICAgICAgICAgICBjbGVhbl9hcmdzLmFwcGVuZCgnJXM9KioqKioqKionICUgYXJnWzpzZXBfaWR4XSkKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpc19wYXNzd2QgPSBUcnVlCiAgICAgICAgICAgIGFyZyA9IGhldXJpc3RpY19sb2dfc2FuaXRpemUoYXJnLCBzZWxmLm5vX2xvZ192YWx1ZXMpCiAgICAgICAgICAgIGNsZWFuX2FyZ3MuYXBwZW5kKGFyZykKICAgICAgICBjbGVhbl9hcmdzID0gJyAnLmpvaW4oc2hsZXhfcXVvdGUoYXJnKSBmb3IgYXJnIGluIGNsZWFuX2FyZ3MpCgogICAgICAgIGlmIGRhdGE6CiAgICAgICAgICAgIHN0X2luID0gc3VicHJvY2Vzcy5QSVBFCgogICAgICAgIGt3YXJncyA9IGRpY3QoCiAgICAgICAgICAgIGV4ZWN1dGFibGU9ZXhlY3V0YWJsZSwKICAgICAgICAgICAgc2hlbGw9c2hlbGwsCiAgICAgICAgICAgIGNsb3NlX2Zkcz1jbG9zZV9mZHMsCiAgICAgICAgICAgIHN0ZGluPXN0X2luLAogICAgICAgICAgICBzdGRvdXQ9c3VicHJvY2Vzcy5QSVBFLAogICAgICAgICAgICBzdGRlcnI9c3VicHJvY2Vzcy5QSVBFLAogICAgICAgICkKCiAgICAgICAgIyBzdG9yZSB0aGUgcHdkCiAgICAgICAgcHJldl9kaXIgPSBvcy5nZXRjd2QoKQoKICAgICAgICAjIG1ha2Ugc3VyZSB3ZSdyZSBpbiB0aGUgcmlnaHQgd29ya2luZyBkaXJlY3RvcnkKICAgICAgICBpZiBjd2QgYW5kIG9zLnBhdGguaXNkaXIoY3dkKToKICAgICAgICAgICAgY3dkID0gb3MucGF0aC5hYnNwYXRoKG9zLnBhdGguZXhwYW5kdXNlcihjd2QpKQogICAgICAgICAgICBrd2FyZ3NbJ2N3ZCddID0gY3dkCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG9zLmNoZGlyKGN3ZCkKICAgICAgICAgICAgZXhjZXB0IChPU0Vycm9yLCBJT0Vycm9yKToKICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHJjPWUuZXJybm8sIG1zZz0iQ291bGQgbm90IG9wZW4gJXMsICVzIiAlIChjd2QsIHN0cihlKSkpCgogICAgICAgIG9sZF91bWFzayA9IE5vbmUKICAgICAgICBpZiB1bWFzazoKICAgICAgICAgICAgb2xkX3VtYXNrID0gb3MudW1hc2sodW1hc2spCgogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgc2VsZi5fZGVidWc6CiAgICAgICAgICAgICAgICBzZWxmLmxvZygnRXhlY3V0aW5nOiAnICsgY2xlYW5fYXJncykKICAgICAgICAgICAgY21kID0gc3VicHJvY2Vzcy5Qb3BlbihhcmdzLCAqKmt3YXJncykKCiAgICAgICAgICAgICMgdGhlIGNvbW11bmljYXRpb24gbG9naWMgaGVyZSBpcyBlc3NlbnRpYWxseSB0YWtlbiBmcm9tIHRoYXQKICAgICAgICAgICAgIyBvZiB0aGUgX2NvbW11bmljYXRlKCkgZnVuY3Rpb24gaW4gc3NoLnB5CgogICAgICAgICAgICBzdGRvdXQgPSBiKCcnKQogICAgICAgICAgICBzdGRlcnIgPSBiKCcnKQogICAgICAgICAgICBycGlwZXMgPSBbY21kLnN0ZG91dCwgY21kLnN0ZGVycl0KCiAgICAgICAgICAgIGlmIGRhdGE6CiAgICAgICAgICAgICAgICBpZiBub3QgYmluYXJ5X2RhdGE6CiAgICAgICAgICAgICAgICAgICAgZGF0YSArPSAnXG4nCiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKGRhdGEsIHRleHRfdHlwZSk6CiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHRvX2J5dGVzKGRhdGEpCiAgICAgICAgICAgICAgICBjbWQuc3RkaW4ud3JpdGUoZGF0YSkKICAgICAgICAgICAgICAgIGNtZC5zdGRpbi5jbG9zZSgpCgogICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgcmZkcywgd2ZkcywgZWZkcyA9IHNlbGVjdC5zZWxlY3QocnBpcGVzLCBbXSwgcnBpcGVzLCAxKQogICAgICAgICAgICAgICAgc3Rkb3V0ICs9IHNlbGYuX3JlYWRfZnJvbV9waXBlcyhycGlwZXMsIHJmZHMsIGNtZC5zdGRvdXQpCiAgICAgICAgICAgICAgICBzdGRlcnIgKz0gc2VsZi5fcmVhZF9mcm9tX3BpcGVzKHJwaXBlcywgcmZkcywgY21kLnN0ZGVycikKICAgICAgICAgICAgICAgICMgaWYgd2UncmUgY2hlY2tpbmcgZm9yIHByb21wdHMsIGRvIGl0IG5vdwogICAgICAgICAgICAgICAgaWYgcHJvbXB0X3JlOgogICAgICAgICAgICAgICAgICAgIGlmIHByb21wdF9yZS5zZWFyY2goc3Rkb3V0KSBhbmQgbm90IGRhdGE6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGVuY29kaW5nOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Rkb3V0ID0gdG9fbmF0aXZlKHN0ZG91dCwgZW5jb2Rpbmc9ZW5jb2RpbmcsIGVycm9ycz1lcnJvcnMpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGRvdXQgPSBzdGRvdXQKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgyNTcsIHN0ZG91dCwgIkEgcHJvbXB0IHdhcyBlbmNvdW50ZXJlZCB3aGlsZSBydW5uaW5nIGEgY29tbWFuZCwgYnV0IG5vIGlucHV0IGRhdGEgd2FzIHNwZWNpZmllZCIpCiAgICAgICAgICAgICAgICAjIG9ubHkgYnJlYWsgb3V0IGlmIG5vIHBpcGVzIGFyZSBsZWZ0IHRvIHJlYWQgb3IKICAgICAgICAgICAgICAgICMgdGhlIHBpcGVzIGFyZSBjb21wbGV0ZWx5IHJlYWQgYW5kCiAgICAgICAgICAgICAgICAjIHRoZSBwcm9jZXNzIGlzIHRlcm1pbmF0ZWQKICAgICAgICAgICAgICAgIGlmIChub3QgcnBpcGVzIG9yIG5vdCByZmRzKSBhbmQgY21kLnBvbGwoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgIyBObyBwaXBlcyBhcmUgbGVmdCB0byByZWFkIGJ1dCBwcm9jZXNzIGlzIG5vdCB5ZXQgdGVybWluYXRlZAogICAgICAgICAgICAgICAgIyBPbmx5IHRoZW4gaXQgaXMgc2FmZSB0byB3YWl0IGZvciB0aGUgcHJvY2VzcyB0byBiZSBmaW5pc2hlZAogICAgICAgICAgICAgICAgIyBOT1RFOiBBY3R1YWxseSBjbWQucG9sbCgpIGlzIGFsd2F5cyBOb25lIGhlcmUgaWYgcnBpcGVzIGlzIGVtcHR5CiAgICAgICAgICAgICAgICBlbGlmIG5vdCBycGlwZXMgYW5kIGNtZC5wb2xsKCkgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICBjbWQud2FpdCgpCiAgICAgICAgICAgICAgICAgICAgIyBUaGUgcHJvY2VzcyBpcyB0ZXJtaW5hdGVkLiBTaW5jZSBubyBwaXBlcyB0byByZWFkIGZyb20gYXJlCiAgICAgICAgICAgICAgICAgICAgIyBsZWZ0LCB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgc2VsZWN0KCkgYWdhaW4uCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgICAgIGNtZC5zdGRvdXQuY2xvc2UoKQogICAgICAgICAgICBjbWQuc3RkZXJyLmNsb3NlKCkKCiAgICAgICAgICAgIHJjID0gY21kLnJldHVybmNvZGUKICAgICAgICBleGNlcHQgKE9TRXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgIHNlbGYubG9nKCJFcnJvciBFeGVjdXRpbmcgQ01EOiVzIEV4Y2VwdGlvbjolcyIgJSAoY2xlYW5fYXJncywgdG9fbmF0aXZlKGUpKSkKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocmM9ZS5lcnJubywgbXNnPXRvX25hdGl2ZShlKSwgY21kPWNsZWFuX2FyZ3MpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICBzZWxmLmxvZygiRXJyb3IgRXhlY3V0aW5nIENNRDolcyBFeGNlcHRpb246JXMiICUgKGNsZWFuX2FyZ3MsdG9fbmF0aXZlKHRyYWNlYmFjay5mb3JtYXRfZXhjKCkpKSkKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocmM9MjU3LCBtc2c9dG9fbmF0aXZlKGUpLCBleGNlcHRpb249dHJhY2ViYWNrLmZvcm1hdF9leGMoKSwgY21kPWNsZWFuX2FyZ3MpCgogICAgICAgICMgUmVzdG9yZSBlbnYgc2V0dGluZ3MKICAgICAgICBmb3Iga2V5LCB2YWwgaW4gb2xkX2Vudl92YWxzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIHZhbCBpcyBOb25lOgogICAgICAgICAgICAgICAgZGVsIG9zLmVudmlyb25ba2V5XQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgb3MuZW52aXJvbltrZXldID0gdmFsCgogICAgICAgIGlmIG9sZF91bWFzazoKICAgICAgICAgICAgb3MudW1hc2sob2xkX3VtYXNrKQoKICAgICAgICBpZiByYyAhPSAwIGFuZCBjaGVja19yYzoKICAgICAgICAgICAgbXNnID0gaGV1cmlzdGljX2xvZ19zYW5pdGl6ZShzdGRlcnIucnN0cmlwKCksIHNlbGYubm9fbG9nX3ZhbHVlcykKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24oY21kPWNsZWFuX2FyZ3MsIHJjPXJjLCBzdGRvdXQ9c3Rkb3V0LCBzdGRlcnI9c3RkZXJyLCBtc2c9bXNnKQoKICAgICAgICAjIHJlc2V0IHRoZSBwd2QKICAgICAgICBvcy5jaGRpcihwcmV2X2RpcikKCiAgICAgICAgaWYgZW5jb2RpbmcgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldHVybiAocmMsIHRvX25hdGl2ZShzdGRvdXQsIGVuY29kaW5nPWVuY29kaW5nLCBlcnJvcnM9ZXJyb3JzKSwKICAgICAgICAgICAgICAgICAgICB0b19uYXRpdmUoc3RkZXJyLCBlbmNvZGluZz1lbmNvZGluZywgZXJyb3JzPWVycm9ycykpCiAgICAgICAgcmV0dXJuIChyYywgc3Rkb3V0LCBzdGRlcnIpCgogICAgZGVmIGFwcGVuZF90b19maWxlKHNlbGYsIGZpbGVuYW1lLCBzdHIpOgogICAgICAgIGZpbGVuYW1lID0gb3MucGF0aC5leHBhbmR2YXJzKG9zLnBhdGguZXhwYW5kdXNlcihmaWxlbmFtZSkpCiAgICAgICAgZmggPSBvcGVuKGZpbGVuYW1lLCAnYScpCiAgICAgICAgZmgud3JpdGUoc3RyKQogICAgICAgIGZoLmNsb3NlKCkKCiAgICBkZWYgYnl0ZXNfdG9faHVtYW4oc2VsZiwgc2l6ZSk6CiAgICAgICAgcmV0dXJuIGJ5dGVzX3RvX2h1bWFuKHNpemUpCgogICAgIyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkKICAgIHByZXR0eV9ieXRlcyA9IGJ5dGVzX3RvX2h1bWFuCgogICAgZGVmIGh1bWFuX3RvX2J5dGVzKHNlbGYsIG51bWJlciwgaXNiaXRzPUZhbHNlKToKICAgICAgICByZXR1cm4gaHVtYW5fdG9fYnl0ZXMobnVtYmVyLCBpc2JpdHMpCgogICAgIwogICAgIyBCYWNrd2FyZHMgY29tcGF0CiAgICAjCgogICAgIyBJbiAyLjAsIG1vdmVkIGZyb20gaW5zaWRlIHRoZSBtb2R1bGUgdG8gdGhlIHRvcGxldmVsCiAgICBpc19leGVjdXRhYmxlID0gaXNfZXhlY3V0YWJsZQoKCmRlZiBnZXRfbW9kdWxlX3BhdGgoKToKICAgIHJldHVybiBvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5yZWFscGF0aChfX2ZpbGVfXykpClBLAwQUAAAAAAAAvCtLQMcOncCIAADAiAAAGwAAAGFuc2libGUvbW9kdWxlX3V0aWxzL2djcC5weSMgVGhpcyBjb2RlIGlzIHBhcnQgb2YgQW5zaWJsZSwgYnV0IGlzIGFuIGluZGVwZW5kZW50IGNvbXBvbmVudC4KIyBUaGlzIHBhcnRpY3VsYXIgZmlsZSBzbmlwcGV0LCBhbmQgdGhpcyBmaWxlIHNuaXBwZXQgb25seSwgaXMgQlNEIGxpY2Vuc2VkLgojIE1vZHVsZXMgeW91IHdyaXRlIHVzaW5nIHRoaXMgc25pcHBldCwgd2hpY2ggaXMgZW1iZWRkZWQgZHluYW1pY2FsbHkgYnkgQW5zaWJsZQojIHN0aWxsIGJlbG9uZyB0byB0aGUgYXV0aG9yIG9mIHRoZSBtb2R1bGUsIGFuZCBtYXkgYXNzaWduIHRoZWlyIG93biBsaWNlbnNlCiMgdG8gdGhlIGNvbXBsZXRlIHdvcmsuCiMKIyBDb3B5cmlnaHQgKGMpLCBGcmFuY2sgQ3VueSA8ZnJhbmNrLmN1bnlAZ21haWwuY29tPiwgMjAxNAojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLAojIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDoKIwojICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQKIyAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwKIyAgICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24KIyAgICAgIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgojCiMgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyAiQVMgSVMiIEFORAojIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVECiMgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELgojIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULAojIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywKIyBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MKIyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUCiMgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFCiMgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCiMKCmltcG9ydCBqc29uCmltcG9ydCBvcwppbXBvcnQgdGltZQppbXBvcnQgdHJhY2ViYWNrCmZyb20gZGlzdHV0aWxzLnZlcnNpb24gaW1wb3J0IExvb3NlVmVyc2lvbgoKIyBsaWJjbG91ZAp0cnk6CiAgICBpbXBvcnQgbGliY2xvdWQKICAgIEhBU19MSUJDTE9VRF9CQVNFID0gVHJ1ZQpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBIQVNfTElCQ0xPVURfQkFTRSA9IEZhbHNlCgojIGdvb2dsZS1hdXRoCnRyeToKICAgIGltcG9ydCBnb29nbGUuYXV0aAogICAgZnJvbSBnb29nbGUub2F1dGgyIGltcG9ydCBzZXJ2aWNlX2FjY291bnQKICAgIEhBU19HT09HTEVfQVVUSCA9IFRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgSEFTX0dPT0dMRV9BVVRIID0gRmFsc2UKCiMgZ29vZ2xlLXB5dGhvbi1hcGkKdHJ5OgogICAgaW1wb3J0IGdvb2dsZV9hdXRoX2h0dHBsaWIyCiAgICBmcm9tIGh0dHBsaWIyIGltcG9ydCBIdHRwCiAgICBmcm9tIGdvb2dsZWFwaWNsaWVudC5odHRwIGltcG9ydCBzZXRfdXNlcl9hZ2VudAogICAgZnJvbSBnb29nbGVhcGljbGllbnQuZXJyb3JzIGltcG9ydCBIdHRwRXJyb3IKICAgIGZyb20gYXBpY2xpZW50LmRpc2NvdmVyeSBpbXBvcnQgYnVpbGQKICAgIEhBU19HT09HTEVfQVBJX0xJQiA9IFRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgSEFTX0dPT0dMRV9BUElfTElCID0gRmFsc2UKCgppbXBvcnQgYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4Lm1vdmVzLnVybGxpYi5wYXJzZSBhcyB1cmxwYXJzZQoKR0NQX0RFRkFVTFRfU0NPUEVTID0gWydodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2Nsb3VkLXBsYXRmb3JtJ10KCgpkZWYgX2dldF9nY3BfYW5zaWJsZV9jcmVkZW50aWFscyhtb2R1bGUpOgogICAgIiIiSGVscGVyIHRvIGZldGNoIGNyZWRzIGZyb20gQW5zaWJsZU1vZHVsZSBvYmplY3QuIiIiCiAgICBzZXJ2aWNlX2FjY291bnRfZW1haWwgPSBtb2R1bGUucGFyYW1zLmdldCgnc2VydmljZV9hY2NvdW50X2VtYWlsJywgTm9uZSkKICAgICMgTm90ZTogcGVtX2ZpbGUgaXMgZGlzY291cmFnZWQgYW5kIHdpbGwgYmUgZGVwcmVjYXRlZAogICAgY3JlZGVudGlhbHNfZmlsZSA9IG1vZHVsZS5wYXJhbXMuZ2V0KCdwZW1fZmlsZScsIE5vbmUpIG9yIG1vZHVsZS5wYXJhbXMuZ2V0KAogICAgICAgICdjcmVkZW50aWFsc19maWxlJywgTm9uZSkKICAgIHByb2plY3RfaWQgPSBtb2R1bGUucGFyYW1zLmdldCgncHJvamVjdF9pZCcsIE5vbmUpCgogICAgcmV0dXJuIChzZXJ2aWNlX2FjY291bnRfZW1haWwsIGNyZWRlbnRpYWxzX2ZpbGUsIHByb2plY3RfaWQpCgoKZGVmIF9nZXRfZ2NwX2Vudmlyb25fdmFyKHZhcl9uYW1lLCBkZWZhdWx0X3ZhbHVlKToKICAgICIiIldyYXBwZXIgYXJvdW5kIG9zLmVudmlyb24uZ2V0IGNhbGwuIiIiCiAgICByZXR1cm4gb3MuZW52aXJvbi5nZXQoCiAgICAgICAgdmFyX25hbWUsIGRlZmF1bHRfdmFsdWUpCgoKZGVmIF9nZXRfZ2NwX2Vudmlyb25tZW50X2NyZWRlbnRpYWxzKHNlcnZpY2VfYWNjb3VudF9lbWFpbCwgY3JlZGVudGlhbHNfZmlsZSwgcHJvamVjdF9pZCk6CiAgICAiIiJIZWxwZXIgdG8gbG9vayBpbiBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZm9yIGNyZWRlbnRpYWxzLiIiIgogICAgIyBJZiBhbnkgb2YgdGhlIHZhbHVlcyBhcmUgbm90IGdpdmVuIGFzIHBhcmFtZXRlcnMsIGNoZWNrIHRoZSBhcHByb3ByaWF0ZQogICAgIyBlbnZpcm9ubWVudCB2YXJpYWJsZXMuCiAgICBpZiBub3Qgc2VydmljZV9hY2NvdW50X2VtYWlsOgogICAgICAgIHNlcnZpY2VfYWNjb3VudF9lbWFpbCA9IF9nZXRfZ2NwX2Vudmlyb25fdmFyKCdHQ0VfRU1BSUwnLCBOb25lKQogICAgaWYgbm90IGNyZWRlbnRpYWxzX2ZpbGU6CiAgICAgICAgY3JlZGVudGlhbHNfZmlsZSA9IF9nZXRfZ2NwX2Vudmlyb25fdmFyKAogICAgICAgICAgICAnR0NFX0NSRURFTlRJQUxTX0ZJTEVfUEFUSCcsIE5vbmUpIG9yIF9nZXRfZ2NwX2Vudmlyb25fdmFyKAogICAgICAgICAgICAgICAgJ0dPT0dMRV9BUFBMSUNBVElPTl9DUkVERU5USUFMUycsIE5vbmUpIG9yIF9nZXRfZ2NwX2Vudmlyb25fdmFyKAogICAgICAgICAgICAgICAgICAgICdHQ0VfUEVNX0ZJTEVfUEFUSCcsIE5vbmUpCiAgICBpZiBub3QgcHJvamVjdF9pZDoKICAgICAgICBwcm9qZWN0X2lkID0gX2dldF9nY3BfZW52aXJvbl92YXIoJ0dDRV9QUk9KRUNUJywgTm9uZSkgb3IgX2dldF9nY3BfZW52aXJvbl92YXIoCiAgICAgICAgICAgICdHT09HTEVfQ0xPVURfUFJPSkVDVCcsIE5vbmUpCiAgICByZXR1cm4gKHNlcnZpY2VfYWNjb3VudF9lbWFpbCwgY3JlZGVudGlhbHNfZmlsZSwgcHJvamVjdF9pZCkKCgpkZWYgX2dldF9nY3BfbGliY2xvdWRfY3JlZGVudGlhbHMobW9kdWxlLCBzZXJ2aWNlX2FjY291bnRfZW1haWw9Tm9uZSwgY3JlZGVudGlhbHNfZmlsZT1Ob25lLCBwcm9qZWN0X2lkPU5vbmUpOgogICAgIiIiCiAgICBIZWxwZXIgdG8gbG9vayBmb3IgbGliY2xvdWQgc2VjcmV0cy5weSBmaWxlLgoKICAgIE5vdGU6IFRoaXMgaGFzIGFuICdhZGRpdGl2ZScgZWZmZWN0IHJpZ2h0IG5vdywgZmlsbGluZyBpbgogICAgdmFycyBub3Qgc3BlY2lmaWVkIGVsc2V3aGVyZSwgaW4gb3JkZXIgdG8ga2VlcCBsZWdhY3kgZnVuY3Rpb25hbGl0eS4KICAgIFRoaXMgbWV0aG9kIG9mIHNwZWNpZnlpbmcgY3JlZGVudGlhbHMgd2lsbCBiZSBkZXByZWNhdGVkLCBvdGhlcndpc2UKICAgIHdlJ2QgbG9vayB0byBtYWtlIGl0IG1vcmUgcmVzdHJpY3RpdmUgd2l0aCBhbiBhbGwtdmFycy1vci1ub3RoaW5nIGFwcHJvYWNoLgoKICAgIDpwYXJhbSBzZXJ2aWNlX2FjY291bnQ6IEdDUCBzZXJ2aWNlIGFjY291bnQgZW1haWwgdXNlZCB0byBtYWtlIHJlcXVlc3RzCiAgICA6dHlwZSBzZXJ2aWNlX2FjY291bnQ6IGBgc3RyYGAgb3IgTm9uZQoKICAgIDpwYXJhbSBjcmVkZW50aWFsc19maWxlOiBQYXRoIG9uIGRpc2sgdG8gY3JlZGVudGlhbHMgZmlsZQogICAgOnR5cGUgY3JlZGVudGlhbHNfZmlsZTogYGBzdHJgYCBvciBOb25lCgogICAgOnBhcmFtIHByb2plY3RfaWQ6IEdDUCBwcm9qZWN0IElELgogICAgOnR5cGUgcHJvamVjdF9pZDogYGBzdHJgYCBvciBOb25lCgogICAgOnJldHVybjogdHVwbGUgb2YgKHNlcnZpY2VfYWNjb3VudCwgY3JlZGVudGlhbHNfZmlsZSwgcHJvamVjdF9pZCkKICAgIDpydHlwZTogYGB0dXBsZWBgIG9mIGBgc3RyYGAKICAgICIiIgogICAgaWYgc2VydmljZV9hY2NvdW50X2VtYWlsIGlzIE5vbmUgb3IgY3JlZGVudGlhbHNfZmlsZSBpcyBOb25lOgogICAgICAgIHRyeToKICAgICAgICAgICAgaW1wb3J0IHNlY3JldHMKICAgICAgICAgICAgbW9kdWxlLmRlcHJlY2F0ZShtc2c9KCJzZWNyZXRzIGZpbGUgZm91bmQgYXQgJyVzJy4gIFRoaXMgbWV0aG9kIG9mIHNwZWNpZnlpbmcgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNyZWRlbnRpYWxzIGlzIGRlcHJlY2F0ZWQuICBQbGVhc2UgdXNlIGVudiB2YXJzIG9yICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJBbnNpYmxlIFlBTUwgZmlsZXMgaW5zdGVhZCIgJSAoc2VjcmV0cy5fX2ZpbGVfXykpLCB2ZXJzaW9uPTIuNSkKICAgICAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgICAgIHNlY3JldHMgPSBOb25lCiAgICAgICAgaWYgaGFzYXR0cihzZWNyZXRzLCAnR0NFX1BBUkFNUycpOgogICAgICAgICAgICBpZiBub3Qgc2VydmljZV9hY2NvdW50X2VtYWlsOgogICAgICAgICAgICAgICAgc2VydmljZV9hY2NvdW50X2VtYWlsID0gc2VjcmV0cy5HQ0VfUEFSQU1TWzBdCiAgICAgICAgICAgIGlmIG5vdCBjcmVkZW50aWFsc19maWxlOgogICAgICAgICAgICAgICAgY3JlZGVudGlhbHNfZmlsZSA9IHNlY3JldHMuR0NFX1BBUkFNU1sxXQogICAgICAgIGtleXdvcmRfcGFyYW1zID0gZ2V0YXR0cihzZWNyZXRzLCAnR0NFX0tFWVdPUkRfUEFSQU1TJywge30pCiAgICAgICAgaWYgbm90IHByb2plY3RfaWQ6CiAgICAgICAgICAgIHByb2plY3RfaWQgPSBrZXl3b3JkX3BhcmFtcy5nZXQoJ3Byb2plY3QnLCBOb25lKQogICAgcmV0dXJuIChzZXJ2aWNlX2FjY291bnRfZW1haWwsIGNyZWRlbnRpYWxzX2ZpbGUsIHByb2plY3RfaWQpCgoKZGVmIF9nZXRfZ2NwX2NyZWRlbnRpYWxzKG1vZHVsZSwgcmVxdWlyZV92YWxpZF9qc29uPVRydWUsIGNoZWNrX2xpYmNsb3VkPUZhbHNlKToKICAgICIiIgogICAgT2J0YWluIEdDUCBjcmVkZW50aWFscyBieSB0cnlpbmcgdmFyaW91cyBtZXRob2RzLgoKICAgIFRoZXJlIGFyZSAzIHdheXMgdG8gc3BlY2lmeSBHQ1AgY3JlZGVudGlhbHM6CiAgICAxLiBTcGVjaWZ5IHZpYSBBbnNpYmxlIG1vZHVsZSBwYXJhbWV0ZXJzIChyZWNvbW1lbmRlZCkuCiAgICAyLiBTcGVjaWZ5IHZpYSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuICBUd28gc2V0cyBvZiBlbnYgdmFycyBhcmUgYXZhaWxhYmxlOgogICAgICAgYSkgR09PR0xFX0NMT1VEX1BST0pFQ1QsIEdPT0dMRV9DUkVERU5USUFMU19BUFBMSUNBVElPTiAocHJlZmVycmVkKQogICAgICAgYikgR0NFX1BST0pFQ1QsIEdDRV9DUkVERU5USUFMX0ZJTEVfUEFUSCwgR0NFX0VNQUlMIChsZWdhY3ksIG5vdCByZWNvbW1lbmRlZDsgcmVxJ2QgaWYKICAgICAgICAgIHVzaW5nIHAxMiBrZXkpCiAgICAzLiBTcGVjaWZ5IHZpYSBsaWJjbG91ZCBzZWNyZXRzLnB5IGZpbGUgKGRlcHJlY2F0ZWQpLgoKICAgIFRoZXJlIGFyZSAzIGhlbHBlciBmdW5jdGlvbnMgdG8gYXNzaXN0IGluIHRoZSBhYm92ZS4KCiAgICBSZWdhcmRsZXNzIG9mIG1ldGhvZCwgdGhlIHVzZXIgYWxzbyBoYXMgdGhlIG9wdGlvbiBvZiBzcGVjaWZ5aW5nIGEgSlNPTgogICAgZmlsZSBvciBhIHAxMiBmaWxlIGFzIHRoZSBjcmVkZW50aWFscyBmaWxlLiAgSlNPTiBpcyBzdHJvbmdseSByZWNvbW1lbmRlZCBhbmQKICAgIHAxMiB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4KCiAgICBBZGRpdGlvbmFsbHksIGZsYWdzIG1heSBiZSBzZXQgdG8gcmVxdWlyZSB2YWxpZCBqc29uIGFuZCBjaGVjayB0aGUgbGliY2xvdWQKICAgIHZlcnNpb24uCgogICAgQW5zaWJsZU1vZHVsZS5mYWlsX2pzb24gaXMgY2FsbGVkIG9ubHkgaWYgdGhlIHByb2plY3RfaWQgY2Fubm90IGJlIGZvdW5kLgoKICAgIDpwYXJhbSBtb2R1bGU6IGluaXRpYWxpemVkIEFuc2libGUgbW9kdWxlIG9iamVjdAogICAgOnR5cGUgbW9kdWxlOiBgY2xhc3MgQW5zaWJsZU1vZHVsZWAKCiAgICA6cGFyYW0gcmVxdWlyZV92YWxpZF9qc29uOiBJZiB0cnVlLCByZXF1aXJlIGNyZWRlbnRpYWxzIHRvIGJlIHZhbGlkIEpTT04uICBEZWZhdWx0IGlzIFRydWUuCiAgICA6dHlwZSByZXF1aXJlX3ZhbGlkX2pzb246IGBgYm9vbGBgCgogICAgOnBhcmFtcyBjaGVja19saWJjbG91ZDogSWYgdHJ1ZSwgY2hlY2sgdGhlIGxpYmNsb3VkIHZlcnNpb24gYXZhaWxhYmxlIHRvIHNlZSBpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTiBjcmVkcyBhcmUgc3VwcG9ydGVkLgogICAgOnR5cGUgY2hlY2tfbGliY2xvdWQ6IGBgYm9vbGBgCgogICAgOnJldHVybjogIHsnc2VydmljZV9hY2NvdW50X2VtYWlsJzogc2VydmljZV9hY2NvdW50X2VtYWlsLAogICAgICAgICAgICAgICAnY3JlZGVudGlhbHNfZmlsZSc6IGNyZWRlbnRpYWxzX2ZpbGUsCiAgICAgICAgICAgICAgICAncHJvamVjdF9pZCc6IHByb2plY3RfaWR9CiAgICA6cnR5cGU6IGBgZGljdGBgCiAgICAiIiIKICAgIChzZXJ2aWNlX2FjY291bnRfZW1haWwsCiAgICAgY3JlZGVudGlhbHNfZmlsZSwKICAgICBwcm9qZWN0X2lkKSA9IF9nZXRfZ2NwX2Fuc2libGVfY3JlZGVudGlhbHMobW9kdWxlKQoKICAgICMgSWYgYW55IG9mIHRoZSB2YWx1ZXMgYXJlIG5vdCBnaXZlbiBhcyBwYXJhbWV0ZXJzLCBjaGVjayB0aGUgYXBwcm9wcmlhdGUKICAgICMgZW52aXJvbm1lbnQgdmFyaWFibGVzLgogICAgKHNlcnZpY2VfYWNjb3VudF9lbWFpbCwKICAgICBjcmVkZW50aWFsc19maWxlLAogICAgIHByb2plY3RfaWQpID0gX2dldF9nY3BfZW52aXJvbm1lbnRfY3JlZGVudGlhbHMoc2VydmljZV9hY2NvdW50X2VtYWlsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHNfZmlsZSwgcHJvamVjdF9pZCkKCiAgICAjIElmIHdlIHN0aWxsIGRvbid0IGhhdmUgb25lIG9yIG1vcmUgb2Ygb3VyIGNyZWRlbnRpYWxzLCBhdHRlbXB0IHRvCiAgICAjIGdldCB0aGUgcmVtYWluaW5nIHZhbHVlcyBmcm9tIHRoZSBsaWJjbG91ZCBzZWNyZXRzIGZpbGUuCiAgICAoc2VydmljZV9hY2NvdW50X2VtYWlsLAogICAgIGNyZWRlbnRpYWxzX2ZpbGUsCiAgICAgcHJvamVjdF9pZCkgPSBfZ2V0X2djcF9saWJjbG91ZF9jcmVkZW50aWFscyhtb2R1bGUsIHNlcnZpY2VfYWNjb3VudF9lbWFpbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzX2ZpbGUsIHByb2plY3RfaWQpCgogICAgaWYgY3JlZGVudGlhbHNfZmlsZSBpcyBOb25lIG9yIHByb2plY3RfaWQgaXMgTm9uZSBvciBzZXJ2aWNlX2FjY291bnRfZW1haWwgaXMgTm9uZToKICAgICAgICBpZiBjaGVja19saWJjbG91ZCBpcyBUcnVlOgogICAgICAgICAgICBpZiBwcm9qZWN0X2lkIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAjIFRPRE8oc3VwZXJ0b20pOiB0aGlzIG1lc3NhZ2UgaXMgbGVnYWN5IGFuZCBpbnRlZ3JhdGlvbiB0ZXN0cwogICAgICAgICAgICAgICAgIyBkZXBlbmQgb24gaXQuCiAgICAgICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0nTWlzc2luZyBHQ0UgY29ubmVjdGlvbiBwYXJhbWV0ZXJzIGluIGxpYmNsb3VkICcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NlY3JldHMgZmlsZS4nKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGlmIHByb2plY3RfaWQgaXMgTm9uZToKICAgICAgICAgICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSgnR0NQIGNvbm5lY3Rpb24gZXJyb3I6IHVuYWJsZSB0byBkZXRlcm1pbmUgcHJvamVjdCAoJXMpIG9yICcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3JlZGVudGlhbHMgZmlsZSAoJXMpJyAlIChwcm9qZWN0X2lkLCBjcmVkZW50aWFsc19maWxlKSkpCiAgICAgICAgIyBTZXQgdGhlc2UgZmllbGRzIHRvIGVtcHR5IHN0cmluZ3MgaWYgdGhleSBhcmUgTm9uZQogICAgICAgICMgY29uc3VtZXJzIG9mIHRoaXMgd2lsbCBtYWtlIHRoZSBkaXN0aW5jdGlvbiBiZXR3ZWVuIGFuIGVtcHR5IHN0cmluZwogICAgICAgICMgYW5kIE5vbmUuCiAgICAgICAgaWYgY3JlZGVudGlhbHNfZmlsZSBpcyBOb25lOgogICAgICAgICAgICBjcmVkZW50aWFsc19maWxlID0gJycKICAgICAgICBpZiBzZXJ2aWNlX2FjY291bnRfZW1haWwgaXMgTm9uZToKICAgICAgICAgICAgc2VydmljZV9hY2NvdW50X2VtYWlsID0gJycKCiAgICAjIGVuc3VyZSB0aGUgY3JlZGVudGlhbHMgZmlsZSBpcyBmb3VuZCBhbmQgaXMgaW4gdGhlIHByb3BlciBmb3JtYXQuCiAgICBpZiBjcmVkZW50aWFsc19maWxlOgogICAgICAgIF92YWxpZGF0ZV9jcmVkZW50aWFsc19maWxlKG1vZHVsZSwgY3JlZGVudGlhbHNfZmlsZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlX3ZhbGlkX2pzb249cmVxdWlyZV92YWxpZF9qc29uLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrX2xpYmNsb3VkPWNoZWNrX2xpYmNsb3VkKQoKICAgIHJldHVybiB7J3NlcnZpY2VfYWNjb3VudF9lbWFpbCc6IHNlcnZpY2VfYWNjb3VudF9lbWFpbCwKICAgICAgICAgICAgJ2NyZWRlbnRpYWxzX2ZpbGUnOiBjcmVkZW50aWFsc19maWxlLAogICAgICAgICAgICAncHJvamVjdF9pZCc6IHByb2plY3RfaWR9CgoKZGVmIF92YWxpZGF0ZV9jcmVkZW50aWFsc19maWxlKG1vZHVsZSwgY3JlZGVudGlhbHNfZmlsZSwgcmVxdWlyZV92YWxpZF9qc29uPVRydWUsIGNoZWNrX2xpYmNsb3VkPUZhbHNlKToKICAgICIiIgogICAgQ2hlY2sgZm9yIHZhbGlkIGNyZWRlbnRpYWxzIGZpbGUuCgogICAgT3B0aW9uYWxseSBjaGVjayBmb3IgSlNPTiBmb3JtYXQgYW5kIGlmIGxpYmNsb3VkIHN1cHBvcnRzIEpTT04uCgogICAgOnBhcmFtIG1vZHVsZTogaW5pdGlhbGl6ZWQgQW5zaWJsZSBtb2R1bGUgb2JqZWN0CiAgICA6dHlwZSBtb2R1bGU6IGBjbGFzcyBBbnNpYmxlTW9kdWxlYAoKICAgIDpwYXJhbSBjcmVkZW50aWFsc19maWxlOiBwYXRoIHRvIGZpbGUgb24gZGlzawogICAgOnR5cGUgY3JlZGVudGlhbHNfZmlsZTogYGBzdHJgYC4gIENvbXBsZXRlIHBhdGggdG8gZmlsZSBvbiBkaXNrLgoKICAgIDpwYXJhbSByZXF1aXJlX3ZhbGlkX2pzb246IElmIHRydWUsIHJlcXVpcmUgY3JlZGVudGlhbHMgdG8gYmUgdmFsaWQgSlNPTi4gIERlZmF1bHQgaXMgVHJ1ZS4KICAgIDp0eXBlIHJlcXVpcmVfdmFsaWRfanNvbjogYGBib29sYGAKCiAgICA6cGFyYW1zIGNoZWNrX2xpYmNsb3VkOiBJZiB0cnVlLCBjaGVjayB0aGUgbGliY2xvdWQgdmVyc2lvbiBhdmFpbGFibGUgdG8gc2VlIGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU09OIGNyZWRzIGFyZSBzdXBwb3J0ZWQuCiAgICA6dHlwZSBjaGVja19saWJjbG91ZDogYGBib29sYGAKCiAgICA6cmV0dXJuczogVHJ1ZQogICAgOnJ0eXBlOiBgYGJvb2xgYAogICAgIiIiCiAgICB0cnk6CiAgICAgICAgIyBUcnkgdG8gcmVhZCBjcmVkZW50aWFscyBhcyBKU09OCiAgICAgICAgd2l0aCBvcGVuKGNyZWRlbnRpYWxzX2ZpbGUpIGFzIGNyZWRlbnRpYWxzOgogICAgICAgICAgICBqc29uLmxvYWRzKGNyZWRlbnRpYWxzLnJlYWQoKSkKICAgICAgICAgICAgIyBJZiB0aGUgY3JlZGVudGlhbHMgYXJlIHByb3BlciBKU09OIGFuZCB3ZSBkbyBub3QgaGF2ZSB0aGUgbWluaW11bQogICAgICAgICAgICAjIHJlcXVpcmVkIGxpYmNsb3VkIHZlcnNpb24sIGJhaWwgb3V0IGFuZCByZXR1cm4gYSBkZXNjcmlwdGl2ZQogICAgICAgICAgICAjIGVycm9yCiAgICAgICAgICAgIGlmIGNoZWNrX2xpYmNsb3VkIGFuZCBMb29zZVZlcnNpb24obGliY2xvdWQuX192ZXJzaW9uX18pIDwgJzAuMTcuMCc6CiAgICAgICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0nVXNpbmcgSlNPTiBjcmVkZW50aWFscyBidXQgbGliY2xvdWQgbWluaW11bSB2ZXJzaW9uIG5vdCBtZXQuICcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdVcGdyYWRlIHRvIGxpYmNsb3VkPj0wLjE3LjAuJykKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgIGV4Y2VwdCBJT0Vycm9yIGFzIGU6CiAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9J0dDUCBDcmVkZW50aWFscyBGaWxlICVzIG5vdCBmb3VuZC4nICUKICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzX2ZpbGUsIGNoYW5nZWQ9RmFsc2UpCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBleGNlcHQgVmFsdWVFcnJvciBhcyBlOgogICAgICAgIGlmIHJlcXVpcmVfdmFsaWRfanNvbjoKICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbigKICAgICAgICAgICAgICAgIG1zZz0nR0NQIENyZWRlbnRpYWxzIEZpbGUgJXMgaW52YWxpZC4gIE11c3QgYmUgdmFsaWQgSlNPTi4nICUgY3JlZGVudGlhbHNfZmlsZSwgY2hhbmdlZD1GYWxzZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBtb2R1bGUuZGVwcmVjYXRlKG1zZz0oIk5vbi1KU09OIGNyZWRlbnRpYWxzIGZpbGUgcHJvdmlkZWQuIFRoaXMgZm9ybWF0IGlzIGRlcHJlY2F0ZWQuICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgUGxlYXNlIGdlbmVyYXRlIGEgbmV3IEpTT04ga2V5IGZyb20gdGhlIEdvb2dsZSBDbG91ZCBjb25zb2xlIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbj0yLjUpCiAgICAgICAgICAgIHJldHVybiBUcnVlCgoKZGVmIGdjcF9jb25uZWN0KG1vZHVsZSwgcHJvdmlkZXIsIGdldF9kcml2ZXIsIHVzZXJfYWdlbnRfcHJvZHVjdCwgdXNlcl9hZ2VudF92ZXJzaW9uKToKICAgICIiIlJldHVybiBhIEdvb2dsZSBsaWJjbG91ZCBkcml2ZXIgY29ubmVjdGlvbi4iIiIKICAgIGlmIG5vdCBIQVNfTElCQ0xPVURfQkFTRToKICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0nbGliY2xvdWQgbXVzdCBiZSBpbnN0YWxsZWQgdG8gdXNlIHRoaXMgbW9kdWxlJykKCiAgICBjcmVkcyA9IF9nZXRfZ2NwX2NyZWRlbnRpYWxzKG1vZHVsZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZV92YWxpZF9qc29uPUZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja19saWJjbG91ZD1UcnVlKQogICAgdHJ5OgogICAgICAgIGdjcCA9IGdldF9kcml2ZXIocHJvdmlkZXIpKGNyZWRzWydzZXJ2aWNlX2FjY291bnRfZW1haWwnXSwgY3JlZHNbJ2NyZWRlbnRpYWxzX2ZpbGUnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhY2VudGVyPW1vZHVsZS5wYXJhbXMuZ2V0KCd6b25lJywgTm9uZSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdD1jcmVkc1sncHJvamVjdF9pZCddKQogICAgICAgIGdjcC5jb25uZWN0aW9uLnVzZXJfYWdlbnRfYXBwZW5kKCIlcy8lcyIgJSAoCiAgICAgICAgICAgIHVzZXJfYWdlbnRfcHJvZHVjdCwgdXNlcl9hZ2VudF92ZXJzaW9uKSkKICAgIGV4Y2VwdCAoUnVudGltZUVycm9yLCBWYWx1ZUVycm9yKSBhcyBlOgogICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPXN0cihlKSwgY2hhbmdlZD1GYWxzZSkKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz11bmV4cGVjdGVkX2Vycm9yX21zZyhlKSwgY2hhbmdlZD1GYWxzZSkKCiAgICByZXR1cm4gZ2NwCgoKZGVmIGdldF9nb29nbGVfY2xvdWRfY3JlZGVudGlhbHMobW9kdWxlLCBzY29wZXM9W10pOgogICAgIiIiCiAgICBHZXQgY3JlZGVudGlhbHMgb2JqZWN0IGZvciB1c2Ugd2l0aCBHb29nbGUgQ2xvdWQgY2xpZW50LgoKICAgIEF0dGVtcHRzIHRvIG9idGFpbiBjcmVkZW50aWFscyBieSBjYWxsaW5nIF9nZXRfZ2NwX2NyZWRlbnRpYWxzLiBJZiB0aG9zZSBhcmUKICAgIG5vdCBwcmVzZW50IHdpbGwgYXR0ZW1wdCB0byBjb25uZWN0IHZpYSBBcHBsaWNhdGlvbiBEZWZhdWx0IENyZWRlbnRpYWxzLgoKICAgIFRvIGNvbm5lY3QgdmlhIGxpYmNsb3VkLCBkb24ndCB1c2UgdGhpcyBmdW5jdGlvbiwgdXNlIGdjcF9jb25uZWN0IGluc3RlYWQuICBGb3IKICAgIEdvb2dsZSBQeXRob24gQVBJIENsaWVudCwgc2VlIGdldF9nb29nbGVfYXBpX2F1dGggZm9yIGhvdyB0byBjb25uZWN0LgoKICAgIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIEdvb2dsZSdzIGNsaWVudCBsaWJyYXJ5IG9wdGlvbnMgZm9yIFB5dGhvbiwgc2VlOgogICAgVShodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vYXBpcy9kb2NzL2NsaWVudC1saWJyYXJpZXMtZXhwbGFpbmVkI2dvb2dsZV9hcGlfY2xpZW50X2xpYnJhcmllcykKCiAgICBHb29nbGUgQ2xvdWQgZXhhbXBsZToKICAgICAgY3JlZHMsIHBhcmFtcyA9IGdldF9nb29nbGVfY2xvdWRfY3JlZGVudGlhbHMobW9kdWxlLCBzY29wZXMsIHVzZXJfYWdlbnRfcHJvZHVjdCwgdXNlcl9hZ2VudF92ZXJzaW9uKQogICAgICBwdWJzdWJfY2xpZW50ID0gcHVic3ViLkNsaWVudChwcm9qZWN0PXBhcmFtc1sncHJvamVjdF9pZCddLCBjcmVkZW50aWFscz1jcmVkcykKICAgICAgcHVic3ViX2NsaWVudC51c2VyX2FnZW50ID0gJ2Fuc2libGUtcHVic3ViLTAuMScKICAgICAgLi4uCgogICAgOnBhcmFtIG1vZHVsZTogaW5pdGlhbGl6ZWQgQW5zaWJsZSBtb2R1bGUgb2JqZWN0CiAgICA6dHlwZSBtb2R1bGU6IGBjbGFzcyBBbnNpYmxlTW9kdWxlYAoKICAgIDpwYXJhbSBzY29wZXM6IGxpc3Qgb2Ygc2NvcGVzCiAgICA6dHlwZSBtb2R1bGU6IGBgbGlzdGBgIG9mIFVSSXMKCiAgICA6cmV0dXJuczogQSB0dXBsZSBjb250YWluaW5nIChnb29nbGUgYXV0aG9yaXplZCkgY3JlZGVudGlhbHMgb2JqZWN0IGFuZAogICAgICAgICAgICAgIHBhcmFtcyBkaWN0IHsnc2VydmljZV9hY2NvdW50X2VtYWlsJzogJy4uLicsICdjcmVkZW50aWFsc19maWxlJzogJy4uLicsICdwcm9qZWN0X2lkJzogLi4ufQogICAgOnJ0eXBlOiBgYHR1cGxlYGAKICAgICIiIgogICAgaWYgbm90IEhBU19HT09HTEVfQVVUSDoKICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0nUGxlYXNlIGluc3RhbGwgZ29vZ2xlLWF1dGguJykKCiAgICBjb25uX3BhcmFtcyA9IF9nZXRfZ2NwX2NyZWRlbnRpYWxzKG1vZHVsZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZV92YWxpZF9qc29uPVRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrX2xpYmNsb3VkPUZhbHNlKQogICAgdHJ5OgogICAgICAgIGlmIGNvbm5fcGFyYW1zWydjcmVkZW50aWFsc19maWxlJ106CiAgICAgICAgICAgIGNyZWRlbnRpYWxzID0gc2VydmljZV9hY2NvdW50LkNyZWRlbnRpYWxzLmZyb21fc2VydmljZV9hY2NvdW50X2ZpbGUoCiAgICAgICAgICAgICAgICBjb25uX3BhcmFtc1snY3JlZGVudGlhbHNfZmlsZSddKQogICAgICAgICAgICBpZiBzY29wZXM6CiAgICAgICAgICAgICAgICBjcmVkZW50aWFscyA9IGNyZWRlbnRpYWxzLndpdGhfc2NvcGVzKHNjb3BlcykKICAgICAgICBlbHNlOgogICAgICAgICAgICAoY3JlZGVudGlhbHMsIHByb2plY3RfaWQpID0gZ29vZ2xlLmF1dGguZGVmYXVsdCgKICAgICAgICAgICAgICAgIHNjb3Blcz1zY29wZXMpCiAgICAgICAgICAgIGlmIHByb2plY3RfaWQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBjb25uX3BhcmFtc1sncHJvamVjdF9pZCddID0gcHJvamVjdF9pZAoKICAgICAgICByZXR1cm4gKGNyZWRlbnRpYWxzLCBjb25uX3BhcmFtcykKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz11bmV4cGVjdGVkX2Vycm9yX21zZyhlKSwgY2hhbmdlZD1GYWxzZSkKICAgICAgICByZXR1cm4gKE5vbmUsIE5vbmUpCgoKZGVmIGdldF9nb29nbGVfYXBpX2F1dGgobW9kdWxlLCBzY29wZXM9W10sIHVzZXJfYWdlbnRfcHJvZHVjdD0nYW5zaWJsZS1weXRob24tYXBpJywgdXNlcl9hZ2VudF92ZXJzaW9uPSdOQScpOgogICAgIiIiCiAgICBBdXRoZW50aWNhdGlvbiBmb3IgdXNlIHdpdGggZ29vZ2xlLXB5dGhvbi1hcGktY2xpZW50LgoKICAgIEZ1bmN0aW9uIGNhbGxzIGdldF9nb29nbGVfY2xvdWRfY3JlZGVudGlhbHMsIHdoaWNoIGF0dGVtcHRzIHRvIGFzc2VtYmxlIHRoZSBjcmVkZW50aWFscwogICAgZnJvbSB2YXJpb3VzIGxvY2F0aW9ucy4gIE5leHQgaXQgYXR0ZW1wdHMgdG8gYXV0aGVudGljYXRlIHdpdGggR29vZ2xlLgoKICAgIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhbiBodHRwbGliMiAoY29tcGF0aWJsZSkgb2JqZWN0IHRoYXQgY2FuIGJlIHByb3ZpZGVkIHRvIHRoZSBHb29nbGUgUHl0aG9uIEFQSSBjbGllbnQuCgogICAgRm9yIGxpYmNsb3VkLCBkb24ndCB1c2UgdGhpcyBmdW5jdGlvbiwgdXNlIGdjcF9jb25uZWN0IGluc3RlYWQuICBGb3IgR29vZ2xlIENsb3VkLCBTZWUKICAgIGdldF9nb29nbGVfY2xvdWRfY3JlZGVudGlhbHMgZm9yIGhvdyB0byBjb25uZWN0LgoKICAgIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIEdvb2dsZSdzIGNsaWVudCBsaWJyYXJ5IG9wdGlvbnMgZm9yIFB5dGhvbiwgc2VlOgogICAgVShodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vYXBpcy9kb2NzL2NsaWVudC1saWJyYXJpZXMtZXhwbGFpbmVkI2dvb2dsZV9hcGlfY2xpZW50X2xpYnJhcmllcykKCiAgICBHb29nbGUgQVBJIGV4YW1wbGU6CiAgICAgIGh0dHBfYXV0aCwgY29ubl9wYXJhbXMgPSBnZXRfZ29vZ2xlX2FwaV9hdXRoKG1vZHVsZSwgc2NvcGVzLCB1c2VyX2FnZW50X3Byb2R1Y3QsIHVzZXJfYWdlbnRfdmVyc2lvbikKICAgICAgc2VydmljZSA9IGJ1aWxkKCdteXNlcnZpY2UnLCAndjEnLCBodHRwPWh0dHBfYXV0aCkKICAgICAgLi4uCgogICAgOnBhcmFtIG1vZHVsZTogaW5pdGlhbGl6ZWQgQW5zaWJsZSBtb2R1bGUgb2JqZWN0CiAgICA6dHlwZSBtb2R1bGU6IGBjbGFzcyBBbnNpYmxlTW9kdWxlYAoKICAgIDpwYXJhbSBzY29wZXM6IGxpc3Qgb2Ygc2NvcGVzCiAgICA6dHlwZSBzY29wZXM6IGBgbGlzdGBgIG9mIFVSSXMKCiAgICA6cGFyYW0gdXNlcl9hZ2VudF9wcm9kdWN0OiBVc2VyIGFnZW50IHByb2R1Y3QuICBlZzogJ2Fuc2libGUtcHl0aG9uLWFwaScKICAgIDp0eXBlIHVzZXJfYWdlbnRfcHJvZHVjdDogYGBzdHJgYAoKICAgIDpwYXJhbSB1c2VyX2FnZW50X3ZlcnNpb246IFZlcnNpb24gc3RyaW5nIHRvIGFwcGVuZCB0byBwcm9kdWN0LiAgZWc6ICdOQScgb3IgJzAuMScKICAgIDp0eXBlIHVzZXJfYWdlbnRfdmVyc2lvbjogYGBzdHJgYAoKICAgIDpyZXR1cm5zOiBBIHR1cGxlIGNvbnRhaW5pbmcgKGdvb2dsZSBhdXRob3JpemVkKSBodHRwbGliMiByZXF1ZXN0IG9iamVjdCBhbmQgYQogICAgICAgICAgICAgIHBhcmFtcyBkaWN0IHsnc2VydmljZV9hY2NvdW50X2VtYWlsJzogJy4uLicsICdjcmVkZW50aWFsc19maWxlJzogJy4uLicsICdwcm9qZWN0X2lkJzogLi4ufQogICAgOnJ0eXBlOiBgYHR1cGxlYGAKICAgICIiIgogICAgaWYgbm90IEhBU19HT09HTEVfQVBJX0xJQjoKICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0iUGxlYXNlIGluc3RhbGwgZ29vZ2xlLWFwaS1weXRob24tY2xpZW50IGxpYnJhcnkiKQogICAgaWYgbm90IHNjb3BlczoKICAgICAgICBzY29wZXMgPSBHQ1BfREVGQVVMVF9TQ09QRVMKICAgIHRyeToKICAgICAgICAoY3JlZGVudGlhbHMsIGNvbm5fcGFyYW1zKSA9IGdldF9nb29nbGVfY2xvdWRfY3JlZGVudGlhbHMobW9kdWxlLCBzY29wZXMpCiAgICAgICAgaHR0cCA9IHNldF91c2VyX2FnZW50KEh0dHAoKSwgJyVzLSVzJyAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh1c2VyX2FnZW50X3Byb2R1Y3QsIHVzZXJfYWdlbnRfdmVyc2lvbikpCiAgICAgICAgaHR0cF9hdXRoID0gZ29vZ2xlX2F1dGhfaHR0cGxpYjIuQXV0aG9yaXplZEh0dHAoY3JlZGVudGlhbHMsIGh0dHA9aHR0cCkKCiAgICAgICAgcmV0dXJuIChodHRwX2F1dGgsIGNvbm5fcGFyYW1zKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPXVuZXhwZWN0ZWRfZXJyb3JfbXNnKGUpLCBjaGFuZ2VkPUZhbHNlKQogICAgICAgIHJldHVybiAoTm9uZSwgTm9uZSkKCgpkZWYgZ2V0X2dvb2dsZV9hcGlfY2xpZW50KG1vZHVsZSwgc2VydmljZSwgdXNlcl9hZ2VudF9wcm9kdWN0LCB1c2VyX2FnZW50X3ZlcnNpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVzPU5vbmUsIGFwaV92ZXJzaW9uPSd2MScpOgogICAgIiIiCiAgICBHZXQgdGhlIGRpc2NvdmVyeS1iYXNlZCBweXRob24gY2xpZW50LiBVc2Ugd2hlbiBhIGNsb3VkIGNsaWVudCBpcyBub3QgYXZhaWxhYmxlLgoKICAgIGNsaWVudCA9IGdldF9nb29nbGVfYXBpX2NsaWVudChtb2R1bGUsICdjb21wdXRlJywgdXNlcl9hZ2VudF9wcm9kdWN0PVVTRVJfQUdFTlRfUFJPRFVDVCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyX2FnZW50X3ZlcnNpb249VVNFUl9BR0VOVF9WRVJTSU9OKQoKICAgIDpyZXR1cm5zOiBBIHR1cGxlIGNvbnRhaW5pbmcgdGhlIGF1dGhvcml6ZWQgY2xpZW50IHRvIHRoZSBzcGVjaWZpZWQgc2VydmljZSBhbmQgYQogICAgICAgICAgICAgIHBhcmFtcyBkaWN0IHsnc2VydmljZV9hY2NvdW50X2VtYWlsJzogJy4uLicsICdjcmVkZW50aWFsc19maWxlJzogJy4uLicsICdwcm9qZWN0X2lkJzogLi4ufQogICAgOnJ0eXBlOiBgYHR1cGxlYGAKICAgICIiIgogICAgaWYgbm90IHNjb3BlczoKICAgICAgICBzY29wZXMgPSBHQ1BfREVGQVVMVF9TQ09QRVMKCiAgICBodHRwX2F1dGgsIGNvbm5fcGFyYW1zID0gZ2V0X2dvb2dsZV9hcGlfYXV0aChtb2R1bGUsIHNjb3Blcz1zY29wZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyX2FnZW50X3Byb2R1Y3Q9dXNlcl9hZ2VudF9wcm9kdWN0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9hZ2VudF92ZXJzaW9uPXVzZXJfYWdlbnRfdmVyc2lvbikKICAgIGNsaWVudCA9IGJ1aWxkKHNlcnZpY2UsIGFwaV92ZXJzaW9uLCBodHRwPWh0dHBfYXV0aCkKCiAgICByZXR1cm4gKGNsaWVudCwgY29ubl9wYXJhbXMpCgoKZGVmIGNoZWNrX21pbl9wa2dfdmVyc2lvbihwa2dfbmFtZSwgbWluaW11bV92ZXJzaW9uKToKICAgICIiIk1pbmltdW0gcmVxdWlyZWQgdmVyc2lvbiBpcyA+PSBpbnN0YWxsZWQgdmVyc2lvbi4iIiIKICAgIGZyb20gcGtnX3Jlc291cmNlcyBpbXBvcnQgZ2V0X2Rpc3RyaWJ1dGlvbgogICAgdHJ5OgogICAgICAgIGluc3RhbGxlZF92ZXJzaW9uID0gZ2V0X2Rpc3RyaWJ1dGlvbihwa2dfbmFtZSkudmVyc2lvbgogICAgICAgIHJldHVybiBMb29zZVZlcnNpb24oaW5zdGFsbGVkX3ZlcnNpb24pID49IG1pbmltdW1fdmVyc2lvbgogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHJldHVybiBGYWxzZQoKCmRlZiB1bmV4cGVjdGVkX2Vycm9yX21zZyhlcnJvcik6CiAgICAiIiJDcmVhdGUgYW4gZXJyb3Igc3RyaW5nIGJhc2VkIG9uIHBhc3NlZCBpbiBlcnJvci4iIiIKICAgIHJldHVybiAnVW5leHBlY3RlZCByZXNwb25zZTogKCVzKS4gRGV0YWlsOiAlcycgJSAoc3RyKGVycm9yKSwgdHJhY2ViYWNrLmZvcm1hdF9leGMoKSkKCgpkZWYgZ2V0X3ZhbGlkX2xvY2F0aW9uKG1vZHVsZSwgZHJpdmVyLCBsb2NhdGlvbiwgbG9jYXRpb25fdHlwZT0nem9uZScpOgogICAgaWYgbG9jYXRpb25fdHlwZSA9PSAnem9uZSc6CiAgICAgICAgbCA9IGRyaXZlci5leF9nZXRfem9uZShsb2NhdGlvbikKICAgIGVsc2U6CiAgICAgICAgbCA9IGRyaXZlci5leF9nZXRfcmVnaW9uKGxvY2F0aW9uKQogICAgaWYgbCBpcyBOb25lOgogICAgICAgIGxpbmsgPSAnaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2NvbXB1dGUvZG9jcy9yZWdpb25zLXpvbmVzL3JlZ2lvbnMtem9uZXMjYXZhaWxhYmxlJwogICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSgnJXMgJXMgaXMgaW52YWxpZC4gUGxlYXNlIHNlZSB0aGUgbGlzdCBvZiAnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhdmFpbGFibGUgJXMgYXQgJXMnICUgKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb25fdHlwZSwgbG9jYXRpb24sIGxvY2F0aW9uX3R5cGUsIGxpbmspKSwKICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZWQ9RmFsc2UpCiAgICByZXR1cm4gbAoKCmRlZiBjaGVja19wYXJhbXMocGFyYW1zLCBmaWVsZF9saXN0KToKICAgICIiIgogICAgSGVscGVyIHRvIHZhbGlkYXRlIHBhcmFtcy4KCiAgICBVc2UgdGhpcyBpbiBmdW5jdGlvbiBkZWZpbml0aW9ucyBpZiB0aGV5IHJlcXVpcmUgc3BlY2lmaWMgZmllbGRzCiAgICB0byBiZSBwcmVzZW50LgoKICAgIDpwYXJhbSBwYXJhbXM6IHN0cnVjdHVyZSB0aGF0IGNvbnRhaW5zIHRoZSBmaWVsZHMKICAgIDp0eXBlIHBhcmFtczogYGBkaWN0YGAKCiAgICA6cGFyYW0gZmllbGRfbGlzdDogbGlzdCBvZiBkaWN0IHJlcHJlc2VudGluZyB0aGUgZmllbGRzCiAgICAgICAgICAgICAgICAgICAgICAgW3snbmFtZSc6IHN0ciwgJ3JlcXVpcmVkJzogVHJ1ZS9GYWxzZScsICd0eXBlJzogY2xzfV0KICAgIDp0eXBlIGZpZWxkX2xpc3Q6IGBgbGlzdGBgIG9mIGBgZGljdGBgCgogICAgOnJldHVybiBUcnVlIG9yIHJhaXNlcyBWYWx1ZUVycm9yCiAgICA6cnR5cGU6IGBgYm9vbGBgIG9yIGBjbGFzczpWYWx1ZUVycm9yYAogICAgIiIiCiAgICBmb3IgZCBpbiBmaWVsZF9saXN0OgogICAgICAgIGlmIG5vdCBkWyduYW1lJ10gaW4gcGFyYW1zOgogICAgICAgICAgICBpZiAncmVxdWlyZWQnIGluIGQgYW5kIGRbJ3JlcXVpcmVkJ10gaXMgVHJ1ZToKICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoKCIlcyBpcyByZXF1aXJlZCBhbmQgbXVzdCBiZSBvZiB0eXBlOiAlcyIgJQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGRbJ25hbWUnXSwgc3RyKGRbJ3R5cGUnXSkpKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShwYXJhbXNbZFsnbmFtZSddXSwgZFsndHlwZSddKToKICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoKCIlcyBtdXN0IGJlIG9mIHR5cGU6ICVzLiAlcyAoJXMpIHByb3ZpZGVkLiIgJSAoCiAgICAgICAgICAgICAgICAgICAgZFsnbmFtZSddLCBzdHIoZFsndHlwZSddKSwgcGFyYW1zW2RbJ25hbWUnXV0sCiAgICAgICAgICAgICAgICAgICAgdHlwZShwYXJhbXNbZFsnbmFtZSddXSkpKSkKICAgICAgICAgICAgaWYgJ3ZhbHVlcycgaW4gZDoKICAgICAgICAgICAgICAgIGlmIHBhcmFtc1tkWyduYW1lJ11dIG5vdCBpbiBkWyd2YWx1ZXMnXToKICAgICAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCgiJXMgbXVzdCBiZSBvbmUgb2Y6ICVzIiAlICgKICAgICAgICAgICAgICAgICAgICAgICAgZFsnbmFtZSddLCAnLCcuam9pbihkWyd2YWx1ZXMnXSkpKSkKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShwYXJhbXNbZFsnbmFtZSddXSwgaW50KToKICAgICAgICAgICAgICAgIGlmICdtaW4nIGluIGQ6CiAgICAgICAgICAgICAgICAgICAgaWYgcGFyYW1zW2RbJ25hbWUnXV0gPCBkWydtaW4nXToKICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigoIiVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvOiAlcyIgJSAoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkWyduYW1lJ10sIGRbJ21pbiddKSkpCiAgICAgICAgICAgICAgICBpZiAnbWF4JyBpbiBkOgogICAgICAgICAgICAgICAgICAgIGlmIHBhcmFtc1tkWyduYW1lJ11dID4gZFsnbWF4J106CiAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIiVzIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvOiAlcyIgJSAoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkWyduYW1lJ10sIGRbJ21heCddKSkKICAgIHJldHVybiBUcnVlCgoKY2xhc3MgR0NQVXRpbHMob2JqZWN0KToKICAgICIiIgogICAgSGVscGVyIHV0aWxpdGllcyBmb3IgR0NQLgogICAgIiIiCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIHVuZGVyc2NvcmVfdG9fY2FtZWwodHh0KToKICAgICAgICByZXR1cm4gdHh0LnNwbGl0KCdfJylbMF0gKyAnJy5qb2luKHguY2FwaXRhbGl6ZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciAnXycgZm9yIHggaW4gdHh0LnNwbGl0KCdfJylbMTpdKQoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiByZW1vdmVfbm9uX2djcF9wYXJhbXMocGFyYW1zKToKICAgICAgICAiIiIKICAgICAgICBSZW1vdmUgcGFyYW1zIGlmIGZvdW5kLgogICAgICAgICIiIgogICAgICAgIHBhcmFtc190b19yZW1vdmUgPSBbJ3N0YXRlJ10KICAgICAgICBmb3IgcCBpbiBwYXJhbXNfdG9fcmVtb3ZlOgogICAgICAgICAgICBpZiBwIGluIHBhcmFtczoKICAgICAgICAgICAgICAgIGRlbCBwYXJhbXNbcF0KCiAgICAgICAgcmV0dXJuIHBhcmFtcwoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBwYXJhbXNfdG9fZ2NwX2RpY3QocGFyYW1zLCByZXNvdXJjZV9uYW1lPU5vbmUpOgogICAgICAgICIiIgogICAgICAgIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgYW5zaWJsZSBwYXJhbXMgdG8gR0NQIFBhcmFtcy4KCiAgICAgICAgS2V5cyBhcmUgY29udmVydGVkIGZyb20gc25ha2UgdG8gY2FtZWxDYXNlCiAgICAgICAgZXg6IGRlZmF1bHRfc2VydmljZSB0byBkZWZhdWx0U2VydmljZQoKICAgICAgICBIYW5kbGVzIGxpc3RzLCBkaWN0cyBhbmQgc3RyaW5ncwoKICAgICAgICBzcGVjaWFsIHByb3Zpc2lvbiBmb3IgdGhlIHJlc291cmNlIG5hbWUKICAgICAgICAiIiIKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShwYXJhbXMsIGRpY3QpOgogICAgICAgICAgICByZXR1cm4gcGFyYW1zCiAgICAgICAgZ2NwX2RpY3QgPSB7fQogICAgICAgIHBhcmFtcyA9IEdDUFV0aWxzLnJlbW92ZV9ub25fZ2NwX3BhcmFtcyhwYXJhbXMpCiAgICAgICAgZm9yIGssIHYgaW4gcGFyYW1zLml0ZW1zKCk6CiAgICAgICAgICAgIGdjcF9rZXkgPSBHQ1BVdGlscy51bmRlcnNjb3JlX3RvX2NhbWVsKGspCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UodiwgZGljdCk6CiAgICAgICAgICAgICAgICByZXR2YWwgPSBHQ1BVdGlscy5wYXJhbXNfdG9fZ2NwX2RpY3QodikKICAgICAgICAgICAgICAgIGdjcF9kaWN0W2djcF9rZXldID0gcmV0dmFsCiAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZSh2LCBsaXN0KToKICAgICAgICAgICAgICAgIGdjcF9kaWN0W2djcF9rZXldID0gW0dDUFV0aWxzLnBhcmFtc190b19nY3BfZGljdCh4KSBmb3IgeCBpbiB2XQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaWYgcmVzb3VyY2VfbmFtZSBhbmQgayA9PSByZXNvdXJjZV9uYW1lOgogICAgICAgICAgICAgICAgICAgIGdjcF9kaWN0WyduYW1lJ10gPSB2CiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGdjcF9kaWN0W2djcF9rZXldID0gdgogICAgICAgIHJldHVybiBnY3BfZGljdAoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBleGVjdXRlX2FwaV9jbGllbnRfcmVxKHJlcSwgY2xpZW50PU5vbmUsIHJhdz1UcnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uX3RpbWVvdXQ9MTgwLCBwb2xsX2ludGVydmFsPTUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZV80MDQ9VHJ1ZSk6CiAgICAgICAgIiIiCiAgICAgICAgR2VuZXJhbCBweXRob24gYXBpIGNsaWVudCBpbnRlcmFjdGlvbiBmdW5jdGlvbi4KCiAgICAgICAgRm9yIHVzZSB3aXRoIGdvb2dsZS1hcGktcHl0aG9uLWNsaWVudCwgb3IgY2xpZW50cyBjcmVhdGVkCiAgICAgICAgd2l0aCBnZXRfZ29vZ2xlX2FwaV9jbGllbnQgZnVuY3Rpb24KICAgICAgICBOb3QgZm9yIHVzZSB3aXRoIEdvb2dsZSBDbG91ZCBjbGllbnQgbGlicmFyaWVzCgogICAgICAgIEZvciBsb25nLXJ1bm5pbmcgb3BlcmF0aW9ucywgd2UgbWFrZSBhbiBpbW1lZGlhdGUgcXVlcnkgYW5kIHRoZW4KICAgICAgICBzbGVlcCBwb2xsX2ludGVydmFsIGJlZm9yZSByZS1xdWVyeWluZy4gIEFmdGVyIHRoZSByZXF1ZXN0IGlzIGRvbmUKICAgICAgICB3ZSByZWJ1aWxkIHRoZSByZXF1ZXN0IHdpdGggYSBnZXQgbWV0aG9kIGFuZCByZXR1cm4gdGhlIHJlc3VsdC4KCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXNwID0gcmVxLmV4ZWN1dGUoKQoKICAgICAgICAgICAgaWYgbm90IHJlc3A6CiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgICAgICAgICAgaWYgcmF3OgogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3AKCiAgICAgICAgICAgIGlmIHJlc3BbJ2tpbmQnXSA9PSAnY29tcHV0ZSNvcGVyYXRpb24nOgogICAgICAgICAgICAgICAgcmVzcCA9IEdDUFV0aWxzLmV4ZWN1dGVfYXBpX2NsaWVudF9vcGVyYXRpb25fcmVxKHJlcSwgcmVzcCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uX3RpbWVvdXQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9sbF9pbnRlcnZhbCkKCiAgICAgICAgICAgIGlmICdpdGVtcycgaW4gcmVzcDoKICAgICAgICAgICAgICAgIHJldHVybiByZXNwWydpdGVtcyddCgogICAgICAgICAgICByZXR1cm4gcmVzcAogICAgICAgIGV4Y2VwdCBIdHRwRXJyb3IgYXMgaDoKICAgICAgICAgICAgIyBOb3RlOiA0MDRzIGNhbiBiZSBnZW5lcmF0ZWQgKGluY29ycmVjdGx5KSBmb3IgZGVwZW5kZW50CiAgICAgICAgICAgICMgcmVzb3VyY2VzIG5vdCBleGlzdGluZy4gIFdlIGxldCB0aGUgY2FsbGVyIGRldGVybWluZSBpZgogICAgICAgICAgICAjIHRoZXkgd2FudCA0MDRzIHJhaXNlZCBmb3IgdGhlaXIgaW52b2NhdGlvbi4KICAgICAgICAgICAgaWYgaC5yZXNwLnN0YXR1cyA9PSA0MDQgYW5kIG5vdCByYWlzZV80MDQ6CiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmFpc2UKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICByYWlzZQoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBleGVjdXRlX2FwaV9jbGllbnRfb3BlcmF0aW9uX3JlcShvcmlnX3JlcSwgb3BfcmVzcCwgY2xpZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbl90aW1lb3V0PTE4MCwgcG9sbF9pbnRlcnZhbD01KToKICAgICAgICAiIiIKICAgICAgICBQb2xsIGFuIG9wZXJhdGlvbiBmb3IgYSByZXN1bHQuCiAgICAgICAgIiIiCiAgICAgICAgcGFyc2VkX3VybCA9IEdDUFV0aWxzLnBhcnNlX2djcF91cmwob3JpZ19yZXEudXJpKQogICAgICAgIHByb2plY3RfaWQgPSBwYXJzZWRfdXJsWydwcm9qZWN0J10KICAgICAgICByZXNvdXJjZV9uYW1lID0gR0NQVXRpbHMuZ2V0X2djcF9yZXNvdXJjZV9mcm9tX21ldGhvZElkKAogICAgICAgICAgICBvcmlnX3JlcS5tZXRob2RJZCkKICAgICAgICByZXNvdXJjZSA9IEdDUFV0aWxzLmJ1aWxkX3Jlc291cmNlX2Zyb21fbmFtZShjbGllbnQsIHJlc291cmNlX25hbWUpCgogICAgICAgIHN0YXJ0X3RpbWUgPSB0aW1lLnRpbWUoKQoKICAgICAgICBjb21wbGV0ZSA9IEZhbHNlCiAgICAgICAgYXR0ZW1wdHMgPSAxCiAgICAgICAgd2hpbGUgbm90IGNvbXBsZXRlOgogICAgICAgICAgICBpZiBzdGFydF90aW1lICsgb3BlcmF0aW9uX3RpbWVvdXQgPj0gdGltZS50aW1lKCk6CiAgICAgICAgICAgICAgICBvcF9yZXEgPSBjbGllbnQuZ2xvYmFsT3BlcmF0aW9ucygpLmdldCgKICAgICAgICAgICAgICAgICAgICBwcm9qZWN0PXByb2plY3RfaWQsIG9wZXJhdGlvbj1vcF9yZXNwWyduYW1lJ10pCiAgICAgICAgICAgICAgICBvcF9yZXNwID0gb3BfcmVxLmV4ZWN1dGUoKQogICAgICAgICAgICAgICAgaWYgb3BfcmVzcFsnc3RhdHVzJ10gIT0gJ0RPTkUnOgogICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAocG9sbF9pbnRlcnZhbCkKICAgICAgICAgICAgICAgICAgICBhdHRlbXB0cyArPSAxCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgIGlmIG9wX3Jlc3BbJ29wZXJhdGlvblR5cGUnXSA9PSAnZGVsZXRlJzoKICAgICAgICAgICAgICAgICAgICAgICAgIyBkb24ndCB3YWl0IGZvciB0aGUgZGVsZXRlCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICAgICAgZWxpZiBvcF9yZXNwWydvcGVyYXRpb25UeXBlJ10gaW4gWydpbnNlcnQnLCAndXBkYXRlJywgJ3BhdGNoJ106CiAgICAgICAgICAgICAgICAgICAgICAgICMgVE9ETyhzdXBlcnRvbSk6IElzb2xhdGUgJ2J1aWxkLW5ldy1yZXF1ZXN0JyBzdHVmZi4KICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VfbmFtZV9zaW5ndWxhciA9IEdDUFV0aWxzLmdldF9lbnRpdHlfbmFtZV9mcm9tX3Jlc291cmNlX25hbWUoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZV9uYW1lKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBvcF9yZXNwWydvcGVyYXRpb25UeXBlJ10gPT0gJ2luc2VydCcgb3Igbm90ICdlbnRpdHlfbmFtZScgaW4gcGFyc2VkX3VybDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZF91cmxbJ2VudGl0eV9uYW1lJ10gPSBHQ1BVdGlscy5wYXJzZV9nY3BfdXJsKG9wX3Jlc3BbJ3RhcmdldExpbmsnXSlbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VudGl0eV9uYW1lJ10KICAgICAgICAgICAgICAgICAgICAgICAgYXJncyA9IHsncHJvamVjdCc6IHByb2plY3RfaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VfbmFtZV9zaW5ndWxhcjogcGFyc2VkX3VybFsnZW50aXR5X25hbWUnXX0KICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3JlcSA9IHJlc291cmNlLmdldCgqKmFyZ3MpCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBuZXdfcmVxLmV4ZWN1dGUoKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcAogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICMgYXNzdW1pbmcgbXVsdGlwbGUgZW50aXRpZXMsIGRvIGEgbGlzdCBjYWxsLgogICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVxID0gcmVzb3VyY2UubGlzdChwcm9qZWN0PXByb2plY3RfaWQpCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBuZXdfcmVxLmV4ZWN1dGUoKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBvcGVyYXRpb24gZGlkbid0IGNvbXBsZXRlIG9uIHRpbWUuCiAgICAgICAgICAgICAgICByYWlzZSBHQ1BPcGVyYXRpb25UaW1lb3V0RXJyb3IoIk9wZXJhdGlvbiB0aW1lZCBvdXQ6ICVzIiAlICgKICAgICAgICAgICAgICAgICAgICBvcF9yZXNwWyd0YXJnZXRMaW5rJ10pKQoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBidWlsZF9yZXNvdXJjZV9mcm9tX25hbWUoY2xpZW50LCByZXNvdXJjZV9uYW1lKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1ldGhvZCA9IGdldGF0dHIoY2xpZW50LCByZXNvdXJjZV9uYW1lKQogICAgICAgICAgICByZXR1cm4gbWV0aG9kKCkKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoJyVzIGlzIG5vdCBhbiBhdHRyaWJ1dGUgb2YgJXMnICUgKHJlc291cmNlX25hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudCkpCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGdldF9nY3BfcmVzb3VyY2VfZnJvbV9tZXRob2RJZChtZXRob2RJZCk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBwYXJ0cyA9IG1ldGhvZElkLnNwbGl0KCcuJykKICAgICAgICAgICAgaWYgbGVuKHBhcnRzKSAhPSAzOgogICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiBwYXJ0c1sxXQogICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIE5vbmUKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgZ2V0X2VudGl0eV9uYW1lX2Zyb21fcmVzb3VyY2VfbmFtZShyZXNvdXJjZV9uYW1lKToKICAgICAgICBpZiBub3QgcmVzb3VyY2VfbmFtZToKICAgICAgICAgICAgcmV0dXJuIE5vbmUKCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIENob3Agb2ZmIGdsb2JhbCBvciByZWdpb24gcHJlZml4ZXMKICAgICAgICAgICAgaWYgcmVzb3VyY2VfbmFtZS5zdGFydHN3aXRoKCdnbG9iYWwnKToKICAgICAgICAgICAgICAgIHJlc291cmNlX25hbWUgPSByZXNvdXJjZV9uYW1lLnJlcGxhY2UoJ2dsb2JhbCcsICcnKQogICAgICAgICAgICBlbGlmIHJlc291cmNlX25hbWUuc3RhcnRzd2l0aCgncmVnaW9uYWwnKToKICAgICAgICAgICAgICAgIHJlc291cmNlX25hbWUgPSByZXNvdXJjZV9uYW1lLnJlcGxhY2UoJ3JlZ2lvbicsICcnKQoKICAgICAgICAgICAgIyBlbnN1cmUgd2UgaGF2ZSBhIGxvd2VyIGNhc2UgZmlyc3QgbGV0dGVyCiAgICAgICAgICAgIHJlc291cmNlX25hbWUgPSByZXNvdXJjZV9uYW1lWzBdLmxvd2VyKCkgKyByZXNvdXJjZV9uYW1lWzE6XQoKICAgICAgICAgICAgaWYgcmVzb3VyY2VfbmFtZVstMzpdID09ICdpZXMnOgogICAgICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlX25hbWUucmVwbGFjZSgKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZV9uYW1lWy0zOl0sICd5JykKICAgICAgICAgICAgaWYgcmVzb3VyY2VfbmFtZVstMV0gPT0gJ3MnOgogICAgICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlX25hbWVbOi0xXQoKICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlX25hbWUKCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBwYXJzZV9nY3BfdXJsKHVybCk6CiAgICAgICAgIiIiCiAgICAgICAgUGFyc2UgR0NQIHVybHMgYW5kIHJldHVybiBkaWN0IG9mIHBhcnRzLgoKICAgICAgICBTdXBwb3J0ZWQgVVJMIHN0cnVjdHVyZXM6CiAgICAgICAgL1NFUlZJQ0UvVkVSU0lPTi8ncHJvamVjdHMnL1BST0pFQ1RfSUQvUkVTT1VSQ0UKICAgICAgICAvU0VSVklDRS9WRVJTSU9OLydwcm9qZWN0cycvUFJPSkVDVF9JRC9SRVNPVVJDRS9FTlRJVFlfTkFNRQogICAgICAgIC9TRVJWSUNFL1ZFUlNJT04vJ3Byb2plY3RzJy9QUk9KRUNUX0lEL1JFU09VUkNFL0VOVElUWV9OQU1FL01FVEhPRF9OQU1FCiAgICAgICAgL1NFUlZJQ0UvVkVSU0lPTi8ncHJvamVjdHMnL1BST0pFQ1RfSUQvJ2dsb2JhbCcvUkVTT1VSQ0UKICAgICAgICAvU0VSVklDRS9WRVJTSU9OLydwcm9qZWN0cycvUFJPSkVDVF9JRC8nZ2xvYmFsJy9SRVNPVVJDRS9FTlRJVFlfTkFNRQogICAgICAgIC9TRVJWSUNFL1ZFUlNJT04vJ3Byb2plY3RzJy9QUk9KRUNUX0lELydnbG9iYWwnL1JFU09VUkNFL0VOVElUWV9OQU1FL01FVEhPRF9OQU1FCiAgICAgICAgL1NFUlZJQ0UvVkVSU0lPTi8ncHJvamVjdHMnL1BST0pFQ1RfSUQvTE9DQVRJT05fVFlQRS9MT0NBVElPTi9SRVNPVVJDRQogICAgICAgIC9TRVJWSUNFL1ZFUlNJT04vJ3Byb2plY3RzJy9QUk9KRUNUX0lEL0xPQ0FUSU9OX1RZUEUvTE9DQVRJT04vUkVTT1VSQ0UvRU5USVRZX05BTUUKICAgICAgICAvU0VSVklDRS9WRVJTSU9OLydwcm9qZWN0cycvUFJPSkVDVF9JRC9MT0NBVElPTl9UWVBFL0xPQ0FUSU9OL1JFU09VUkNFL0VOVElUWV9OQU1FL01FVEhPRF9OQU1FCgogICAgICAgIDpwYXJhbSB1cmw6IEdDUC1nZW5lcmF0ZWQgVVJMLCBzdWNoIGFzIGEgc2VsZmxpbmsgb3IgcmVzb3VyY2UgbG9jYXRpb24uCiAgICAgICAgOnR5cGUgdXJsOiBgYHN0cmBgCgogICAgICAgIDpyZXR1cm46IGRpY3Rpb25hcnkgb2YgcGFydHMuIEluY2x1ZGVzIHN0YW5hcmQgY29tcG9uZW50cyBvZiB1cmxwYXJzZSwgcGx1cwogICAgICAgICAgICAgICAgIEdDUC1zcGVjaWZpYyAnc2VydmljZScsICdhcGlfdmVyc2lvbicsICdwcm9qZWN0JyBhbmQKICAgICAgICAgICAgICAgICAncmVzb3VyY2VfbmFtZScga2V5cy4gT3B0aW9uYWxseSwgJ3pvbmUnLCAncmVnaW9uJywgJ2VudGl0eV9uYW1lJwogICAgICAgICAgICAgICAgIGFuZCAnbWV0aG9kX25hbWUnLCBpZiBhcHBsaWNhYmxlLgogICAgICAgIDpydHlwZTogYGBkaWN0YGAKICAgICAgICAiIiIKCiAgICAgICAgcCA9IHVybHBhcnNlLnVybHBhcnNlKHVybCkKICAgICAgICBpZiBub3QgcDoKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIHdlIGFkZCBleHRyYSBpdGVtcyBzdWNoIGFzCiAgICAgICAgICAgICMgem9uZSwgcmVnaW9uIGFuZCByZXNvdXJjZV9uYW1lCiAgICAgICAgICAgIHVybF9wYXJ0cyA9IHt9CiAgICAgICAgICAgIHVybF9wYXJ0c1snc2NoZW1lJ10gPSBwLnNjaGVtZQogICAgICAgICAgICB1cmxfcGFydHNbJ2hvc3QnXSA9IHAubmV0bG9jCiAgICAgICAgICAgIHVybF9wYXJ0c1sncGF0aCddID0gcC5wYXRoCiAgICAgICAgICAgIGlmIHAucGF0aC5maW5kKCcvJykgPT0gMDoKICAgICAgICAgICAgICAgIHVybF9wYXJ0c1sncGF0aCddID0gcC5wYXRoWzE6XQogICAgICAgICAgICB1cmxfcGFydHNbJ3BhcmFtcyddID0gcC5wYXJhbXMKICAgICAgICAgICAgdXJsX3BhcnRzWydmcmFnbWVudCddID0gcC5mcmFnbWVudAogICAgICAgICAgICB1cmxfcGFydHNbJ3F1ZXJ5J10gPSBwLnF1ZXJ5CiAgICAgICAgICAgIHVybF9wYXJ0c1sncHJvamVjdCddID0gTm9uZQogICAgICAgICAgICB1cmxfcGFydHNbJ3NlcnZpY2UnXSA9IE5vbmUKICAgICAgICAgICAgdXJsX3BhcnRzWydhcGlfdmVyc2lvbiddID0gTm9uZQoKICAgICAgICAgICAgcGF0aF9wYXJ0cyA9IHVybF9wYXJ0c1sncGF0aCddLnNwbGl0KCcvJykKICAgICAgICAgICAgdXJsX3BhcnRzWydzZXJ2aWNlJ10gPSBwYXRoX3BhcnRzWzBdCiAgICAgICAgICAgIHVybF9wYXJ0c1snYXBpX3ZlcnNpb24nXSA9IHBhdGhfcGFydHNbMV0KICAgICAgICAgICAgaWYgcGF0aF9wYXJ0c1syXSA9PSAncHJvamVjdHMnOgogICAgICAgICAgICAgICAgdXJsX3BhcnRzWydwcm9qZWN0J10gPSBwYXRoX3BhcnRzWzNdCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIGludmFsaWQgVVJMCiAgICAgICAgICAgICAgICByYWlzZSBHQ1BJbnZhbGlkVVJMRXJyb3IoJ3VuYWJsZSB0byBwYXJzZTogJXMnICUgdXJsKQoKICAgICAgICAgICAgaWYgJ2dsb2JhbCcgaW4gcGF0aF9wYXJ0czoKICAgICAgICAgICAgICAgIHVybF9wYXJ0c1snZ2xvYmFsJ10gPSBUcnVlCiAgICAgICAgICAgICAgICBpZHggPSBwYXRoX3BhcnRzLmluZGV4KCdnbG9iYWwnKQogICAgICAgICAgICAgICAgaWYgbGVuKHBhdGhfcGFydHMpIC0gaWR4ID09IDQ6CiAgICAgICAgICAgICAgICAgICAgIyB3ZSBoYXZlIGEgcmVzb3VyY2UsIGVudGl0eSBhbmQgbWV0aG9kX25hbWUKICAgICAgICAgICAgICAgICAgICB1cmxfcGFydHNbJ3Jlc291cmNlX25hbWUnXSA9IHBhdGhfcGFydHNbaWR4ICsgMV0KICAgICAgICAgICAgICAgICAgICB1cmxfcGFydHNbJ2VudGl0eV9uYW1lJ10gPSBwYXRoX3BhcnRzW2lkeCArIDJdCiAgICAgICAgICAgICAgICAgICAgdXJsX3BhcnRzWydtZXRob2RfbmFtZSddID0gcGF0aF9wYXJ0c1tpZHggKyAzXQoKICAgICAgICAgICAgICAgIGlmIGxlbihwYXRoX3BhcnRzKSAtIGlkeCA9PSAzOgogICAgICAgICAgICAgICAgICAgICMgd2UgaGF2ZSBhIHJlc291cmNlIGFuZCBlbnRpdHkKICAgICAgICAgICAgICAgICAgICB1cmxfcGFydHNbJ3Jlc291cmNlX25hbWUnXSA9IHBhdGhfcGFydHNbaWR4ICsgMV0KICAgICAgICAgICAgICAgICAgICB1cmxfcGFydHNbJ2VudGl0eV9uYW1lJ10gPSBwYXRoX3BhcnRzW2lkeCArIDJdCgogICAgICAgICAgICAgICAgaWYgbGVuKHBhdGhfcGFydHMpIC0gaWR4ID09IDI6CiAgICAgICAgICAgICAgICAgICAgdXJsX3BhcnRzWydyZXNvdXJjZV9uYW1lJ10gPSBwYXRoX3BhcnRzW2lkeCArIDFdCgogICAgICAgICAgICAgICAgaWYgbGVuKHBhdGhfcGFydHMpIC0gaWR4IDwgMjoKICAgICAgICAgICAgICAgICAgICAjIGludmFsaWQgVVJMCiAgICAgICAgICAgICAgICAgICAgcmFpc2UgR0NQSW52YWxpZFVSTEVycm9yKCd1bmFibGUgdG8gcGFyc2U6ICVzJyAlIHVybCkKCiAgICAgICAgICAgIGVsaWYgJ3JlZ2lvbnMnIGluIHBhdGhfcGFydHMgb3IgJ3pvbmVzJyBpbiBwYXRoX3BhcnRzOgogICAgICAgICAgICAgICAgaWR4ID0gLTEKICAgICAgICAgICAgICAgIGlmICdyZWdpb25zJyBpbiBwYXRoX3BhcnRzOgogICAgICAgICAgICAgICAgICAgIGlkeCA9IHBhdGhfcGFydHMuaW5kZXgoJ3JlZ2lvbnMnKQogICAgICAgICAgICAgICAgICAgIHVybF9wYXJ0c1sncmVnaW9uJ10gPSBwYXRoX3BhcnRzW2lkeCArIDFdCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGlkeCA9IHBhdGhfcGFydHMuaW5kZXgoJ3pvbmVzJykKICAgICAgICAgICAgICAgICAgICB1cmxfcGFydHNbJ3pvbmUnXSA9IHBhdGhfcGFydHNbaWR4ICsgMV0KCiAgICAgICAgICAgICAgICBpZiBsZW4ocGF0aF9wYXJ0cykgLSBpZHggPT0gNToKICAgICAgICAgICAgICAgICAgICAjIHdlIGhhdmUgYSByZXNvdXJjZSwgZW50aXR5IGFuZCBtZXRob2RfbmFtZQogICAgICAgICAgICAgICAgICAgIHVybF9wYXJ0c1sncmVzb3VyY2VfbmFtZSddID0gcGF0aF9wYXJ0c1tpZHggKyAyXQogICAgICAgICAgICAgICAgICAgIHVybF9wYXJ0c1snZW50aXR5X25hbWUnXSA9IHBhdGhfcGFydHNbaWR4ICsgM10KICAgICAgICAgICAgICAgICAgICB1cmxfcGFydHNbJ21ldGhvZF9uYW1lJ10gPSBwYXRoX3BhcnRzW2lkeCArIDRdCgogICAgICAgICAgICAgICAgaWYgbGVuKHBhdGhfcGFydHMpIC0gaWR4ID09IDQ6CiAgICAgICAgICAgICAgICAgICAgIyB3ZSBoYXZlIGEgcmVzb3VyY2UgYW5kIGVudGl0eQogICAgICAgICAgICAgICAgICAgIHVybF9wYXJ0c1sncmVzb3VyY2VfbmFtZSddID0gcGF0aF9wYXJ0c1tpZHggKyAyXQogICAgICAgICAgICAgICAgICAgIHVybF9wYXJ0c1snZW50aXR5X25hbWUnXSA9IHBhdGhfcGFydHNbaWR4ICsgM10KCiAgICAgICAgICAgICAgICBpZiBsZW4ocGF0aF9wYXJ0cykgLSBpZHggPT0gMzoKICAgICAgICAgICAgICAgICAgICB1cmxfcGFydHNbJ3Jlc291cmNlX25hbWUnXSA9IHBhdGhfcGFydHNbaWR4ICsgMl0KCiAgICAgICAgICAgICAgICBpZiBsZW4ocGF0aF9wYXJ0cykgLSBpZHggPCAzOgogICAgICAgICAgICAgICAgICAgICMgaW52YWxpZCBVUkwKICAgICAgICAgICAgICAgICAgICByYWlzZSBHQ1BJbnZhbGlkVVJMRXJyb3IoJ3VuYWJsZSB0byBwYXJzZTogJXMnICUgdXJsKQoKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgbm8gbG9jYXRpb24gaW4gVVJMLgogICAgICAgICAgICAgICAgaWR4ID0gcGF0aF9wYXJ0cy5pbmRleCgncHJvamVjdHMnKQogICAgICAgICAgICAgICAgaWYgbGVuKHBhdGhfcGFydHMpIC0gaWR4ID09IDU6CiAgICAgICAgICAgICAgICAgICAgIyB3ZSBoYXZlIGEgcmVzb3VyY2UsIGVudGl0eSBhbmQgbWV0aG9kX25hbWUKICAgICAgICAgICAgICAgICAgICB1cmxfcGFydHNbJ3Jlc291cmNlX25hbWUnXSA9IHBhdGhfcGFydHNbaWR4ICsgMl0KICAgICAgICAgICAgICAgICAgICB1cmxfcGFydHNbJ2VudGl0eV9uYW1lJ10gPSBwYXRoX3BhcnRzW2lkeCArIDNdCiAgICAgICAgICAgICAgICAgICAgdXJsX3BhcnRzWydtZXRob2RfbmFtZSddID0gcGF0aF9wYXJ0c1tpZHggKyA0XQoKICAgICAgICAgICAgICAgIGlmIGxlbihwYXRoX3BhcnRzKSAtIGlkeCA9PSA0OgogICAgICAgICAgICAgICAgICAgICMgd2UgaGF2ZSBhIHJlc291cmNlIGFuZCBlbnRpdHkKICAgICAgICAgICAgICAgICAgICB1cmxfcGFydHNbJ3Jlc291cmNlX25hbWUnXSA9IHBhdGhfcGFydHNbaWR4ICsgMl0KICAgICAgICAgICAgICAgICAgICB1cmxfcGFydHNbJ2VudGl0eV9uYW1lJ10gPSBwYXRoX3BhcnRzW2lkeCArIDNdCgogICAgICAgICAgICAgICAgaWYgbGVuKHBhdGhfcGFydHMpIC0gaWR4ID09IDM6CiAgICAgICAgICAgICAgICAgICAgdXJsX3BhcnRzWydyZXNvdXJjZV9uYW1lJ10gPSBwYXRoX3BhcnRzW2lkeCArIDJdCgogICAgICAgICAgICAgICAgaWYgbGVuKHBhdGhfcGFydHMpIC0gaWR4IDwgMzoKICAgICAgICAgICAgICAgICAgICAjIGludmFsaWQgVVJMCiAgICAgICAgICAgICAgICAgICAgcmFpc2UgR0NQSW52YWxpZFVSTEVycm9yKCd1bmFibGUgdG8gcGFyc2U6ICVzJyAlIHVybCkKCiAgICAgICAgICAgIHJldHVybiB1cmxfcGFydHMKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgYnVpbGRfZ29vZ2xlYXBpX3VybChwcm9qZWN0LCBhcGlfdmVyc2lvbj0ndjEnLCBzZXJ2aWNlPSdjb21wdXRlJyk6CiAgICAgICAgcmV0dXJuICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS8lcy8lcy9wcm9qZWN0cy8lcycgJSAoc2VydmljZSwgYXBpX3ZlcnNpb24sIHByb2plY3QpCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGZpbHRlcl9nY3BfZmllbGRzKHBhcmFtcywgZXhjbHVkZWRfZmllbGRzPU5vbmUpOgogICAgICAgIG5ld19wYXJhbXMgPSB7fQogICAgICAgIGlmIG5vdCBleGNsdWRlZF9maWVsZHM6CiAgICAgICAgICAgIGV4Y2x1ZGVkX2ZpZWxkcyA9IFsnY3JlYXRpb25UaW1lc3RhbXAnLCAnaWQnLCAna2luZCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2VsZkxpbmsnLCAnZmluZ2VycHJpbnQnLCAnZGVzY3JpcHRpb24nXQoKICAgICAgICBpZiBpc2luc3RhbmNlKHBhcmFtcywgbGlzdCk6CiAgICAgICAgICAgIG5ld19wYXJhbXMgPSBbR0NQVXRpbHMuZmlsdGVyX2djcF9maWVsZHMoCiAgICAgICAgICAgICAgICB4LCBleGNsdWRlZF9maWVsZHMpIGZvciB4IGluIHBhcmFtc10KICAgICAgICBlbGlmIGlzaW5zdGFuY2UocGFyYW1zLCBkaWN0KToKICAgICAgICAgICAgZm9yIGsgaW4gcGFyYW1zLmtleXMoKToKICAgICAgICAgICAgICAgIGlmIGsgbm90IGluIGV4Y2x1ZGVkX2ZpZWxkczoKICAgICAgICAgICAgICAgICAgICBuZXdfcGFyYW1zW2tdID0gR0NQVXRpbHMuZmlsdGVyX2djcF9maWVsZHMoCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1trXSwgZXhjbHVkZWRfZmllbGRzKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG5ld19wYXJhbXMgPSBwYXJhbXMKCiAgICAgICAgcmV0dXJuIG5ld19wYXJhbXMKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgYXJlX3BhcmFtc19lcXVhbChwMSwgcDIpOgogICAgICAgICIiIgogICAgICAgIENoZWNrIGlmIHR3byBwYXJhbXMgZGljdHMgYXJlIGVxdWFsLgogICAgICAgIFRPRE8oc3VwZXJ0b20pOiBuZWVkIGEgd2F5IHRvIGZpbHRlciBvdXQgVVJMcywgb3IgdGhleSBuZWVkIHRvIGJlIGJ1aWx0CiAgICAgICAgIiIiCiAgICAgICAgZmlsdGVyZWRfcDEgPSBHQ1BVdGlscy5maWx0ZXJfZ2NwX2ZpZWxkcyhwMSkKICAgICAgICBmaWx0ZXJlZF9wMiA9IEdDUFV0aWxzLmZpbHRlcl9nY3BfZmllbGRzKHAyKQogICAgICAgIGlmIGZpbHRlcmVkX3AxICE9IGZpbHRlcmVkX3AyOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICByZXR1cm4gVHJ1ZQoKCmNsYXNzIEdDUEVycm9yKEV4Y2VwdGlvbik6CiAgICBwYXNzCgoKY2xhc3MgR0NQT3BlcmF0aW9uVGltZW91dEVycm9yKEdDUEVycm9yKToKICAgIHBhc3MKCgpjbGFzcyBHQ1BJbnZhbGlkVVJMRXJyb3IoR0NQRXJyb3IpOgogICAgcGFzcwpQSwMEFAAAAAAAALwrS1weCS3nCQAA5wkAABsAAABhbnNpYmxlL21vZHVsZV91dGlscy9nY2UucHkjIFRoaXMgY29kZSBpcyBwYXJ0IG9mIEFuc2libGUsIGJ1dCBpcyBhbiBpbmRlcGVuZGVudCBjb21wb25lbnQuCiMgVGhpcyBwYXJ0aWN1bGFyIGZpbGUgc25pcHBldCwgYW5kIHRoaXMgZmlsZSBzbmlwcGV0IG9ubHksIGlzIEJTRCBsaWNlbnNlZC4KIyBNb2R1bGVzIHlvdSB3cml0ZSB1c2luZyB0aGlzIHNuaXBwZXQsIHdoaWNoIGlzIGVtYmVkZGVkIGR5bmFtaWNhbGx5IGJ5IEFuc2libGUKIyBzdGlsbCBiZWxvbmcgdG8gdGhlIGF1dGhvciBvZiB0aGUgbW9kdWxlLCBhbmQgbWF5IGFzc2lnbiB0aGVpciBvd24gbGljZW5zZQojIHRvIHRoZSBjb21wbGV0ZSB3b3JrLgojCiMgQ29weXJpZ2h0IChjKSwgRnJhbmNrIEN1bnkgPGZyYW5jay5jdW55QGdtYWlsLmNvbT4sIDIwMTQKIyBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwKIyBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6CiMKIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0CiMgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuCiMgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsCiMgICAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uCiMgICAgICBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KIwojIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTIElTIiBBTkQKIyBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRAojIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4KIyBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwKIyBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sCiMgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTCiMgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVAojIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRQojIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgojCgpmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLmdjcCBpbXBvcnQgZ2NwX2Nvbm5lY3QKZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5nY3AgaW1wb3J0IHVuZXhwZWN0ZWRfZXJyb3JfbXNnIGFzIGdjcF9lcnJvcgoKdHJ5OgogICAgZnJvbSBsaWJjbG91ZC5jb21wdXRlLnR5cGVzIGltcG9ydCBQcm92aWRlcgogICAgZnJvbSBsaWJjbG91ZC5jb21wdXRlLnByb3ZpZGVycyBpbXBvcnQgZ2V0X2RyaXZlcgogICAgSEFTX0xJQkNMT1VEX0JBU0UgPSBUcnVlCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIEhBU19MSUJDTE9VRF9CQVNFID0gRmFsc2UKClVTRVJfQUdFTlRfUFJPRFVDVCA9ICJBbnNpYmxlLWdjZSIKVVNFUl9BR0VOVF9WRVJTSU9OID0gInYxIgoKZGVmIGdjZV9jb25uZWN0KG1vZHVsZSwgcHJvdmlkZXI9Tm9uZSk6CiAgICAiIiJSZXR1cm4gYSBHQ1AgY29ubmVjdGlvbiBmb3IgR29vZ2xlIENvbXB1dGUgRW5naW5lLiIiIgogICAgaWYgbm90IEhBU19MSUJDTE9VRF9CQVNFOgogICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSdsaWJjbG91ZCBtdXN0IGJlIGluc3RhbGxlZCB0byB1c2UgdGhpcyBtb2R1bGUnKQogICAgcHJvdmlkZXIgPSBwcm92aWRlciBvciBQcm92aWRlci5HQ0UKCiAgICByZXR1cm4gZ2NwX2Nvbm5lY3QobW9kdWxlLCBwcm92aWRlciwgZ2V0X2RyaXZlciwgVVNFUl9BR0VOVF9QUk9EVUNULCBVU0VSX0FHRU5UX1ZFUlNJT04pCgpkZWYgdW5leHBlY3RlZF9lcnJvcl9tc2coZXJyb3IpOgogICAgIiIiQ3JlYXRlIGFuIGVycm9yIHN0cmluZyBiYXNlZCBvbiBwYXNzZWQgaW4gZXJyb3IuIiIiCiAgICByZXR1cm4gZ2NwX2Vycm9yKGVycm9yKQpQSwMEFAAAAAAAALwrS7XYBAYlMAAAJTAAAB0AAABhbnNpYmxlL21vZHVsZV91dGlscy9fdGV4dC5weSMgVGhpcyBjb2RlIGlzIHBhcnQgb2YgQW5zaWJsZSwgYnV0IGlzIGFuIGluZGVwZW5kZW50IGNvbXBvbmVudC4KIyBUaGlzIHBhcnRpY3VsYXIgZmlsZSBzbmlwcGV0LCBhbmQgdGhpcyBmaWxlIHNuaXBwZXQgb25seSwgaXMgQlNEIGxpY2Vuc2VkLgojIE1vZHVsZXMgeW91IHdyaXRlIHVzaW5nIHRoaXMgc25pcHBldCwgd2hpY2ggaXMgZW1iZWRkZWQgZHluYW1pY2FsbHkgYnkgQW5zaWJsZQojIHN0aWxsIGJlbG9uZyB0byB0aGUgYXV0aG9yIG9mIHRoZSBtb2R1bGUsIGFuZCBtYXkgYXNzaWduIHRoZWlyIG93biBsaWNlbnNlCiMgdG8gdGhlIGNvbXBsZXRlIHdvcmsuCiMKIyBDb3B5cmlnaHQgKGMpLCBUb3NoaW8gS3VyYXRvbWkgPGEuYmFkZ2VyQGdtYWlsLmNvbT4sIDIwMTYKIwojIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sCiMgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OgojCiMgICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodAojICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLgojICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLAojICAgICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbgojICAgICAgYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uCiMKIyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTICJBUyBJUyIgQU5ECiMgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQKIyBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuCiMgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsCiMgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLAojIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUwojIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QKIyBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUKIyBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS4KIwoKIiIiCi4uIHdhcm46OiBUaGlzIG1vZHVsZV91dGlsIGlzIGN1cnJlbnRseSBpbnRlcm5hbCBpbXBsZW1lbnRhdGlvbi4KICAgIFdlIHdhbnQgdG8gZXZhbHVhdGUgdGhpcyBjb2RlIGZvciBzdGFiaWxpdHkgYW5kIEFQSSBzdWl0YWJpbGl0eSBiZWZvcmUKICAgIG1ha2luZyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzLiAgVGhlIEFQSSBtYXkgY2hhbmdlIGJldHdlZW4KICAgIHJlbGVhc2VzLiAgRG8gbm90IHVzZSB0aGlzIHVubGVzcyB5b3UgYXJlIHdpbGxpbmcgdG8gcG9ydCB5b3VyIG1vZHVsZSBjb2RlLgoiIiIKaW1wb3J0IGNvZGVjcwoKZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5zaXggaW1wb3J0IFBZMywgdGV4dF90eXBlLCBiaW5hcnlfdHlwZQoKCnRyeToKICAgIGNvZGVjcy5sb29rdXBfZXJyb3IoJ3N1cnJvZ2F0ZWVzY2FwZScpCiAgICBIQVNfU1VSUk9HQVRFRVNDQVBFID0gVHJ1ZQpleGNlcHQgTG9va3VwRXJyb3I6CiAgICBIQVNfU1VSUk9HQVRFRVNDQVBFID0gRmFsc2UKCgpfQ09NUE9TRURfRVJST1JfSEFORExFUlMgPSBmcm96ZW5zZXQoKE5vbmUsICdzdXJyb2dhdGVfb3JfZXNjYXBlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdXJyb2dhdGVfb3Jfc3RyaWN0JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdXJyb2dhdGVfdGhlbl9yZXBsYWNlJykpCgoKZGVmIHRvX2J5dGVzKG9iaiwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPU5vbmUsIG5vbnN0cmluZz0nc2ltcGxlcmVwcicpOgogICAgIiIiTWFrZSBzdXJlIHRoYXQgYSBzdHJpbmcgaXMgYSBieXRlIHN0cmluZwoKICAgIDphcmcgb2JqOiBBbiBvYmplY3QgdG8gbWFrZSBzdXJlIGlzIGEgYnl0ZSBzdHJpbmcuICBJbiBtb3N0IGNhc2VzIHRoaXMKICAgICAgICB3aWxsIGJlIGVpdGhlciBhIHRleHQgc3RyaW5nIG9yIGEgYnl0ZSBzdHJpbmcuICBIb3dldmVyLCB3aXRoCiAgICAgICAgYGBub25zdHJpbmc9J3NpbXBsZXJlcHInYGAsIHRoaXMgY2FuIGJlIHVzZWQgYXMgYSB0cmFjZWJhY2stZnJlZQogICAgICAgIHZlcnNpb24gb2YgYGBzdHIob2JqKWBgLgogICAgOmt3YXJnIGVuY29kaW5nOiBUaGUgZW5jb2RpbmcgdG8gdXNlIHRvIHRyYW5zZm9ybSBmcm9tIGEgdGV4dCBzdHJpbmcgdG8KICAgICAgICBhIGJ5dGUgc3RyaW5nLiAgRGVmYXVsdHMgdG8gdXNpbmcgJ3V0Zi04Jy4KICAgIDprd2FyZyBlcnJvcnM6IFRoZSBlcnJvciBoYW5kbGVyIHRvIHVzZSBpZiB0aGUgdGV4dCBzdHJpbmcgaXMgbm90CiAgICAgICAgZW5jb2RhYmxlIHVzaW5nIHRoZSBzcGVjaWZpZWQgZW5jb2RpbmcuICBBbnkgdmFsaWQgYGNvZGVjcyBlcnJvcgogICAgICAgIGhhbmRsZXIgPGh0dHBzOi8vZG9jcy5weXRob24ub3JnLzIvbGlicmFyeS9jb2RlY3MuaHRtbCNjb2RlYy1iYXNlLWNsYXNzZXM+YF8KICAgICAgICBtYXkgYmUgc3BlY2lmaWVkLiBUaGVyZSBhcmUgdGhyZWUgYWRkaXRpb25hbCBlcnJvciBzdHJhdGVnaWVzCiAgICAgICAgc3BlY2lmaWNhbGx5IGFpbWVkIGF0IGhlbHBpbmcgcGVvcGxlIHRvIHBvcnQgY29kZS4gIFRoZSBmaXJzdCB0d28gYXJlOgoKICAgICAgICAgICAgOnN1cnJvZ2F0ZV9vcl9zdHJpY3Q6IFdpbGwgdXNlIGBgc3Vycm9nYXRlZXNjYXBlYGAgaWYgaXQgaXMgYSB2YWxpZAogICAgICAgICAgICAgICAgaGFuZGxlciwgb3RoZXJ3aXNlIGl0IHdpbGwgdXNlIGBgc3RyaWN0YGAKICAgICAgICAgICAgOnN1cnJvZ2F0ZV9vcl9yZXBsYWNlOiBXaWxsIHVzZSBgYHN1cnJvZ2F0ZWVzY2FwZWBgIGlmIGl0IGlzIGEgdmFsaWQKICAgICAgICAgICAgICAgIGhhbmRsZXIsIG90aGVyd2lzZSBpdCB3aWxsIHVzZSBgYHJlcGxhY2VgYC4KCiAgICAgICAgQmVjYXVzZSBgYHN1cnJvZ2F0ZWVzY2FwZWBgIHdhcyBhZGRlZCBpbiBQeXRob24zIHRoaXMgdXN1YWxseSBtZWFucyB0aGF0CiAgICAgICAgUHl0aG9uMyB3aWxsIHVzZSBgYHN1cnJvZ2F0ZWVzY2FwZWBgIGFuZCBQeXRob24yIHdpbGwgdXNlIHRoZSBmYWxsYmFjawogICAgICAgIGVycm9yIGhhbmRsZXIuIE5vdGUgdGhhdCB0aGUgY29kZSBjaGVja3MgZm9yIGBgc3Vycm9nYXRlZXNjYXBlYGAgd2hlbiB0aGUKICAgICAgICBtb2R1bGUgaXMgaW1wb3J0ZWQuICBJZiB5b3UgaGF2ZSBhIGJhY2twb3J0IG9mIGBgc3Vycm9nYXRlZXNjYXBlYGAgZm9yCiAgICAgICAgUHl0aG9uMiwgYmUgc3VyZSB0byByZWdpc3RlciB0aGUgZXJyb3IgaGFuZGxlciBwcmlvciB0byBpbXBvcnRpbmcgdGhpcwogICAgICAgIG1vZHVsZS4KCiAgICAgICAgVGhlIGxhc3QgZXJyb3IgaGFuZGxlciBpczoKCiAgICAgICAgICAgIDpzdXJyb2dhdGVfdGhlbl9yZXBsYWNlOiBXaWxsIHVzZSBgYHN1cnJvZ2F0ZWVzY2FwZWBgIGlmIGl0IGlzIGEgdmFsaWQKICAgICAgICAgICAgICAgIGhhbmRsZXIuICBJZiBlbmNvZGluZyB3aXRoIGBgc3Vycm9nYXRlZXNjYXBlYGAgd291bGQgdHJhY2ViYWNrLAogICAgICAgICAgICAgICAgc3Vycm9nYXRlcyBhcmUgZmlyc3QgcmVwbGFjZWQgd2l0aCBhIHJlcGxhY2VtZW50IGNoYXJhY3RlcnMKICAgICAgICAgICAgICAgIGFuZCB0aGVuIHRoZSBzdHJpbmcgaXMgZW5jb2RlZCB1c2luZyBgYHJlcGxhY2VgYCAod2hpY2ggcmVwbGFjZXMKICAgICAgICAgICAgICAgIHRoZSByZXN0IG9mIHRoZSBub25lbmNvZGFibGUgYnl0ZXMpLiAgSWYgYGBzdXJyb2dhdGVlc2NhcGVgYCBpcwogICAgICAgICAgICAgICAgbm90IHByZXNlbnQgaXQgd2lsbCBzaW1wbHkgdXNlIGBgcmVwbGFjZWBgLiAgKEFkZGVkIGluIEFuc2libGUgMi4zKQogICAgICAgICAgICAgICAgVGhpcyBzdHJhdGVneSBpcyBkZXNpZ25lZCB0byBuZXZlciB0cmFjZWJhY2sgd2hlbiBpdCBhdHRlbXB0cwogICAgICAgICAgICAgICAgdG8gZW5jb2RlIGEgc3RyaW5nLgoKICAgICAgICBUaGUgZGVmYXVsdCB1bnRpbCBBbnNpYmxlLTIuMiB3YXMgYGBzdXJyb2dhdGVfb3JfcmVwbGFjZWBgCiAgICAgICAgRnJvbSBBbnNpYmxlLTIuMyBvbndhcmRzLCB0aGUgZGVmYXVsdCBpcyBgYHN1cnJvZ2F0ZV90aGVuX3JlcGxhY2VgYC4KCiAgICA6a3dhcmcgbm9uc3RyaW5nOiBUaGUgc3RyYXRlZ3kgdG8gdXNlIGlmIGEgbm9uc3RyaW5nIGlzIHNwZWNpZmllZCBpbgogICAgICAgIGBgb2JqYGAuICBEZWZhdWx0IGlzICdzaW1wbGVyZXByJy4gIFZhbGlkIHZhbHVlcyBhcmU6CgogICAgICAgIDpzaW1wbGVyZXByOiBUaGUgZGVmYXVsdC4gIFRoaXMgdGFrZXMgdGhlIGBgc3RyYGAgb2YgdGhlIG9iamVjdCBhbmQKICAgICAgICAgICAgdGhlbiByZXR1cm5zIHRoZSBieXRlcyB2ZXJzaW9uIG9mIHRoYXQgc3RyaW5nLgogICAgICAgIDplbXB0eTogUmV0dXJuIGFuIGVtcHR5IGJ5dGUgc3RyaW5nCiAgICAgICAgOnBhc3N0aHJ1OiBSZXR1cm4gdGhlIG9iamVjdCBwYXNzZWQgaW4KICAgICAgICA6c3RyaWN0OiBSYWlzZSBhIDpleGM6YFR5cGVFcnJvcmAKCiAgICA6cmV0dXJuczogVHlwaWNhbGx5IHRoaXMgcmV0dXJucyBhIGJ5dGUgc3RyaW5nLiAgSWYgYSBub25zdHJpbmcgb2JqZWN0IGlzCiAgICAgICAgcGFzc2VkIGluIHRoaXMgbWF5IGJlIGEgZGlmZmVyZW50IHR5cGUgZGVwZW5kaW5nIG9uIHRoZSBzdHJhdGVneQogICAgICAgIHNwZWNpZmllZCBieSBub25zdHJpbmcuICBUaGlzIHdpbGwgbmV2ZXIgcmV0dXJuIGEgdGV4dCBzdHJpbmcuCgogICAgLi4gbm90ZTo6IElmIHBhc3NlZCBhIGJ5dGUgc3RyaW5nLCB0aGlzIGZ1bmN0aW9uIGRvZXMgbm90IGNoZWNrIHRoYXQgdGhlCiAgICAgICAgc3RyaW5nIGlzIHZhbGlkIGluIHRoZSBzcGVjaWZpZWQgZW5jb2RpbmcuICBJZiBpdCdzIGltcG9ydGFudCB0aGF0IHRoZQogICAgICAgIGJ5dGUgc3RyaW5nIGlzIGluIHRoZSBzcGVjaWZpZWQgZW5jb2RpbmcgZG86OgoKICAgICAgICAgICAgZW5jb2RlZF9zdHJpbmcgPSB0b19ieXRlcyh0b190ZXh0KGlucHV0X3N0cmluZywgJ2xhdGluLTEnKSwgJ3V0Zi04JykKCiAgICAuLiB2ZXJzaW9uX2NoYW5nZWQ6OiAyLjMKCiAgICAgICAgQWRkZWQgdGhlIGBgc3Vycm9nYXRlX3RoZW5fcmVwbGFjZWBgIGVycm9yIGhhbmRsZXIgYW5kIG1hZGUgaXQgdGhlIGRlZmF1bHQgZXJyb3IgaGFuZGxlci4KICAgICIiIgogICAgaWYgaXNpbnN0YW5jZShvYmosIGJpbmFyeV90eXBlKToKICAgICAgICByZXR1cm4gb2JqCgogICAgIyBXZSdyZSBnaXZlbiBhIHRleHQgc3RyaW5nCiAgICAjIElmIGl0IGhhcyBzdXJyb2dhdGVzLCB3ZSBrbm93IGJlY2F1c2UgaXQgd2lsbCBkZWNvZGUKICAgIG9yaWdpbmFsX2Vycm9ycyA9IGVycm9ycwogICAgaWYgZXJyb3JzIGluIF9DT01QT1NFRF9FUlJPUl9IQU5ETEVSUzoKICAgICAgICBpZiBIQVNfU1VSUk9HQVRFRVNDQVBFOgogICAgICAgICAgICBlcnJvcnMgPSAnc3Vycm9nYXRlZXNjYXBlJwogICAgICAgIGVsaWYgZXJyb3JzID09ICdzdXJyb2dhdGVfb3Jfc3RyaWN0JzoKICAgICAgICAgICAgZXJyb3JzID0gJ3N0cmljdCcKICAgICAgICBlbHNlOgogICAgICAgICAgICBlcnJvcnMgPSAncmVwbGFjZScKCiAgICBpZiBpc2luc3RhbmNlKG9iaiwgdGV4dF90eXBlKToKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgVHJ5IHRoaXMgZmlyc3QgYXMgaXQncyB0aGUgZmFzdGVzdAogICAgICAgICAgICByZXR1cm4gb2JqLmVuY29kZShlbmNvZGluZywgZXJyb3JzKQogICAgICAgIGV4Y2VwdCBVbmljb2RlRW5jb2RlRXJyb3I6CiAgICAgICAgICAgIGlmIG9yaWdpbmFsX2Vycm9ycyBpbiAoTm9uZSwgJ3N1cnJvZ2F0ZV90aGVuX3JlcGxhY2UnKToKICAgICAgICAgICAgICAgICMgU2xvdyBidXQgd29ya3MKICAgICAgICAgICAgICAgIHJldHVybl9zdHJpbmcgPSBvYmouZW5jb2RlKCd1dGYtOCcsICdzdXJyb2dhdGVlc2NhcGUnKQogICAgICAgICAgICAgICAgcmV0dXJuX3N0cmluZyA9IHJldHVybl9zdHJpbmcuZGVjb2RlKCd1dGYtOCcsICdyZXBsYWNlJykKICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5fc3RyaW5nLmVuY29kZShlbmNvZGluZywgJ3JlcGxhY2UnKQogICAgICAgICAgICByYWlzZQoKICAgICMgTm90ZTogV2UgZG8gdGhlc2UgbGFzdCBldmVuIHRob3VnaCB3ZSBoYXZlIHRvIGNhbGwgdG9fYnl0ZXMgYWdhaW4gb24gdGhlCiAgICAjIHZhbHVlIGJlY2F1c2Ugd2UncmUgb3B0aW1pemluZyB0aGUgY29tbW9uIGNhc2UKICAgIGlmIG5vbnN0cmluZyA9PSAnc2ltcGxlcmVwcic6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB2YWx1ZSA9IHN0cihvYmopCiAgICAgICAgZXhjZXB0IFVuaWNvZGVFcnJvcjoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdmFsdWUgPSByZXByKG9iaikKICAgICAgICAgICAgZXhjZXB0IFVuaWNvZGVFcnJvcjoKICAgICAgICAgICAgICAgICMgR2l2aW5nIHVwCiAgICAgICAgICAgICAgICByZXR1cm4gdG9fYnl0ZXMoJycpCiAgICBlbGlmIG5vbnN0cmluZyA9PSAncGFzc3RocnUnOgogICAgICAgIHJldHVybiBvYmoKICAgIGVsaWYgbm9uc3RyaW5nID09ICdlbXB0eSc6CiAgICAgICAgIyBweXRob24yLjQgZG9lc24ndCBoYXZlIGInJwogICAgICAgIHJldHVybiB0b19ieXRlcygnJykKICAgIGVsaWYgbm9uc3RyaW5nID09ICdzdHJpY3QnOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignb2JqIG11c3QgYmUgYSBzdHJpbmcgdHlwZScpCiAgICBlbHNlOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignSW52YWxpZCB2YWx1ZSAlcyBmb3IgdG9fYnl0ZXNcJyBub25zdHJpbmcgcGFyYW1ldGVyJyAlIG5vbnN0cmluZykKCiAgICByZXR1cm4gdG9fYnl0ZXModmFsdWUsIGVuY29kaW5nLCBlcnJvcnMpCgoKZGVmIHRvX3RleHQob2JqLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9Tm9uZSwgbm9uc3RyaW5nPSdzaW1wbGVyZXByJyk6CiAgICAiIiJNYWtlIHN1cmUgdGhhdCBhIHN0cmluZyBpcyBhIHRleHQgc3RyaW5nCgogICAgOmFyZyBvYmo6IEFuIG9iamVjdCB0byBtYWtlIHN1cmUgaXMgYSB0ZXh0IHN0cmluZy4gIEluIG1vc3QgY2FzZXMgdGhpcwogICAgICAgIHdpbGwgYmUgZWl0aGVyIGEgdGV4dCBzdHJpbmcgb3IgYSBieXRlIHN0cmluZy4gIEhvd2V2ZXIsIHdpdGgKICAgICAgICBgYG5vbnN0cmluZz0nc2ltcGxlcmVwcidgYCwgdGhpcyBjYW4gYmUgdXNlZCBhcyBhIHRyYWNlYmFjay1mcmVlCiAgICAgICAgdmVyc2lvbiBvZiBgYHN0cihvYmopYGAuCiAgICA6a3dhcmcgZW5jb2Rpbmc6IFRoZSBlbmNvZGluZyB0byB1c2UgdG8gdHJhbnNmb3JtIGZyb20gYSBieXRlIHN0cmluZyB0bwogICAgICAgIGEgdGV4dCBzdHJpbmcuICBEZWZhdWx0cyB0byB1c2luZyAndXRmLTgnLgogICAgOmt3YXJnIGVycm9yczogVGhlIGVycm9yIGhhbmRsZXIgdG8gdXNlIGlmIHRoZSBieXRlIHN0cmluZyBpcyBub3QKICAgICAgICBkZWNvZGFibGUgdXNpbmcgdGhlIHNwZWNpZmllZCBlbmNvZGluZy4gIEFueSB2YWxpZCBgY29kZWNzIGVycm9yCiAgICAgICAgaGFuZGxlciA8aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMi9saWJyYXJ5L2NvZGVjcy5odG1sI2NvZGVjLWJhc2UtY2xhc3Nlcz5gXwogICAgICAgIG1heSBiZSBzcGVjaWZpZWQuICAgV2Ugc3VwcG9ydCB0aHJlZSBhZGRpdGlvbmFsIGVycm9yIHN0cmF0ZWdpZXMKICAgICAgICBzcGVjaWZpY2FsbHkgYWltZWQgYXQgaGVscGluZyBwZW9wbGUgdG8gcG9ydCBjb2RlOgoKICAgICAgICAgICAgOnN1cnJvZ2F0ZV9vcl9zdHJpY3Q6IFdpbGwgdXNlIHN1cnJvZ2F0ZWVzY2FwZSBpZiBpdCBpcyBhIHZhbGlkCiAgICAgICAgICAgICAgICBoYW5kbGVyLCBvdGhlcndpc2UgaXQgd2lsbCB1c2Ugc3RyaWN0CiAgICAgICAgICAgIDpzdXJyb2dhdGVfb3JfcmVwbGFjZTogV2lsbCB1c2Ugc3Vycm9nYXRlZXNjYXBlIGlmIGl0IGlzIGEgdmFsaWQKICAgICAgICAgICAgICAgIGhhbmRsZXIsIG90aGVyd2lzZSBpdCB3aWxsIHVzZSByZXBsYWNlLgogICAgICAgICAgICA6c3Vycm9nYXRlX3RoZW5fcmVwbGFjZTogRG9lcyB0aGUgc2FtZSBhcyBzdXJyb2dhdGVfb3JfcmVwbGFjZSBidXQKICAgICAgICAgICAgICAgIGB3YXMgYWRkZWQgZm9yIHN5bW1ldHJ5IHdpdGggdGhlIGVycm9yIGhhbmRsZXJzIGluCiAgICAgICAgICAgICAgICA6ZnVuYzpgYW5zaWJsZS5tb2R1bGVfdXRpbHMuX3RleHQudG9fYnl0ZXNgIChBZGRlZCBpbiBBbnNpYmxlIDIuMykKCiAgICAgICAgQmVjYXVzZSBzdXJyb2dhdGVlc2NhcGUgd2FzIGFkZGVkIGluIFB5dGhvbjMgdGhpcyB1c3VhbGx5IG1lYW5zIHRoYXQKICAgICAgICBQeXRob24zIHdpbGwgdXNlIGBzdXJyb2dhdGVlc2NhcGVgIGFuZCBQeXRob24yIHdpbGwgdXNlIHRoZSBmYWxsYmFjawogICAgICAgIGVycm9yIGhhbmRsZXIuIE5vdGUgdGhhdCB0aGUgY29kZSBjaGVja3MgZm9yIHN1cnJvZ2F0ZWVzY2FwZSB3aGVuIHRoZQogICAgICAgIG1vZHVsZSBpcyBpbXBvcnRlZC4gIElmIHlvdSBoYXZlIGEgYmFja3BvcnQgb2YgYHN1cnJvZ2F0ZWVzY2FwZWAgZm9yCiAgICAgICAgcHl0aG9uMiwgYmUgc3VyZSB0byByZWdpc3RlciB0aGUgZXJyb3IgaGFuZGxlciBwcmlvciB0byBpbXBvcnRpbmcgdGhpcwogICAgICAgIG1vZHVsZS4KCiAgICAgICAgVGhlIGRlZmF1bHQgdW50aWwgQW5zaWJsZS0yLjIgd2FzIGBzdXJyb2dhdGVfb3JfcmVwbGFjZWAKICAgICAgICBJbiBBbnNpYmxlLTIuMyB0aGlzIGRlZmF1bHRzIHRvIGBzdXJyb2dhdGVfdGhlbl9yZXBsYWNlYCBmb3Igc3ltbWV0cnkKICAgICAgICB3aXRoIDpmdW5jOmBhbnNpYmxlLm1vZHVsZV91dGlscy5fdGV4dC50b19ieXRlc2AgLgogICAgOmt3YXJnIG5vbnN0cmluZzogVGhlIHN0cmF0ZWd5IHRvIHVzZSBpZiBhIG5vbnN0cmluZyBpcyBzcGVjaWZpZWQgaW4KICAgICAgICBgYG9iamBgLiAgRGVmYXVsdCBpcyAnc2ltcGxlcmVwcicuICBWYWxpZCB2YWx1ZXMgYXJlOgoKICAgICAgICA6c2ltcGxlcmVwcjogVGhlIGRlZmF1bHQuICBUaGlzIHRha2VzIHRoZSBgYHN0cmBgIG9mIHRoZSBvYmplY3QgYW5kCiAgICAgICAgICAgIHRoZW4gcmV0dXJucyB0aGUgdGV4dCB2ZXJzaW9uIG9mIHRoYXQgc3RyaW5nLgogICAgICAgIDplbXB0eTogUmV0dXJuIGFuIGVtcHR5IHRleHQgc3RyaW5nCiAgICAgICAgOnBhc3N0aHJ1OiBSZXR1cm4gdGhlIG9iamVjdCBwYXNzZWQgaW4KICAgICAgICA6c3RyaWN0OiBSYWlzZSBhIDpleGM6YFR5cGVFcnJvcmAKCiAgICA6cmV0dXJuczogVHlwaWNhbGx5IHRoaXMgcmV0dXJucyBhIHRleHQgc3RyaW5nLiAgSWYgYSBub25zdHJpbmcgb2JqZWN0IGlzCiAgICAgICAgcGFzc2VkIGluIHRoaXMgbWF5IGJlIGEgZGlmZmVyZW50IHR5cGUgZGVwZW5kaW5nIG9uIHRoZSBzdHJhdGVneQogICAgICAgIHNwZWNpZmllZCBieSBub25zdHJpbmcuICBUaGlzIHdpbGwgbmV2ZXIgcmV0dXJuIGEgYnl0ZSBzdHJpbmcuCiAgICAgICAgRnJvbSBBbnNpYmxlLTIuMyBvbndhcmRzLCB0aGUgZGVmYXVsdCBpcyBgc3Vycm9nYXRlX3RoZW5fcmVwbGFjZWAuCgogICAgLi4gdmVyc2lvbl9jaGFuZ2VkOjogMi4zCgogICAgICAgIEFkZGVkIHRoZSBzdXJyb2dhdGVfdGhlbl9yZXBsYWNlIGVycm9yIGhhbmRsZXIgYW5kIG1hZGUgaXQgdGhlIGRlZmF1bHQgZXJyb3IgaGFuZGxlci4KICAgICIiIgogICAgaWYgaXNpbnN0YW5jZShvYmosIHRleHRfdHlwZSk6CiAgICAgICAgcmV0dXJuIG9iagoKICAgIGlmIGVycm9ycyBpbiBfQ09NUE9TRURfRVJST1JfSEFORExFUlM6CiAgICAgICAgaWYgSEFTX1NVUlJPR0FURUVTQ0FQRToKICAgICAgICAgICAgZXJyb3JzID0gJ3N1cnJvZ2F0ZWVzY2FwZScKICAgICAgICBlbGlmIGVycm9ycyA9PSAnc3Vycm9nYXRlX29yX3N0cmljdCc6CiAgICAgICAgICAgIGVycm9ycyA9ICdzdHJpY3QnCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZXJyb3JzID0gJ3JlcGxhY2UnCgogICAgaWYgaXNpbnN0YW5jZShvYmosIGJpbmFyeV90eXBlKToKICAgICAgICAjIE5vdGU6IFdlIGRvbid0IG5lZWQgc3BlY2lhbCBoYW5kbGluZyBmb3Igc3Vycm9nYXRlX3RoZW5fcmVwbGFjZQogICAgICAgICMgYmVjYXVzZSBhbGwgYnl0ZXMgd2lsbCBlaXRoZXIgYmUgbWFkZSBpbnRvIHN1cnJvZ2F0ZXMgb3IgYXJlIHZhbGlkCiAgICAgICAgIyB0byBkZWNvZGUuCiAgICAgICAgcmV0dXJuIG9iai5kZWNvZGUoZW5jb2RpbmcsIGVycm9ycykKCiAgICAjIE5vdGU6IFdlIGRvIHRoZXNlIGxhc3QgZXZlbiB0aG91Z2ggd2UgaGF2ZSB0byBjYWxsIHRvX3RleHQgYWdhaW4gb24gdGhlCiAgICAjIHZhbHVlIGJlY2F1c2Ugd2UncmUgb3B0aW1pemluZyB0aGUgY29tbW9uIGNhc2UKICAgIGlmIG5vbnN0cmluZyA9PSAnc2ltcGxlcmVwcic6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB2YWx1ZSA9IHN0cihvYmopCiAgICAgICAgZXhjZXB0IFVuaWNvZGVFcnJvcjoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdmFsdWUgPSByZXByKG9iaikKICAgICAgICAgICAgZXhjZXB0IFVuaWNvZGVFcnJvcjoKICAgICAgICAgICAgICAgICMgR2l2aW5nIHVwCiAgICAgICAgICAgICAgICByZXR1cm4gdScnCiAgICBlbGlmIG5vbnN0cmluZyA9PSAncGFzc3RocnUnOgogICAgICAgIHJldHVybiBvYmoKICAgIGVsaWYgbm9uc3RyaW5nID09ICdlbXB0eSc6CiAgICAgICAgcmV0dXJuIHUnJwogICAgZWxpZiBub25zdHJpbmcgPT0gJ3N0cmljdCc6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdvYmogbXVzdCBiZSBhIHN0cmluZyB0eXBlJykKICAgIGVsc2U6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdJbnZhbGlkIHZhbHVlICVzIGZvciB0b190ZXh0XCdzIG5vbnN0cmluZyBwYXJhbWV0ZXInICUgbm9uc3RyaW5nKQoKICAgIHJldHVybiB0b190ZXh0KHZhbHVlLCBlbmNvZGluZywgZXJyb3JzKQoKCiM6IDpweTpmdW5jOmB0b19uYXRpdmVgCiM6ICAgICAgVHJhbnNmb3JtIGEgdmFyaWFibGUgaW50byB0aGUgbmF0aXZlIHN0ciB0eXBlIGZvciB0aGUgcHl0aG9uIHZlcnNpb24KIzoKIzogICAgICBPbiBQeXRob24yLCB0aGlzIGlzIGFuIGFsaWFzIGZvcgojOiAgICAgIDpmdW5jOmB+YW5zaWJsZS5tb2R1bGVfdXRpbHMudG9fYnl0ZXNgLiAgT24gUHl0aG9uMyBpdCBpcyBhbiBhbGlhcyBmb3IKIzogICAgICA6ZnVuYzpgfmFuc2libGUubW9kdWxlX3V0aWxzLnRvX3RleHRgLiAgSXQgbWFrZXMgaXQgZWFzaWVyIHRvCiM6ICAgICAgdHJhbnNmb3JtIGEgdmFyaWFibGUgaW50byB0aGUgbmF0aXZlIHN0ciB0eXBlIGZvciB0aGUgcHl0aG9uIHZlcnNpb24KIzogICAgICB0aGUgY29kZSBpcyBydW5uaW5nIG9uLiAgVXNlIHRoaXMgd2hlbiBjb25zdHJ1Y3RpbmcgdGhlIG1lc3NhZ2UgdG8KIzogICAgICBzZW5kIHRvIGV4Y2VwdGlvbnMgb3Igd2hlbiBkZWFsaW5nIHdpdGggYW4gQVBJIHRoYXQgbmVlZHMgdG8gdGFrZQojOiAgICAgIGEgbmF0aXZlIHN0cmluZy4gIEV4YW1wbGU6OgojOgojOiAgICAgICAgICB0cnk6CiM6ICAgICAgICAgICAgICAxLy8wCiM6ICAgICAgICAgIGV4Y2VwdCBaZXJvRGl2aXNpb25FcnJvciBhcyBlOgojOiAgICAgICAgICAgICAgcmFpc2UgTXlFeGNlcHRpb24oJ0VuY291bnRlcmVkIGFuZCBlcnJvcjogJXMnICUgdG9fbmF0aXZlKGUpKQppZiBQWTM6CiAgICB0b19uYXRpdmUgPSB0b190ZXh0CmVsc2U6CiAgICB0b19uYXRpdmUgPSB0b19ieXRlcwpQSwMEFAAAAAAAALwrSyXctH4TEAAAExAAACIAAABhbnNpYmxlL21vZHVsZV91dGlscy9weWNvbXBhdDI0LnB5IyBUaGlzIGNvZGUgaXMgcGFydCBvZiBBbnNpYmxlLCBidXQgaXMgYW4gaW5kZXBlbmRlbnQgY29tcG9uZW50LgojIFRoaXMgcGFydGljdWxhciBmaWxlIHNuaXBwZXQsIGFuZCB0aGlzIGZpbGUgc25pcHBldCBvbmx5LCBpcyBCU0QgbGljZW5zZWQuCiMgTW9kdWxlcyB5b3Ugd3JpdGUgdXNpbmcgdGhpcyBzbmlwcGV0LCB3aGljaCBpcyBlbWJlZGRlZCBkeW5hbWljYWxseSBieSBBbnNpYmxlCiMgc3RpbGwgYmVsb25nIHRvIHRoZSBhdXRob3Igb2YgdGhlIG1vZHVsZSwgYW5kIG1heSBhc3NpZ24gdGhlaXIgb3duIGxpY2Vuc2UKIyB0byB0aGUgY29tcGxldGUgd29yay4KIwojIENvcHlyaWdodCAoYykgMjAxNiwgVG9zaGlvIEt1cmF0b21pIDx0a3VyYXRvbWlAYW5zaWJsZS5jb20+CiMgQ29weXJpZ2h0IChjKSAyMDE1LCBNYXJpdXMgR2VkbWluYXMKIwojIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sCiMgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OgojCiMgICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodAojICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLgojICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLAojICAgICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbgojICAgICAgYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uCiMKIyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTICJBUyBJUyIgQU5ECiMgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQKIyBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuCiMgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsCiMgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLAojIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUwojIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QKIyBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUKIyBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS4KIwoKaW1wb3J0IHN5cwoKZGVmIGdldF9leGNlcHRpb24oKToKICAgICIiIkdldCB0aGUgY3VycmVudCBleGNlcHRpb24uCgogICAgVGhpcyBjb2RlIG5lZWRzIHRvIHdvcmsgb24gUHl0aG9uIDIuNCB0aHJvdWdoIDMueCwgc28gd2UgY2Fubm90IHVzZQogICAgImV4Y2VwdCBFeGNlcHRpb24sIGU6IiAoU3ludGF4RXJyb3Igb24gUHl0aG9uIDMueCkgbm9yCiAgICAiZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOiIgKFN5bnRheEVycm9yIG9uIFB5dGhvbiAyLjQtMi41KS4KICAgIEluc3RlYWQgd2UgbXVzdCB1c2UgOjoKCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQoKICAgICIiIgogICAgcmV0dXJuIHN5cy5leGNfaW5mbygpWzFdCgp0cnk6CiAgICAjIFB5dGhvbiAyLjYrCiAgICBmcm9tIGFzdCBpbXBvcnQgbGl0ZXJhbF9ldmFsCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICMgYSByZXBsYWNlbWVudCBmb3IgbGl0ZXJhbF9ldmFsIHRoYXQgd29ya3Mgd2l0aCBweXRob24gMi40LiBmcm9tOgogICAgIyBodHRwczovL21haWwucHl0aG9uLm9yZy9waXBlcm1haWwvcHl0aG9uLWxpc3QvMjAwOS1TZXB0ZW1iZXIvNTUxODgwLmh0bWwKICAgICMgd2hpY2ggaXMgZXNzZW50aWFsbHkgYSBjdXQvcGFzdGUgZnJvbSBhbiBlYXJsaWVyICgyLjYpIHZlcnNpb24gb2YgcHl0aG9uJ3MKICAgICMgYXN0LnB5CiAgICBmcm9tIGNvbXBpbGVyIGltcG9ydCBhc3QsIHBhcnNlCiAgICBmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeCBpbXBvcnQgYmluYXJ5X3R5cGUsIHN0cmluZ190eXBlcywgdGV4dF90eXBlCgogICAgZGVmIGxpdGVyYWxfZXZhbChub2RlX29yX3N0cmluZyk6CiAgICAgICAgIiIiCiAgICAgICAgU2FmZWx5IGV2YWx1YXRlIGFuIGV4cHJlc3Npb24gbm9kZSBvciBhIHN0cmluZyBjb250YWluaW5nIGEgUHl0aG9uCiAgICAgICAgZXhwcmVzc2lvbi4gIFRoZSBzdHJpbmcgb3Igbm9kZSBwcm92aWRlZCBtYXkgb25seSBjb25zaXN0IG9mIHRoZSAgZm9sbG93aW5nCiAgICAgICAgUHl0aG9uIGxpdGVyYWwgc3RydWN0dXJlczogc3RyaW5ncywgbnVtYmVycywgdHVwbGVzLCBsaXN0cywgZGljdHMsICBib29sZWFucywKICAgICAgICBhbmQgTm9uZS4KICAgICAgICAiIiIKICAgICAgICBfc2FmZV9uYW1lcyA9IHsnTm9uZSc6IE5vbmUsICdUcnVlJzogVHJ1ZSwgJ0ZhbHNlJzogRmFsc2V9CiAgICAgICAgaWYgaXNpbnN0YW5jZShub2RlX29yX3N0cmluZywgc3RyaW5nX3R5cGVzKToKICAgICAgICAgICAgbm9kZV9vcl9zdHJpbmcgPSBwYXJzZShub2RlX29yX3N0cmluZywgbW9kZT0nZXZhbCcpCiAgICAgICAgaWYgaXNpbnN0YW5jZShub2RlX29yX3N0cmluZywgYXN0LkV4cHJlc3Npb24pOgogICAgICAgICAgICBub2RlX29yX3N0cmluZyA9IG5vZGVfb3Jfc3RyaW5nLm5vZGUKCiAgICAgICAgZGVmIF9jb252ZXJ0KG5vZGUpOgogICAgICAgICAgICAjIE9rYXkgdG8gdXNlIGxvbmcgaGVyZSBiZWNhdXNlIHRoaXMgaXMgb25seSBmb3IgcHl0aG9uIDIuNCBhbmQgMi41CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uobm9kZSwgYXN0LkNvbnN0KSBhbmQgaXNpbnN0YW5jZShub2RlLnZhbHVlLCAodGV4dF90eXBlLCBiaW5hcnlfdHlwZSwgaW50LCBmbG9hdCwgbG9uZywgY29tcGxleCkpOgogICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUudmFsdWUKICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKG5vZGUsIGFzdC5UdXBsZSk6CiAgICAgICAgICAgICAgICByZXR1cm4gdHVwbGUobWFwKF9jb252ZXJ0LCBub2RlLm5vZGVzKSkKICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKG5vZGUsIGFzdC5MaXN0KToKICAgICAgICAgICAgICAgIHJldHVybiBsaXN0KG1hcChfY29udmVydCwgbm9kZS5ub2RlcykpCiAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZShub2RlLCBhc3QuRGljdCk6CiAgICAgICAgICAgICAgICByZXR1cm4gZGljdCgoX2NvbnZlcnQoayksIF9jb252ZXJ0KHYpKSBmb3IgaywgdiBpbiBub2RlLml0ZW1zKCkpCiAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZShub2RlLCBhc3QuTmFtZSk6CiAgICAgICAgICAgICAgICBpZiBub2RlLm5hbWUgaW4gX3NhZmVfbmFtZXM6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9zYWZlX25hbWVzW25vZGUubmFtZV0KICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKG5vZGUsIGFzdC5VbmFyeVN1Yik6CiAgICAgICAgICAgICAgICByZXR1cm4gLV9jb252ZXJ0KG5vZGUuZXhwcikKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbWFsZm9ybWVkIHN0cmluZycpCiAgICAgICAgcmV0dXJuIF9jb252ZXJ0KG5vZGVfb3Jfc3RyaW5nKQoKX19hbGxfXyA9ICgnZ2V0X2V4Y2VwdGlvbicsICdsaXRlcmFsX2V2YWwnKQpQSwMEFAAAAAAAALwrSxgXcvUBEQAAAREAACQAAABhbnNpYmxlL21vZHVsZV91dGlscy9zaXgvX19pbml0X18ucHkjIFRoaXMgY29kZSBpcyBwYXJ0IG9mIEFuc2libGUsIGJ1dCBpcyBhbiBpbmRlcGVuZGVudCBjb21wb25lbnQuCiMgVGhpcyBwYXJ0aWN1bGFyIGZpbGUgc25pcHBldCwgYW5kIHRoaXMgZmlsZSBzbmlwcGV0IG9ubHksIGlzIEJTRCBsaWNlbnNlZC4KIyBNb2R1bGVzIHlvdSB3cml0ZSB1c2luZyB0aGlzIHNuaXBwZXQsIHdoaWNoIGlzIGVtYmVkZGVkIGR5bmFtaWNhbGx5IGJ5IEFuc2libGUKIyBzdGlsbCBiZWxvbmcgdG8gdGhlIGF1dGhvciBvZiB0aGUgbW9kdWxlLCBhbmQgbWF5IGFzc2lnbiB0aGVpciBvd24gbGljZW5zZQojIHRvIHRoZSBjb21wbGV0ZSB3b3JrLgojCiMgQ29weXJpZ2h0IChjKSAyMDE3LCBUb3NoaW8gS3VyYXRvbWkgPHRrdXJhdG9taUBhbnNpYmxlLmNvbT4KIwojIFRoaXMgY29kZSBpcyBiYXNlZCBvbiBjb2RlIGZyb20gQXN0cm9weSBhbmQgcmV0YWlucyB0aGVpciAzLWNsYXVzZSBCU0QgbGljZW5zZQojIHJlcHJvZHVjZWQgYmVsb3c6CiMKIyBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxNiwgQXN0cm9weSBEZXZlbG9wZXJzCiMKIyBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0CiMgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6CiMKIyAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcwojICAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuCiMgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsCiMgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uCiMgICBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KIyAqIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIEFzdHJvcHkgVGVhbSBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5CiMgICBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0CiMgICBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uCiMKIyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTICJBUyBJUyIKIyBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFCiMgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFCiMgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRQojIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMCiMgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IKIyBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUgojIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksCiMgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UKIyBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgojCiMgQXN0cm9weSBMaWNlbnNlOiBodHRwczovL2dpdGh1Yi5jb20vYXN0cm9weS9hc3Ryb3B5L2Jsb2IvY2YzMjY1ZTQyYTBkYjhlMDBiYjkwNjQ0ZGIzN2M4MTUwZjVhYzAwYy9saWNlbnNlcy9MSUNFTlNFLnJzdAojIEFzdHJvcHkgQ29kZTogaHR0cHM6Ly9naXRodWIuY29tL2FzdHJvcHkvYXN0cm9weS9ibG9iL2NmMzI2NWU0MmEwZGI4ZTAwYmI5MDY0NGRiMzdjODE1MGY1YWMwMGMvYXN0cm9weS9leHRlcm4vc2l4LnB5CgoiIiIKSGFuZGxlIGxvYWRpbmcgc2l4IHBhY2thZ2UgZnJvbSBzeXN0ZW0gb3IgZnJvbSB0aGUgYnVuZGxlZCBjb3B5CiIiIgpmcm9tIF9fZnV0dXJlX18gaW1wb3J0IGFic29sdXRlX2ltcG9ydAoKaW1wb3J0IGltcCBhcyBfaW1wCmltcG9ydCBzeXMgYXMgX3N5cwoKdHJ5OgogICAgZnJvbSBkaXN0dXRpbHMudmVyc2lvbiBpbXBvcnQgTG9vc2VWZXJzaW9uIGFzIF9Mb29zZVZlcnNpb24KZXhjZXB0IEltcG9ydEVycm9yOgogICAgIyBTb21lIHBsYXRmb3JtcyAqY291Z2gqU29sYXJpcypjb3VnaCogZG9uJ3Qgc2hpcCB0aGUgd2hvbGUgc3RkbGliCiAgICBfTG9vc2VWZXJzaW9uID0gTm9uZQoKdHJ5OgogICAgaW1wb3J0IHNpeCBhcyBfc3lzdGVtX3NpeApleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBfc3lzdGVtX3NpeCA9IE5vbmUKCmZyb20gLiBpbXBvcnQgX3NpeCBhcyBfYnVuZGxlZF9zaXgKCgpkZWYgX2ZpbmRfbW9kdWxlKG5hbWUsIHBhdGg9Tm9uZSk6CiAgICAiIiJBbHRlcm5hdGl2ZSB0byBgaW1wLmZpbmRfbW9kdWxlYCB0aGF0IGNhbiBhbHNvIHNlYXJjaCBpbiBzdWJwYWNrYWdlcyIiIgogICAgcGFydHMgPSBuYW1lLnNwbGl0KCcuJykKCiAgICBmb3IgcGFydCBpbiBwYXJ0czoKICAgICAgICBpZiBwYXRoIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwYXRoID0gW3BhdGhdCiAgICAgICAgZmgsIHBhdGgsIGRlc2NyID0gX2ltcC5maW5kX21vZHVsZShwYXJ0LCBwYXRoKQogICAgcmV0dXJuIGZoLCBwYXRoLCBkZXNjcgoKCmRlZiBfZ2V0X2J1bmRsZWRfc2l4X3NvdXJjZSgpOgogICAgIyBTcGVjaWFsIGltcG9ydCBsb2FkZXIgKHppcGltcG9ydCBmb3IgaW5zdGFuY2UpCiAgICBmb3VuZCA9IEZhbHNlCiAgICBmb3IgcGF0aCBpbiBfc3lzLnBhdGg6CiAgICAgICAgaW1wb3J0ZXIgPSBfc3lzLnBhdGhfaW1wb3J0ZXJfY2FjaGUuZ2V0KHBhdGgpCiAgICAgICAgaWYgaW1wb3J0ZXI6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGZvdW5kID0gaW1wb3J0ZXIuZmluZF9tb2R1bGUoJ2Fuc2libGUvbW9kdWxlX3V0aWxzL3NpeC9fc2l4JykKICAgICAgICAgICAgZXhjZXB0IEltcG9ydEVycm9yOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgaWYgZm91bmQ6CiAgICAgICAgICAgICAgICBicmVhawogICAgZWxzZToKICAgICAgICByYWlzZSBJbXBvcnRFcnJvcigiQ291bGQgbm90IGZpbmQgYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4Ll9zaXgiKQoKICAgIG1vZHVsZV9zb3VyY2UgPSBpbXBvcnRlci5nZXRfc291cmNlKCdhbnNpYmxlL21vZHVsZV91dGlscy9zaXgvX3NpeCcpCiAgICByZXR1cm4gbW9kdWxlX3NvdXJjZQoKCmRlZiBfZ2V0X3NpeF9zb3VyY2UoKToKICAgICIiIkltcG9ydCB0aGUgbmV3ZXN0IHZlcnNpb24gb2YgdGhlIHNpeCBsaWJyYXJ5IHRoYXQncyBhdmFpbGFibGUiIiIKICAgIG1vZF9pbmZvID0gTm9uZQogICAgdHJ5OgogICAgICAgIGlmIF9zeXN0ZW1fc2l4IGFuZCBfTG9vc2VWZXJzaW9uIGFuZCBcCiAgICAgICAgICAgICAgICBfTG9vc2VWZXJzaW9uKF9zeXN0ZW1fc2l4Ll9fdmVyc2lvbl9fKSA+PSBfTG9vc2VWZXJzaW9uKF9idW5kbGVkX3NpeC5fX3ZlcnNpb25fXyk6CiAgICAgICAgICAgIG1vZF9pbmZvID0gX2ZpbmRfbW9kdWxlKCdzaXgnKQogICAgZXhjZXB0OgogICAgICAgICMgQW55IGVycm9ycyBmaW5kaW5nIHRoZSBzeXN0ZW0gbGlicmFyeSwgdXNlIG91ciBidW5kbGVkIGxpYiBpbnN0ZWFkCiAgICAgICAgcGFzcwoKICAgIGlmIG5vdCBtb2RfaW5mbzoKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1vZF9pbmZvID0gX2ZpbmRfbW9kdWxlKCdhbnNpYmxlLm1vZHVsZV91dGlscy5zaXguX3NpeCcpCiAgICAgICAgZXhjZXB0IEltcG9ydEVycm9yOgogICAgICAgICAgICAjIHppcGltcG9ydAogICAgICAgICAgICBtb2R1bGVfc291cmNlID0gX2dldF9idW5kbGVkX3NpeF9zb3VyY2UoKQogICAgICAgICAgICByZXR1cm4gbW9kdWxlX3NvdXJjZQoKICAgIHJldHVybiBtb2RfaW5mb1swXS5yZWFkKCkKCnNvdXJjZSA9IF9nZXRfc2l4X3NvdXJjZSgpCmV4ZWMoc291cmNlKQpQSwMEFAAAAAAAALwrSzjix9GRdQAAkXUAACAAAABhbnNpYmxlL21vZHVsZV91dGlscy9zaXgvX3NpeC5weSIiIlV0aWxpdGllcyBmb3Igd3JpdGluZyBjb2RlIHRoYXQgcnVucyBvbiBQeXRob24gMiBhbmQgMyIiIgoKIyBDb3B5cmlnaHQgKGMpIDIwMTAtMjAxNSBCZW5qYW1pbiBQZXRlcnNvbgojCiMgUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weQojIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsCiMgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwojIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwKIyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMKIyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgojCiMgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsCiMgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KIwojIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SCiMgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCiMgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCiMgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgojIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sCiMgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUKIyBTT0ZUV0FSRS4KCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYWJzb2x1dGVfaW1wb3J0CgppbXBvcnQgZnVuY3Rvb2xzCmltcG9ydCBpdGVydG9vbHMKaW1wb3J0IG9wZXJhdG9yCmltcG9ydCBzeXMKaW1wb3J0IHR5cGVzCgpfX2F1dGhvcl9fID0gIkJlbmphbWluIFBldGVyc29uIDxiZW5qYW1pbkBweXRob24ub3JnPiIKX192ZXJzaW9uX18gPSAiMS4xMC4wIgoKCiMgVXNlZnVsIGZvciB2ZXJ5IGNvYXJzZSB2ZXJzaW9uIGRpZmZlcmVudGlhdGlvbi4KUFkyID0gc3lzLnZlcnNpb25faW5mb1swXSA9PSAyClBZMyA9IHN5cy52ZXJzaW9uX2luZm9bMF0gPT0gMwpQWTM0ID0gc3lzLnZlcnNpb25faW5mb1swOjJdID49ICgzLCA0KQoKaWYgUFkzOgogICAgc3RyaW5nX3R5cGVzID0gc3RyLAogICAgaW50ZWdlcl90eXBlcyA9IGludCwKICAgIGNsYXNzX3R5cGVzID0gdHlwZSwKICAgIHRleHRfdHlwZSA9IHN0cgogICAgYmluYXJ5X3R5cGUgPSBieXRlcwogICAgTUFYU0laRSA9IHN5cy5tYXhzaXplCmVsc2U6CiAgICBzdHJpbmdfdHlwZXMgPSBiYXNlc3RyaW5nLAogICAgaW50ZWdlcl90eXBlcyA9IChpbnQsIGxvbmcpCiAgICBjbGFzc190eXBlcyA9ICh0eXBlLCB0eXBlcy5DbGFzc1R5cGUpCiAgICB0ZXh0X3R5cGUgPSB1bmljb2RlCiAgICBiaW5hcnlfdHlwZSA9IHN0cgoKICAgIGlmIHN5cy5wbGF0Zm9ybS5zdGFydHN3aXRoKCJqYXZhIik6CiAgICAgICAgIyBKeXRob24gYWx3YXlzIHVzZXMgMzIgYml0cy4KICAgICAgICBNQVhTSVpFID0gaW50KCgxIDw8IDMxKSAtIDEpCiAgICBlbHNlOgogICAgICAgICMgSXQncyBwb3NzaWJsZSB0byBoYXZlIHNpemVvZihsb25nKSAhPSBzaXplb2YoUHlfc3NpemVfdCkuCiAgICAgICAgY2xhc3MgWChvYmplY3QpOgoKICAgICAgICAgICAgZGVmIF9fbGVuX18oc2VsZik6CiAgICAgICAgICAgICAgICByZXR1cm4gMSA8PCAzMQogICAgICAgIHRyeToKICAgICAgICAgICAgbGVuKFgoKSkKICAgICAgICBleGNlcHQgT3ZlcmZsb3dFcnJvcjoKICAgICAgICAgICAgIyAzMi1iaXQKICAgICAgICAgICAgTUFYU0laRSA9IGludCgoMSA8PCAzMSkgLSAxKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgNjQtYml0CiAgICAgICAgICAgIE1BWFNJWkUgPSBpbnQoKDEgPDwgNjMpIC0gMSkKICAgICAgICBkZWwgWAoKCmRlZiBfYWRkX2RvYyhmdW5jLCBkb2MpOgogICAgIiIiQWRkIGRvY3VtZW50YXRpb24gdG8gYSBmdW5jdGlvbi4iIiIKICAgIGZ1bmMuX19kb2NfXyA9IGRvYwoKCmRlZiBfaW1wb3J0X21vZHVsZShuYW1lKToKICAgICIiIkltcG9ydCBtb2R1bGUsIHJldHVybmluZyB0aGUgbW9kdWxlIGFmdGVyIHRoZSBsYXN0IGRvdC4iIiIKICAgIF9faW1wb3J0X18obmFtZSkKICAgIHJldHVybiBzeXMubW9kdWxlc1tuYW1lXQoKCmNsYXNzIF9MYXp5RGVzY3Iob2JqZWN0KToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgbmFtZSk6CiAgICAgICAgc2VsZi5uYW1lID0gbmFtZQoKICAgIGRlZiBfX2dldF9fKHNlbGYsIG9iaiwgdHApOgogICAgICAgIHJlc3VsdCA9IHNlbGYuX3Jlc29sdmUoKQogICAgICAgIHNldGF0dHIob2JqLCBzZWxmLm5hbWUsIHJlc3VsdCkgICMgSW52b2tlcyBfX3NldF9fLgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBUaGlzIGlzIGEgYml0IHVnbHksIGJ1dCBpdCBhdm9pZHMgcnVubmluZyB0aGlzIGFnYWluIGJ5CiAgICAgICAgICAgICMgcmVtb3ZpbmcgdGhpcyBkZXNjcmlwdG9yLgogICAgICAgICAgICBkZWxhdHRyKG9iai5fX2NsYXNzX18sIHNlbGYubmFtZSkKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICByZXR1cm4gcmVzdWx0CgoKY2xhc3MgTW92ZWRNb2R1bGUoX0xhenlEZXNjcik6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG5hbWUsIG9sZCwgbmV3PU5vbmUpOgogICAgICAgIHN1cGVyKE1vdmVkTW9kdWxlLCBzZWxmKS5fX2luaXRfXyhuYW1lKQogICAgICAgIGlmIFBZMzoKICAgICAgICAgICAgaWYgbmV3IGlzIE5vbmU6CiAgICAgICAgICAgICAgICBuZXcgPSBuYW1lCiAgICAgICAgICAgIHNlbGYubW9kID0gbmV3CiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5tb2QgPSBvbGQKCiAgICBkZWYgX3Jlc29sdmUoc2VsZik6CiAgICAgICAgcmV0dXJuIF9pbXBvcnRfbW9kdWxlKHNlbGYubW9kKQoKICAgIGRlZiBfX2dldGF0dHJfXyhzZWxmLCBhdHRyKToKICAgICAgICBfbW9kdWxlID0gc2VsZi5fcmVzb2x2ZSgpCiAgICAgICAgdmFsdWUgPSBnZXRhdHRyKF9tb2R1bGUsIGF0dHIpCiAgICAgICAgc2V0YXR0cihzZWxmLCBhdHRyLCB2YWx1ZSkKICAgICAgICByZXR1cm4gdmFsdWUKCgpjbGFzcyBfTGF6eU1vZHVsZSh0eXBlcy5Nb2R1bGVUeXBlKToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgbmFtZSk6CiAgICAgICAgc3VwZXIoX0xhenlNb2R1bGUsIHNlbGYpLl9faW5pdF9fKG5hbWUpCiAgICAgICAgc2VsZi5fX2RvY19fID0gc2VsZi5fX2NsYXNzX18uX19kb2NfXwoKICAgIGRlZiBfX2Rpcl9fKHNlbGYpOgogICAgICAgIGF0dHJzID0gWyJfX2RvY19fIiwgIl9fbmFtZV9fIl0KICAgICAgICBhdHRycyArPSBbYXR0ci5uYW1lIGZvciBhdHRyIGluIHNlbGYuX21vdmVkX2F0dHJpYnV0ZXNdCiAgICAgICAgcmV0dXJuIGF0dHJzCgogICAgIyBTdWJjbGFzc2VzIHNob3VsZCBvdmVycmlkZSB0aGlzCiAgICBfbW92ZWRfYXR0cmlidXRlcyA9IFtdCgoKY2xhc3MgTW92ZWRBdHRyaWJ1dGUoX0xhenlEZXNjcik6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG5hbWUsIG9sZF9tb2QsIG5ld19tb2QsIG9sZF9hdHRyPU5vbmUsIG5ld19hdHRyPU5vbmUpOgogICAgICAgIHN1cGVyKE1vdmVkQXR0cmlidXRlLCBzZWxmKS5fX2luaXRfXyhuYW1lKQogICAgICAgIGlmIFBZMzoKICAgICAgICAgICAgaWYgbmV3X21vZCBpcyBOb25lOgogICAgICAgICAgICAgICAgbmV3X21vZCA9IG5hbWUKICAgICAgICAgICAgc2VsZi5tb2QgPSBuZXdfbW9kCiAgICAgICAgICAgIGlmIG5ld19hdHRyIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBpZiBvbGRfYXR0ciBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgIG5ld19hdHRyID0gbmFtZQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBuZXdfYXR0ciA9IG9sZF9hdHRyCiAgICAgICAgICAgIHNlbGYuYXR0ciA9IG5ld19hdHRyCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5tb2QgPSBvbGRfbW9kCiAgICAgICAgICAgIGlmIG9sZF9hdHRyIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBvbGRfYXR0ciA9IG5hbWUKICAgICAgICAgICAgc2VsZi5hdHRyID0gb2xkX2F0dHIKCiAgICBkZWYgX3Jlc29sdmUoc2VsZik6CiAgICAgICAgbW9kdWxlID0gX2ltcG9ydF9tb2R1bGUoc2VsZi5tb2QpCiAgICAgICAgcmV0dXJuIGdldGF0dHIobW9kdWxlLCBzZWxmLmF0dHIpCgoKY2xhc3MgX1NpeE1ldGFQYXRoSW1wb3J0ZXIob2JqZWN0KToKCiAgICAiIiIKICAgIEEgbWV0YSBwYXRoIGltcG9ydGVyIHRvIGltcG9ydCBzaXgubW92ZXMgYW5kIGl0cyBzdWJtb2R1bGVzLgoKICAgIFRoaXMgY2xhc3MgaW1wbGVtZW50cyBhIFBFUDMwMiBmaW5kZXIgYW5kIGxvYWRlci4gSXQgc2hvdWxkIGJlIGNvbXBhdGlibGUKICAgIHdpdGggUHl0aG9uIDIuNSBhbmQgYWxsIGV4aXN0aW5nIHZlcnNpb25zIG9mIFB5dGhvbjMKICAgICIiIgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBzaXhfbW9kdWxlX25hbWUpOgogICAgICAgIHNlbGYubmFtZSA9IHNpeF9tb2R1bGVfbmFtZQogICAgICAgIHNlbGYua25vd25fbW9kdWxlcyA9IHt9CgogICAgZGVmIF9hZGRfbW9kdWxlKHNlbGYsIG1vZCwgKmZ1bGxuYW1lcyk6CiAgICAgICAgZm9yIGZ1bGxuYW1lIGluIGZ1bGxuYW1lczoKICAgICAgICAgICAgc2VsZi5rbm93bl9tb2R1bGVzW3NlbGYubmFtZSArICIuIiArIGZ1bGxuYW1lXSA9IG1vZAoKICAgIGRlZiBfZ2V0X21vZHVsZShzZWxmLCBmdWxsbmFtZSk6CiAgICAgICAgcmV0dXJuIHNlbGYua25vd25fbW9kdWxlc1tzZWxmLm5hbWUgKyAiLiIgKyBmdWxsbmFtZV0KCiAgICBkZWYgZmluZF9tb2R1bGUoc2VsZiwgZnVsbG5hbWUsIHBhdGg9Tm9uZSk6CiAgICAgICAgaWYgZnVsbG5hbWUgaW4gc2VsZi5rbm93bl9tb2R1bGVzOgogICAgICAgICAgICByZXR1cm4gc2VsZgogICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIF9fZ2V0X21vZHVsZShzZWxmLCBmdWxsbmFtZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZi5rbm93bl9tb2R1bGVzW2Z1bGxuYW1lXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcmFpc2UgSW1wb3J0RXJyb3IoIlRoaXMgbG9hZGVyIGRvZXMgbm90IGtub3cgbW9kdWxlICIgKyBmdWxsbmFtZSkKCiAgICBkZWYgbG9hZF9tb2R1bGUoc2VsZiwgZnVsbG5hbWUpOgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBpbiBjYXNlIG9mIGEgcmVsb2FkCiAgICAgICAgICAgIHJldHVybiBzeXMubW9kdWxlc1tmdWxsbmFtZV0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBtb2QgPSBzZWxmLl9fZ2V0X21vZHVsZShmdWxsbmFtZSkKICAgICAgICBpZiBpc2luc3RhbmNlKG1vZCwgTW92ZWRNb2R1bGUpOgogICAgICAgICAgICBtb2QgPSBtb2QuX3Jlc29sdmUoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG1vZC5fX2xvYWRlcl9fID0gc2VsZgogICAgICAgIHN5cy5tb2R1bGVzW2Z1bGxuYW1lXSA9IG1vZAogICAgICAgIHJldHVybiBtb2QKCiAgICBkZWYgaXNfcGFja2FnZShzZWxmLCBmdWxsbmFtZSk6CiAgICAgICAgIiIiCiAgICAgICAgUmV0dXJuIHRydWUsIGlmIHRoZSBuYW1lZCBtb2R1bGUgaXMgYSBwYWNrYWdlLgoKICAgICAgICBXZSBuZWVkIHRoaXMgbWV0aG9kIHRvIGdldCBjb3JyZWN0IHNwZWMgb2JqZWN0cyB3aXRoCiAgICAgICAgUHl0aG9uIDMuNCAoc2VlIFBFUDQ1MSkKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gaGFzYXR0cihzZWxmLl9fZ2V0X21vZHVsZShmdWxsbmFtZSksICJfX3BhdGhfXyIpCgogICAgZGVmIGdldF9jb2RlKHNlbGYsIGZ1bGxuYW1lKToKICAgICAgICAiIiJSZXR1cm4gTm9uZQoKICAgICAgICBSZXF1aXJlZCwgaWYgaXNfcGFja2FnZSBpcyBpbXBsZW1lbnRlZCIiIgogICAgICAgIHNlbGYuX19nZXRfbW9kdWxlKGZ1bGxuYW1lKSAgIyBldmVudHVhbGx5IHJhaXNlcyBJbXBvcnRFcnJvcgogICAgICAgIHJldHVybiBOb25lCiAgICBnZXRfc291cmNlID0gZ2V0X2NvZGUgICMgc2FtZSBhcyBnZXRfY29kZQoKX2ltcG9ydGVyID0gX1NpeE1ldGFQYXRoSW1wb3J0ZXIoX19uYW1lX18pCgoKY2xhc3MgX01vdmVkSXRlbXMoX0xhenlNb2R1bGUpOgoKICAgICIiIkxhenkgbG9hZGluZyBvZiBtb3ZlZCBvYmplY3RzIiIiCiAgICBfX3BhdGhfXyA9IFtdICAjIG1hcmsgYXMgcGFja2FnZQoKCl9tb3ZlZF9hdHRyaWJ1dGVzID0gWwogICAgTW92ZWRBdHRyaWJ1dGUoImNTdHJpbmdJTyIsICJjU3RyaW5nSU8iLCAiaW8iLCAiU3RyaW5nSU8iKSwKICAgIE1vdmVkQXR0cmlidXRlKCJmaWx0ZXIiLCAiaXRlcnRvb2xzIiwgImJ1aWx0aW5zIiwgImlmaWx0ZXIiLCAiZmlsdGVyIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiZmlsdGVyZmFsc2UiLCAiaXRlcnRvb2xzIiwgIml0ZXJ0b29scyIsICJpZmlsdGVyZmFsc2UiLCAiZmlsdGVyZmFsc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJpbnB1dCIsICJfX2J1aWx0aW5fXyIsICJidWlsdGlucyIsICJyYXdfaW5wdXQiLCAiaW5wdXQiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJpbnRlcm4iLCAiX19idWlsdGluX18iLCAic3lzIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgibWFwIiwgIml0ZXJ0b29scyIsICJidWlsdGlucyIsICJpbWFwIiwgIm1hcCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImdldGN3ZCIsICJvcyIsICJvcyIsICJnZXRjd2R1IiwgImdldGN3ZCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImdldGN3ZGIiLCAib3MiLCAib3MiLCAiZ2V0Y3dkIiwgImdldGN3ZGIiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJyYW5nZSIsICJfX2J1aWx0aW5fXyIsICJidWlsdGlucyIsICJ4cmFuZ2UiLCAicmFuZ2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJyZWxvYWRfbW9kdWxlIiwgIl9fYnVpbHRpbl9fIiwgImltcG9ydGxpYiIgaWYgUFkzNCBlbHNlICJpbXAiLCAicmVsb2FkIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicmVkdWNlIiwgIl9fYnVpbHRpbl9fIiwgImZ1bmN0b29scyIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInNobGV4X3F1b3RlIiwgInBpcGVzIiwgInNobGV4IiwgInF1b3RlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiU3RyaW5nSU8iLCAiU3RyaW5nSU8iLCAiaW8iKSwKICAgIE1vdmVkQXR0cmlidXRlKCJVc2VyRGljdCIsICJVc2VyRGljdCIsICJjb2xsZWN0aW9ucyIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlVzZXJMaXN0IiwgIlVzZXJMaXN0IiwgImNvbGxlY3Rpb25zIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiVXNlclN0cmluZyIsICJVc2VyU3RyaW5nIiwgImNvbGxlY3Rpb25zIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgieHJhbmdlIiwgIl9fYnVpbHRpbl9fIiwgImJ1aWx0aW5zIiwgInhyYW5nZSIsICJyYW5nZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInppcCIsICJpdGVydG9vbHMiLCAiYnVpbHRpbnMiLCAiaXppcCIsICJ6aXAiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ6aXBfbG9uZ2VzdCIsICJpdGVydG9vbHMiLCAiaXRlcnRvb2xzIiwgIml6aXBfbG9uZ2VzdCIsICJ6aXBfbG9uZ2VzdCIpLAogICAgTW92ZWRNb2R1bGUoImJ1aWx0aW5zIiwgIl9fYnVpbHRpbl9fIiksCiAgICBNb3ZlZE1vZHVsZSgiY29uZmlncGFyc2VyIiwgIkNvbmZpZ1BhcnNlciIpLAogICAgTW92ZWRNb2R1bGUoImNvcHlyZWciLCAiY29weV9yZWciKSwKICAgIE1vdmVkTW9kdWxlKCJkYm1fZ251IiwgImdkYm0iLCAiZGJtLmdudSIpLAogICAgTW92ZWRNb2R1bGUoIl9kdW1teV90aHJlYWQiLCAiZHVtbXlfdGhyZWFkIiwgIl9kdW1teV90aHJlYWQiKSwKICAgIE1vdmVkTW9kdWxlKCJodHRwX2Nvb2tpZWphciIsICJjb29raWVsaWIiLCAiaHR0cC5jb29raWVqYXIiKSwKICAgIE1vdmVkTW9kdWxlKCJodHRwX2Nvb2tpZXMiLCAiQ29va2llIiwgImh0dHAuY29va2llcyIpLAogICAgTW92ZWRNb2R1bGUoImh0bWxfZW50aXRpZXMiLCAiaHRtbGVudGl0eWRlZnMiLCAiaHRtbC5lbnRpdGllcyIpLAogICAgTW92ZWRNb2R1bGUoImh0bWxfcGFyc2VyIiwgIkhUTUxQYXJzZXIiLCAiaHRtbC5wYXJzZXIiKSwKICAgIE1vdmVkTW9kdWxlKCJodHRwX2NsaWVudCIsICJodHRwbGliIiwgImh0dHAuY2xpZW50IiksCiAgICBNb3ZlZE1vZHVsZSgiZW1haWxfbWltZV9tdWx0aXBhcnQiLCAiZW1haWwuTUlNRU11bHRpcGFydCIsICJlbWFpbC5taW1lLm11bHRpcGFydCIpLAogICAgTW92ZWRNb2R1bGUoImVtYWlsX21pbWVfbm9ubXVsdGlwYXJ0IiwgImVtYWlsLk1JTUVOb25NdWx0aXBhcnQiLCAiZW1haWwubWltZS5ub25tdWx0aXBhcnQiKSwKICAgIE1vdmVkTW9kdWxlKCJlbWFpbF9taW1lX3RleHQiLCAiZW1haWwuTUlNRVRleHQiLCAiZW1haWwubWltZS50ZXh0IiksCiAgICBNb3ZlZE1vZHVsZSgiZW1haWxfbWltZV9iYXNlIiwgImVtYWlsLk1JTUVCYXNlIiwgImVtYWlsLm1pbWUuYmFzZSIpLAogICAgTW92ZWRNb2R1bGUoIkJhc2VIVFRQU2VydmVyIiwgIkJhc2VIVFRQU2VydmVyIiwgImh0dHAuc2VydmVyIiksCiAgICBNb3ZlZE1vZHVsZSgiQ0dJSFRUUFNlcnZlciIsICJDR0lIVFRQU2VydmVyIiwgImh0dHAuc2VydmVyIiksCiAgICBNb3ZlZE1vZHVsZSgiU2ltcGxlSFRUUFNlcnZlciIsICJTaW1wbGVIVFRQU2VydmVyIiwgImh0dHAuc2VydmVyIiksCiAgICBNb3ZlZE1vZHVsZSgiY1BpY2tsZSIsICJjUGlja2xlIiwgInBpY2tsZSIpLAogICAgTW92ZWRNb2R1bGUoInF1ZXVlIiwgIlF1ZXVlIiksCiAgICBNb3ZlZE1vZHVsZSgicmVwcmxpYiIsICJyZXByIiksCiAgICBNb3ZlZE1vZHVsZSgic29ja2V0c2VydmVyIiwgIlNvY2tldFNlcnZlciIpLAogICAgTW92ZWRNb2R1bGUoIl90aHJlYWQiLCAidGhyZWFkIiwgIl90aHJlYWQiKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyIiwgIlRraW50ZXIiKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX2RpYWxvZyIsICJEaWFsb2ciLCAidGtpbnRlci5kaWFsb2ciKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX2ZpbGVkaWFsb2ciLCAiRmlsZURpYWxvZyIsICJ0a2ludGVyLmZpbGVkaWFsb2ciKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX3Njcm9sbGVkdGV4dCIsICJTY3JvbGxlZFRleHQiLCAidGtpbnRlci5zY3JvbGxlZHRleHQiKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX3NpbXBsZWRpYWxvZyIsICJTaW1wbGVEaWFsb2ciLCAidGtpbnRlci5zaW1wbGVkaWFsb2ciKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX3RpeCIsICJUaXgiLCAidGtpbnRlci50aXgiKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX3R0ayIsICJ0dGsiLCAidGtpbnRlci50dGsiKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX2NvbnN0YW50cyIsICJUa2NvbnN0YW50cyIsICJ0a2ludGVyLmNvbnN0YW50cyIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfZG5kIiwgIlRrZG5kIiwgInRraW50ZXIuZG5kIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9jb2xvcmNob29zZXIiLCAidGtDb2xvckNob29zZXIiLAogICAgICAgICAgICAgICAgInRraW50ZXIuY29sb3JjaG9vc2VyIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9jb21tb25kaWFsb2ciLCAidGtDb21tb25EaWFsb2ciLAogICAgICAgICAgICAgICAgInRraW50ZXIuY29tbW9uZGlhbG9nIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl90a2ZpbGVkaWFsb2ciLCAidGtGaWxlRGlhbG9nIiwgInRraW50ZXIuZmlsZWRpYWxvZyIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfZm9udCIsICJ0a0ZvbnQiLCAidGtpbnRlci5mb250IiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9tZXNzYWdlYm94IiwgInRrTWVzc2FnZUJveCIsICJ0a2ludGVyLm1lc3NhZ2Vib3giKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX3Rrc2ltcGxlZGlhbG9nIiwgInRrU2ltcGxlRGlhbG9nIiwKICAgICAgICAgICAgICAgICJ0a2ludGVyLnNpbXBsZWRpYWxvZyIpLAogICAgTW92ZWRNb2R1bGUoInVybGxpYl9wYXJzZSIsIF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWJfcGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZE1vZHVsZSgidXJsbGliX2Vycm9yIiwgX19uYW1lX18gKyAiLm1vdmVzLnVybGxpYl9lcnJvciIsICJ1cmxsaWIuZXJyb3IiKSwKICAgIE1vdmVkTW9kdWxlKCJ1cmxsaWIiLCBfX25hbWVfXyArICIubW92ZXMudXJsbGliIiwgX19uYW1lX18gKyAiLm1vdmVzLnVybGxpYiIpLAogICAgTW92ZWRNb2R1bGUoInVybGxpYl9yb2JvdHBhcnNlciIsICJyb2JvdHBhcnNlciIsICJ1cmxsaWIucm9ib3RwYXJzZXIiKSwKICAgIE1vdmVkTW9kdWxlKCJ4bWxycGNfY2xpZW50IiwgInhtbHJwY2xpYiIsICJ4bWxycGMuY2xpZW50IiksCiAgICBNb3ZlZE1vZHVsZSgieG1scnBjX3NlcnZlciIsICJTaW1wbGVYTUxSUENTZXJ2ZXIiLCAieG1scnBjLnNlcnZlciIpLApdCiMgQWRkIHdpbmRvd3Mgc3BlY2lmaWMgbW9kdWxlcy4KaWYgc3lzLnBsYXRmb3JtID09ICJ3aW4zMiI6CiAgICBfbW92ZWRfYXR0cmlidXRlcyArPSBbCiAgICAgICAgTW92ZWRNb2R1bGUoIndpbnJlZyIsICJfd2lucmVnIiksCiAgICBdCgpmb3IgYXR0ciBpbiBfbW92ZWRfYXR0cmlidXRlczoKICAgIHNldGF0dHIoX01vdmVkSXRlbXMsIGF0dHIubmFtZSwgYXR0cikKICAgIGlmIGlzaW5zdGFuY2UoYXR0ciwgTW92ZWRNb2R1bGUpOgogICAgICAgIF9pbXBvcnRlci5fYWRkX21vZHVsZShhdHRyLCAibW92ZXMuIiArIGF0dHIubmFtZSkKZGVsIGF0dHIKCl9Nb3ZlZEl0ZW1zLl9tb3ZlZF9hdHRyaWJ1dGVzID0gX21vdmVkX2F0dHJpYnV0ZXMKCm1vdmVzID0gX01vdmVkSXRlbXMoX19uYW1lX18gKyAiLm1vdmVzIikKX2ltcG9ydGVyLl9hZGRfbW9kdWxlKG1vdmVzLCAibW92ZXMiKQoKCmNsYXNzIE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3BhcnNlKF9MYXp5TW9kdWxlKToKCiAgICAiIiJMYXp5IGxvYWRpbmcgb2YgbW92ZWQgb2JqZWN0cyBpbiBzaXgubW92ZXMudXJsbGliX3BhcnNlIiIiCgoKX3VybGxpYl9wYXJzZV9tb3ZlZF9hdHRyaWJ1dGVzID0gWwogICAgTW92ZWRBdHRyaWJ1dGUoIlBhcnNlUmVzdWx0IiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlNwbGl0UmVzdWx0IiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInBhcnNlX3FzIiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInBhcnNlX3FzbCIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1cmxkZWZyYWciLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsam9pbiIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1cmxwYXJzZSIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1cmxzcGxpdCIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1cmx1bnBhcnNlIiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVybHVuc3BsaXQiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicXVvdGUiLCAidXJsbGliIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInF1b3RlX3BsdXMiLCAidXJsbGliIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVucXVvdGUiLCAidXJsbGliIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVucXVvdGVfcGx1cyIsICJ1cmxsaWIiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsZW5jb2RlIiwgInVybGxpYiIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJzcGxpdHF1ZXJ5IiwgInVybGxpYiIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJzcGxpdHRhZyIsICJ1cmxsaWIiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgic3BsaXR1c2VyIiwgInVybGxpYiIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1c2VzX2ZyYWdtZW50IiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVzZXNfbmV0bG9jIiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVzZXNfcGFyYW1zIiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVzZXNfcXVlcnkiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXNlc19yZWxhdGl2ZSIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKXQpmb3IgYXR0ciBpbiBfdXJsbGliX3BhcnNlX21vdmVkX2F0dHJpYnV0ZXM6CiAgICBzZXRhdHRyKE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3BhcnNlLCBhdHRyLm5hbWUsIGF0dHIpCmRlbCBhdHRyCgpNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9wYXJzZS5fbW92ZWRfYXR0cmlidXRlcyA9IF91cmxsaWJfcGFyc2VfbW92ZWRfYXR0cmlidXRlcwoKX2ltcG9ydGVyLl9hZGRfbW9kdWxlKE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3BhcnNlKF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWJfcGFyc2UiKSwKICAgICAgICAgICAgICAgICAgICAgICJtb3Zlcy51cmxsaWJfcGFyc2UiLCAibW92ZXMudXJsbGliLnBhcnNlIikKCgpjbGFzcyBNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9lcnJvcihfTGF6eU1vZHVsZSk6CgogICAgIiIiTGF6eSBsb2FkaW5nIG9mIG1vdmVkIG9iamVjdHMgaW4gc2l4Lm1vdmVzLnVybGxpYl9lcnJvciIiIgoKCl91cmxsaWJfZXJyb3JfbW92ZWRfYXR0cmlidXRlcyA9IFsKICAgIE1vdmVkQXR0cmlidXRlKCJVUkxFcnJvciIsICJ1cmxsaWIyIiwgInVybGxpYi5lcnJvciIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBFcnJvciIsICJ1cmxsaWIyIiwgInVybGxpYi5lcnJvciIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkNvbnRlbnRUb29TaG9ydEVycm9yIiwgInVybGxpYiIsICJ1cmxsaWIuZXJyb3IiKSwKXQpmb3IgYXR0ciBpbiBfdXJsbGliX2Vycm9yX21vdmVkX2F0dHJpYnV0ZXM6CiAgICBzZXRhdHRyKE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX2Vycm9yLCBhdHRyLm5hbWUsIGF0dHIpCmRlbCBhdHRyCgpNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9lcnJvci5fbW92ZWRfYXR0cmlidXRlcyA9IF91cmxsaWJfZXJyb3JfbW92ZWRfYXR0cmlidXRlcwoKX2ltcG9ydGVyLl9hZGRfbW9kdWxlKE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX2Vycm9yKF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWIuZXJyb3IiKSwKICAgICAgICAgICAgICAgICAgICAgICJtb3Zlcy51cmxsaWJfZXJyb3IiLCAibW92ZXMudXJsbGliLmVycm9yIikKCgpjbGFzcyBNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yZXF1ZXN0KF9MYXp5TW9kdWxlKToKCiAgICAiIiJMYXp5IGxvYWRpbmcgb2YgbW92ZWQgb2JqZWN0cyBpbiBzaXgubW92ZXMudXJsbGliX3JlcXVlc3QiIiIKCgpfdXJsbGliX3JlcXVlc3RfbW92ZWRfYXR0cmlidXRlcyA9IFsKICAgIE1vdmVkQXR0cmlidXRlKCJ1cmxvcGVuIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJpbnN0YWxsX29wZW5lciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiYnVpbGRfb3BlbmVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJwYXRobmFtZTJ1cmwiLCAidXJsbGliIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsMnBhdGhuYW1lIiwgInVybGxpYiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImdldHByb3hpZXMiLCAidXJsbGliIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiUmVxdWVzdCIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiT3BlbmVyRGlyZWN0b3IiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBEZWZhdWx0RXJyb3JIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQUmVkaXJlY3RIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQQ29va2llUHJvY2Vzc29yIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJQcm94eUhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkJhc2VIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQUGFzc3dvcmRNZ3IiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBQYXNzd29yZE1ncldpdGhEZWZhdWx0UmVhbG0iLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkFic3RyYWN0QmFzaWNBdXRoSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUEJhc2ljQXV0aEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlByb3h5QmFzaWNBdXRoSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiQWJzdHJhY3REaWdlc3RBdXRoSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUERpZ2VzdEF1dGhIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJQcm94eURpZ2VzdEF1dGhIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUFNIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJGaWxlSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiRlRQSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiQ2FjaGVGVFBIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJVbmtub3duSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUEVycm9yUHJvY2Vzc29yIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1cmxyZXRyaWV2ZSIsICJ1cmxsaWIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1cmxjbGVhbnVwIiwgInVybGxpYiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlVSTG9wZW5lciIsICJ1cmxsaWIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJGYW5jeVVSTG9wZW5lciIsICJ1cmxsaWIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJwcm94eV9ieXBhc3MiLCAidXJsbGliIiwgInVybGxpYi5yZXF1ZXN0IiksCl0KZm9yIGF0dHIgaW4gX3VybGxpYl9yZXF1ZXN0X21vdmVkX2F0dHJpYnV0ZXM6CiAgICBzZXRhdHRyKE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3JlcXVlc3QsIGF0dHIubmFtZSwgYXR0cikKZGVsIGF0dHIKCk1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3JlcXVlc3QuX21vdmVkX2F0dHJpYnV0ZXMgPSBfdXJsbGliX3JlcXVlc3RfbW92ZWRfYXR0cmlidXRlcwoKX2ltcG9ydGVyLl9hZGRfbW9kdWxlKE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3JlcXVlc3QoX19uYW1lX18gKyAiLm1vdmVzLnVybGxpYi5yZXF1ZXN0IiksCiAgICAgICAgICAgICAgICAgICAgICAibW92ZXMudXJsbGliX3JlcXVlc3QiLCAibW92ZXMudXJsbGliLnJlcXVlc3QiKQoKCmNsYXNzIE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3Jlc3BvbnNlKF9MYXp5TW9kdWxlKToKCiAgICAiIiJMYXp5IGxvYWRpbmcgb2YgbW92ZWQgb2JqZWN0cyBpbiBzaXgubW92ZXMudXJsbGliX3Jlc3BvbnNlIiIiCgoKX3VybGxpYl9yZXNwb25zZV9tb3ZlZF9hdHRyaWJ1dGVzID0gWwogICAgTW92ZWRBdHRyaWJ1dGUoImFkZGJhc2UiLCAidXJsbGliIiwgInVybGxpYi5yZXNwb25zZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImFkZGNsb3NlaG9vayIsICJ1cmxsaWIiLCAidXJsbGliLnJlc3BvbnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiYWRkaW5mbyIsICJ1cmxsaWIiLCAidXJsbGliLnJlc3BvbnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiYWRkaW5mb3VybCIsICJ1cmxsaWIiLCAidXJsbGliLnJlc3BvbnNlIiksCl0KZm9yIGF0dHIgaW4gX3VybGxpYl9yZXNwb25zZV9tb3ZlZF9hdHRyaWJ1dGVzOgogICAgc2V0YXR0cihNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yZXNwb25zZSwgYXR0ci5uYW1lLCBhdHRyKQpkZWwgYXR0cgoKTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcmVzcG9uc2UuX21vdmVkX2F0dHJpYnV0ZXMgPSBfdXJsbGliX3Jlc3BvbnNlX21vdmVkX2F0dHJpYnV0ZXMKCl9pbXBvcnRlci5fYWRkX21vZHVsZShNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yZXNwb25zZShfX25hbWVfXyArICIubW92ZXMudXJsbGliLnJlc3BvbnNlIiksCiAgICAgICAgICAgICAgICAgICAgICAibW92ZXMudXJsbGliX3Jlc3BvbnNlIiwgIm1vdmVzLnVybGxpYi5yZXNwb25zZSIpCgoKY2xhc3MgTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcm9ib3RwYXJzZXIoX0xhenlNb2R1bGUpOgoKICAgICIiIkxhenkgbG9hZGluZyBvZiBtb3ZlZCBvYmplY3RzIGluIHNpeC5tb3Zlcy51cmxsaWJfcm9ib3RwYXJzZXIiIiIKCgpfdXJsbGliX3JvYm90cGFyc2VyX21vdmVkX2F0dHJpYnV0ZXMgPSBbCiAgICBNb3ZlZEF0dHJpYnV0ZSgiUm9ib3RGaWxlUGFyc2VyIiwgInJvYm90cGFyc2VyIiwgInVybGxpYi5yb2JvdHBhcnNlciIpLApdCmZvciBhdHRyIGluIF91cmxsaWJfcm9ib3RwYXJzZXJfbW92ZWRfYXR0cmlidXRlczoKICAgIHNldGF0dHIoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcm9ib3RwYXJzZXIsIGF0dHIubmFtZSwgYXR0cikKZGVsIGF0dHIKCk1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3JvYm90cGFyc2VyLl9tb3ZlZF9hdHRyaWJ1dGVzID0gX3VybGxpYl9yb2JvdHBhcnNlcl9tb3ZlZF9hdHRyaWJ1dGVzCgpfaW1wb3J0ZXIuX2FkZF9tb2R1bGUoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcm9ib3RwYXJzZXIoX19uYW1lX18gKyAiLm1vdmVzLnVybGxpYi5yb2JvdHBhcnNlciIpLAogICAgICAgICAgICAgICAgICAgICAgIm1vdmVzLnVybGxpYl9yb2JvdHBhcnNlciIsICJtb3Zlcy51cmxsaWIucm9ib3RwYXJzZXIiKQoKCmNsYXNzIE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliKHR5cGVzLk1vZHVsZVR5cGUpOgoKICAgICIiIkNyZWF0ZSBhIHNpeC5tb3Zlcy51cmxsaWIgbmFtZXNwYWNlIHRoYXQgcmVzZW1ibGVzIHRoZSBQeXRob24gMyBuYW1lc3BhY2UiIiIKICAgIF9fcGF0aF9fID0gW10gICMgbWFyayBhcyBwYWNrYWdlCiAgICBwYXJzZSA9IF9pbXBvcnRlci5fZ2V0X21vZHVsZSgibW92ZXMudXJsbGliX3BhcnNlIikKICAgIGVycm9yID0gX2ltcG9ydGVyLl9nZXRfbW9kdWxlKCJtb3Zlcy51cmxsaWJfZXJyb3IiKQogICAgcmVxdWVzdCA9IF9pbXBvcnRlci5fZ2V0X21vZHVsZSgibW92ZXMudXJsbGliX3JlcXVlc3QiKQogICAgcmVzcG9uc2UgPSBfaW1wb3J0ZXIuX2dldF9tb2R1bGUoIm1vdmVzLnVybGxpYl9yZXNwb25zZSIpCiAgICByb2JvdHBhcnNlciA9IF9pbXBvcnRlci5fZ2V0X21vZHVsZSgibW92ZXMudXJsbGliX3JvYm90cGFyc2VyIikKCiAgICBkZWYgX19kaXJfXyhzZWxmKToKICAgICAgICByZXR1cm4gWydwYXJzZScsICdlcnJvcicsICdyZXF1ZXN0JywgJ3Jlc3BvbnNlJywgJ3JvYm90cGFyc2VyJ10KCl9pbXBvcnRlci5fYWRkX21vZHVsZShNb2R1bGVfc2l4X21vdmVzX3VybGxpYihfX25hbWVfXyArICIubW92ZXMudXJsbGliIiksCiAgICAgICAgICAgICAgICAgICAgICAibW92ZXMudXJsbGliIikKCgpkZWYgYWRkX21vdmUobW92ZSk6CiAgICAiIiJBZGQgYW4gaXRlbSB0byBzaXgubW92ZXMuIiIiCiAgICBzZXRhdHRyKF9Nb3ZlZEl0ZW1zLCBtb3ZlLm5hbWUsIG1vdmUpCgoKZGVmIHJlbW92ZV9tb3ZlKG5hbWUpOgogICAgIiIiUmVtb3ZlIGl0ZW0gZnJvbSBzaXgubW92ZXMuIiIiCiAgICB0cnk6CiAgICAgICAgZGVsYXR0cihfTW92ZWRJdGVtcywgbmFtZSkKICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGRlbCBtb3Zlcy5fX2RpY3RfX1tuYW1lXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcmFpc2UgQXR0cmlidXRlRXJyb3IoIm5vIHN1Y2ggbW92ZSwgJXIiICUgKG5hbWUsKSkKCgppZiBQWTM6CiAgICBfbWV0aF9mdW5jID0gIl9fZnVuY19fIgogICAgX21ldGhfc2VsZiA9ICJfX3NlbGZfXyIKCiAgICBfZnVuY19jbG9zdXJlID0gIl9fY2xvc3VyZV9fIgogICAgX2Z1bmNfY29kZSA9ICJfX2NvZGVfXyIKICAgIF9mdW5jX2RlZmF1bHRzID0gIl9fZGVmYXVsdHNfXyIKICAgIF9mdW5jX2dsb2JhbHMgPSAiX19nbG9iYWxzX18iCmVsc2U6CiAgICBfbWV0aF9mdW5jID0gImltX2Z1bmMiCiAgICBfbWV0aF9zZWxmID0gImltX3NlbGYiCgogICAgX2Z1bmNfY2xvc3VyZSA9ICJmdW5jX2Nsb3N1cmUiCiAgICBfZnVuY19jb2RlID0gImZ1bmNfY29kZSIKICAgIF9mdW5jX2RlZmF1bHRzID0gImZ1bmNfZGVmYXVsdHMiCiAgICBfZnVuY19nbG9iYWxzID0gImZ1bmNfZ2xvYmFscyIKCgp0cnk6CiAgICBhZHZhbmNlX2l0ZXJhdG9yID0gbmV4dApleGNlcHQgTmFtZUVycm9yOgogICAgZGVmIGFkdmFuY2VfaXRlcmF0b3IoaXQpOgogICAgICAgIHJldHVybiBpdC5uZXh0KCkKbmV4dCA9IGFkdmFuY2VfaXRlcmF0b3IKCgp0cnk6CiAgICBjYWxsYWJsZSA9IGNhbGxhYmxlCmV4Y2VwdCBOYW1lRXJyb3I6CiAgICBkZWYgY2FsbGFibGUob2JqKToKICAgICAgICByZXR1cm4gYW55KCJfX2NhbGxfXyIgaW4ga2xhc3MuX19kaWN0X18gZm9yIGtsYXNzIGluIHR5cGUob2JqKS5fX21yb19fKQoKCmlmIFBZMzoKICAgIGRlZiBnZXRfdW5ib3VuZF9mdW5jdGlvbih1bmJvdW5kKToKICAgICAgICByZXR1cm4gdW5ib3VuZAoKICAgIGNyZWF0ZV9ib3VuZF9tZXRob2QgPSB0eXBlcy5NZXRob2RUeXBlCgogICAgZGVmIGNyZWF0ZV91bmJvdW5kX21ldGhvZChmdW5jLCBjbHMpOgogICAgICAgIHJldHVybiBmdW5jCgogICAgSXRlcmF0b3IgPSBvYmplY3QKZWxzZToKICAgIGRlZiBnZXRfdW5ib3VuZF9mdW5jdGlvbih1bmJvdW5kKToKICAgICAgICByZXR1cm4gdW5ib3VuZC5pbV9mdW5jCgogICAgZGVmIGNyZWF0ZV9ib3VuZF9tZXRob2QoZnVuYywgb2JqKToKICAgICAgICByZXR1cm4gdHlwZXMuTWV0aG9kVHlwZShmdW5jLCBvYmosIG9iai5fX2NsYXNzX18pCgogICAgZGVmIGNyZWF0ZV91bmJvdW5kX21ldGhvZChmdW5jLCBjbHMpOgogICAgICAgIHJldHVybiB0eXBlcy5NZXRob2RUeXBlKGZ1bmMsIE5vbmUsIGNscykKCiAgICBjbGFzcyBJdGVyYXRvcihvYmplY3QpOgoKICAgICAgICBkZWYgbmV4dChzZWxmKToKICAgICAgICAgICAgcmV0dXJuIHR5cGUoc2VsZikuX19uZXh0X18oc2VsZikKCiAgICBjYWxsYWJsZSA9IGNhbGxhYmxlCl9hZGRfZG9jKGdldF91bmJvdW5kX2Z1bmN0aW9uLAogICAgICAgICAiIiJHZXQgdGhlIGZ1bmN0aW9uIG91dCBvZiBhIHBvc3NpYmx5IHVuYm91bmQgZnVuY3Rpb24iIiIpCgoKZ2V0X21ldGhvZF9mdW5jdGlvbiA9IG9wZXJhdG9yLmF0dHJnZXR0ZXIoX21ldGhfZnVuYykKZ2V0X21ldGhvZF9zZWxmID0gb3BlcmF0b3IuYXR0cmdldHRlcihfbWV0aF9zZWxmKQpnZXRfZnVuY3Rpb25fY2xvc3VyZSA9IG9wZXJhdG9yLmF0dHJnZXR0ZXIoX2Z1bmNfY2xvc3VyZSkKZ2V0X2Z1bmN0aW9uX2NvZGUgPSBvcGVyYXRvci5hdHRyZ2V0dGVyKF9mdW5jX2NvZGUpCmdldF9mdW5jdGlvbl9kZWZhdWx0cyA9IG9wZXJhdG9yLmF0dHJnZXR0ZXIoX2Z1bmNfZGVmYXVsdHMpCmdldF9mdW5jdGlvbl9nbG9iYWxzID0gb3BlcmF0b3IuYXR0cmdldHRlcihfZnVuY19nbG9iYWxzKQoKCmlmIFBZMzoKICAgIGRlZiBpdGVya2V5cyhkLCAqKmt3KToKICAgICAgICByZXR1cm4gaXRlcihkLmtleXMoKiprdykpCgogICAgZGVmIGl0ZXJ2YWx1ZXMoZCwgKiprdyk6CiAgICAgICAgcmV0dXJuIGl0ZXIoZC52YWx1ZXMoKiprdykpCgogICAgZGVmIGl0ZXJpdGVtcyhkLCAqKmt3KToKICAgICAgICByZXR1cm4gaXRlcihkLml0ZW1zKCoqa3cpKQoKICAgIGRlZiBpdGVybGlzdHMoZCwgKiprdyk6CiAgICAgICAgcmV0dXJuIGl0ZXIoZC5saXN0cygqKmt3KSkKCiAgICB2aWV3a2V5cyA9IG9wZXJhdG9yLm1ldGhvZGNhbGxlcigia2V5cyIpCgogICAgdmlld3ZhbHVlcyA9IG9wZXJhdG9yLm1ldGhvZGNhbGxlcigidmFsdWVzIikKCiAgICB2aWV3aXRlbXMgPSBvcGVyYXRvci5tZXRob2RjYWxsZXIoIml0ZW1zIikKZWxzZToKICAgIGRlZiBpdGVya2V5cyhkLCAqKmt3KToKICAgICAgICByZXR1cm4gZC5pdGVya2V5cygqKmt3KQoKICAgIGRlZiBpdGVydmFsdWVzKGQsICoqa3cpOgogICAgICAgIHJldHVybiBkLml0ZXJ2YWx1ZXMoKiprdykKCiAgICBkZWYgaXRlcml0ZW1zKGQsICoqa3cpOgogICAgICAgIHJldHVybiBkLml0ZXJpdGVtcygqKmt3KQoKICAgIGRlZiBpdGVybGlzdHMoZCwgKiprdyk6CiAgICAgICAgcmV0dXJuIGQuaXRlcmxpc3RzKCoqa3cpCgogICAgdmlld2tleXMgPSBvcGVyYXRvci5tZXRob2RjYWxsZXIoInZpZXdrZXlzIikKCiAgICB2aWV3dmFsdWVzID0gb3BlcmF0b3IubWV0aG9kY2FsbGVyKCJ2aWV3dmFsdWVzIikKCiAgICB2aWV3aXRlbXMgPSBvcGVyYXRvci5tZXRob2RjYWxsZXIoInZpZXdpdGVtcyIpCgpfYWRkX2RvYyhpdGVya2V5cywgIlJldHVybiBhbiBpdGVyYXRvciBvdmVyIHRoZSBrZXlzIG9mIGEgZGljdGlvbmFyeS4iKQpfYWRkX2RvYyhpdGVydmFsdWVzLCAiUmV0dXJuIGFuIGl0ZXJhdG9yIG92ZXIgdGhlIHZhbHVlcyBvZiBhIGRpY3Rpb25hcnkuIikKX2FkZF9kb2MoaXRlcml0ZW1zLAogICAgICAgICAiUmV0dXJuIGFuIGl0ZXJhdG9yIG92ZXIgdGhlIChrZXksIHZhbHVlKSBwYWlycyBvZiBhIGRpY3Rpb25hcnkuIikKX2FkZF9kb2MoaXRlcmxpc3RzLAogICAgICAgICAiUmV0dXJuIGFuIGl0ZXJhdG9yIG92ZXIgdGhlIChrZXksIFt2YWx1ZXNdKSBwYWlycyBvZiBhIGRpY3Rpb25hcnkuIikKCgppZiBQWTM6CiAgICBkZWYgYihzKToKICAgICAgICByZXR1cm4gcy5lbmNvZGUoImxhdGluLTEiKQoKICAgIGRlZiB1KHMpOgogICAgICAgIHJldHVybiBzCiAgICB1bmljaHIgPSBjaHIKICAgIGltcG9ydCBzdHJ1Y3QKICAgIGludDJieXRlID0gc3RydWN0LlN0cnVjdCgiPkIiKS5wYWNrCiAgICBkZWwgc3RydWN0CiAgICBieXRlMmludCA9IG9wZXJhdG9yLml0ZW1nZXR0ZXIoMCkKICAgIGluZGV4Ynl0ZXMgPSBvcGVyYXRvci5nZXRpdGVtCiAgICBpdGVyYnl0ZXMgPSBpdGVyCiAgICBpbXBvcnQgaW8KICAgIFN0cmluZ0lPID0gaW8uU3RyaW5nSU8KICAgIEJ5dGVzSU8gPSBpby5CeXRlc0lPCiAgICBfYXNzZXJ0Q291bnRFcXVhbCA9ICJhc3NlcnRDb3VudEVxdWFsIgogICAgaWYgc3lzLnZlcnNpb25faW5mb1sxXSA8PSAxOgogICAgICAgIF9hc3NlcnRSYWlzZXNSZWdleCA9ICJhc3NlcnRSYWlzZXNSZWdleHAiCiAgICAgICAgX2Fzc2VydFJlZ2V4ID0gImFzc2VydFJlZ2V4cE1hdGNoZXMiCiAgICBlbHNlOgogICAgICAgIF9hc3NlcnRSYWlzZXNSZWdleCA9ICJhc3NlcnRSYWlzZXNSZWdleCIKICAgICAgICBfYXNzZXJ0UmVnZXggPSAiYXNzZXJ0UmVnZXgiCmVsc2U6CiAgICBkZWYgYihzKToKICAgICAgICByZXR1cm4gcwogICAgIyBXb3JrYXJvdW5kIGZvciBzdGFuZGFsb25lIGJhY2tzbGFzaAoKICAgIGRlZiB1KHMpOgogICAgICAgIHJldHVybiB1bmljb2RlKHMucmVwbGFjZShyJ1xcJywgcidcXFxcJyksICJ1bmljb2RlX2VzY2FwZSIpCiAgICB1bmljaHIgPSB1bmljaHIKICAgIGludDJieXRlID0gY2hyCgogICAgZGVmIGJ5dGUyaW50KGJzKToKICAgICAgICByZXR1cm4gb3JkKGJzWzBdKQoKICAgIGRlZiBpbmRleGJ5dGVzKGJ1ZiwgaSk6CiAgICAgICAgcmV0dXJuIG9yZChidWZbaV0pCiAgICBpdGVyYnl0ZXMgPSBmdW5jdG9vbHMucGFydGlhbChpdGVydG9vbHMuaW1hcCwgb3JkKQogICAgaW1wb3J0IFN0cmluZ0lPCiAgICBTdHJpbmdJTyA9IEJ5dGVzSU8gPSBTdHJpbmdJTy5TdHJpbmdJTwogICAgX2Fzc2VydENvdW50RXF1YWwgPSAiYXNzZXJ0SXRlbXNFcXVhbCIKICAgIF9hc3NlcnRSYWlzZXNSZWdleCA9ICJhc3NlcnRSYWlzZXNSZWdleHAiCiAgICBfYXNzZXJ0UmVnZXggPSAiYXNzZXJ0UmVnZXhwTWF0Y2hlcyIKX2FkZF9kb2MoYiwgIiIiQnl0ZSBsaXRlcmFsIiIiKQpfYWRkX2RvYyh1LCAiIiJUZXh0IGxpdGVyYWwiIiIpCgoKZGVmIGFzc2VydENvdW50RXF1YWwoc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToKICAgIHJldHVybiBnZXRhdHRyKHNlbGYsIF9hc3NlcnRDb3VudEVxdWFsKSgqYXJncywgKiprd2FyZ3MpCgoKZGVmIGFzc2VydFJhaXNlc1JlZ2V4KHNlbGYsICphcmdzLCAqKmt3YXJncyk6CiAgICByZXR1cm4gZ2V0YXR0cihzZWxmLCBfYXNzZXJ0UmFpc2VzUmVnZXgpKCphcmdzLCAqKmt3YXJncykKCgpkZWYgYXNzZXJ0UmVnZXgoc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToKICAgIHJldHVybiBnZXRhdHRyKHNlbGYsIF9hc3NlcnRSZWdleCkoKmFyZ3MsICoqa3dhcmdzKQoKCmlmIFBZMzoKICAgIGV4ZWNfID0gZ2V0YXR0cihtb3Zlcy5idWlsdGlucywgImV4ZWMiKQoKICAgIGRlZiByZXJhaXNlKHRwLCB2YWx1ZSwgdGI9Tm9uZSk6CiAgICAgICAgaWYgdmFsdWUgaXMgTm9uZToKICAgICAgICAgICAgdmFsdWUgPSB0cCgpCiAgICAgICAgaWYgdmFsdWUuX190cmFjZWJhY2tfXyBpcyBub3QgdGI6CiAgICAgICAgICAgIHJhaXNlIHZhbHVlLndpdGhfdHJhY2ViYWNrKHRiKQogICAgICAgIHJhaXNlIHZhbHVlCgplbHNlOgogICAgZGVmIGV4ZWNfKF9jb2RlXywgX2dsb2JzXz1Ob25lLCBfbG9jc189Tm9uZSk6CiAgICAgICAgIiIiRXhlY3V0ZSBjb2RlIGluIGEgbmFtZXNwYWNlLiIiIgogICAgICAgIGlmIF9nbG9ic18gaXMgTm9uZToKICAgICAgICAgICAgZnJhbWUgPSBzeXMuX2dldGZyYW1lKDEpCiAgICAgICAgICAgIF9nbG9ic18gPSBmcmFtZS5mX2dsb2JhbHMKICAgICAgICAgICAgaWYgX2xvY3NfIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBfbG9jc18gPSBmcmFtZS5mX2xvY2FscwogICAgICAgICAgICBkZWwgZnJhbWUKICAgICAgICBlbGlmIF9sb2NzXyBpcyBOb25lOgogICAgICAgICAgICBfbG9jc18gPSBfZ2xvYnNfCiAgICAgICAgZXhlYygiIiJleGVjIF9jb2RlXyBpbiBfZ2xvYnNfLCBfbG9jc18iIiIpCgogICAgZXhlY18oIiIiZGVmIHJlcmFpc2UodHAsIHZhbHVlLCB0Yj1Ob25lKToKICAgIHJhaXNlIHRwLCB2YWx1ZSwgdGIKIiIiKQoKCmlmIHN5cy52ZXJzaW9uX2luZm9bOjJdID09ICgzLCAyKToKICAgIGV4ZWNfKCIiImRlZiByYWlzZV9mcm9tKHZhbHVlLCBmcm9tX3ZhbHVlKToKICAgIGlmIGZyb21fdmFsdWUgaXMgTm9uZToKICAgICAgICByYWlzZSB2YWx1ZQogICAgcmFpc2UgdmFsdWUgZnJvbSBmcm9tX3ZhbHVlCiIiIikKZWxpZiBzeXMudmVyc2lvbl9pbmZvWzoyXSA+ICgzLCAyKToKICAgIGV4ZWNfKCIiImRlZiByYWlzZV9mcm9tKHZhbHVlLCBmcm9tX3ZhbHVlKToKICAgIHJhaXNlIHZhbHVlIGZyb20gZnJvbV92YWx1ZQoiIiIpCmVsc2U6CiAgICBkZWYgcmFpc2VfZnJvbSh2YWx1ZSwgZnJvbV92YWx1ZSk6CiAgICAgICAgcmFpc2UgdmFsdWUKCgpwcmludF8gPSBnZXRhdHRyKG1vdmVzLmJ1aWx0aW5zLCAicHJpbnQiLCBOb25lKQppZiBwcmludF8gaXMgTm9uZToKICAgIGRlZiBwcmludF8oKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICAiIiJUaGUgbmV3LXN0eWxlIHByaW50IGZ1bmN0aW9uIGZvciBQeXRob24gMi40IGFuZCAyLjUuIiIiCiAgICAgICAgZnAgPSBrd2FyZ3MucG9wKCJmaWxlIiwgc3lzLnN0ZG91dCkKICAgICAgICBpZiBmcCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4KCiAgICAgICAgZGVmIHdyaXRlKGRhdGEpOgogICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShkYXRhLCBiYXNlc3RyaW5nKToKICAgICAgICAgICAgICAgIGRhdGEgPSBzdHIoZGF0YSkKICAgICAgICAgICAgIyBJZiB0aGUgZmlsZSBoYXMgYW4gZW5jb2RpbmcsIGVuY29kZSB1bmljb2RlIHdpdGggaXQuCiAgICAgICAgICAgIGlmIChpc2luc3RhbmNlKGZwLCBmaWxlKSBhbmQKICAgICAgICAgICAgICAgICAgICBpc2luc3RhbmNlKGRhdGEsIHVuaWNvZGUpIGFuZAogICAgICAgICAgICAgICAgICAgIGZwLmVuY29kaW5nIGlzIG5vdCBOb25lKToKICAgICAgICAgICAgICAgIGVycm9ycyA9IGdldGF0dHIoZnAsICJlcnJvcnMiLCBOb25lKQogICAgICAgICAgICAgICAgaWYgZXJyb3JzIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gInN0cmljdCIKICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLmVuY29kZShmcC5lbmNvZGluZywgZXJyb3JzKQogICAgICAgICAgICBmcC53cml0ZShkYXRhKQogICAgICAgIHdhbnRfdW5pY29kZSA9IEZhbHNlCiAgICAgICAgc2VwID0ga3dhcmdzLnBvcCgic2VwIiwgTm9uZSkKICAgICAgICBpZiBzZXAgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoc2VwLCB1bmljb2RlKToKICAgICAgICAgICAgICAgIHdhbnRfdW5pY29kZSA9IFRydWUKICAgICAgICAgICAgZWxpZiBub3QgaXNpbnN0YW5jZShzZXAsIHN0cik6CiAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoInNlcCBtdXN0IGJlIE5vbmUgb3IgYSBzdHJpbmciKQogICAgICAgIGVuZCA9IGt3YXJncy5wb3AoImVuZCIsIE5vbmUpCiAgICAgICAgaWYgZW5kIGlzIG5vdCBOb25lOgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGVuZCwgdW5pY29kZSk6CiAgICAgICAgICAgICAgICB3YW50X3VuaWNvZGUgPSBUcnVlCiAgICAgICAgICAgIGVsaWYgbm90IGlzaW5zdGFuY2UoZW5kLCBzdHIpOgogICAgICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJlbmQgbXVzdCBiZSBOb25lIG9yIGEgc3RyaW5nIikKICAgICAgICBpZiBrd2FyZ3M6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigiaW52YWxpZCBrZXl3b3JkIGFyZ3VtZW50cyB0byBwcmludCgpIikKICAgICAgICBpZiBub3Qgd2FudF91bmljb2RlOgogICAgICAgICAgICBmb3IgYXJnIGluIGFyZ3M6CiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKGFyZywgdW5pY29kZSk6CiAgICAgICAgICAgICAgICAgICAgd2FudF91bmljb2RlID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgaWYgd2FudF91bmljb2RlOgogICAgICAgICAgICBuZXdsaW5lID0gdW5pY29kZSgiXG4iKQogICAgICAgICAgICBzcGFjZSA9IHVuaWNvZGUoIiAiKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG5ld2xpbmUgPSAiXG4iCiAgICAgICAgICAgIHNwYWNlID0gIiAiCiAgICAgICAgaWYgc2VwIGlzIE5vbmU6CiAgICAgICAgICAgIHNlcCA9IHNwYWNlCiAgICAgICAgaWYgZW5kIGlzIE5vbmU6CiAgICAgICAgICAgIGVuZCA9IG5ld2xpbmUKICAgICAgICBmb3IgaSwgYXJnIGluIGVudW1lcmF0ZShhcmdzKToKICAgICAgICAgICAgaWYgaToKICAgICAgICAgICAgICAgIHdyaXRlKHNlcCkKICAgICAgICAgICAgd3JpdGUoYXJnKQogICAgICAgIHdyaXRlKGVuZCkKaWYgc3lzLnZlcnNpb25faW5mb1s6Ml0gPCAoMywgMyk6CiAgICBfcHJpbnQgPSBwcmludF8KCiAgICBkZWYgcHJpbnRfKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgZnAgPSBrd2FyZ3MuZ2V0KCJmaWxlIiwgc3lzLnN0ZG91dCkKICAgICAgICBmbHVzaCA9IGt3YXJncy5wb3AoImZsdXNoIiwgRmFsc2UpCiAgICAgICAgX3ByaW50KCphcmdzLCAqKmt3YXJncykKICAgICAgICBpZiBmbHVzaCBhbmQgZnAgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGZwLmZsdXNoKCkKCl9hZGRfZG9jKHJlcmFpc2UsICIiIlJlcmFpc2UgYW4gZXhjZXB0aW9uLiIiIikKCmlmIHN5cy52ZXJzaW9uX2luZm9bMDoyXSA8ICgzLCA0KToKICAgIGRlZiB3cmFwcyh3cmFwcGVkLCBhc3NpZ25lZD1mdW5jdG9vbHMuV1JBUFBFUl9BU1NJR05NRU5UUywKICAgICAgICAgICAgICB1cGRhdGVkPWZ1bmN0b29scy5XUkFQUEVSX1VQREFURVMpOgogICAgICAgIGRlZiB3cmFwcGVyKGYpOgogICAgICAgICAgICBmID0gZnVuY3Rvb2xzLndyYXBzKHdyYXBwZWQsIGFzc2lnbmVkLCB1cGRhdGVkKShmKQogICAgICAgICAgICBmLl9fd3JhcHBlZF9fID0gd3JhcHBlZAogICAgICAgICAgICByZXR1cm4gZgogICAgICAgIHJldHVybiB3cmFwcGVyCmVsc2U6CiAgICB3cmFwcyA9IGZ1bmN0b29scy53cmFwcwoKCmRlZiB3aXRoX21ldGFjbGFzcyhtZXRhLCAqYmFzZXMpOgogICAgIiIiQ3JlYXRlIGEgYmFzZSBjbGFzcyB3aXRoIGEgbWV0YWNsYXNzLiIiIgogICAgIyBUaGlzIHJlcXVpcmVzIGEgYml0IG9mIGV4cGxhbmF0aW9uOiB0aGUgYmFzaWMgaWRlYSBpcyB0byBtYWtlIGEgZHVtbXkKICAgICMgbWV0YWNsYXNzIGZvciBvbmUgbGV2ZWwgb2YgY2xhc3MgaW5zdGFudGlhdGlvbiB0aGF0IHJlcGxhY2VzIGl0c2VsZiB3aXRoCiAgICAjIHRoZSBhY3R1YWwgbWV0YWNsYXNzLgogICAgY2xhc3MgbWV0YWNsYXNzKG1ldGEpOgoKICAgICAgICBkZWYgX19uZXdfXyhjbHMsIG5hbWUsIHRoaXNfYmFzZXMsIGQpOgogICAgICAgICAgICByZXR1cm4gbWV0YShuYW1lLCBiYXNlcywgZCkKICAgIHJldHVybiB0eXBlLl9fbmV3X18obWV0YWNsYXNzLCAndGVtcG9yYXJ5X2NsYXNzJywgKCksIHt9KQoKCmRlZiBhZGRfbWV0YWNsYXNzKG1ldGFjbGFzcyk6CiAgICAiIiJDbGFzcyBkZWNvcmF0b3IgZm9yIGNyZWF0aW5nIGEgY2xhc3Mgd2l0aCBhIG1ldGFjbGFzcy4iIiIKICAgIGRlZiB3cmFwcGVyKGNscyk6CiAgICAgICAgb3JpZ192YXJzID0gY2xzLl9fZGljdF9fLmNvcHkoKQogICAgICAgIHNsb3RzID0gb3JpZ192YXJzLmdldCgnX19zbG90c19fJykKICAgICAgICBpZiBzbG90cyBpcyBub3QgTm9uZToKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShzbG90cywgc3RyKToKICAgICAgICAgICAgICAgIHNsb3RzID0gW3Nsb3RzXQogICAgICAgICAgICBmb3Igc2xvdHNfdmFyIGluIHNsb3RzOgogICAgICAgICAgICAgICAgb3JpZ192YXJzLnBvcChzbG90c192YXIpCiAgICAgICAgb3JpZ192YXJzLnBvcCgnX19kaWN0X18nLCBOb25lKQogICAgICAgIG9yaWdfdmFycy5wb3AoJ19fd2Vha3JlZl9fJywgTm9uZSkKICAgICAgICByZXR1cm4gbWV0YWNsYXNzKGNscy5fX25hbWVfXywgY2xzLl9fYmFzZXNfXywgb3JpZ192YXJzKQogICAgcmV0dXJuIHdyYXBwZXIKCgpkZWYgcHl0aG9uXzJfdW5pY29kZV9jb21wYXRpYmxlKGtsYXNzKToKICAgICIiIgogICAgQSBkZWNvcmF0b3IgdGhhdCBkZWZpbmVzIF9fdW5pY29kZV9fIGFuZCBfX3N0cl9fIG1ldGhvZHMgdW5kZXIgUHl0aG9uIDIuCiAgICBVbmRlciBQeXRob24gMyBpdCBkb2VzIG5vdGhpbmcuCgogICAgVG8gc3VwcG9ydCBQeXRob24gMiBhbmQgMyB3aXRoIGEgc2luZ2xlIGNvZGUgYmFzZSwgZGVmaW5lIGEgX19zdHJfXyBtZXRob2QKICAgIHJldHVybmluZyB0ZXh0IGFuZCBhcHBseSB0aGlzIGRlY29yYXRvciB0byB0aGUgY2xhc3MuCiAgICAiIiIKICAgIGlmIFBZMjoKICAgICAgICBpZiAnX19zdHJfXycgbm90IGluIGtsYXNzLl9fZGljdF9fOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJAcHl0aG9uXzJfdW5pY29kZV9jb21wYXRpYmxlIGNhbm5vdCBiZSBhcHBsaWVkICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidG8gJXMgYmVjYXVzZSBpdCBkb2Vzbid0IGRlZmluZSBfX3N0cl9fKCkuIiAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2xhc3MuX19uYW1lX18pCiAgICAgICAga2xhc3MuX191bmljb2RlX18gPSBrbGFzcy5fX3N0cl9fCiAgICAgICAga2xhc3MuX19zdHJfXyA9IGxhbWJkYSBzZWxmOiBzZWxmLl9fdW5pY29kZV9fKCkuZW5jb2RlKCd1dGYtOCcpCiAgICByZXR1cm4ga2xhc3MKCgojIENvbXBsZXRlIHRoZSBtb3ZlcyBpbXBsZW1lbnRhdGlvbi4KIyBUaGlzIGNvZGUgaXMgYXQgdGhlIGVuZCBvZiB0aGlzIG1vZHVsZSB0byBzcGVlZCB1cCBtb2R1bGUgbG9hZGluZy4KIyBUdXJuIHRoaXMgbW9kdWxlIGludG8gYSBwYWNrYWdlLgpfX3BhdGhfXyA9IFtdICAjIHJlcXVpcmVkIGZvciBQRVAgMzAyIGFuZCBQRVAgNDUxCl9fcGFja2FnZV9fID0gX19uYW1lX18gICMgc2VlIFBFUCAzNjYgQFJlc2VydmVkQXNzaWdubWVudAppZiBnbG9iYWxzKCkuZ2V0KCJfX3NwZWNfXyIpIGlzIG5vdCBOb25lOgogICAgX19zcGVjX18uc3VibW9kdWxlX3NlYXJjaF9sb2NhdGlvbnMgPSBbXSAgIyBQRVAgNDUxIEBVbmRlZmluZWRWYXJpYWJsZQojIFJlbW92ZSBvdGhlciBzaXggbWV0YSBwYXRoIGltcG9ydGVycywgc2luY2UgdGhleSBjYXVzZSBwcm9ibGVtcy4gVGhpcyBjYW4KIyBoYXBwZW4gaWYgc2l4IGlzIHJlbW92ZWQgZnJvbSBzeXMubW9kdWxlcyBhbmQgdGhlbiByZWxvYWRlZC4gKFNldHVwdG9vbHMgZG9lcwojIHRoaXMgZm9yIHNvbWUgcmVhc29uLikKaWYgc3lzLm1ldGFfcGF0aDoKICAgIGZvciBpLCBpbXBvcnRlciBpbiBlbnVtZXJhdGUoc3lzLm1ldGFfcGF0aCk6CiAgICAgICAgIyBIZXJlJ3Mgc29tZSByZWFsIG5hc3RpbmVzczogQW5vdGhlciAiaW5zdGFuY2UiIG9mIHRoZSBzaXggbW9kdWxlIG1pZ2h0CiAgICAgICAgIyBiZSBmbG9hdGluZyBhcm91bmQuIFRoZXJlZm9yZSwgd2UgY2FuJ3QgdXNlIGlzaW5zdGFuY2UoKSB0byBjaGVjayBmb3IKICAgICAgICAjIHRoZSBzaXggbWV0YSBwYXRoIGltcG9ydGVyLCBzaW5jZSB0aGUgb3RoZXIgc2l4IGluc3RhbmNlIHdpbGwgaGF2ZQogICAgICAgICMgaW5zZXJ0ZWQgYW4gaW1wb3J0ZXIgd2l0aCBkaWZmZXJlbnQgY2xhc3MuCiAgICAgICAgaWYgKHR5cGUoaW1wb3J0ZXIpLl9fbmFtZV9fID09ICJfU2l4TWV0YVBhdGhJbXBvcnRlciIgYW5kCiAgICAgICAgICAgICAgICBpbXBvcnRlci5uYW1lID09IF9fbmFtZV9fKToKICAgICAgICAgICAgZGVsIHN5cy5tZXRhX3BhdGhbaV0KICAgICAgICAgICAgYnJlYWsKICAgIGRlbCBpLCBpbXBvcnRlcgojIEZpbmFsbHksIGFkZCB0aGUgaW1wb3J0ZXIgdG8gdGhlIG1ldGEgcGF0aCBpbXBvcnQgaG9vay4Kc3lzLm1ldGFfcGF0aC5hcHBlbmQoX2ltcG9ydGVyKQpQSwECFAMUAAAAAAAAvCtLj6fxUncAAAB3AAAAEwAAAAAAAAAAAAAAgAEAAAAAYW5zaWJsZS9fX2luaXRfXy5weVBLAQIUAxQAAAAAAAC8K0udxfFrSAAAAEgAAAAgAAAAAAAAAAAAAACAAagAAABhbnNpYmxlL21vZHVsZV91dGlscy9fX2luaXRfXy5weVBLAQIUAxQAAAAAAAC8K0vj7jH7EjQAABI0AAAlAAAAAAAAAAAAAACAAS4BAABhbnNpYmxlX21vZHVsZV9nY3BfYmFja2VuZF9zZXJ2aWNlLnB5UEsBAhQDFAAAAAAAALwrSzvfOZUwigEAMIoBAB0AAAAAAAAAAAAAAIABgzUAAGFuc2libGUvbW9kdWxlX3V0aWxzL2Jhc2ljLnB5UEsBAhQDFAAAAAAAALwrS0DHDp3AiAAAwIgAABsAAAAAAAAAAAAAAIAB7r8BAGFuc2libGUvbW9kdWxlX3V0aWxzL2djcC5weVBLAQIUAxQAAAAAAAC8K0tcHgkt5wkAAOcJAAAbAAAAAAAAAAAAAACAAedIAgBhbnNpYmxlL21vZHVsZV91dGlscy9nY2UucHlQSwECFAMUAAAAAAAAvCtLtdgEBiUwAAAlMAAAHQAAAAAAAAAAAAAAgAEHUwIAYW5zaWJsZS9tb2R1bGVfdXRpbHMvX3RleHQucHlQSwECFAMUAAAAAAAAvCtLJdy0fhMQAAATEAAAIgAAAAAAAAAAAAAAgAFngwIAYW5zaWJsZS9tb2R1bGVfdXRpbHMvcHljb21wYXQyNC5weVBLAQIUAxQAAAAAAAC8K0sYF3L1AREAAAERAAAkAAAAAAAAAAAAAACAAbqTAgBhbnNpYmxlL21vZHVsZV91dGlscy9zaXgvX19pbml0X18ucHlQSwECFAMUAAAAAAAAvCtLOOLH0ZF1AACRdQAAIAAAAAAAAAAAAAAAgAH9pAIAYW5zaWJsZS9tb2R1bGVfdXRpbHMvc2l4L19zaXgucHlQSwUGAAAAAAoACgD6AgAAzBoDAAAA"""
def invoke_module(module, modlib_path, json_params):
    pythonpath = os.environ.get('PYTHONPATH')
    if pythonpath:
        os.environ['PYTHONPATH'] = ':'.join((modlib_path, pythonpath))
    else:
        os.environ['PYTHONPATH'] = modlib_path
    p = subprocess.Popen(['/usr/bin/python', module], env=os.environ, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
    (stdout, stderr) = p.communicate(json_params)
    if not isinstance(stderr, (bytes, unicode)):
        stderr = stderr.read()
    if not isinstance(stdout, (bytes, unicode)):
        stdout = stdout.read()
    if PY3:
        sys.stderr.buffer.write(stderr)
        sys.stdout.buffer.write(stdout)
    else:
        sys.stderr.write(stderr)
        sys.stdout.write(stdout)
    return p.returncode
def debug(command, zipped_mod, json_params):
    basedir = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'debug_dir')
    args_path = os.path.join(basedir, 'args')
    script_path = os.path.join(basedir, 'ansible_module_gcp_backend_service.py')
    if command == 'explode':
        z = zipfile.ZipFile(zipped_mod)
        for filename in z.namelist():
            if filename.startswith('/'):
                raise Exception('Something wrong with this module zip file: should not contain absolute paths')
            dest_filename = os.path.join(basedir, filename)
            if dest_filename.endswith(os.path.sep) and not os.path.exists(dest_filename):
                os.makedirs(dest_filename)
            else:
                directory = os.path.dirname(dest_filename)
                if not os.path.exists(directory):
                    os.makedirs(directory)
                f = open(dest_filename, 'wb')
                f.write(z.read(filename))
                f.close()
        f = open(args_path, 'wb')
        f.write(json_params)
        f.close()
        print('Module expanded into:')
        print('%s' % basedir)
        exitcode = 0
    elif command == 'execute':
        pythonpath = os.environ.get('PYTHONPATH')
        if pythonpath:
            os.environ['PYTHONPATH'] = ':'.join((basedir, pythonpath))
        else:
            os.environ['PYTHONPATH'] = basedir
        p = subprocess.Popen(['/usr/bin/python', script_path, args_path],
                env=os.environ, shell=False, stdout=subprocess.PIPE,
                stderr=subprocess.PIPE, stdin=subprocess.PIPE)
        (stdout, stderr) = p.communicate()
        if not isinstance(stderr, (bytes, unicode)):
            stderr = stderr.read()
        if not isinstance(stdout, (bytes, unicode)):
            stdout = stdout.read()
        if PY3:
            sys.stderr.buffer.write(stderr)
            sys.stdout.buffer.write(stdout)
        else:
            sys.stderr.write(stderr)
            sys.stdout.write(stdout)
        return p.returncode
    elif command == 'excommunicate':
        sys.argv = ['gcp_backend_service', args_path]
        sys.path.insert(0, basedir)
        from ansible_module_gcp_backend_service import main
        main()
        print('WARNING: Module returned to wrapper instead of exiting')
        sys.exit(1)
    else:
        print('WARNING: Unknown debug command.  Doing nothing.')
        exitcode = 0
    return exitcode
if __name__ == '__main__':
    ANSIBALLZ_PARAMS = json.dumps({"ANSIBLE_MODULE_ARGS": json.load(sys.stdin)})
    if PY3:
        ANSIBALLZ_PARAMS = ANSIBALLZ_PARAMS.encode('utf-8')
    try:
        temp_path = tempfile.mkdtemp(prefix='ansible_')
        zipped_mod = os.path.join(temp_path, 'ansible_modlib.zip')
        modlib = open(zipped_mod, 'wb')
        modlib.write(base64.b64decode(ZIPDATA))
        modlib.close()
        if len(sys.argv) == 2:
            exitcode = debug(sys.argv[1], zipped_mod, ANSIBALLZ_PARAMS)
        else:
            z = zipfile.ZipFile(zipped_mod, mode='r')
            module = os.path.join(temp_path, 'ansible_module_gcp_backend_service.py')
            f = open(module, 'wb')
            f.write(z.read('ansible_module_gcp_backend_service.py'))
            f.close()
            z = zipfile.ZipFile(zipped_mod, mode='a')
            sitecustomize = u'import sys\nsys.path.insert(0,"%s")\n' %  zipped_mod
            sitecustomize = sitecustomize.encode('utf-8')
            zinfo = zipfile.ZipInfo()
            zinfo.filename = 'sitecustomize.py'
            zinfo.date_time = ( 2017, 9, 11, 23, 32, 1)
            z.writestr(zinfo, sitecustomize)
            z.close()
            exitcode = invoke_module(module, zipped_mod, ANSIBALLZ_PARAMS)
    finally:
        try:
            shutil.rmtree(temp_path)
        except OSError:
            pass
    sys.exit(exitcode)