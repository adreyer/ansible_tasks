{
  "input_method": "stdin", 
  "description": "Downloads files from HTTP, HTTPS, or FTP to the remote server. The remote server I(must) have direct access to the remote resource.", 
  "parameters": {
    "force": {
      "type": "Optional[String[0]]", 
      "description": "If C(yes) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(no), the file will only be downloaded if the destination does not exist. Generally should be C(yes) only for small local files."
    }, 
    "backup": {
      "type": "Optional[String[0]]", 
      "description": "Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."
    }, 
    "owner": {
      "type": "Optional[String[0]]", 
      "description": "Name of the user that should own the file/directory, as would be fed to I(chown)."
    }, 
    "client_key": {
      "type": "Optional[String[0]]", 
      "description": "PEM formatted file that contains your private key to be used for SSL client authentication. If C(client_cert) contains both the certificate and key, this option is not required."
    }, 
    "group": {
      "type": "Optional[String[0]]", 
      "description": "Name of the group that should own the file/directory, as would be fed to I(chown)."
    }, 
    "use_proxy": {
      "type": "Optional[String[0]]", 
      "description": "if C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts."
    }, 
    "unsafe_writes": {
      "type": "Optional[String[0]]", 
      "description": "Normally this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, sometimes systems are configured or just broken in ways that prevent this. One example are docker mounted files, they cannot be updated atomically and can only be done in an unsafe manner."
    }, 
    "setype": {
      "type": "Optional[String[0]]", 
      "description": "Type part of SELinux file context, C(_default) feature works as for I(seuser)."
    }, 
    "serole": {
      "type": "Optional[String[0]]", 
      "description": "Role part of SELinux file context, C(_default) feature works as for I(seuser)."
    }, 
    "client_cert": {
      "type": "Optional[String[0]]", 
      "description": "PEM formatted certificate chain file to be used for SSL client authentication. This file can also include the key as well, and if the key is included, C(client_key) is not required."
    }, 
    "timeout": {
      "type": "Optional[String[0]]", 
      "description": "Timeout in seconds for URL request."
    }, 
    "dest": {
      "type": "String[0]", 
      "description": "Absolute path of where to download the file to."
    }, 
    "selevel": {
      "type": "Optional[String[0]]", 
      "description": "Level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). C(_default) feature works as for I(seuser)."
    }, 
    "force_basic_auth": {
      "type": "Optional[String[0]]", 
      "description": "httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail. This option forces the sending of the Basic authentication header upon initial request."
    }, 
    "sha256sum": {
      "type": "Optional[String[0]]", 
      "description": "If a SHA-256 checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. This option is deprecated. Use C(checksum) instead."
    }, 
    "others": {
      "type": "Optional[String[0]]", 
      "description": "all arguments accepted by the M(file) module also work here"
    }, 
    "url_password": {
      "type": "Optional[String[0]]", 
      "description": "The password for use in HTTP basic authentication."
    }, 
    "url": {
      "type": "String[0]", 
      "description": "HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path"
    }, 
    "checksum": {
      "type": "Optional[String[0]]", 
      "description": "If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum>, e.g. checksum=\"sha256:D98291AC[...]B6DC7B97\""
    }, 
    "seuser": {
      "type": "Optional[String[0]]", 
      "description": "User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available."
    }, 
    "headers": {
      "type": "Optional[String[0]]", 
      "description": "Add custom HTTP headers to a request in the format \"key:value,key:value\"."
    }, 
    "mode": {
      "type": "Optional[String[0]]", 
      "description": "Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r))."
    }, 
    "url_username": {
      "type": "Optional[String[0]]", 
      "description": "The username for use in HTTP basic authentication."
    }, 
    "attributes": {
      "type": "Optional[String[0]]", 
      "description": "Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr)."
    }, 
    "validate_certs": {
      "type": "Optional[String[0]]", 
      "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates."
    }, 
    "tmp_dest": {
      "type": "Optional[String[0]]", 
      "description": "Absolute path of where temporary file is downloaded to."
    }
  }
}