{
  "input_method": "stdin", 
  "description": "Manage I(git) checkouts of repositories to deploy files or software.", 
  "parameters": {
    "depth": {
      "type": "Optional[String[0]]", 
      "description": "Create a shallow clone with a history truncated to the specified number or revisions. The minimum possible value is C(1), otherwise ignored. Needs I(git>=1.9.1) to work correctly."
    }, 
    "executable": {
      "type": "Optional[String[0]]", 
      "description": "Path to git executable to use. If not supplied, the normal mechanism for resolving binary paths will be used."
    }, 
    "refspec": {
      "type": "Optional[String[0]]", 
      "description": "Add an additional refspec to be fetched. If version is set to a I(SHA-1) not reachable from any branch or tag, this option may be necessary to specify the ref containing the I(SHA-1). Uses the same syntax as the 'git fetch' command. An example value could be \"refs/meta/config\"."
    }, 
    "force": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "If C(yes), any modified files in the working repository will be discarded.  Prior to 0.7, this was always 'yes' and could not be disabled.  Prior to 1.9, the default was `yes`"
    }, 
    "track_submodules": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "if C(yes), submodules will track the latest commit on their master branch (or other branch specified in .gitmodules).  If C(no), submodules will be kept at the revision specified by the main project. This is equivalent to specifying the --remote flag to git submodule update."
    }, 
    "reference": {
      "type": "Optional[String[0]]", 
      "description": "Reference repository (see \"git clone --reference ...\")"
    }, 
    "dest": {
      "type": "String[0]", 
      "description": "Absolute path of where the repository should be checked out to. This parameter is required, unless C(clone) is set to C(no) This change was made in version 1.8.3. Prior to this version, the C(dest) parameter was always required."
    }, 
    "verify_commit": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "if C(yes), when cloning or checking out a C(version) verify the signature of a GPG signed commit. This requires C(git) version>=2.1.0 to be installed. The commit MUST be signed and the public key MUST be trusted in the GPG trustdb."
    }, 
    "clone": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "If C(no), do not clone the repository if it does not exist locally"
    }, 
    "accept_hostkey": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "if C(yes), adds the hostkey for the repo url if not already added. If ssh_opts contains \"-o StrictHostKeyChecking=no\", this parameter is ignored."
    }, 
    "update": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "If C(no), do not retrieve new revisions from the origin repository"
    }, 
    "ssh_opts": {
      "type": "Optional[String[0]]", 
      "description": "Creates a wrapper script and exports the path as GIT_SSH which git then automatically uses to override ssh arguments. An example value could be \"-o StrictHostKeyChecking=no\""
    }, 
    "repo": {
      "type": "String[0]", 
      "description": "git, SSH, or HTTP(S) protocol address of the git repository."
    }, 
    "umask": {
      "type": "Optional[String[0]]", 
      "description": "The umask to set before doing any checkouts, or any other repository maintenance."
    }, 
    "version": {
      "type": "Optional[String[0]]", 
      "description": "What version of the repository to check out.  This can be the the literal string C(HEAD), a branch name, a tag name. It can also be a I(SHA-1) hash, in which case C(refspec) needs to be specified if the given revision is not already available."
    }, 
    "bare": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "if C(yes), repository will be created as a bare repo, otherwise it will be a standard repo with a workspace."
    }, 
    "remote": {
      "type": "Optional[String[0]]", 
      "description": "Name of the remote."
    }, 
    "key_file": {
      "type": "Optional[String[0]]", 
      "description": "Specify an optional private key file to use for the checkout."
    }, 
    "archive": {
      "type": "Optional[String[0]]", 
      "description": "Specify archive file path with extension. If specified, creates an archive file of the specified format containing the tree structure for the source tree. Allowed archive formats [\"zip\", \"tar.gz\", \"tar\", \"tgz\"]"
    }, 
    "recursive": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "if C(no), repository will be cloned without the --recursive option, skipping sub-modules."
    }
  }
}