{
  "input_method": "stdin", 
  "description": "This module will load a candidate configuration from a template file onto a remote device running Junos.  The module will return the differences in configuration if the diff option is specified on the Ansible command line", 
  "parameters": {
    "comment": {
      "type": "Optional[String[0]]", 
      "description": "The C(comment) argument specifies a text string to be used when committing the configuration.  If the C(confirm) argument is set to False, this argument is silently ignored."
    }, 
    "src": {
      "type": "String[0]", 
      "description": "The path to the config source.  The source can be either a file with config or a template that will be merged during runtime.  By default the task will search for the source file in role or playbook root folder in templates directory."
    }, 
    "confirm": {
      "type": "Optional[String[0]]", 
      "description": "The C(confirm) argument will configure a time out value for the commit to be confirmed before it is automatically rolled back.  If the C(confirm) argument is set to False, this argument is silently ignored.  If the value for this argument is set to 0, the commit is confirmed immediately."
    }, 
    "provider": {
      "type": "Optional[String[0]]", 
      "description": "A dict object containing connection details."
    }, 
    "action": {
      "type": "Optional[Enum[\"merge\", \"overwrite\", \"replace\"]]", 
      "description": "The C(action) argument specifies how the module will apply changes."
    }, 
    "config_format": {
      "type": "Optional[Enum[\"text\", \"xml\", \"set\"]]", 
      "description": "The C(format) argument specifies the format of the configuration template specified in C(src).  If the format argument is not specified, the module will attempt to infer the configuration format based of file extension.  Files that end in I(xml) will set the format to xml.  Files that end in I(set) will set the format to set and all other files will default the format to text."
    }, 
    "backup": {
      "type": "Optional[Enum[\"true\", \"false\"]]", 
      "description": "When this argument is configured true, the module will backup the configuration from the node prior to making any changes. The backup file will be written to backup_{{ hostname }} in the root of the playbook directory."
    }
  }
}