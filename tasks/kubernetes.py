#!/usr/bin/python
# -*- coding: utf-8 -*-
ANSIBALLZ_WRAPPER = True # For test-module script to tell this is a ANSIBALLZ_WRAPPER
import os
import os.path
import sys
import __main__
scriptdir = None
try:
    scriptdir = os.path.dirname(os.path.abspath(__main__.__file__))
except (AttributeError, OSError):
    pass
if scriptdir is not None:
    sys.path = [p for p in sys.path if p != scriptdir]
import base64
import json
import shutil
import zipfile
import tempfile
import subprocess
if sys.version_info < (3,):
    bytes = str
    PY3 = False
else:
    unicode = str
    PY3 = True
try:
    from io import BytesIO as IOStream
except ImportError:
    from StringIO import StringIO as IOStream
ZIPDATA = """UEsDBBQAAAAAAAe8K0uPp/FSdwAAAHcAAAATAAAAYW5zaWJsZS9fX2luaXRfXy5weWZyb20gcGtndXRpbCBpbXBvcnQgZXh0ZW5kX3BhdGgKX19wYXRoX189ZXh0ZW5kX3BhdGgoX19wYXRoX18sX19uYW1lX18pCl9fdmVyc2lvbl9fPSIyLjQuMCIKX19hdXRob3JfXz0iQW5zaWJsZSwgSW5jLiIKUEsDBBQAAAAAAAe8K0udxfFrSAAAAEgAAAAgAAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvX19pbml0X18ucHlmcm9tIHBrZ3V0aWwgaW1wb3J0IGV4dGVuZF9wYXRoCl9fcGF0aF9fPWV4dGVuZF9wYXRoKF9fcGF0aF9fLF9fbmFtZV9fKQpQSwMEFAAAAAAAB7wrS9AGVM3kOwAA5DsAABwAAABhbnNpYmxlX21vZHVsZV9rdWJlcm5ldGVzLnB5IyEvdXNyL2Jpbi9weXRob24KIyBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLgojCiMgVGhpcyBmaWxlIGlzIHBhcnQgb2YgQW5zaWJsZQojCiMgQW5zaWJsZSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiMgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKIyB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcgojIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCiMKIyBBbnNpYmxlIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiMgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKIyBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCiMgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KIwojIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCiMgYWxvbmcgd2l0aCBBbnNpYmxlLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+CgpBTlNJQkxFX01FVEFEQVRBID0geydtZXRhZGF0YV92ZXJzaW9uJzogJzEuMCcsCiAgICAgICAgICAgICAgICAgICAgJ3N0YXR1cyc6IFsncHJldmlldyddLAogICAgICAgICAgICAgICAgICAgICdzdXBwb3J0ZWRfYnknOiAnY29tbXVuaXR5J30KCgpET0NVTUVOVEFUSU9OID0gJycnCi0tLQptb2R1bGU6IGt1YmVybmV0ZXMKdmVyc2lvbl9hZGRlZDogIjIuMSIKc2hvcnRfZGVzY3JpcHRpb246IE1hbmFnZSBLdWJlcm5ldGVzIHJlc291cmNlcy4KZGVzY3JpcHRpb246CiAgICAtIFRoaXMgbW9kdWxlIGNhbiBtYW5hZ2UgS3ViZXJuZXRlcyByZXNvdXJjZXMgb24gYW4gZXhpc3RpbmcgY2x1c3RlciB1c2luZwogICAgICB0aGUgS3ViZXJuZXRlcyBzZXJ2ZXIgQVBJLiBVc2VycyBjYW4gc3BlY2lmeSBpbi1saW5lIEFQSSBkYXRhLCBvcgogICAgICBzcGVjaWZ5IGFuIGV4aXN0aW5nIEt1YmVybmV0ZXMgWUFNTCBmaWxlLiBDdXJyZW50bHksIHRoaXMgbW9kdWxlLAogICAgICAgIE9ubHkgc3VwcG9ydHMgSFRUUCBCYXNpYyBBdXRoCiAgICAgICAgT25seSBzdXBwb3J0cyAnc3RyYXRlZ2ljIG1lcmdlJyBmb3IgdXBkYXRlLCBodHRwOi8vZ29vLmdsL2ZDUFl4VAogICAgICAgIFNTTCBjZXJ0cyBhcmUgbm90IHdvcmtpbmcsIHVzZSAndmFsaWRhdGVfY2VydHM9b2ZmJyB0byBkaXNhYmxlCm9wdGlvbnM6CiAgYXBpX2VuZHBvaW50OgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gVGhlIElQdjQgQVBJIGVuZHBvaW50IG9mIHRoZSBLdWJlcm5ldGVzIGNsdXN0ZXIuCiAgICByZXF1aXJlZDogdHJ1ZQogICAgZGVmYXVsdDogbnVsbAogICAgYWxpYXNlczogWyJlbmRwb2ludCJdCiAgaW5saW5lX2RhdGE6CiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBUaGUgS3ViZXJuZXRlcyBZQU1MIGRhdGEgdG8gc2VuZCB0byB0aGUgQVBJIEkoZW5kcG9pbnQpLiBUaGlzIG9wdGlvbiBpcwogICAgICAgIG11dHVhbGx5IGV4Y2x1c2l2ZSB3aXRoIEMoJ2ZpbGVfcmVmZXJlbmNlJykuCiAgICByZXF1aXJlZDogdHJ1ZQogICAgZGVmYXVsdDogbnVsbAogIGZpbGVfcmVmZXJlbmNlOgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gU3BlY2lmeSBmdWxsIHBhdGggdG8gYSBLdWJlcm5ldHMgWUFNTCBmaWxlIHRvIHNlbmQgdG8gQVBJIEkoZW5kcG9pbnQpLgogICAgICAgIFRoaXMgb3B0aW9uIGlzIG11dHVhbGx5IGV4Y2x1c2l2ZSB3aXRoIEMoJ2lubGluZV9kYXRhJykuCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6IG51bGwKICBjZXJ0aWZpY2F0ZV9hdXRob3JpdHlfZGF0YToKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIENlcnRpZmljYXRlIEF1dGhvcml0eSBkYXRhIGZvciBLdWJlcm5ldGVzIHNlcnZlci4gU2hvdWxkIGJlIGluIGVpdGhlcgogICAgICAgIHN0YW5kYXJkIFBFTSBmb3JtYXQgb3IgYmFzZTY0IGVuY29kZWQgUEVNIGRhdGEuIE5vdGUgdGhhdCBjZXJ0aWZpY2F0ZQogICAgICAgIHZlcmlmaWNhdGlvbiBpcyBicm9rZW4gdW50aWwgYW5zaWJsZSBzdXBwb3J0cyBhIHZlcnNpb24gb2YKICAgICAgICAnbWF0Y2hfaG9zdG5hbWUnIHRoYXQgY2FuIG1hdGNoIHRoZSBJUCBhZGRyZXNzIGFnYWluc3QgdGhlIENBIGRhdGEuCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6IG51bGwKICBzdGF0ZToKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIFRoZSBkZXNpcmVkIGFjdGlvbiB0byB0YWtlIG9uIHRoZSBLdWJlcm5ldGVzIGRhdGEuCiAgICByZXF1aXJlZDogdHJ1ZQogICAgZGVmYXVsdDogInByZXNlbnQiCiAgICBjaG9pY2VzOiBbInByZXNlbnQiLCAiYWJzZW50IiwgInVwZGF0ZSIsICJyZXBsYWNlIl0KICB1cmxfcGFzc3dvcmQ6CiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBUaGUgSFRUUCBCYXNpYyBBdXRoIHBhc3N3b3JkIGZvciB0aGUgQVBJIEkoZW5kcG9pbnQpLiBUaGlzIHNob3VsZCBiZSBzZXQKICAgICAgICB1bmxlc3MgdXNpbmcgdGhlIEMoJ2luc2VjdXJlJykgb3B0aW9uLgogICAgZGVmYXVsdDogbnVsbAogICAgYWxpYXNlczogWyJwYXNzd29yZCJdCiAgdXJsX3VzZXJuYW1lOgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gVGhlIEhUVFAgQmFzaWMgQXV0aCB1c2VybmFtZSBmb3IgdGhlIEFQSSBJKGVuZHBvaW50KS4gVGhpcyBzaG91bGQgYmUgc2V0CiAgICAgICAgdW5sZXNzIHVzaW5nIHRoZSBDKCdpbnNlY3VyZScpIG9wdGlvbi4KICAgIGRlZmF1bHQ6ICJhZG1pbiIKICAgIGFsaWFzZXM6IFsidXNlcm5hbWUiXQogIGluc2VjdXJlOgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gIlJldmVydHMgdGhlIGNvbm5lY3Rpb24gdG8gdXNpbmcgSFRUUCBpbnN0ZWFkIG9mIEhUVFBTLiBUaGlzIG9wdGlvbiBzaG91bGQKICAgICAgICBvbmx5IGJlIHVzZWQgd2hlbiBleGVjdWluZyB0aGUgTSgna3ViZXJuZXRlcycpIG1vZHVsZSBsb2NhbCB0byB0aGUgS3ViZXJuZXRlcwogICAgICAgIGNsdXN0ZXIgdXNpbmcgdGhlIGluc2VjdXJlIGxvY2FsIHBvcnQgKGxvY2Fob3N0OjgwODAgYnkgZGVmYXVsdCkuIgogIHZhbGlkYXRlX2NlcnRzOgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gRW5hYmxlL2Rpc2FibGUgY2VydGlmaWNhdGUgdmFsaWRhdGlvbi4gTm90ZSB0aGF0IHRoaXMgaXMgc2V0IHRvCiAgICAgICAgQyhmYWxzZSkgdW50aWwgQW5zaWJsZSBjYW4gc3VwcG9ydCBJUCBhZGRyZXNzIGJhc2VkIGNlcnRpZmljYXRlCiAgICAgICAgaG9zdG5hbWUgbWF0Y2hpbmcgKGV4aXN0cyBpbiA+PSBweXRob24zLjUuMCkuCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6IGZhbHNlCgphdXRob3I6ICJFcmljIEpvaG5zb24gKEBlcmpvaG5zbykgPGVyam9obnNvQGdvb2dsZS5jb20+IgonJycKCkVYQU1QTEVTID0gJycnCiMgQ3JlYXRlIGEgbmV3IG5hbWVzcGFjZSB3aXRoIGluLWxpbmUgWUFNTC4KLSBuYW1lOiBDcmVhdGUgYSBrdWJlcm5ldGVzIG5hbWVzcGFjZQogIGt1YmVybmV0ZXM6CiAgICBhcGlfZW5kcG9pbnQ6IDEyMy40NS42Ny44OQogICAgdXJsX3VzZXJuYW1lOiBhZG1pbgogICAgdXJsX3Bhc3N3b3JkOiByZWRhY3RlZAogICAgaW5saW5lX2RhdGE6CiAgICAgIGtpbmQ6IE5hbWVzcGFjZQogICAgICBhcGlWZXJzaW9uOiB2MQogICAgICBtZXRhZGF0YToKICAgICAgICBuYW1lOiBhbnNpYmxlLXRlc3QKICAgICAgICBsYWJlbHM6CiAgICAgICAgICBsYWJlbF9lbnY6IHByb2R1Y3Rpb24KICAgICAgICAgIGxhYmVsX3ZlcjogbGF0ZXN0CiAgICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgICBhMTogdmFsdWUxCiAgICAgICAgICBhMjogdmFsdWUyCiAgICBzdGF0ZTogcHJlc2VudAoKIyBDcmVhdGUgYSBuZXcgbmFtZXNwYWNlIGZyb20gYSBZQU1MIGZpbGUuCi0gbmFtZTogQ3JlYXRlIGEga3ViZXJuZXRlcyBuYW1lc3BhY2UKICBrdWJlcm5ldGVzOgogICAgYXBpX2VuZHBvaW50OiAxMjMuNDUuNjcuODkKICAgIHVybF91c2VybmFtZTogYWRtaW4KICAgIHVybF9wYXNzd29yZDogcmVkYWN0ZWQKICAgIGZpbGVfcmVmZXJlbmNlOiAvcGF0aC90by9jcmVhdGVfbmFtZXNwYWNlLnlhbWwKICAgIHN0YXRlOiBwcmVzZW50CgojIERvIHRoZSBzYW1lIHRoaW5nLCBidXQgdXNpbmcgdGhlIGluc2VjdXJlIGxvY2FsaG9zdCBwb3J0Ci0gbmFtZTogQ3JlYXRlIGEga3ViZXJuZXRlcyBuYW1lc3BhY2UKICBrdWJlcm5ldGVzOgogICAgYXBpX2VuZHBvaW50OiAxMjMuNDUuNjcuODkKICAgIGluc2VjdXJlOiB0cnVlCiAgICBmaWxlX3JlZmVyZW5jZTogL3BhdGgvdG8vY3JlYXRlX25hbWVzcGFjZS55YW1sCiAgICBzdGF0ZTogcHJlc2VudAoKJycnCgpSRVRVUk4gPSAnJycKIyBFeGFtcGxlIHJlc3BvbnNlIGZyb20gY3JlYXRpbmcgYSBLdWJlcm5ldGVzIE5hbWVzcGFjZS4KYXBpX3Jlc3BvbnNlOgogICAgZGVzY3JpcHRpb246IFJhdyByZXNwb25zZSBmcm9tIEt1YmVybmV0ZXMgQVBJLCBjb250ZW50IHZhcmllcyB3aXRoIEFQSS4KICAgIHJldHVybmVkOiBzdWNjZXNzCiAgICB0eXBlOiBjb21wbGV4CiAgICBjb250YWluczoKICAgICAgICBhcGlWZXJzaW9uOiAidjEiCiAgICAgICAga2luZDogIk5hbWVzcGFjZSIKICAgICAgICBtZXRhZGF0YToKICAgICAgICAgICAgY3JlYXRpb25UaW1lc3RhbXA6ICIyMDE2LTAxLTA0VDIxOjE2OjMyWiIKICAgICAgICAgICAgbmFtZTogInRlc3QtbmFtZXNwYWNlIgogICAgICAgICAgICByZXNvdXJjZVZlcnNpb246ICI1MDk2MzUiCiAgICAgICAgICAgIHNlbGZMaW5rOiAiL2FwaS92MS9uYW1lc3BhY2VzL3Rlc3QtbmFtZXNwYWNlIgogICAgICAgICAgICB1aWQ6ICI2ZGJkMzk0ZS1iMzI4LTExZTUtOWEwMi00MjAxMGFmMDAxM2EiCiAgICAgICAgc3BlYzoKICAgICAgICAgICAgZmluYWxpemVyczoKICAgICAgICAgICAgICAgIC0ga3ViZXJuZXRlcwogICAgICAgIHN0YXR1czoKICAgICAgICAgICAgcGhhc2U6ICJBY3RpdmUiCicnJwoKaW1wb3J0IGJhc2U2NAoKdHJ5OgogICAgaW1wb3J0IHlhbWwKICAgIGhhc19saWJfeWFtbCA9IFRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgaGFzX2xpYl95YW1sID0gRmFsc2UKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIEZvciBBUEkgY292ZXJhZ2UsIHRoaXMgQW5pc2xiZSBtb2R1bGUgcHJvdmlkZXMgY2FwYWJpbGl0eSB0byBvcGVyYXRlIG9uCiMgYWxsIEt1YmVybmV0ZXMgb2JqZWN0cyB0aGF0IHN1cHBvcnQgYSAiY3JlYXRlIiBjYWxsIChleGNlcHQgZm9yICdFdmVudHMnKS4KIyBJbiBvcmRlciB0byBvYnRhaW4gYSB2YWxpZCBsaXN0IG9mIEt1YmVybmV0ZXMgb2JqZWN0cywgdGhlIHYxIHNwZWMgZmlsZQojIHdhcyByZWZlcmVuY2VkIGFuZCB0aGUgYmVsb3cgcHl0aG9uIHNjcmlwdCB3YXMgdXNlZCB0byBwYXJzZSB0aGUgSlNPTgojIHNwZWMgZmlsZSwgZXh0cmFjdCBvbmx5IHRoZSBvYmplY3RzIHdpdGggYSBkZXNjcmlwdGlvbiBzdGFydGluZyB3aXRoCiMgJ2NyZWF0ZSBhJy4gVGhlIHNjcmlwdCB0aGVuIGl0ZXJhdGVzIG92ZXIgYWxsIG9mIHRoZXNlIGJhc2Ugb2JqZWN0cwojIHRvIGdldCB0aGUgZW5kcG9pbnQgVVJMIGFuZCB3YXMgdXNlZCB0byBnZW5lcmF0ZSB0aGUgS0lORF9VUkwgbWFwLgojCiMgaW1wb3J0IGpzb24KIyBmcm9tIHVybGxpYjIgaW1wb3J0IHVybG9wZW4KIwojIHIgPSB1cmxvcGVuKCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20va3ViZXJuZXRlcyIKIyAgICAgICAgICAgICIva3ViZXJuZXRlcy9tYXN0ZXIvYXBpL3N3YWdnZXItc3BlYy92MS5qc29uIikKIyB2MSA9IGpzb24ubG9hZChyKQojCiMgYXBpcyA9IHt9CiMgZm9yIGEgaW4gdjFbJ2FwaXMnXToKIyAgICAgcCA9IGFbJ3BhdGgnXQojICAgICBmb3IgbyBpbiBhWydvcGVyYXRpb25zJ106CiMgICAgICAgICBpZiBvWyJzdW1tYXJ5Il0uc3RhcnRzd2l0aCgiY3JlYXRlIGEiKSBhbmQgb1sidHlwZSJdICE9ICJ2MS5FdmVudCI6CiMgICAgICAgICAgICAgYXBpc1tvWyJ0eXBlIl1dID0gcAojCiMgZGVmIHByaW50X2tpbmRfdXJsX21hcCgpOgojICAgICByZXN1bHRzID0gW10KIyAgICAgZm9yIGEgaW4gYXBpcy5rZXlzKCk6CiMgICAgICAgICByZXN1bHRzLmFwcGVuZCgnIiVzIjogIiVzIicgJSAoYVszOl0ubG93ZXIoKSwgYXBpc1thXSkpCiMgICAgIHJlc3VsdHMuc29ydCgpCiMgICAgIHByaW50ICJLSU5EX1VSTCA9IHsiCiMgICAgIHByaW50ICIsXG4iLmpvaW4ocmVzdWx0cykKIyAgICAgcHJpbnQgIn0iCiMKIyBpZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgojICAgICBwcmludF9raW5kX3VybF9tYXAoKQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCktJTkRfVVJMID0gewogICAgImJpbmRpbmciOiAiL2FwaS92MS9uYW1lc3BhY2VzL3tuYW1lc3BhY2V9L2JpbmRpbmdzIiwKICAgICJlbmRwb2ludHMiOiAiL2FwaS92MS9uYW1lc3BhY2VzL3tuYW1lc3BhY2V9L2VuZHBvaW50cyIsCiAgICAibGltaXRyYW5nZSI6ICIvYXBpL3YxL25hbWVzcGFjZXMve25hbWVzcGFjZX0vbGltaXRyYW5nZXMiLAogICAgIm5hbWVzcGFjZSI6ICIvYXBpL3YxL25hbWVzcGFjZXMiLAogICAgIm5vZGUiOiAiL2FwaS92MS9ub2RlcyIsCiAgICAicGVyc2lzdGVudHZvbHVtZSI6ICIvYXBpL3YxL3BlcnNpc3RlbnR2b2x1bWVzIiwKICAgICJwZXJzaXN0ZW50dm9sdW1lY2xhaW0iOiAiL2FwaS92MS9uYW1lc3BhY2VzL3tuYW1lc3BhY2V9L3BlcnNpc3RlbnR2b2x1bWVjbGFpbXMiLCAgIyBOT1FBCiAgICAicG9kIjogIi9hcGkvdjEvbmFtZXNwYWNlcy97bmFtZXNwYWNlfS9wb2RzIiwKICAgICJwb2R0ZW1wbGF0ZSI6ICIvYXBpL3YxL25hbWVzcGFjZXMve25hbWVzcGFjZX0vcG9kdGVtcGxhdGVzIiwKICAgICJyZXBsaWNhdGlvbmNvbnRyb2xsZXIiOiAiL2FwaS92MS9uYW1lc3BhY2VzL3tuYW1lc3BhY2V9L3JlcGxpY2F0aW9uY29udHJvbGxlcnMiLCAgIyBOT1FBCiAgICAicmVzb3VyY2VxdW90YSI6ICIvYXBpL3YxL25hbWVzcGFjZXMve25hbWVzcGFjZX0vcmVzb3VyY2VxdW90YXMiLAogICAgInNlY3JldCI6ICIvYXBpL3YxL25hbWVzcGFjZXMve25hbWVzcGFjZX0vc2VjcmV0cyIsCiAgICAic2VydmljZSI6ICIvYXBpL3YxL25hbWVzcGFjZXMve25hbWVzcGFjZX0vc2VydmljZXMiLAogICAgInNlcnZpY2VhY2NvdW50IjogIi9hcGkvdjEvbmFtZXNwYWNlcy97bmFtZXNwYWNlfS9zZXJ2aWNlYWNjb3VudHMiCn0KVVNFUl9BR0VOVCA9ICJhbnNpYmxlLWs4cy1tb2R1bGUvMC4wLjEiCgoKIyBUT0RPKGVyam9obnNvKTogU1NMIENlcnRpZmljYXRlIHZhbGlkYXRpb24gaXMgY3VycmVudGx5IHVuc3VwcG9ydGVkLgojIEl0IGNhbiBiZSBtYWRlIHRvIHdvcmsgd2hlbiB0aGUgZm9sbG93aW5nIGFyZSB0cnVlOgojIC0gQW5zaWJsZSBjb25zaXN0ZW50bHkgdXNlcyBhICJtYXRjaF9ob3N0bmFtZSIgdGhhdCBzdXBwb3J0cyBJUCBBZGRyZXNzCiMgICBtYXRjaGluZy4gVGhpcyBpcyBub3cgdHJ1ZSBpbiA+PSBweXRob24zLjUuMC4gQ3VycmVudGx5LCB0aGlzIGZlYXR1cmUKIyAgIGlzIG5vdCB5ZXQgYXZhaWxhYmxlIGluIGJhY2twb3J0cy5zc2xfbWF0Y2hfaG9zdG5hbWUgKHN0aWxsIDMuNCkuCiMgLSBBbnNpYmxlIGFsbG93cyBwYXNzaW5nIGluIHRoZSBzZWxmLXNpZ25lZCBDQSBjZXJ0IHRoYXQgaXMgY3JlYXRlZCB3aXRoCiMgICBhIGt1YmVybmV0ZXMgbWFzdGVyLiBUaGUgbGliL2Fuc2libGUvbW9kdWxlX3V0aWxzL3VybHMucHkgbWV0aG9kLAojICAgU1NMVmFsaWRhdGlvbkhhbmRsZXIuZ2V0X2NhX2NlcnRzKCkgbmVlZHMgYSB3YXkgZm9yIHRoZSBLdWJlcm5ldGVzCiMgICBDQSBjZXJ0IHRvIGJlIHBhc3NlZCBpbiBhbmQgaW5jbHVkZWQgaW4gdGhlIGdlbmVyYXRlZCBidW5kbGUgZmlsZS4KIyBXaGVuIHRoaXMgaXMgZml4ZWQsIHRoZSBmb2xsb3dpbmcgY2hhbmdlcyBjYW4gYmUgbWFkZSB0byB0aGlzIG1vZHVsZSwKIyAtIFJlbW92ZSB0aGUgJ3JldHVybicgc3RhdGVtZW50IGluIGxpbmUgMjU0IGJlbG93CiMgLSBTZXQgJ3JlcXVpcmVkPXRydWUnIGZvciBjZXJ0aWZpY2F0ZV9hdXRob3JpdHlfZGF0YSBhbmQgZW5zdXJlIHRoYXQKIyAgIGFuc2libGUncyBTU0xWYWxpZGF0aW9uSGFuZGxlci5nZXRfY2FfY2VydHMoKSBjYW4gcGljayB1cCB0aGlzIENBIGNlcnQKIyAtIFNldCAncmVxdWlyZWQ9dHJ1ZScgZm9yIHRoZSB2YWxpZGF0ZV9jZXJ0cyBwYXJhbS4KCmRlZiBkZWNvZGVfY2VydF9kYXRhKG1vZHVsZSk6CiAgICByZXR1cm4KICAgIGQgPSBtb2R1bGUucGFyYW1zLmdldCgiY2VydGlmaWNhdGVfYXV0aG9yaXR5X2RhdGEiKQogICAgaWYgZCBhbmQgbm90IGQuc3RhcnRzd2l0aCgiLS0tLS1CRUdJTiIpOgogICAgICAgIG1vZHVsZS5wYXJhbXNbImNlcnRpZmljYXRlX2F1dGhvcml0eV9kYXRhIl0gPSBiYXNlNjQuYjY0ZGVjb2RlKGQpCgoKZGVmIGFwaV9yZXF1ZXN0KG1vZHVsZSwgdXJsLCBtZXRob2Q9IkdFVCIsIGhlYWRlcnM9Tm9uZSwgZGF0YT1Ob25lKToKICAgIGJvZHkgPSBOb25lCiAgICBpZiBkYXRhOgogICAgICAgIGRhdGEgPSBqc29uLmR1bXBzKGRhdGEpCiAgICByZXNwb25zZSwgaW5mbyA9IGZldGNoX3VybChtb2R1bGUsIHVybCwgbWV0aG9kPW1ldGhvZCwgaGVhZGVycz1oZWFkZXJzLCBkYXRhPWRhdGEpCiAgICBpZiBpbnQoaW5mb1snc3RhdHVzJ10pID09IC0xOgogICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSJGYWlsZWQgdG8gZXhlY3V0ZSB0aGUgQVBJIHJlcXVlc3Q6ICVzIiAlIGluZm9bJ21zZyddLCB1cmw9dXJsLCBtZXRob2Q9bWV0aG9kLCBoZWFkZXJzPWhlYWRlcnMpCiAgICBpZiByZXNwb25zZSBpcyBub3QgTm9uZToKICAgICAgICBib2R5ID0ganNvbi5sb2FkcyhyZXNwb25zZS5yZWFkKCkpCiAgICByZXR1cm4gaW5mbywgYm9keQoKCmRlZiBrOHNfY3JlYXRlX3Jlc291cmNlKG1vZHVsZSwgdXJsLCBkYXRhKToKICAgIGluZm8sIGJvZHkgPSBhcGlfcmVxdWVzdChtb2R1bGUsIHVybCwgbWV0aG9kPSJQT1NUIiwgZGF0YT1kYXRhLCBoZWFkZXJzPXsiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24ifSkKICAgIGlmIGluZm9bJ3N0YXR1cyddID09IDQwOToKICAgICAgICBuYW1lID0gZGF0YVsibWV0YWRhdGEiXS5nZXQoIm5hbWUiLCBOb25lKQogICAgICAgIGluZm8sIGJvZHkgPSBhcGlfcmVxdWVzdChtb2R1bGUsIHVybCArICIvIiArIG5hbWUpCiAgICAgICAgcmV0dXJuIEZhbHNlLCBib2R5CiAgICBlbGlmIGluZm9bJ3N0YXR1cyddID49IDQwMDoKICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0iZmFpbGVkIHRvIGNyZWF0ZSB0aGUgcmVzb3VyY2U6ICVzIiAlIGluZm9bJ21zZyddLCB1cmw9dXJsKQogICAgcmV0dXJuIFRydWUsIGJvZHkKCgpkZWYgazhzX2RlbGV0ZV9yZXNvdXJjZShtb2R1bGUsIHVybCwgZGF0YSk6CiAgICBuYW1lID0gZGF0YS5nZXQoJ21ldGFkYXRhJywge30pLmdldCgnbmFtZScpCiAgICBpZiBuYW1lIGlzIE5vbmU6CiAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9Ik1pc3NpbmcgYSBuYW1lZCByZXNvdXJjZSBpbiBvYmplY3QgbWV0YWRhdGEgd2hlbiB0cnlpbmcgdG8gcmVtb3ZlIGEgcmVzb3VyY2UiKQoKICAgIHVybCA9IHVybCArICcvJyArIG5hbWUKICAgIGluZm8sIGJvZHkgPSBhcGlfcmVxdWVzdChtb2R1bGUsIHVybCwgbWV0aG9kPSJERUxFVEUiKQogICAgaWYgaW5mb1snc3RhdHVzJ10gPT0gNDA0OgogICAgICAgIHJldHVybiBGYWxzZSwgIlJlc291cmNlIG5hbWUgJyVzJyBhbHJlYWR5IGFic2VudCIgJSBuYW1lCiAgICBlbGlmIGluZm9bJ3N0YXR1cyddID49IDQwMDoKICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0iZmFpbGVkIHRvIGRlbGV0ZSB0aGUgcmVzb3VyY2UgJyVzJzogJXMiICUgKG5hbWUsIGluZm9bJ21zZyddKSwgdXJsPXVybCkKICAgIHJldHVybiBUcnVlLCAiU3VjY2Vzc2Z1bGx5IGRlbGV0ZWQgcmVzb3VyY2UgbmFtZSAnJXMnIiAlIG5hbWUKCgpkZWYgazhzX3JlcGxhY2VfcmVzb3VyY2UobW9kdWxlLCB1cmwsIGRhdGEpOgogICAgbmFtZSA9IGRhdGEuZ2V0KCdtZXRhZGF0YScsIHt9KS5nZXQoJ25hbWUnKQogICAgaWYgbmFtZSBpcyBOb25lOgogICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSJNaXNzaW5nIGEgbmFtZWQgcmVzb3VyY2UgaW4gb2JqZWN0IG1ldGFkYXRhIHdoZW4gdHJ5aW5nIHRvIHJlcGxhY2UgYSByZXNvdXJjZSIpCgogICAgaGVhZGVycyA9IHsiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24ifQogICAgdXJsID0gdXJsICsgJy8nICsgbmFtZQogICAgaW5mbywgYm9keSA9IGFwaV9yZXF1ZXN0KG1vZHVsZSwgdXJsLCBtZXRob2Q9IlBVVCIsIGRhdGE9ZGF0YSwgaGVhZGVycz1oZWFkZXJzKQogICAgaWYgaW5mb1snc3RhdHVzJ10gPT0gNDA5OgogICAgICAgIG5hbWUgPSBkYXRhWyJtZXRhZGF0YSJdLmdldCgibmFtZSIsIE5vbmUpCiAgICAgICAgaW5mbywgYm9keSA9IGFwaV9yZXF1ZXN0KG1vZHVsZSwgdXJsICsgIi8iICsgbmFtZSkKICAgICAgICByZXR1cm4gRmFsc2UsIGJvZHkKICAgIGVsaWYgaW5mb1snc3RhdHVzJ10gPj0gNDAwOgogICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSJmYWlsZWQgdG8gcmVwbGFjZSB0aGUgcmVzb3VyY2UgJyVzJzogJXMiICUgKG5hbWUsIGluZm9bJ21zZyddKSwgdXJsPXVybCkKICAgIHJldHVybiBUcnVlLCBib2R5CgoKZGVmIGs4c191cGRhdGVfcmVzb3VyY2UobW9kdWxlLCB1cmwsIGRhdGEpOgogICAgbmFtZSA9IGRhdGEuZ2V0KCdtZXRhZGF0YScsIHt9KS5nZXQoJ25hbWUnKQogICAgaWYgbmFtZSBpcyBOb25lOgogICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSJNaXNzaW5nIGEgbmFtZWQgcmVzb3VyY2UgaW4gb2JqZWN0IG1ldGFkYXRhIHdoZW4gdHJ5aW5nIHRvIHVwZGF0ZSBhIHJlc291cmNlIikKCiAgICBoZWFkZXJzID0geyJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vc3RyYXRlZ2ljLW1lcmdlLXBhdGNoK2pzb24ifQogICAgdXJsID0gdXJsICsgJy8nICsgbmFtZQogICAgaW5mbywgYm9keSA9IGFwaV9yZXF1ZXN0KG1vZHVsZSwgdXJsLCBtZXRob2Q9IlBBVENIIiwgZGF0YT1kYXRhLCBoZWFkZXJzPWhlYWRlcnMpCiAgICBpZiBpbmZvWydzdGF0dXMnXSA9PSA0MDk6CiAgICAgICAgbmFtZSA9IGRhdGFbIm1ldGFkYXRhIl0uZ2V0KCJuYW1lIiwgTm9uZSkKICAgICAgICBpbmZvLCBib2R5ID0gYXBpX3JlcXVlc3QobW9kdWxlLCB1cmwgKyAiLyIgKyBuYW1lKQogICAgICAgIHJldHVybiBGYWxzZSwgYm9keQogICAgZWxpZiBpbmZvWydzdGF0dXMnXSA+PSA0MDA6CiAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9ImZhaWxlZCB0byB1cGRhdGUgdGhlIHJlc291cmNlICclcyc6ICVzIiAlIChuYW1lLCBpbmZvWydtc2cnXSksIHVybD11cmwpCiAgICByZXR1cm4gVHJ1ZSwgYm9keQoKCmRlZiBtYWluKCk6CiAgICBtb2R1bGUgPSBBbnNpYmxlTW9kdWxlKAogICAgICAgIGFyZ3VtZW50X3NwZWM9ZGljdCgKICAgICAgICAgICAgaHR0cF9hZ2VudD1kaWN0KGRlZmF1bHQ9VVNFUl9BR0VOVCksCgogICAgICAgICAgICB1cmxfdXNlcm5hbWU9ZGljdChkZWZhdWx0PSJhZG1pbiIsIGFsaWFzZXM9WyJ1c2VybmFtZSJdKSwKICAgICAgICAgICAgdXJsX3Bhc3N3b3JkPWRpY3QoZGVmYXVsdD0iIiwgbm9fbG9nPVRydWUsIGFsaWFzZXM9WyJwYXNzd29yZCJdKSwKICAgICAgICAgICAgZm9yY2VfYmFzaWNfYXV0aD1kaWN0KGRlZmF1bHQ9InllcyIpLAogICAgICAgICAgICB2YWxpZGF0ZV9jZXJ0cz1kaWN0KGRlZmF1bHQ9RmFsc2UsIHR5cGU9J2Jvb2wnKSwKICAgICAgICAgICAgY2VydGlmaWNhdGVfYXV0aG9yaXR5X2RhdGE9ZGljdChyZXF1aXJlZD1GYWxzZSksCiAgICAgICAgICAgIGluc2VjdXJlPWRpY3QoZGVmYXVsdD1GYWxzZSwgdHlwZT0nYm9vbCcpLAogICAgICAgICAgICBhcGlfZW5kcG9pbnQ9ZGljdChyZXF1aXJlZD1UcnVlKSwKICAgICAgICAgICAgZmlsZV9yZWZlcmVuY2U9ZGljdChyZXF1aXJlZD1GYWxzZSksCiAgICAgICAgICAgIGlubGluZV9kYXRhPWRpY3QocmVxdWlyZWQ9RmFsc2UpLAogICAgICAgICAgICBzdGF0ZT1kaWN0KGRlZmF1bHQ9InByZXNlbnQiLCBjaG9pY2VzPVsicHJlc2VudCIsICJhYnNlbnQiLCAidXBkYXRlIiwgInJlcGxhY2UiXSkKICAgICAgICApLAogICAgICAgIG11dHVhbGx5X2V4Y2x1c2l2ZSA9ICgoJ2ZpbGVfcmVmZXJlbmNlJywgJ2lubGluZV9kYXRhJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgndXJsX3VzZXJuYW1lJywgJ2luc2VjdXJlJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgndXJsX3Bhc3N3b3JkJywgJ2luc2VjdXJlJykpLAogICAgICAgIHJlcXVpcmVkX29uZV9vZiA9ICgoJ2ZpbGVfcmVmZXJlbmNlJywgJ2lubGluZV9kYXRhJyksKSwKICAgICkKCiAgICBpZiBub3QgaGFzX2xpYl95YW1sOgogICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSJtaXNzaW5nIHB5dGhvbiBsaWJyYXJ5OiB5YW1sIikKCiAgICBkZWNvZGVfY2VydF9kYXRhKG1vZHVsZSkKCiAgICBhcGlfZW5kcG9pbnQgPSBtb2R1bGUucGFyYW1zLmdldCgnYXBpX2VuZHBvaW50JykKICAgIHN0YXRlID0gbW9kdWxlLnBhcmFtcy5nZXQoJ3N0YXRlJykKICAgIGluc2VjdXJlID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2luc2VjdXJlJykKICAgIGlubGluZV9kYXRhID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2lubGluZV9kYXRhJykKICAgIGZpbGVfcmVmZXJlbmNlID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2ZpbGVfcmVmZXJlbmNlJykKCiAgICBpZiBpbmxpbmVfZGF0YToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShpbmxpbmVfZGF0YSwgZGljdCkgYW5kIG5vdCBpc2luc3RhbmNlKGlubGluZV9kYXRhLCBsaXN0KToKICAgICAgICAgICAgZGF0YSA9IHlhbWwuc2FmZV9sb2FkKGlubGluZV9kYXRhKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGRhdGEgPSBpbmxpbmVfZGF0YQogICAgZWxzZToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGYgPSBvcGVuKGZpbGVfcmVmZXJlbmNlLCAiciIpCiAgICAgICAgICAgIGRhdGEgPSBbeCBmb3IgeCBpbiB5YW1sLnNhZmVfbG9hZF9hbGwoZildCiAgICAgICAgICAgIGYuY2xvc2UoKQogICAgICAgICAgICBpZiBub3QgZGF0YToKICAgICAgICAgICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSJObyB2YWxpZCBkYXRhIGNvdWxkIGJlIGZvdW5kLiIpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0iVGhlIGZpbGUgJyVzJyB3YXMgbm90IGZvdW5kIG9yIGNvbnRhaW5lZCBpbnZhbGlkIFlBTUwvSlNPTiBkYXRhIiAlIGZpbGVfcmVmZXJlbmNlKQoKICAgICMgc2V0IHRoZSB0cmFuc3BvcnQgdHlwZSBhbmQgYnVpbGQgdGhlIHRhcmdldCBlbmRwb2ludCB1cmwKICAgIHRyYW5zcG9ydCA9ICdodHRwcycKICAgIGlmIGluc2VjdXJlOgogICAgICAgIHRyYW5zcG9ydCA9ICdodHRwJwoKICAgIHRhcmdldF9lbmRwb2ludCA9ICIlczovLyVzIiAlICh0cmFuc3BvcnQsIGFwaV9lbmRwb2ludCkKCiAgICBib2R5ID0gW10KICAgIGNoYW5nZWQgPSBGYWxzZQoKICAgICMgbWFrZSBzdXJlIHRoZSBkYXRhIGlzIGEgbGlzdAogICAgaWYgbm90IGlzaW5zdGFuY2UoZGF0YSwgbGlzdCk6CiAgICAgICAgZGF0YSA9IFsgZGF0YSBdCgogICAgZm9yIGl0ZW0gaW4gZGF0YToKICAgICAgICBuYW1lc3BhY2UgPSAiZGVmYXVsdCIKICAgICAgICBpZiBpdGVtIGFuZCAnbWV0YWRhdGEnIGluIGl0ZW06CiAgICAgICAgICAgIG5hbWVzcGFjZSA9IGl0ZW0uZ2V0KCdtZXRhZGF0YScsIHt9KS5nZXQoJ25hbWVzcGFjZScsICJkZWZhdWx0IikKICAgICAgICAgICAga2luZCA9IGl0ZW0uZ2V0KCdraW5kJywgJycpLmxvd2VyKCkKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdXJsID0gdGFyZ2V0X2VuZHBvaW50ICsgS0lORF9VUkxba2luZF0KICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9ImludmFsaWQgcmVzb3VyY2Uga2luZCBzcGVjaWZpZWQgaW4gdGhlIGRhdGE6ICclcyciICUga2luZCkKICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoIntuYW1lc3BhY2V9IiwgbmFtZXNwYWNlKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHVybCA9IHRhcmdldF9lbmRwb2ludAoKICAgICAgICBpZiBzdGF0ZSA9PSAncHJlc2VudCc6CiAgICAgICAgICAgIGl0ZW1fY2hhbmdlZCwgaXRlbV9ib2R5ID0gazhzX2NyZWF0ZV9yZXNvdXJjZShtb2R1bGUsIHVybCwgaXRlbSkKICAgICAgICBlbGlmIHN0YXRlID09ICdhYnNlbnQnOgogICAgICAgICAgICBpdGVtX2NoYW5nZWQsIGl0ZW1fYm9keSA9IGs4c19kZWxldGVfcmVzb3VyY2UobW9kdWxlLCB1cmwsIGl0ZW0pCiAgICAgICAgZWxpZiBzdGF0ZSA9PSAncmVwbGFjZSc6CiAgICAgICAgICAgIGl0ZW1fY2hhbmdlZCwgaXRlbV9ib2R5ID0gazhzX3JlcGxhY2VfcmVzb3VyY2UobW9kdWxlLCB1cmwsIGl0ZW0pCiAgICAgICAgZWxpZiBzdGF0ZSA9PSAndXBkYXRlJzoKICAgICAgICAgICAgaXRlbV9jaGFuZ2VkLCBpdGVtX2JvZHkgPSBrOHNfdXBkYXRlX3Jlc291cmNlKG1vZHVsZSwgdXJsLCBpdGVtKQoKICAgICAgICBjaGFuZ2VkIHw9IGl0ZW1fY2hhbmdlZAogICAgICAgIGJvZHkuYXBwZW5kKGl0ZW1fYm9keSkKCiAgICBtb2R1bGUuZXhpdF9qc29uKGNoYW5nZWQ9Y2hhbmdlZCwgYXBpX3Jlc3BvbnNlPWJvZHkpCgoKIyBpbXBvcnQgbW9kdWxlIHNuaXBwZXRzCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuYmFzaWMgaW1wb3J0ICogICAgIyBOT1FBCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMudXJscyBpbXBvcnQgKiAgICAgIyBOT1FBCgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIG1haW4oKQpQSwMEFAAAAAAAB7wrSzvfOZUwigEAMIoBAB0AAABhbnNpYmxlL21vZHVsZV91dGlscy9iYXNpYy5weSMgVGhpcyBjb2RlIGlzIHBhcnQgb2YgQW5zaWJsZSwgYnV0IGlzIGFuIGluZGVwZW5kZW50IGNvbXBvbmVudC4KIyBUaGlzIHBhcnRpY3VsYXIgZmlsZSBzbmlwcGV0LCBhbmQgdGhpcyBmaWxlIHNuaXBwZXQgb25seSwgaXMgQlNEIGxpY2Vuc2VkLgojIE1vZHVsZXMgeW91IHdyaXRlIHVzaW5nIHRoaXMgc25pcHBldCwgd2hpY2ggaXMgZW1iZWRkZWQgZHluYW1pY2FsbHkgYnkgQW5zaWJsZQojIHN0aWxsIGJlbG9uZyB0byB0aGUgYXV0aG9yIG9mIHRoZSBtb2R1bGUsIGFuZCBtYXkgYXNzaWduIHRoZWlyIG93biBsaWNlbnNlCiMgdG8gdGhlIGNvbXBsZXRlIHdvcmsuCiMKIyBDb3B5cmlnaHQgKGMpLCBNaWNoYWVsIERlSGFhbiA8bWljaGFlbC5kZWhhYW5AZ21haWwuY29tPiwgMjAxMi0yMDEzCiMgQ29weXJpZ2h0IChjKSwgVG9zaGlvIEt1cmF0b21pIDx0a3VyYXRvbWlAYW5zaWJsZS5jb20+IDIwMTYKIyBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwKIyBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6CiMKIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0CiMgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuCiMgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsCiMgICAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uCiMgICAgICBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KIwojIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTIElTIiBBTkQKIyBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRAojIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4KIyBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwKIyBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sCiMgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTCiMgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVAojIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRQojIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgojCgpCT09MRUFOU19UUlVFID0gWyd5JywgJ3llcycsICdvbicsICcxJywgJ3RydWUnLCAxLCBUcnVlXQpCT09MRUFOU19GQUxTRSA9IFsnbicsICdubycsICdvZmYnLCAnMCcsICdmYWxzZScsIDAsIEZhbHNlXQpCT09MRUFOUyA9IEJPT0xFQU5TX1RSVUUgKyBCT09MRUFOU19GQUxTRQoKU0laRV9SQU5HRVMgPSB7ICdZJzogMTw8ODAsICdaJzogMTw8NzAsICdFJzogMTw8NjAsICdQJzogMTw8NTAsICdUJzogMTw8NDAsICdHJzogMTw8MzAsICdNJzogMTw8MjAsICdLJzogMTw8MTAsICdCJzogMSB9CgpGSUxFX0FUVFJJQlVURVMgPSB7CiAgICAnQSc6ICdub2F0aW1lJywKICAgICdhJzogJ2FwcGVuZCcsCiAgICAnYyc6ICdjb21wcmVzc2VkJywKICAgICdDJzogJ25vY293JywKICAgICdkJzogJ25vZHVtcCcsCiAgICAnRCc6ICdkaXJzeW5jJywKICAgICdlJzogJ2V4dGVudHMnLAogICAgJ0UnOiAnZW5jcnlwdGVkJywKICAgICdoJzogJ2Jsb2Nrc2l6ZScsCiAgICAnaSc6ICdpbW11dGFibGUnLAogICAgJ0knOiAnaW5kZXhlZCcsCiAgICAnaic6ICdqb3VybmFsbGVkJywKICAgICdOJzogJ2lubGluZScsCiAgICAncyc6ICd6ZXJvJywKICAgICdTJzogJ3N5bmNocm9ub3VzJywKICAgICd0JzogJ25vdGFpbCcsCiAgICAnVCc6ICdibG9ja3Jvb3QnLAogICAgJ3UnOiAndW5kZWxldGUnLAogICAgJ1gnOiAnY29tcHJlc3NlZHJhdycsCiAgICAnWic6ICdjb21wcmVzc2VkZGlydHknLAp9CgojIGFuc2libGUgbW9kdWxlcyBjYW4gYmUgd3JpdHRlbiBpbiBhbnkgbGFuZ3VhZ2UuICBUbyBzaW1wbGlmeQojIGRldmVsb3BtZW50IG9mIFB5dGhvbiBtb2R1bGVzLCB0aGUgZnVuY3Rpb25zIGF2YWlsYWJsZSBoZXJlIGNhbgojIGJlIHVzZWQgdG8gZG8gbWFueSBjb21tb24gdGFza3MKCmltcG9ydCBsb2NhbGUKaW1wb3J0IG9zCmltcG9ydCByZQppbXBvcnQgc2hsZXgKaW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IHN5cwppbXBvcnQgdHlwZXMKaW1wb3J0IHRpbWUKaW1wb3J0IHNlbGVjdAppbXBvcnQgc2h1dGlsCmltcG9ydCBzdGF0CmltcG9ydCB0ZW1wZmlsZQppbXBvcnQgdHJhY2ViYWNrCmltcG9ydCBncnAKaW1wb3J0IHB3ZAppbXBvcnQgcGxhdGZvcm0KaW1wb3J0IGVycm5vCmltcG9ydCBkYXRldGltZQpmcm9tIGl0ZXJ0b29scyBpbXBvcnQgcmVwZWF0LCBjaGFpbgoKdHJ5OgogICAgaW1wb3J0IHN5c2xvZwogICAgSEFTX1NZU0xPRz1UcnVlCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIEhBU19TWVNMT0c9RmFsc2UKCnRyeToKICAgIGZyb20gc3lzdGVtZCBpbXBvcnQgam91cm5hbAogICAgaGFzX2pvdXJuYWwgPSBUcnVlCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIGhhc19qb3VybmFsID0gRmFsc2UKCkhBVkVfU0VMSU5VWD1GYWxzZQp0cnk6CiAgICBpbXBvcnQgc2VsaW51eAogICAgSEFWRV9TRUxJTlVYPVRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgcGFzcwoKIyBQeXRob24yICYgMyB3YXkgdG8gZ2V0IE5vbmVUeXBlCk5vbmVUeXBlID0gdHlwZShOb25lKQoKdHJ5OgogICAgZnJvbSBjb2xsZWN0aW9ucyBpbXBvcnQgU2VxdWVuY2UsIE1hcHBpbmcKZXhjZXB0IEltcG9ydEVycm9yOgogICAgIyBweXRob24yLjUKICAgIFNlcXVlbmNlID0gKGxpc3QsIHR1cGxlKQogICAgTWFwcGluZyA9IChkaWN0LCkKCiMgTm90ZTogV2hlbiBnZXR0aW5nIFNlcXVlbmNlIGZyb20gY29sbGVjdGlvbnMsIGl0IG1hdGNoZXMgd2l0aCBzdHJpbmdzLiAgSWYKIyB0aGlzIG1hdHRlcnMsIG1ha2Ugc3VyZSB0byBjaGVjayBmb3Igc3RyaW5ncyBiZWZvcmUgY2hlY2tpbmcgZm9yIHNlcXVlbmNldHlwZQp0cnk6CiAgICBmcm9tIGNvbGxlY3Rpb25zLmFiYyBpbXBvcnQgS2V5c1ZpZXcKICAgIFNFUVVFTkNFVFlQRSA9IChTZXF1ZW5jZSwgS2V5c1ZpZXcpCmV4Y2VwdDoKICAgIFNFUVVFTkNFVFlQRSA9IFNlcXVlbmNlCgp0cnk6CiAgICBpbXBvcnQganNvbgogICAgIyBEZXRlY3QgdGhlIHB5dGhvbi1qc29uIGxpYnJhcnkgd2hpY2ggaXMgaW5jb21wYXRpYmxlCiAgICAjIExvb2sgZm9yIHNpbXBsZWpzb24gaWYgdGhhdCdzIHRoZSBjYXNlCiAgICB0cnk6CiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoanNvbi5sb2FkcywgdHlwZXMuRnVuY3Rpb25UeXBlKSBvciBub3QgaXNpbnN0YW5jZShqc29uLmR1bXBzLCB0eXBlcy5GdW5jdGlvblR5cGUpOgogICAgICAgICAgICByYWlzZSBJbXBvcnRFcnJvcgogICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgIHJhaXNlIEltcG9ydEVycm9yCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIHRyeToKICAgICAgICBpbXBvcnQgc2ltcGxlanNvbiBhcyBqc29uCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgcHJpbnQoJ1xueyJtc2ciOiAiRXJyb3I6IGFuc2libGUgcmVxdWlyZXMgdGhlIHN0ZGxpYiBqc29uIG9yIHNpbXBsZWpzb24gbW9kdWxlLCBuZWl0aGVyIHdhcyBmb3VuZCEiLCAiZmFpbGVkIjogdHJ1ZX0nKQogICAgICAgIHN5cy5leGl0KDEpCiAgICBleGNlcHQgU3ludGF4RXJyb3I6CiAgICAgICAgcHJpbnQoJ1xueyJtc2ciOiAiU3ludGF4RXJyb3I6IHByb2JhYmx5IGR1ZSB0byBpbnN0YWxsZWQgc2ltcGxlanNvbiBiZWluZyBmb3IgYSBkaWZmZXJlbnQgcHl0aG9uIHZlcnNpb24iLCAiZmFpbGVkIjogdHJ1ZX0nKQogICAgICAgIHN5cy5leGl0KDEpCgpBVkFJTEFCTEVfSEFTSF9BTEdPUklUSE1TID0gZGljdCgpCnRyeToKICAgIGltcG9ydCBoYXNobGliCgogICAgIyBweXRob24gMi43LjkrIGFuZCAyLjcuMCsKICAgIGZvciBhdHRyaWJ1dGUgaW4gKCdhdmFpbGFibGVfYWxnb3JpdGhtcycsICdhbGdvcml0aG1zJyk6CiAgICAgICAgYWxnb3JpdGhtcyA9IGdldGF0dHIoaGFzaGxpYiwgYXR0cmlidXRlLCBOb25lKQogICAgICAgIGlmIGFsZ29yaXRobXM6CiAgICAgICAgICAgIGJyZWFrCiAgICBpZiBhbGdvcml0aG1zIGlzIE5vbmU6CiAgICAgICAgIyBweXRob24gMi41KwogICAgICAgIGFsZ29yaXRobXMgPSAoJ21kNScsICdzaGExJywgJ3NoYTIyNCcsICdzaGEyNTYnLCAnc2hhMzg0JywgJ3NoYTUxMicpCiAgICBmb3IgYWxnb3JpdGhtIGluIGFsZ29yaXRobXM6CiAgICAgICAgQVZBSUxBQkxFX0hBU0hfQUxHT1JJVEhNU1thbGdvcml0aG1dID0gZ2V0YXR0cihoYXNobGliLCBhbGdvcml0aG0pCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIGltcG9ydCBzaGEKICAgIEFWQUlMQUJMRV9IQVNIX0FMR09SSVRITVMgPSB7J3NoYTEnOiBzaGEuc2hhfQogICAgdHJ5OgogICAgICAgIGltcG9ydCBtZDUKICAgICAgICBBVkFJTEFCTEVfSEFTSF9BTEdPUklUSE1TWydtZDUnXSA9IG1kNS5tZDUKICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBwYXNzCgpmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLnB5Y29tcGF0MjQgaW1wb3J0IGdldF9leGNlcHRpb24sIGxpdGVyYWxfZXZhbApmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeCBpbXBvcnQgKFBZMiwgUFkzLCBiLCBiaW5hcnlfdHlwZSwgaW50ZWdlcl90eXBlcywKICAgICAgICBpdGVyaXRlbXMsIHRleHRfdHlwZSwgc3RyaW5nX3R5cGVzKQpmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeC5tb3ZlcyBpbXBvcnQgbWFwLCByZWR1Y2UsIHNobGV4X3F1b3RlCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuX3RleHQgaW1wb3J0IHRvX25hdGl2ZSwgdG9fYnl0ZXMsIHRvX3RleHQKClBBU1NXT1JEX01BVENIID0gcmUuY29tcGlsZShyJ14oPzouK1stX1xzXSk/cGFzcyg/OlstX1xzXT8oPzp3b3JkfHBocmFzZXx3cmR8d2QpPykoPzpbLV9cc10uKyk/JCcsIHJlLkkpCgpfTlVNQkVSVFlQRVMgPSB0dXBsZShsaXN0KGludGVnZXJfdHlwZXMpICsgW2Zsb2F0XSkKCiMgRGVwcmVjYXRlZCBjb21wYXQuICBPbmx5IGtlcHQgaW4gY2FzZSBhbm90aGVyIG1vZHVsZSB1c2VkIHRoZXNlIG5hbWVzICBVc2luZwojIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeCBpcyBwcmVmZXJyZWQKCk5VTUJFUlRZUEVTID0gX05VTUJFUlRZUEVTCgppbWFwID0gbWFwCgp0cnk6CiAgICAjIFB5dGhvbiAyCiAgICB1bmljb2RlCmV4Y2VwdCBOYW1lRXJyb3I6CiAgICAjIFB5dGhvbiAzCiAgICB1bmljb2RlID0gdGV4dF90eXBlCgp0cnk6CiAgICAjIFB5dGhvbiAyLjYrCiAgICBieXRlcwpleGNlcHQgTmFtZUVycm9yOgogICAgIyBQeXRob24gMi40CiAgICBieXRlcyA9IGJpbmFyeV90eXBlCgp0cnk6CiAgICAjIFB5dGhvbiAyCiAgICBiYXNlc3RyaW5nCmV4Y2VwdCBOYW1lRXJyb3I6CiAgICAjIFB5dGhvbiAzCiAgICBiYXNlc3RyaW5nID0gc3RyaW5nX3R5cGVzCgpfbGl0ZXJhbF9ldmFsID0gbGl0ZXJhbF9ldmFsCgojIEVuZCBvZiBkZXByZWNhdGVkIG5hbWVzCgojIEludGVybmFsIGdsb2JhbCBob2xkaW5nIHBhc3NlZCBpbiBwYXJhbXMuICBUaGlzIGlzIGNvbnN1bHRlZCBpbiBjYXNlCiMgbXVsdGlwbGUgQW5zaWJsZU1vZHVsZXMgYXJlIGNyZWF0ZWQuICBPdGhlcndpc2UgZWFjaCBBbnNpYmxlTW9kdWxlIHdvdWxkCiMgYXR0ZW1wdCB0byByZWFkIGZyb20gc3RkaW4uICBPdGhlciBjb2RlIHNob3VsZCBub3QgdXNlIHRoaXMgZGlyZWN0bHkgYXMgaXQKIyBpcyBhbiBpbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBkZXRhaWwKX0FOU0lCTEVfQVJHUyA9IE5vbmUKCkZJTEVfQ09NTU9OX0FSR1VNRU5UUz1kaWN0KAogICAgc3JjID0gZGljdCgpLAogICAgbW9kZSA9IGRpY3QodHlwZT0ncmF3JyksCiAgICBvd25lciA9IGRpY3QoKSwKICAgIGdyb3VwID0gZGljdCgpLAogICAgc2V1c2VyID0gZGljdCgpLAogICAgc2Vyb2xlID0gZGljdCgpLAogICAgc2VsZXZlbCA9IGRpY3QoKSwKICAgIHNldHlwZSA9IGRpY3QoKSwKICAgIGZvbGxvdyA9IGRpY3QodHlwZT0nYm9vbCcsIGRlZmF1bHQ9RmFsc2UpLAogICAgIyBub3QgdGFrZW4gYnkgdGhlIGZpbGUgbW9kdWxlLCBidXQgb3RoZXIgbW9kdWxlcyBjYWxsIGZpbGUgc28gaXQgbXVzdCBpZ25vcmUgdGhlbS4KICAgIGNvbnRlbnQgPSBkaWN0KG5vX2xvZz1UcnVlKSwKICAgIGJhY2t1cCA9IGRpY3QoKSwKICAgIGZvcmNlID0gZGljdCgpLAogICAgcmVtb3RlX3NyYyA9IGRpY3QoKSwgIyB1c2VkIGJ5IGFzc2VtYmxlCiAgICByZWdleHAgPSBkaWN0KCksICMgdXNlZCBieSBhc3NlbWJsZQogICAgZGVsaW1pdGVyID0gZGljdCgpLCAjIHVzZWQgYnkgYXNzZW1ibGUKICAgIGRpcmVjdG9yeV9tb2RlID0gZGljdCgpLCAjIHVzZWQgYnkgY29weQogICAgdW5zYWZlX3dyaXRlcyAgPSBkaWN0KHR5cGU9J2Jvb2wnKSwgIyBzaG91bGQgYmUgYXZhaWxhYmxlIHRvIGFueSBtb2R1bGUgdXNpbmcgYXRvbWljX21vdmUKICAgIGF0dHJpYnV0ZXMgPSBkaWN0KGFsaWFzZXM9WydhdHRyJ10pLAopCgpQQVNTV0RfQVJHX1JFID0gcmUuY29tcGlsZShyJ15bLV17MCwyfXBhc3NbLV0/KHdvcmR8d2QpPycpCgojIENhbid0IHVzZSAwNzc3NyBvbiBQeXRob24gMywgY2FuJ3QgdXNlIDBvNzc3NyBvbiBQeXRob24gMi40ClBFUk1fQklUUyA9IGludCgnMDc3NzcnLCA4KSAgICAgICMgZmlsZSBtb2RlIHBlcm1pc3Npb24gYml0cwpFWEVDX1BFUk1fQklUUyA9IGludCgnMDAxMTEnLCA4KSAjIGV4ZWN1dGUgcGVybWlzc2lvbiBiaXRzCkRFRkFVTFRfUEVSTSA9IGludCgnMDY2NicsIDgpICAgICMgZGVmYXVsdCBmaWxlIHBlcm1pc3Npb24gYml0cwoKCmRlZiBnZXRfcGxhdGZvcm0oKToKICAgICcnJyB3aGF0J3MgdGhlIHBsYXRmb3JtPyAgZXhhbXBsZTogTGludXggaXMgYSBwbGF0Zm9ybS4gJycnCiAgICByZXR1cm4gcGxhdGZvcm0uc3lzdGVtKCkKCmRlZiBnZXRfZGlzdHJpYnV0aW9uKCk6CiAgICAnJycgcmV0dXJuIHRoZSBkaXN0cmlidXRpb24gbmFtZSAnJycKICAgIGlmIHBsYXRmb3JtLnN5c3RlbSgpID09ICdMaW51eCc6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdXBwb3J0ZWRfZGlzdHMgPSBwbGF0Zm9ybS5fc3VwcG9ydGVkX2Rpc3RzICsgKCdhcmNoJywnYWxwaW5lJykKICAgICAgICAgICAgZGlzdHJpYnV0aW9uID0gcGxhdGZvcm0ubGludXhfZGlzdHJpYnV0aW9uKHN1cHBvcnRlZF9kaXN0cz1zdXBwb3J0ZWRfZGlzdHMpWzBdLmNhcGl0YWxpemUoKQogICAgICAgICAgICBpZiBub3QgZGlzdHJpYnV0aW9uIGFuZCBvcy5wYXRoLmlzZmlsZSgnL2V0Yy9zeXN0ZW0tcmVsZWFzZScpOgogICAgICAgICAgICAgICAgZGlzdHJpYnV0aW9uID0gcGxhdGZvcm0ubGludXhfZGlzdHJpYnV0aW9uKHN1cHBvcnRlZF9kaXN0cz1bJ3N5c3RlbSddKVswXS5jYXBpdGFsaXplKCkKICAgICAgICAgICAgICAgIGlmICdBbWF6b24nIGluIGRpc3RyaWJ1dGlvbjoKICAgICAgICAgICAgICAgICAgICBkaXN0cmlidXRpb24gPSAnQW1hem9uJwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBkaXN0cmlidXRpb24gPSAnT3RoZXJMaW51eCcKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICMgRklYTUU6IE1ldGhvZE1pc3NpbmcsIEkgYXNzdW1lPwogICAgICAgICAgICBkaXN0cmlidXRpb24gPSBwbGF0Zm9ybS5kaXN0KClbMF0uY2FwaXRhbGl6ZSgpCiAgICBlbHNlOgogICAgICAgIGRpc3RyaWJ1dGlvbiA9IE5vbmUKICAgIHJldHVybiBkaXN0cmlidXRpb24KCmRlZiBnZXRfZGlzdHJpYnV0aW9uX3ZlcnNpb24oKToKICAgICcnJyByZXR1cm4gdGhlIGRpc3RyaWJ1dGlvbiB2ZXJzaW9uICcnJwogICAgaWYgcGxhdGZvcm0uc3lzdGVtKCkgPT0gJ0xpbnV4JzoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGRpc3RyaWJ1dGlvbl92ZXJzaW9uID0gcGxhdGZvcm0ubGludXhfZGlzdHJpYnV0aW9uKClbMV0KICAgICAgICAgICAgaWYgbm90IGRpc3RyaWJ1dGlvbl92ZXJzaW9uIGFuZCBvcy5wYXRoLmlzZmlsZSgnL2V0Yy9zeXN0ZW0tcmVsZWFzZScpOgogICAgICAgICAgICAgICAgZGlzdHJpYnV0aW9uX3ZlcnNpb24gPSBwbGF0Zm9ybS5saW51eF9kaXN0cmlidXRpb24oc3VwcG9ydGVkX2Rpc3RzPVsnc3lzdGVtJ10pWzFdCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAjIEZJWE1FOiBNZXRob2RNaXNzaW5nLCBJIGFzc3VtZT8KICAgICAgICAgICAgZGlzdHJpYnV0aW9uX3ZlcnNpb24gPSBwbGF0Zm9ybS5kaXN0KClbMV0KICAgIGVsc2U6CiAgICAgICAgZGlzdHJpYnV0aW9uX3ZlcnNpb24gPSBOb25lCiAgICByZXR1cm4gZGlzdHJpYnV0aW9uX3ZlcnNpb24KCmRlZiBnZXRfYWxsX3N1YmNsYXNzZXMoY2xzKToKICAgICcnJwogICAgdXNlZCBieSBtb2R1bGVzIGxpa2UgSGFyZHdhcmUgb3IgTmV0d29yayBmYWN0IGNsYXNzZXMgdG8gcmV0cmlldmUgYWxsIHN1YmNsYXNzZXMgb2YgYSBnaXZlbiBjbGFzcy4KICAgIF9fc3ViY2xhc3Nlc19fIHJldHVybiBvbmx5IGRpcmVjdCBzdWIgY2xhc3Nlcy4gVGhpcyBvbmUgZ28gZG93biBpbnRvIHRoZSBjbGFzcyB0cmVlLgogICAgJycnCiAgICAjIFJldHJpZXZlIGRpcmVjdCBzdWJjbGFzc2VzCiAgICBzdWJjbGFzc2VzID0gY2xzLl9fc3ViY2xhc3Nlc19fKCkKICAgIHRvX3Zpc2l0ID0gbGlzdChzdWJjbGFzc2VzKQogICAgIyBUaGVuIHZpc2l0IGFsbCBzdWJjbGFzc2VzCiAgICB3aGlsZSB0b192aXNpdDoKICAgICAgICBmb3Igc2MgaW4gdG9fdmlzaXQ6CiAgICAgICAgICAgICMgVGhlIGN1cnJlbnQgY2xhc3MgaXMgbm93IHZpc2l0ZWQsIHNvIHJlbW92ZSBpdCBmcm9tIGxpc3QKICAgICAgICAgICAgdG9fdmlzaXQucmVtb3ZlKHNjKQogICAgICAgICAgICAjIEFwcGVuZGluZyBhbGwgc3ViY2xhc3NlcyB0byB2aXNpdCBhbmQga2VlcCBhIHJlZmVyZW5jZSBvZiBhdmFpbGFibGUgY2xhc3MKICAgICAgICAgICAgZm9yIHNzYyBpbiBzYy5fX3N1YmNsYXNzZXNfXygpOgogICAgICAgICAgICAgICAgc3ViY2xhc3Nlcy5hcHBlbmQoc3NjKQogICAgICAgICAgICAgICAgdG9fdmlzaXQuYXBwZW5kKHNzYykKICAgIHJldHVybiBzdWJjbGFzc2VzCgoKZGVmIGxvYWRfcGxhdGZvcm1fc3ViY2xhc3MoY2xzLCAqYXJncywgKiprd2FyZ3MpOgogICAgJycnCiAgICB1c2VkIGJ5IG1vZHVsZXMgbGlrZSBVc2VyIHRvIGhhdmUgZGlmZmVyZW50IGltcGxlbWVudGF0aW9ucyBiYXNlZCBvbiBkZXRlY3RlZCBwbGF0Zm9ybS4gIFNlZSBVc2VyCiAgICBtb2R1bGUgZm9yIGFuIGV4YW1wbGUuCiAgICAnJycKCiAgICB0aGlzX3BsYXRmb3JtID0gZ2V0X3BsYXRmb3JtKCkKICAgIGRpc3RyaWJ1dGlvbiA9IGdldF9kaXN0cmlidXRpb24oKQogICAgc3ViY2xhc3MgPSBOb25lCgogICAgIyBnZXQgdGhlIG1vc3Qgc3BlY2lmaWMgc3VwZXJjbGFzcyBmb3IgdGhpcyBwbGF0Zm9ybQogICAgaWYgZGlzdHJpYnV0aW9uIGlzIG5vdCBOb25lOgogICAgICAgIGZvciBzYyBpbiBnZXRfYWxsX3N1YmNsYXNzZXMoY2xzKToKICAgICAgICAgICAgaWYgc2MuZGlzdHJpYnV0aW9uIGlzIG5vdCBOb25lIGFuZCBzYy5kaXN0cmlidXRpb24gPT0gZGlzdHJpYnV0aW9uIGFuZCBzYy5wbGF0Zm9ybSA9PSB0aGlzX3BsYXRmb3JtOgogICAgICAgICAgICAgICAgc3ViY2xhc3MgPSBzYwogICAgaWYgc3ViY2xhc3MgaXMgTm9uZToKICAgICAgICBmb3Igc2MgaW4gZ2V0X2FsbF9zdWJjbGFzc2VzKGNscyk6CiAgICAgICAgICAgIGlmIHNjLnBsYXRmb3JtID09IHRoaXNfcGxhdGZvcm0gYW5kIHNjLmRpc3RyaWJ1dGlvbiBpcyBOb25lOgogICAgICAgICAgICAgICAgc3ViY2xhc3MgPSBzYwogICAgaWYgc3ViY2xhc3MgaXMgTm9uZToKICAgICAgICBzdWJjbGFzcyA9IGNscwoKICAgIHJldHVybiBzdXBlcihjbHMsIHN1YmNsYXNzKS5fX25ld19fKHN1YmNsYXNzKQoKCmRlZiBqc29uX2RpY3RfdW5pY29kZV90b19ieXRlcyhkLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKToKICAgICcnJyBSZWN1cnNpdmVseSBjb252ZXJ0IGRpY3Qga2V5cyBhbmQgdmFsdWVzIHRvIGJ5dGUgc3RyCgogICAgICAgIFNwZWNpYWxpemVkIGZvciBqc29uIHJldHVybiBiZWNhdXNlIHRoaXMgb25seSBoYW5kbGVzLCBsaXN0cywgdHVwbGVzLAogICAgICAgIGFuZCBkaWN0IGNvbnRhaW5lciB0eXBlcyAodGhlIGNvbnRhaW5lcnMgdGhhdCB0aGUganNvbiBtb2R1bGUgcmV0dXJucykKICAgICcnJwoKICAgIGlmIGlzaW5zdGFuY2UoZCwgdGV4dF90eXBlKToKICAgICAgICByZXR1cm4gdG9fYnl0ZXMoZCwgZW5jb2Rpbmc9ZW5jb2RpbmcsIGVycm9ycz1lcnJvcnMpCiAgICBlbGlmIGlzaW5zdGFuY2UoZCwgZGljdCk6CiAgICAgICAgcmV0dXJuIGRpY3QobWFwKGpzb25fZGljdF91bmljb2RlX3RvX2J5dGVzLCBpdGVyaXRlbXMoZCksIHJlcGVhdChlbmNvZGluZyksIHJlcGVhdChlcnJvcnMpKSkKICAgIGVsaWYgaXNpbnN0YW5jZShkLCBsaXN0KToKICAgICAgICByZXR1cm4gbGlzdChtYXAoanNvbl9kaWN0X3VuaWNvZGVfdG9fYnl0ZXMsIGQsIHJlcGVhdChlbmNvZGluZyksIHJlcGVhdChlcnJvcnMpKSkKICAgIGVsaWYgaXNpbnN0YW5jZShkLCB0dXBsZSk6CiAgICAgICAgcmV0dXJuIHR1cGxlKG1hcChqc29uX2RpY3RfdW5pY29kZV90b19ieXRlcywgZCwgcmVwZWF0KGVuY29kaW5nKSwgcmVwZWF0KGVycm9ycykpKQogICAgZWxzZToKICAgICAgICByZXR1cm4gZAoKZGVmIGpzb25fZGljdF9ieXRlc190b191bmljb2RlKGQsIGVuY29kaW5nPSd1dGYtOCcsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpOgogICAgJycnIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgZGljdCBrZXlzIGFuZCB2YWx1ZXMgdG8gYnl0ZSBzdHIKCiAgICAgICAgU3BlY2lhbGl6ZWQgZm9yIGpzb24gcmV0dXJuIGJlY2F1c2UgdGhpcyBvbmx5IGhhbmRsZXMsIGxpc3RzLCB0dXBsZXMsCiAgICAgICAgYW5kIGRpY3QgY29udGFpbmVyIHR5cGVzICh0aGUgY29udGFpbmVycyB0aGF0IHRoZSBqc29uIG1vZHVsZSByZXR1cm5zKQogICAgJycnCgogICAgaWYgaXNpbnN0YW5jZShkLCBiaW5hcnlfdHlwZSk6CiAgICAgICAgIyBXYXJuaW5nLCBjYW4gdHJhY2ViYWNrCiAgICAgICAgcmV0dXJuIHRvX3RleHQoZCwgZW5jb2Rpbmc9ZW5jb2RpbmcsIGVycm9ycz1lcnJvcnMpCiAgICBlbGlmIGlzaW5zdGFuY2UoZCwgZGljdCk6CiAgICAgICAgcmV0dXJuIGRpY3QobWFwKGpzb25fZGljdF9ieXRlc190b191bmljb2RlLCBpdGVyaXRlbXMoZCksIHJlcGVhdChlbmNvZGluZyksIHJlcGVhdChlcnJvcnMpKSkKICAgIGVsaWYgaXNpbnN0YW5jZShkLCBsaXN0KToKICAgICAgICByZXR1cm4gbGlzdChtYXAoanNvbl9kaWN0X2J5dGVzX3RvX3VuaWNvZGUsIGQsIHJlcGVhdChlbmNvZGluZyksIHJlcGVhdChlcnJvcnMpKSkKICAgIGVsaWYgaXNpbnN0YW5jZShkLCB0dXBsZSk6CiAgICAgICAgcmV0dXJuIHR1cGxlKG1hcChqc29uX2RpY3RfYnl0ZXNfdG9fdW5pY29kZSwgZCwgcmVwZWF0KGVuY29kaW5nKSwgcmVwZWF0KGVycm9ycykpKQogICAgZWxzZToKICAgICAgICByZXR1cm4gZAoKZGVmIHJldHVybl92YWx1ZXMob2JqKToKICAgICIiIiBSZXR1cm4gbmF0aXZlIHN0cmluZ2lmaWVkIHZhbHVlcyBmcm9tIGRhdGFzdHJ1Y3R1cmVzLgoKICAgIEZvciB1c2Ugd2l0aCByZW1vdmluZyBzZW5zaXRpdmUgdmFsdWVzIHByZS1qc29uaWZpY2F0aW9uLiIiIgogICAgaWYgaXNpbnN0YW5jZShvYmosICh0ZXh0X3R5cGUsIGJpbmFyeV90eXBlKSk6CiAgICAgICAgaWYgb2JqOgogICAgICAgICAgICB5aWVsZCB0b19uYXRpdmUob2JqLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQogICAgICAgIHJldHVybgogICAgZWxpZiBpc2luc3RhbmNlKG9iaiwgU0VRVUVOQ0VUWVBFKToKICAgICAgICBmb3IgZWxlbWVudCBpbiBvYmo6CiAgICAgICAgICAgIGZvciBzdWJlbGVtZW50IGluIHJldHVybl92YWx1ZXMoZWxlbWVudCk6CiAgICAgICAgICAgICAgICB5aWVsZCBzdWJlbGVtZW50CiAgICBlbGlmIGlzaW5zdGFuY2Uob2JqLCBNYXBwaW5nKToKICAgICAgICBmb3IgZWxlbWVudCBpbiBvYmouaXRlbXMoKToKICAgICAgICAgICAgZm9yIHN1YmVsZW1lbnQgaW4gcmV0dXJuX3ZhbHVlcyhlbGVtZW50WzFdKToKICAgICAgICAgICAgICAgIHlpZWxkIHN1YmVsZW1lbnQKICAgIGVsaWYgaXNpbnN0YW5jZShvYmosIChib29sLCBOb25lVHlwZSkpOgogICAgICAgICMgVGhpcyBtdXN0IGNvbWUgYmVmb3JlIGludCBiZWNhdXNlIGJvb2xzIGFyZSBhbHNvIGludHMKICAgICAgICByZXR1cm4KICAgIGVsaWYgaXNpbnN0YW5jZShvYmosIE5VTUJFUlRZUEVTKToKICAgICAgICB5aWVsZCB0b19uYXRpdmUob2JqLCBub25zdHJpbmc9J3NpbXBsZXJlcHInKQogICAgZWxzZToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ1Vua25vd24gcGFyYW1ldGVyIHR5cGU6ICVzLCAlcycgJSAodHlwZShvYmopLCBvYmopKQoKZGVmIHJlbW92ZV92YWx1ZXModmFsdWUsIG5vX2xvZ19zdHJpbmdzKToKICAgICIiIiBSZW1vdmUgc3RyaW5ncyBpbiBub19sb2dfc3RyaW5ncyBmcm9tIHZhbHVlLiAgSWYgdmFsdWUgaXMgYSBjb250YWluZXIKICAgIHR5cGUsIHRoZW4gcmVtb3ZlIGEgbG90IG1vcmUiIiIKICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsICh0ZXh0X3R5cGUsIGJpbmFyeV90eXBlKSk6CiAgICAgICAgIyBOZWVkIG5hdGl2ZSBzdHIgdHlwZQogICAgICAgIG5hdGl2ZV9zdHJfdmFsdWUgPSB2YWx1ZQogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIHRleHRfdHlwZSk6CiAgICAgICAgICAgIHZhbHVlX2lzX3RleHQgPSBUcnVlCiAgICAgICAgICAgIGlmIFBZMjoKICAgICAgICAgICAgICAgIG5hdGl2ZV9zdHJfdmFsdWUgPSB0b19ieXRlcyh2YWx1ZSwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKICAgICAgICBlbGlmIGlzaW5zdGFuY2UodmFsdWUsIGJpbmFyeV90eXBlKToKICAgICAgICAgICAgdmFsdWVfaXNfdGV4dCA9IEZhbHNlCiAgICAgICAgICAgIGlmIFBZMzoKICAgICAgICAgICAgICAgIG5hdGl2ZV9zdHJfdmFsdWUgPSB0b190ZXh0KHZhbHVlLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQoKICAgICAgICBpZiBuYXRpdmVfc3RyX3ZhbHVlIGluIG5vX2xvZ19zdHJpbmdzOgogICAgICAgICAgICByZXR1cm4gJ1ZBTFVFX1NQRUNJRklFRF9JTl9OT19MT0dfUEFSQU1FVEVSJwogICAgICAgIGZvciBvbWl0X21lIGluIG5vX2xvZ19zdHJpbmdzOgogICAgICAgICAgICBuYXRpdmVfc3RyX3ZhbHVlID0gbmF0aXZlX3N0cl92YWx1ZS5yZXBsYWNlKG9taXRfbWUsICcqJyAqIDgpCgogICAgICAgIGlmIHZhbHVlX2lzX3RleHQgYW5kIGlzaW5zdGFuY2UobmF0aXZlX3N0cl92YWx1ZSwgYmluYXJ5X3R5cGUpOgogICAgICAgICAgICB2YWx1ZSA9IHRvX3RleHQobmF0aXZlX3N0cl92YWx1ZSwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9yZXBsYWNlJykKICAgICAgICBlbGlmIG5vdCB2YWx1ZV9pc190ZXh0IGFuZCBpc2luc3RhbmNlKG5hdGl2ZV9zdHJfdmFsdWUsIHRleHRfdHlwZSk6CiAgICAgICAgICAgIHZhbHVlID0gdG9fYnl0ZXMobmF0aXZlX3N0cl92YWx1ZSwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9yZXBsYWNlJykKICAgICAgICBlbHNlOgogICAgICAgICAgICB2YWx1ZSA9IG5hdGl2ZV9zdHJfdmFsdWUKICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgU0VRVUVOQ0VUWVBFKToKICAgICAgICByZXR1cm4gW3JlbW92ZV92YWx1ZXMoZWxlbSwgbm9fbG9nX3N0cmluZ3MpIGZvciBlbGVtIGluIHZhbHVlXQogICAgZWxpZiBpc2luc3RhbmNlKHZhbHVlLCBNYXBwaW5nKToKICAgICAgICByZXR1cm4gZGljdCgoaywgcmVtb3ZlX3ZhbHVlcyh2LCBub19sb2dfc3RyaW5ncykpIGZvciBrLCB2IGluIHZhbHVlLml0ZW1zKCkpCiAgICBlbGlmIGlzaW5zdGFuY2UodmFsdWUsIHR1cGxlKGNoYWluKE5VTUJFUlRZUEVTLCAoYm9vbCwgTm9uZVR5cGUpKSkpOgogICAgICAgIHN0cmluZ3lfdmFsdWUgPSB0b19uYXRpdmUodmFsdWUsIGVuY29kaW5nPSd1dGYtOCcsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgaWYgc3RyaW5neV92YWx1ZSBpbiBub19sb2dfc3RyaW5nczoKICAgICAgICAgICAgcmV0dXJuICdWQUxVRV9TUEVDSUZJRURfSU5fTk9fTE9HX1BBUkFNRVRFUicKICAgICAgICBmb3Igb21pdF9tZSBpbiBub19sb2dfc3RyaW5nczoKICAgICAgICAgICAgaWYgb21pdF9tZSBpbiBzdHJpbmd5X3ZhbHVlOgogICAgICAgICAgICAgICAgcmV0dXJuICdWQUxVRV9TUEVDSUZJRURfSU5fTk9fTE9HX1BBUkFNRVRFUicKICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOgogICAgICAgIHZhbHVlID0gdmFsdWUuaXNvZm9ybWF0KCkKICAgIGVsc2U6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdWYWx1ZSBvZiB1bmtub3duIHR5cGU6ICVzLCAlcycgJSAodHlwZSh2YWx1ZSksIHZhbHVlKSkKICAgIHJldHVybiB2YWx1ZQoKCmRlZiBoZXVyaXN0aWNfbG9nX3Nhbml0aXplKGRhdGEsIG5vX2xvZ192YWx1ZXM9Tm9uZSk6CiAgICAnJycgUmVtb3ZlIHN0cmluZ3MgdGhhdCBsb29rIGxpa2UgcGFzc3dvcmRzIGZyb20gbG9nIG1lc3NhZ2VzICcnJwogICAgIyBDdXJyZW50bHkgZmlsdGVyczoKICAgICMgdXNlcjpwYXNzQGZvby93aGF0ZXZlciBhbmQgaHR0cDovL3VzZXJuYW1lOnBhc3NAd2hlcmV2ZXIvZm9vCiAgICAjIFRoaXMgY29kZSBoYXMgZmFsc2UgcG9zaXRpdmVzIGFuZCBjb25zdW1lcyBwYXJ0cyBvZiBsb2dzIHRoYXQgYXJlCiAgICAjIG5vdCBwYXNzd2RzCgogICAgIyBiZWdpbjogc3RhcnQgb2YgYSBwYXNzd2QgY29udGFpbmluZyBzdHJpbmcKICAgICMgZW5kOiBlbmQgb2YgYSBwYXNzd2QgY29udGFpbmluZyBzdHJpbmcKICAgICMgc2VwOiBjaGFyIGJldHdlZW4gdXNlciBhbmQgcGFzc3dkCiAgICAjIHByZXZfYmVnaW46IHdoZXJlIGluIHRoZSBvdmVyYWxsIHN0cmluZyB0byBzdGFydCBhIHNlYXJjaCBmb3IKICAgICMgICBhIHBhc3N3ZAogICAgIyBzZXBfc2VhcmNoX2VuZDogd2hlcmUgaW4gdGhlIHN0cmluZyB0byBlbmQgYSBzZWFyY2ggZm9yIHRoZSBzZXAKICAgIGRhdGEgPSB0b19uYXRpdmUoZGF0YSkKCiAgICBvdXRwdXQgPSBbXQogICAgYmVnaW4gPSBsZW4oZGF0YSkKICAgIHByZXZfYmVnaW4gPSBiZWdpbgogICAgc2VwID0gMQogICAgd2hpbGUgc2VwOgogICAgICAgICMgRmluZCB0aGUgcG90ZW50aWFsIGVuZCBvZiBhIHBhc3N3ZAogICAgICAgIHRyeToKICAgICAgICAgICAgZW5kID0gZGF0YS5yaW5kZXgoJ0AnLCAwLCBiZWdpbikKICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgIyBObyBwYXNzd2QgaW4gdGhlIHJlc3Qgb2YgdGhlIGRhdGEKICAgICAgICAgICAgb3V0cHV0Lmluc2VydCgwLCBkYXRhWzA6YmVnaW5dKQogICAgICAgICAgICBicmVhawoKICAgICAgICAjIFNlYXJjaCBmb3IgdGhlIGJlZ2lubmluZyBvZiBhIHBhc3N3ZAogICAgICAgIHNlcCA9IE5vbmUKICAgICAgICBzZXBfc2VhcmNoX2VuZCA9IGVuZAogICAgICAgIHdoaWxlIG5vdCBzZXA6CiAgICAgICAgICAgICMgVVJMLXN0eWxlIHVzZXJuYW1lK3Bhc3N3b3JkCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGJlZ2luID0gZGF0YS5yaW5kZXgoJzovLycsIDAsIHNlcF9zZWFyY2hfZW5kKQogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgICAgICMgTm8gdXJsIHN0eWxlIGluIHRoZSBkYXRhLCBjaGVjayBmb3Igc3NoIHN0eWxlIGluIHRoZQogICAgICAgICAgICAgICAgIyByZXN0IG9mIHRoZSBzdHJpbmcKICAgICAgICAgICAgICAgIGJlZ2luID0gMAogICAgICAgICAgICAjIFNlYXJjaCBmb3Igc2VwYXJhdG9yCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlcCA9IGRhdGEuaW5kZXgoJzonLCBiZWdpbiArIDMsIGVuZCkKICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgICAgICAjIE5vIHNlcGFyYXRvcjsgY2hvaWNlczoKICAgICAgICAgICAgICAgIGlmIGJlZ2luID09IDA6CiAgICAgICAgICAgICAgICAgICAgIyBTZWFyY2hlZCB0aGUgd2hvbGUgc3RyaW5nIHNvIHRoZXJlJ3Mgbm8gcGFzc3dvcmQKICAgICAgICAgICAgICAgICAgICAjIGhlcmUuICBSZXR1cm4gdGhlIHJlbWFpbmluZyBkYXRhCiAgICAgICAgICAgICAgICAgICAgb3V0cHV0Lmluc2VydCgwLCBkYXRhWzA6YmVnaW5dKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAjIFNlYXJjaCBmb3IgYSBkaWZmZXJlbnQgYmVnaW5uaW5nIG9mIHRoZSBwYXNzd29yZCBmaWVsZC4KICAgICAgICAgICAgICAgIHNlcF9zZWFyY2hfZW5kID0gYmVnaW4KICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgaWYgc2VwOgogICAgICAgICAgICAjIFBhc3N3b3JkIHdhcyBmb3VuZDsgcmVtb3ZlIGl0LgogICAgICAgICAgICBvdXRwdXQuaW5zZXJ0KDAsIGRhdGFbZW5kOnByZXZfYmVnaW5dKQogICAgICAgICAgICBvdXRwdXQuaW5zZXJ0KDAsICcqKioqKioqKicpCiAgICAgICAgICAgIG91dHB1dC5pbnNlcnQoMCwgZGF0YVtiZWdpbjpzZXAgKyAxXSkKICAgICAgICAgICAgcHJldl9iZWdpbiA9IGJlZ2luCgogICAgb3V0cHV0ID0gJycuam9pbihvdXRwdXQpCiAgICBpZiBub19sb2dfdmFsdWVzOgogICAgICAgIG91dHB1dCA9IHJlbW92ZV92YWx1ZXMob3V0cHV0LCBub19sb2dfdmFsdWVzKQogICAgcmV0dXJuIG91dHB1dAoKZGVmIGJ5dGVzX3RvX2h1bWFuKHNpemUsIGlzYml0cz1GYWxzZSwgdW5pdD1Ob25lKToKCiAgICBiYXNlID0gJ0J5dGVzJwogICAgaWYgaXNiaXRzOgogICAgICAgIGJhc2UgPSAnYml0cycKICAgIHN1ZmZpeCA9ICcnCgogICAgZm9yIHN1ZmZpeCwgbGltaXQgaW4gc29ydGVkKGl0ZXJpdGVtcyhTSVpFX1JBTkdFUyksIGtleT1sYW1iZGEgaXRlbTogLWl0ZW1bMV0pOgogICAgICAgIGlmICh1bml0IGlzIE5vbmUgYW5kIHNpemUgPj0gbGltaXQpIG9yIHVuaXQgaXMgbm90IE5vbmUgYW5kIHVuaXQudXBwZXIoKSA9PSBzdWZmaXhbMF06CiAgICAgICAgICAgIGJyZWFrCgogICAgaWYgbGltaXQgIT0gMToKICAgICAgICBzdWZmaXggKz0gYmFzZVswXQogICAgZWxzZToKICAgICAgICBzdWZmaXggPSBiYXNlCgogICAgcmV0dXJuICclLjJmICVzJyAlIChmbG9hdChzaXplKS8gbGltaXQsIHN1ZmZpeCkKCmRlZiBodW1hbl90b19ieXRlcyhudW1iZXIsIGRlZmF1bHRfdW5pdD1Ob25lLCBpc2JpdHM9RmFsc2UpOgoKICAgICcnJwogICAgQ29udmVydCBudW1iZXIgaW4gc3RyaW5nIGZvcm1hdCBpbnRvIGJ5dGVzIChleDogJzJLJyA9PiAyMDQ4KSBvciB1c2luZyB1bml0IGFyZ3VtZW50CiAgICBleDoKICAgICAgaHVtYW5fdG9fYnl0ZXMoJzEwTScpIDw9PiBodW1hbl90b19ieXRlcygxMCwgJ00nKQogICAgJycnCiAgICBtID0gcmUuc2VhcmNoKCdeXHMqKFxkKlwuP1xkKilccyooW0EtWmEtel0rKT8nLCBzdHIobnVtYmVyKSwgZmxhZ3M9cmUuSUdOT1JFQ0FTRSkKICAgIGlmIG0gaXMgTm9uZToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJodW1hbl90b19ieXRlcygpIGNhbid0IGludGVycHJldCBmb2xsb3dpbmcgc3RyaW5nOiAlcyIgJSBzdHIobnVtYmVyKSkKICAgIHRyeToKICAgICAgICBudW0gPSBmbG9hdChtLmdyb3VwKDEpKQogICAgZXhjZXB0OgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImh1bWFuX3RvX2J5dGVzKCkgY2FuJ3QgaW50ZXJwcmV0IGZvbGxvd2luZyBudW1iZXI6ICVzIChvcmlnaW5hbCBpbnB1dCBzdHJpbmc6ICVzKSIgJSAobS5ncm91cCgxKSwgbnVtYmVyKSkKCiAgICB1bml0ID0gbS5ncm91cCgyKQogICAgaWYgdW5pdCBpcyBOb25lOgogICAgICAgIHVuaXQgPSBkZWZhdWx0X3VuaXQKCiAgICBpZiB1bml0IGlzIE5vbmU6CiAgICAgICAgJycnIE5vIHVuaXQgZ2l2ZW4sIHJldHVybmluZyByYXcgbnVtYmVyICcnJwogICAgICAgIHJldHVybiBpbnQocm91bmQobnVtKSkKICAgIHJhbmdlX2tleSA9IHVuaXRbMF0udXBwZXIoKQogICAgdHJ5OgogICAgICAgIGxpbWl0ID0gU0laRV9SQU5HRVNbcmFuZ2Vfa2V5XQogICAgZXhjZXB0OgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImh1bWFuX3RvX2J5dGVzKCkgZmFpbGVkIHRvIGNvbnZlcnQgJXMgKHVuaXQgPSAlcykuIFRoZSBzdWZmaXggbXVzdCBiZSBvbmUgb2YgJXMiICUgKG51bWJlciwgdW5pdCwgIiwgIi5qb2luKFNJWkVfUkFOR0VTLmtleXMoKSkpKQoKICAgICMgZGVmYXVsdCB2YWx1ZQogICAgdW5pdF9jbGFzcyA9ICdCJwogICAgdW5pdF9jbGFzc19uYW1lID0gJ2J5dGUnCiAgICAjIGhhbmRsaW5nIGJpdHMgY2FzZQogICAgaWYgaXNiaXRzOgogICAgICAgIHVuaXRfY2xhc3MgPSAnYicKICAgICAgICB1bml0X2NsYXNzX25hbWUgPSAnYml0JwogICAgIyBjaGVjayB1bml0IHZhbHVlIGlmIG1vcmUgdGhhbiBvbmUgY2hhcmFjdGVyIChLQiwgTUIpCiAgICBpZiBsZW4odW5pdCkgPiAxOgogICAgICAgIGV4cGVjdF9tZXNzYWdlID0gJ2V4cGVjdCAlcyVzIG9yICVzJyAlIChyYW5nZV9rZXksIHVuaXRfY2xhc3MsIHJhbmdlX2tleSkKICAgICAgICBpZiByYW5nZV9rZXkgPT0gJ0InOgogICAgICAgICAgICBleHBlY3RfbWVzc2FnZSA9ICdleHBlY3QgJXMgb3IgJXMnICUgKHVuaXRfY2xhc3MsIHVuaXRfY2xhc3NfbmFtZSkKCiAgICAgICAgaWYgdW5pdF9jbGFzc19uYW1lIGluIHVuaXQubG93ZXIoKToKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsaWYgdW5pdFsxXSAhPSB1bml0X2NsYXNzOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJodW1hbl90b19ieXRlcygpIGZhaWxlZCB0byBjb252ZXJ0ICVzLiBWYWx1ZSBpcyBub3QgYSB2YWxpZCBzdHJpbmcgKCVzKSIgJSAobnVtYmVyLCBleHBlY3RfbWVzc2FnZSkpCgogICAgcmV0dXJuIGludChyb3VuZChudW0gKiBsaW1pdCkpCgpkZWYgaXNfZXhlY3V0YWJsZShwYXRoKToKICAgICcnJ2lzIHRoZSBnaXZlbiBwYXRoIGV4ZWN1dGFibGU/CgogICAgTGltaXRhdGlvbnM6CiAgICAqIERvZXMgbm90IGFjY291bnQgZm9yIEZTQUNMcy4KICAgICogTW9zdCB0aW1lcyB3ZSByZWFsbHkgd2FudCB0byBrbm93ICJDYW4gdGhlIGN1cnJlbnQgdXNlciBleGVjdXRlIHRoaXMKICAgICAgZmlsZSIgIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgdGVsbCB1cyB0aGF0LCBvbmx5IGlmIGFuIGV4ZWN1dGUgYml0IGlzIHNldC4KICAgICcnJwogICAgIyBUaGVzZSBhcmUgYWxsIGJpdGZpZWxkcyBzbyBmaXJzdCBiaXR3aXNlLW9yIGFsbCB0aGUgcGVybWlzc2lvbnMgd2UncmUKICAgICMgbG9va2luZyBmb3IsIHRoZW4gYml0d2lzZS1hbmQgd2l0aCB0aGUgZmlsZSdzIG1vZGUgdG8gZGV0ZXJtaW5lIGlmIGFueQogICAgIyBleGVjdXRlIGJpdHMgYXJlIHNldC4KICAgIHJldHVybiAoKHN0YXQuU19JWFVTUiB8IHN0YXQuU19JWEdSUCB8IHN0YXQuU19JWE9USCkgJiBvcy5zdGF0KHBhdGgpW3N0YXQuU1RfTU9ERV0pCgpkZWYgX2xvYWRfcGFyYW1zKCk6CiAgICAnJycgcmVhZCB0aGUgbW9kdWxlcyBwYXJhbWV0ZXJzIGFuZCBzdG9yZSB0aGVtIGdsb2JhbGx5LgoKICAgIFRoaXMgZnVuY3Rpb24gbWF5IGJlIG5lZWRlZCBmb3IgY2VydGFpbiB2ZXJ5IGR5bmFtaWMgY3VzdG9tIG1vZHVsZXMgd2hpY2gKICAgIHdhbnQgdG8gcHJvY2VzcyB0aGUgcGFyYW1ldGVycyB0aGF0IGFyZSBiZWluZyBoYW5kZWQgdGhlIG1vZHVsZS4gIFNpbmNlCiAgICB0aGlzIGlzIHNvIGNsb3NlbHkgdGllZCB0byB0aGUgaW1wbGVtZW50YXRpb24gb2YgbW9kdWxlcyB3ZSBjYW5ub3QKICAgIGd1YXJhbnRlZSBBUEkgc3RhYmlsaXR5IGZvciBpdCAoaXQgbWF5IGNoYW5nZSBiZXR3ZWVuIHZlcnNpb25zKSBob3dldmVyIHdlCiAgICB3aWxsIHRyeSBub3QgdG8gYnJlYWsgaXQgZ3JhdHVpdG91c2x5LiAgSXQgaXMgY2VydGFpbmx5IG1vcmUgZnV0dXJlLXByb29mCiAgICB0byBjYWxsIHRoaXMgZnVuY3Rpb24gYW5kIGNvbnN1bWUgaXRzIG91dHB1dHMgdGhhbiB0byBpbXBsZW1lbnQgdGhlIGxvZ2ljCiAgICBpbnNpZGUgaXQgYXMgYSBjb3B5IGluIHlvdXIgb3duIGNvZGUuCiAgICAnJycKICAgIGdsb2JhbCBfQU5TSUJMRV9BUkdTCiAgICBpZiBfQU5TSUJMRV9BUkdTIGlzIG5vdCBOb25lOgogICAgICAgIGJ1ZmZlciA9IF9BTlNJQkxFX0FSR1MKICAgIGVsc2U6CiAgICAgICAgIyBkZWJ1ZyBvdmVycmlkZXMgdG8gcmVhZCBhcmdzIGZyb20gZmlsZSBvciBjbWRsaW5lCgogICAgICAgICMgQXZvaWQgdHJhY2ViYWNrcyB3aGVuIGxvY2FsZSBpcyBub24tdXRmOAogICAgICAgICMgV2UgY29udHJvbCB0aGUgYXJncyBhbmQgd2UgcGFzcyB0aGVtIGFzIHV0ZjgKICAgICAgICBpZiBsZW4oc3lzLmFyZ3YpID4gMToKICAgICAgICAgICAgaWYgb3MucGF0aC5pc2ZpbGUoc3lzLmFyZ3ZbMV0pOgogICAgICAgICAgICAgICAgZmQgPSBvcGVuKHN5cy5hcmd2WzFdLCAncmInKQogICAgICAgICAgICAgICAgYnVmZmVyID0gZmQucmVhZCgpCiAgICAgICAgICAgICAgICBmZC5jbG9zZSgpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBidWZmZXIgPSBzeXMuYXJndlsxXQogICAgICAgICAgICAgICAgaWYgUFkzOgogICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5lbmNvZGUoJ3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVlc2NhcGUnKQogICAgICAgICMgZGVmYXVsdCBjYXNlLCByZWFkIGZyb20gc3RkaW4KICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBQWTI6CiAgICAgICAgICAgICAgICBidWZmZXIgPSBzeXMuc3RkaW4ucmVhZCgpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBidWZmZXIgPSBzeXMuc3RkaW4uYnVmZmVyLnJlYWQoKQogICAgICAgIF9BTlNJQkxFX0FSR1MgPSBidWZmZXIKCiAgICB0cnk6CiAgICAgICAgcGFyYW1zID0ganNvbi5sb2FkcyhidWZmZXIuZGVjb2RlKCd1dGYtOCcpKQogICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgIyBUaGlzIGhlbHBlciB1c2VkIHRvbyBlYXJseSBmb3IgZmFpbF9qc29uIHRvIHdvcmsuCiAgICAgICAgcHJpbnQoJ1xueyJtc2ciOiAiRXJyb3I6IE1vZHVsZSB1bmFibGUgdG8gZGVjb2RlIHZhbGlkIEpTT04gb24gc3RkaW4uICBVbmFibGUgdG8gZmlndXJlIG91dCB3aGF0IHBhcmFtZXRlcnMgd2VyZSBwYXNzZWQiLCAiZmFpbGVkIjogdHJ1ZX0nKQogICAgICAgIHN5cy5leGl0KDEpCgogICAgaWYgUFkyOgogICAgICAgIHBhcmFtcyA9IGpzb25fZGljdF91bmljb2RlX3RvX2J5dGVzKHBhcmFtcykKCiAgICB0cnk6CiAgICAgICAgcmV0dXJuIHBhcmFtc1snQU5TSUJMRV9NT0RVTEVfQVJHUyddCiAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgIyBUaGlzIGhlbHBlciBkb2VzIG5vdCBoYXZlIGFjY2VzcyB0byBmYWlsX2pzb24gc28gd2UgaGF2ZSB0byBwcmludAogICAgICAgICMganNvbiBvdXRwdXQgb24gb3VyIG93bi4KICAgICAgICBwcmludCgnXG57Im1zZyI6ICJFcnJvcjogTW9kdWxlIHVuYWJsZSB0byBsb2NhdGUgQU5TSUJMRV9NT0RVTEVfQVJHUyBpbiBqc29uIGRhdGEgZnJvbSBzdGRpbi4gIFVuYWJsZSB0byBmaWd1cmUgb3V0IHdoYXQgcGFyYW1ldGVycyB3ZXJlIHBhc3NlZCIsICcKICAgICAgICAgICAgICAnImZhaWxlZCI6IHRydWV9JykKICAgICAgICBzeXMuZXhpdCgxKQoKZGVmIGVudl9mYWxsYmFjaygqYXJncywgKiprd2FyZ3MpOgogICAgJycnIExvYWQgdmFsdWUgZnJvbSBlbnZpcm9ubWVudCAnJycKICAgIGZvciBhcmcgaW4gYXJnczoKICAgICAgICBpZiBhcmcgaW4gb3MuZW52aXJvbjoKICAgICAgICAgICAgcmV0dXJuIG9zLmVudmlyb25bYXJnXQogICAgZWxzZToKICAgICAgICByYWlzZSBBbnNpYmxlRmFsbGJhY2tOb3RGb3VuZAoKZGVmIF9sZW5pZW50X2xvd2VyY2FzZShsc3QpOgogICAgIiIiTG93ZXJjYXNlIGVsZW1lbnRzIG9mIGEgbGlzdC4KCiAgICBJZiBhbiBlbGVtZW50IGlzIG5vdCBhIHN0cmluZywgcGFzcyBpdCB0aHJvdWdoIHVudG91Y2hlZC4KICAgICIiIgogICAgbG93ZXJlZCA9IFtdCiAgICBmb3IgdmFsdWUgaW4gbHN0OgogICAgICAgIHRyeToKICAgICAgICAgICAgbG93ZXJlZC5hcHBlbmQodmFsdWUubG93ZXIoKSkKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIGxvd2VyZWQuYXBwZW5kKHZhbHVlKQogICAgcmV0dXJuIGxvd2VyZWQKCmRlZiBmb3JtYXRfYXR0cmlidXRlcyhhdHRyaWJ1dGVzKToKICAgIGF0dHJpYnV0ZV9saXN0ID0gW10KICAgIGZvciBhdHRyIGluIGF0dHJpYnV0ZXM6CiAgICAgICAgaWYgYXR0ciBpbiBGSUxFX0FUVFJJQlVURVM6CiAgICAgICAgICAgIGF0dHJpYnV0ZV9saXN0LmFwcGVuZChGSUxFX0FUVFJJQlVURVNbYXR0cl0pCiAgICByZXR1cm4gYXR0cmlidXRlX2xpc3QKCmRlZiBnZXRfZmxhZ3NfZnJvbV9hdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpOgogICAgZmxhZ3MgPSBbXQogICAgZm9yIGtleSxhdHRyIGluIEZJTEVfQVRUUklCVVRFUy5pdGVtcygpOgogICAgICAgIGlmIGF0dHIgaW4gYXR0cmlidXRlczoKICAgICAgICAgICAgZmxhZ3MuYXBwZW5kKGtleSkKICAgIHJldHVybiAnJy5qb2luKGZsYWdzKQoKY2xhc3MgQW5zaWJsZUZhbGxiYWNrTm90Rm91bmQoRXhjZXB0aW9uKToKICAgIHBhc3MKCgpjbGFzcyBBbnNpYmxlTW9kdWxlKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgYXJndW1lbnRfc3BlYywgYnlwYXNzX2NoZWNrcz1GYWxzZSwgbm9fbG9nPUZhbHNlLAogICAgICAgICAgICAgICAgIGNoZWNrX2ludmFsaWRfYXJndW1lbnRzPVRydWUsIG11dHVhbGx5X2V4Y2x1c2l2ZT1Ob25lLCByZXF1aXJlZF90b2dldGhlcj1Ob25lLAogICAgICAgICAgICAgICAgIHJlcXVpcmVkX29uZV9vZj1Ob25lLCBhZGRfZmlsZV9jb21tb25fYXJncz1GYWxzZSwgc3VwcG9ydHNfY2hlY2tfbW9kZT1GYWxzZSwKICAgICAgICAgICAgICAgICByZXF1aXJlZF9pZj1Ob25lKToKCiAgICAgICAgJycnCiAgICAgICAgY29tbW9uIGNvZGUgZm9yIHF1aWNrbHkgYnVpbGRpbmcgYW4gYW5zaWJsZSBtb2R1bGUgaW4gUHl0aG9uCiAgICAgICAgKGFsdGhvdWdoIHlvdSBjYW4gd3JpdGUgbW9kdWxlcyBpbiBhbnl0aGluZyB0aGF0IGNhbiByZXR1cm4gSlNPTikKICAgICAgICBzZWUgbGlicmFyeS8qIGZvciBleGFtcGxlcwogICAgICAgICcnJwoKICAgICAgICBzZWxmLl9uYW1lID0gb3MucGF0aC5iYXNlbmFtZShfX2ZpbGVfXykgI2luaXRpYWxpemUgbmFtZSB1bnRpbCB3ZSBjYW4gcGFyc2UgZnJvbSBvcHRpb25zCiAgICAgICAgc2VsZi5hcmd1bWVudF9zcGVjID0gYXJndW1lbnRfc3BlYwogICAgICAgIHNlbGYuc3VwcG9ydHNfY2hlY2tfbW9kZSA9IHN1cHBvcnRzX2NoZWNrX21vZGUKICAgICAgICBzZWxmLmNoZWNrX21vZGUgPSBGYWxzZQogICAgICAgIHNlbGYubm9fbG9nID0gbm9fbG9nCiAgICAgICAgc2VsZi5jbGVhbnVwX2ZpbGVzID0gW10KICAgICAgICBzZWxmLl9kZWJ1ZyA9IEZhbHNlCiAgICAgICAgc2VsZi5fZGlmZiA9IEZhbHNlCiAgICAgICAgc2VsZi5fc29ja2V0X3BhdGggPSBOb25lCiAgICAgICAgc2VsZi5fdmVyYm9zaXR5ID0gMAogICAgICAgICMgTWF5IGJlIHVzZWQgdG8gc2V0IG1vZGlmaWNhdGlvbnMgdG8gdGhlIGVudmlyb25tZW50IGZvciBhbnkKICAgICAgICAjIHJ1bl9jb21tYW5kIGludm9jYXRpb24KICAgICAgICBzZWxmLnJ1bl9jb21tYW5kX2Vudmlyb25fdXBkYXRlID0ge30KICAgICAgICBzZWxmLl93YXJuaW5ncyA9IFtdCiAgICAgICAgc2VsZi5fZGVwcmVjYXRpb25zID0gW10KCiAgICAgICAgc2VsZi5hbGlhc2VzID0ge30KICAgICAgICBzZWxmLl9sZWdhbF9pbnB1dHMgPSBbJ19hbnNpYmxlX2NoZWNrX21vZGUnLCAnX2Fuc2libGVfbm9fbG9nJywgJ19hbnNpYmxlX2RlYnVnJywgJ19hbnNpYmxlX2RpZmYnLCAnX2Fuc2libGVfdmVyYm9zaXR5JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ19hbnNpYmxlX3NlbGludXhfc3BlY2lhbF9mcycsICdfYW5zaWJsZV9tb2R1bGVfbmFtZScsICdfYW5zaWJsZV92ZXJzaW9uJywgJ19hbnNpYmxlX3N5c2xvZ19mYWNpbGl0eScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdfYW5zaWJsZV9zb2NrZXQnXQoKICAgICAgICBpZiBhZGRfZmlsZV9jb21tb25fYXJnczoKICAgICAgICAgICAgZm9yIGssIHYgaW4gRklMRV9DT01NT05fQVJHVU1FTlRTLml0ZW1zKCk6CiAgICAgICAgICAgICAgICBpZiBrIG5vdCBpbiBzZWxmLmFyZ3VtZW50X3NwZWM6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5hcmd1bWVudF9zcGVjW2tdID0gdgoKICAgICAgICBzZWxmLl9sb2FkX3BhcmFtcygpCiAgICAgICAgc2VsZi5fc2V0X2ZhbGxiYWNrcygpCgogICAgICAgICMgYXBwZW5kIHRvIGxlZ2FsX2lucHV0cyBhbmQgdGhlbiBwb3NzaWJseSBjaGVjayBhZ2FpbnN0IHRoZW0KICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYuYWxpYXNlcyA9IHNlbGYuX2hhbmRsZV9hbGlhc2VzKCkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICMgVXNlIGV4Y2VwdGlvbnMgaGVyZSBiZWNhdXNlIGl0IGlzbid0IHNhZmUgdG8gY2FsbCBmYWlsX2pzb24gdW50aWwgbm9fbG9nIGlzIHByb2Nlc3NlZAogICAgICAgICAgICBwcmludCgnXG57ImZhaWxlZCI6IHRydWUsICJtc2ciOiAiTW9kdWxlIGFsaWFzIGVycm9yOiAlcyJ9JyAlIHN0cihlKSkKICAgICAgICAgICAgc3lzLmV4aXQoMSkKCiAgICAgICAgIyBTYXZlIHBhcmFtZXRlciB2YWx1ZXMgdGhhdCBzaG91bGQgbmV2ZXIgYmUgbG9nZ2VkCiAgICAgICAgc2VsZi5ub19sb2dfdmFsdWVzID0gc2V0KCkKICAgICAgICAjIFVzZSB0aGUgYXJnc3BlYyB0byBkZXRlcm1pbmUgd2hpY2ggYXJncyBhcmUgbm9fbG9nCiAgICAgICAgZm9yIGFyZ19uYW1lLCBhcmdfb3B0cyBpbiBzZWxmLmFyZ3VtZW50X3NwZWMuaXRlbXMoKToKICAgICAgICAgICAgaWYgYXJnX29wdHMuZ2V0KCdub19sb2cnLCBGYWxzZSk6CiAgICAgICAgICAgICAgICAjIEZpbmQgdGhlIHZhbHVlIGZvciB0aGUgbm9fbG9nJ2QgcGFyYW0KICAgICAgICAgICAgICAgIG5vX2xvZ19vYmplY3QgPSBzZWxmLnBhcmFtcy5nZXQoYXJnX25hbWUsIE5vbmUpCiAgICAgICAgICAgICAgICBpZiBub19sb2dfb2JqZWN0OgogICAgICAgICAgICAgICAgICAgIHNlbGYubm9fbG9nX3ZhbHVlcy51cGRhdGUocmV0dXJuX3ZhbHVlcyhub19sb2dfb2JqZWN0KSkKCiAgICAgICAgICAgIGlmIGFyZ19vcHRzLmdldCgncmVtb3ZlZF9pbl92ZXJzaW9uJykgaXMgbm90IE5vbmUgYW5kIGFyZ19uYW1lIGluIHNlbGYucGFyYW1zOgogICAgICAgICAgICAgICAgc2VsZi5fZGVwcmVjYXRpb25zLmFwcGVuZCh7CiAgICAgICAgICAgICAgICAgICAgJ21zZyc6ICJQYXJhbSAnJXMnIGlzIGRlcHJlY2F0ZWQuIFNlZSB0aGUgbW9kdWxlIGRvY3MgZm9yIG1vcmUgaW5mb3JtYXRpb24iICUgYXJnX25hbWUsCiAgICAgICAgICAgICAgICAgICAgJ3ZlcnNpb24nOiBhcmdfb3B0cy5nZXQoJ3JlbW92ZWRfaW5fdmVyc2lvbicpCiAgICAgICAgICAgICAgICB9KQoKICAgICAgICAjIGNoZWNrIHRoZSBsb2NhbGUgYXMgc2V0IGJ5IHRoZSBjdXJyZW50IGVudmlyb25tZW50LCBhbmQgcmVzZXQgdG8KICAgICAgICAjIGEga25vd24gdmFsaWQgKExBTkc9QykgaWYgaXQncyBhbiBpbnZhbGlkL3VuYXZhaWxhYmxlIGxvY2FsZQogICAgICAgIHNlbGYuX2NoZWNrX2xvY2FsZSgpCgogICAgICAgIHNlbGYuX2NoZWNrX2FyZ3VtZW50cyhjaGVja19pbnZhbGlkX2FyZ3VtZW50cykKCiAgICAgICAgIyBjaGVjayBleGNsdXNpdmUgZWFybHkKICAgICAgICBpZiBub3QgYnlwYXNzX2NoZWNrczoKICAgICAgICAgICAgc2VsZi5fY2hlY2tfbXV0dWFsbHlfZXhjbHVzaXZlKG11dHVhbGx5X2V4Y2x1c2l2ZSkKCiAgICAgICAgc2VsZi5fc2V0X2RlZmF1bHRzKHByZT1UcnVlKQoKICAgICAgICBzZWxmLl9DSEVDS19BUkdVTUVOVF9UWVBFU19ESVNQQVRDSEVSID0gewogICAgICAgICAgICAnc3RyJzogc2VsZi5fY2hlY2tfdHlwZV9zdHIsCiAgICAgICAgICAgICdsaXN0Jzogc2VsZi5fY2hlY2tfdHlwZV9saXN0LAogICAgICAgICAgICAnZGljdCc6IHNlbGYuX2NoZWNrX3R5cGVfZGljdCwKICAgICAgICAgICAgJ2Jvb2wnOiBzZWxmLl9jaGVja190eXBlX2Jvb2wsCiAgICAgICAgICAgICdpbnQnOiBzZWxmLl9jaGVja190eXBlX2ludCwKICAgICAgICAgICAgJ2Zsb2F0Jzogc2VsZi5fY2hlY2tfdHlwZV9mbG9hdCwKICAgICAgICAgICAgJ3BhdGgnOiBzZWxmLl9jaGVja190eXBlX3BhdGgsCiAgICAgICAgICAgICdyYXcnOiBzZWxmLl9jaGVja190eXBlX3JhdywKICAgICAgICAgICAgJ2pzb25hcmcnOiBzZWxmLl9jaGVja190eXBlX2pzb25hcmcsCiAgICAgICAgICAgICdqc29uJzogc2VsZi5fY2hlY2tfdHlwZV9qc29uYXJnLAogICAgICAgICAgICAnYnl0ZXMnOiBzZWxmLl9jaGVja190eXBlX2J5dGVzLAogICAgICAgICAgICAnYml0cyc6IHNlbGYuX2NoZWNrX3R5cGVfYml0cywKICAgICAgICB9CiAgICAgICAgaWYgbm90IGJ5cGFzc19jaGVja3M6CiAgICAgICAgICAgIHNlbGYuX2NoZWNrX3JlcXVpcmVkX2FyZ3VtZW50cygpCiAgICAgICAgICAgIHNlbGYuX2NoZWNrX2FyZ3VtZW50X3R5cGVzKCkKICAgICAgICAgICAgc2VsZi5fY2hlY2tfYXJndW1lbnRfdmFsdWVzKCkKICAgICAgICAgICAgc2VsZi5fY2hlY2tfcmVxdWlyZWRfdG9nZXRoZXIocmVxdWlyZWRfdG9nZXRoZXIpCiAgICAgICAgICAgIHNlbGYuX2NoZWNrX3JlcXVpcmVkX29uZV9vZihyZXF1aXJlZF9vbmVfb2YpCiAgICAgICAgICAgIHNlbGYuX2NoZWNrX3JlcXVpcmVkX2lmKHJlcXVpcmVkX2lmKQoKICAgICAgICBzZWxmLl9zZXRfZGVmYXVsdHMocHJlPUZhbHNlKQoKICAgICAgICBpZiBub3Qgc2VsZi5ub19sb2c6CiAgICAgICAgICAgIHNlbGYuX2xvZ19pbnZvY2F0aW9uKCkKCiAgICAgICAgIyBmaW5hbGx5LCBtYWtlIHN1cmUgd2UncmUgaW4gYSBzYW5lIHdvcmtpbmcgZGlyCiAgICAgICAgc2VsZi5fc2V0X2N3ZCgpCgogICAgZGVmIHdhcm4oc2VsZiwgd2FybmluZyk6CgogICAgICAgIGlmIGlzaW5zdGFuY2Uod2FybmluZywgc3RyaW5nX3R5cGVzKToKICAgICAgICAgICAgc2VsZi5fd2FybmluZ3MuYXBwZW5kKHdhcm5pbmcpCiAgICAgICAgICAgIHNlbGYubG9nKCdbV0FSTklOR10gJXMnICUgd2FybmluZykKICAgICAgICBlbHNlOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoIndhcm4gcmVxdWlyZXMgYSBzdHJpbmcgbm90IGEgJXMiICUgdHlwZSh3YXJuaW5nKSkKCiAgICBkZWYgZGVwcmVjYXRlKHNlbGYsIG1zZywgdmVyc2lvbj1Ob25lKToKICAgICAgICBpZiBpc2luc3RhbmNlKG1zZywgc3RyaW5nX3R5cGVzKToKICAgICAgICAgICAgc2VsZi5fZGVwcmVjYXRpb25zLmFwcGVuZCh7CiAgICAgICAgICAgICAgICAnbXNnJzogbXNnLAogICAgICAgICAgICAgICAgJ3ZlcnNpb24nOiB2ZXJzaW9uCiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIHNlbGYubG9nKCdbREVQUkVDQVRJT04gV0FSTklOR10gJXMgJXMnICUgKG1zZywgdmVyc2lvbikpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJkZXByZWNhdGUgcmVxdWlyZXMgYSBzdHJpbmcgbm90IGEgJXMiICUgdHlwZShtc2cpKQoKICAgIGRlZiBsb2FkX2ZpbGVfY29tbW9uX2FyZ3VtZW50cyhzZWxmLCBwYXJhbXMpOgogICAgICAgICcnJwogICAgICAgIG1hbnkgbW9kdWxlcyBkZWFsIHdpdGggZmlsZXMsIHRoaXMgZW5jYXBzdWxhdGVzIGNvbW1vbgogICAgICAgIG9wdGlvbnMgdGhhdCB0aGUgZmlsZSBtb2R1bGUgYWNjZXB0cyBzdWNoIHRoYXQgaXQgaXMgZGlyZWN0bHkKICAgICAgICBhdmFpbGFibGUgdG8gYWxsIG1vZHVsZXMgYW5kIHRoZXkgY2FuIHNoYXJlIGNvZGUuCiAgICAgICAgJycnCgogICAgICAgIHBhdGggPSBwYXJhbXMuZ2V0KCdwYXRoJywgcGFyYW1zLmdldCgnZGVzdCcsIE5vbmUpKQogICAgICAgIGlmIHBhdGggaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIHt9CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcGF0aCA9IG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnMocGF0aCkpCgogICAgICAgIGJfcGF0aCA9IHRvX2J5dGVzKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgIyBpZiB0aGUgcGF0aCBpcyBhIHN5bWxpbmssIGFuZCB3ZSdyZSBmb2xsb3dpbmcgbGlua3MsIGdldAogICAgICAgICMgdGhlIHRhcmdldCBvZiB0aGUgbGluayBpbnN0ZWFkIGZvciB0ZXN0aW5nCiAgICAgICAgaWYgcGFyYW1zLmdldCgnZm9sbG93JywgRmFsc2UpIGFuZCBvcy5wYXRoLmlzbGluayhiX3BhdGgpOgogICAgICAgICAgICBiX3BhdGggPSBvcy5wYXRoLnJlYWxwYXRoKGJfcGF0aCkKICAgICAgICAgICAgcGF0aCA9IHRvX25hdGl2ZShiX3BhdGgpCgogICAgICAgIG1vZGUgICA9IHBhcmFtcy5nZXQoJ21vZGUnLCBOb25lKQogICAgICAgIG93bmVyICA9IHBhcmFtcy5nZXQoJ293bmVyJywgTm9uZSkKICAgICAgICBncm91cCAgPSBwYXJhbXMuZ2V0KCdncm91cCcsIE5vbmUpCgogICAgICAgICMgc2VsaW51eCByZWxhdGVkIG9wdGlvbnMKICAgICAgICBzZXVzZXIgICAgPSBwYXJhbXMuZ2V0KCdzZXVzZXInLCBOb25lKQogICAgICAgIHNlcm9sZSAgICA9IHBhcmFtcy5nZXQoJ3Nlcm9sZScsIE5vbmUpCiAgICAgICAgc2V0eXBlICAgID0gcGFyYW1zLmdldCgnc2V0eXBlJywgTm9uZSkKICAgICAgICBzZWxldmVsICAgPSBwYXJhbXMuZ2V0KCdzZWxldmVsJywgTm9uZSkKICAgICAgICBzZWNvbnRleHQgPSBbc2V1c2VyLCBzZXJvbGUsIHNldHlwZV0KCiAgICAgICAgaWYgc2VsZi5zZWxpbnV4X21sc19lbmFibGVkKCk6CiAgICAgICAgICAgIHNlY29udGV4dC5hcHBlbmQoc2VsZXZlbCkKCiAgICAgICAgZGVmYXVsdF9zZWNvbnRleHQgPSBzZWxmLnNlbGludXhfZGVmYXVsdF9jb250ZXh0KHBhdGgpCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKGRlZmF1bHRfc2Vjb250ZXh0KSk6CiAgICAgICAgICAgIGlmIGkgaXMgbm90IE5vbmUgYW5kIHNlY29udGV4dFtpXSA9PSAnX2RlZmF1bHQnOgogICAgICAgICAgICAgICAgc2Vjb250ZXh0W2ldID0gZGVmYXVsdF9zZWNvbnRleHRbaV0KCiAgICAgICAgYXR0cmlidXRlcyA9IHBhcmFtcy5nZXQoJ2F0dHJpYnV0ZXMnLCBOb25lKQogICAgICAgIHJldHVybiBkaWN0KAogICAgICAgICAgICBwYXRoPXBhdGgsIG1vZGU9bW9kZSwgb3duZXI9b3duZXIsIGdyb3VwPWdyb3VwLAogICAgICAgICAgICBzZXVzZXI9c2V1c2VyLCBzZXJvbGU9c2Vyb2xlLCBzZXR5cGU9c2V0eXBlLAogICAgICAgICAgICBzZWxldmVsPXNlbGV2ZWwsIHNlY29udGV4dD1zZWNvbnRleHQsIGF0dHJpYnV0ZXM9YXR0cmlidXRlcywKICAgICAgICApCgoKICAgICMgRGV0ZWN0IHdoZXRoZXIgdXNpbmcgc2VsaW51eCB0aGF0IGlzIE1MUy1hd2FyZS4KICAgICMgV2hpbGUgdGhpcyBtZWFucyB5b3UgY2FuIHNldCB0aGUgbGV2ZWwvcmFuZ2Ugd2l0aAogICAgIyBzZWxpbnV4LmxzZXRmaWxlY29uKCksIGl0IG1heSBvciBtYXkgbm90IG1lYW4gdGhhdCB5b3UKICAgICMgd2lsbCBnZXQgdGhlIHNlbGV2ZWwgYXMgcGFydCBvZiB0aGUgY29udGV4dCByZXR1cm5lZAogICAgIyBieSBzZWxpbnV4LmxnZXRmaWxlY29uKCkuCgogICAgZGVmIHNlbGludXhfbWxzX2VuYWJsZWQoc2VsZik6CiAgICAgICAgaWYgbm90IEhBVkVfU0VMSU5VWDoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgaWYgc2VsaW51eC5pc19zZWxpbnV4X21sc19lbmFibGVkKCkgPT0gMToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgc2VsaW51eF9lbmFibGVkKHNlbGYpOgogICAgICAgIGlmIG5vdCBIQVZFX1NFTElOVVg6CiAgICAgICAgICAgIHNlZW5hYmxlZCA9IHNlbGYuZ2V0X2Jpbl9wYXRoKCdzZWxpbnV4ZW5hYmxlZCcpCiAgICAgICAgICAgIGlmIHNlZW5hYmxlZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIChyYyxvdXQsZXJyKSA9IHNlbGYucnVuX2NvbW1hbmQoc2VlbmFibGVkKQogICAgICAgICAgICAgICAgaWYgcmMgPT0gMDoKICAgICAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9IkFib3J0aW5nLCB0YXJnZXQgdXNlcyBzZWxpbnV4IGJ1dCBweXRob24gYmluZGluZ3MgKGxpYnNlbGludXgtcHl0aG9uKSBhcmVuJ3QgaW5zdGFsbGVkISIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIGlmIHNlbGludXguaXNfc2VsaW51eF9lbmFibGVkKCkgPT0gMToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAjIERldGVybWluZSB3aGV0aGVyIHdlIG5lZWQgYSBwbGFjZWhvbGRlciBmb3Igc2VsZXZlbC9tbHMKICAgIGRlZiBzZWxpbnV4X2luaXRpYWxfY29udGV4dChzZWxmKToKICAgICAgICBjb250ZXh0ID0gW05vbmUsIE5vbmUsIE5vbmVdCiAgICAgICAgaWYgc2VsZi5zZWxpbnV4X21sc19lbmFibGVkKCk6CiAgICAgICAgICAgIGNvbnRleHQuYXBwZW5kKE5vbmUpCiAgICAgICAgcmV0dXJuIGNvbnRleHQKCiAgICAjIElmIHNlbGludXggZmFpbHMgdG8gZmluZCBhIGRlZmF1bHQsIHJldHVybiBhbiBhcnJheSBvZiBOb25lCiAgICBkZWYgc2VsaW51eF9kZWZhdWx0X2NvbnRleHQoc2VsZiwgcGF0aCwgbW9kZT0wKToKICAgICAgICBjb250ZXh0ID0gc2VsZi5zZWxpbnV4X2luaXRpYWxfY29udGV4dCgpCiAgICAgICAgaWYgbm90IEhBVkVfU0VMSU5VWCBvciBub3Qgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldCA9IHNlbGludXgubWF0Y2hwYXRoY29uKHRvX25hdGl2ZShwYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKSwgbW9kZSkKICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQKICAgICAgICBpZiByZXRbMF0gPT0gLTE6CiAgICAgICAgICAgIHJldHVybiBjb250ZXh0CiAgICAgICAgIyBMaW1pdCBzcGxpdCB0byA0IGJlY2F1c2UgdGhlIHNlbGV2ZWwsIHRoZSBsYXN0IGluIHRoZSBsaXN0LAogICAgICAgICMgbWF5IGNvbnRhaW4gJzonIGNoYXJhY3RlcnMKICAgICAgICBjb250ZXh0ID0gcmV0WzFdLnNwbGl0KCc6JywgMykKICAgICAgICByZXR1cm4gY29udGV4dAoKICAgIGRlZiBzZWxpbnV4X2NvbnRleHQoc2VsZiwgcGF0aCk6CiAgICAgICAgY29udGV4dCA9IHNlbGYuc2VsaW51eF9pbml0aWFsX2NvbnRleHQoKQogICAgICAgIGlmIG5vdCBIQVZFX1NFTElOVVggb3Igbm90IHNlbGYuc2VsaW51eF9lbmFibGVkKCk6CiAgICAgICAgICAgIHJldHVybiBjb250ZXh0CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXQgPSBzZWxpbnV4LmxnZXRmaWxlY29uX3Jhdyh0b19uYXRpdmUocGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykpCiAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgaWYgZS5lcnJubyA9PSBlcnJuby5FTk9FTlQ6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0ncGF0aCAlcyBkb2VzIG5vdCBleGlzdCcgJSBwYXRoKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocGF0aD1wYXRoLCBtc2c9J2ZhaWxlZCB0byByZXRyaWV2ZSBzZWxpbnV4IGNvbnRleHQnKQogICAgICAgIGlmIHJldFswXSA9PSAtMToKICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQKICAgICAgICAjIExpbWl0IHNwbGl0IHRvIDQgYmVjYXVzZSB0aGUgc2VsZXZlbCwgdGhlIGxhc3QgaW4gdGhlIGxpc3QsCiAgICAgICAgIyBtYXkgY29udGFpbiAnOicgY2hhcmFjdGVycwogICAgICAgIGNvbnRleHQgPSByZXRbMV0uc3BsaXQoJzonLCAzKQogICAgICAgIHJldHVybiBjb250ZXh0CgogICAgZGVmIHVzZXJfYW5kX2dyb3VwKHNlbGYsIHBhdGgsIGV4cGFuZD1UcnVlKToKICAgICAgICBiX3BhdGggPSB0b19ieXRlcyhwYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3N0cmljdCcpCiAgICAgICAgaWYgZXhwYW5kOgogICAgICAgICAgICBiX3BhdGggPSBvcy5wYXRoLmV4cGFuZHVzZXIob3MucGF0aC5leHBhbmR2YXJzKGJfcGF0aCkpCiAgICAgICAgc3QgPSBvcy5sc3RhdChiX3BhdGgpCiAgICAgICAgdWlkID0gc3Quc3RfdWlkCiAgICAgICAgZ2lkID0gc3Quc3RfZ2lkCiAgICAgICAgcmV0dXJuICh1aWQsIGdpZCkKCiAgICBkZWYgZmluZF9tb3VudF9wb2ludChzZWxmLCBwYXRoKToKICAgICAgICBwYXRoX2lzX2J5dGVzID0gRmFsc2UKICAgICAgICBpZiBpc2luc3RhbmNlKHBhdGgsIGJpbmFyeV90eXBlKToKICAgICAgICAgICAgcGF0aF9pc19ieXRlcyA9IFRydWUKCiAgICAgICAgYl9wYXRoID0gb3MucGF0aC5yZWFscGF0aCh0b19ieXRlcyhvcy5wYXRoLmV4cGFuZHVzZXIob3MucGF0aC5leHBhbmR2YXJzKHBhdGgpKSwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykpCiAgICAgICAgd2hpbGUgbm90IG9zLnBhdGguaXNtb3VudChiX3BhdGgpOgogICAgICAgICAgICBiX3BhdGggPSBvcy5wYXRoLmRpcm5hbWUoYl9wYXRoKQoKICAgICAgICBpZiBwYXRoX2lzX2J5dGVzOgogICAgICAgICAgICByZXR1cm4gYl9wYXRoCgogICAgICAgIHJldHVybiB0b190ZXh0KGJfcGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKCiAgICBkZWYgaXNfc3BlY2lhbF9zZWxpbnV4X3BhdGgoc2VsZiwgcGF0aCk6CiAgICAgICAgIiIiCiAgICAgICAgUmV0dXJucyBhIHR1cGxlIGNvbnRhaW5pbmcgKFRydWUsIHNlbGludXhfY29udGV4dCkgaWYgdGhlIGdpdmVuIHBhdGggaXMgb24gYQogICAgICAgIE5GUyBvciBvdGhlciAnc3BlY2lhbCcgZnMgIG1vdW50IHBvaW50LCBvdGhlcndpc2UgdGhlIHJldHVybiB3aWxsIGJlIChGYWxzZSwgTm9uZSkuCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBmID0gb3BlbignL3Byb2MvbW91bnRzJywgJ3InKQogICAgICAgICAgICBtb3VudF9kYXRhID0gZi5yZWFkbGluZXMoKQogICAgICAgICAgICBmLmNsb3NlKCkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHJldHVybiAoRmFsc2UsIE5vbmUpCiAgICAgICAgcGF0aF9tb3VudF9wb2ludCA9IHNlbGYuZmluZF9tb3VudF9wb2ludChwYXRoKQogICAgICAgIGZvciBsaW5lIGluIG1vdW50X2RhdGE6CiAgICAgICAgICAgIChkZXZpY2UsIG1vdW50X3BvaW50LCBmc3R5cGUsIG9wdGlvbnMsIHJlc3QpID0gbGluZS5zcGxpdCgnICcsIDQpCgogICAgICAgICAgICBpZiBwYXRoX21vdW50X3BvaW50ID09IG1vdW50X3BvaW50OgogICAgICAgICAgICAgICAgZm9yIGZzIGluIHNlbGYuX3NlbGludXhfc3BlY2lhbF9mczoKICAgICAgICAgICAgICAgICAgICBpZiBmcyBpbiBmc3R5cGU6CiAgICAgICAgICAgICAgICAgICAgICAgIHNwZWNpYWxfY29udGV4dCA9IHNlbGYuc2VsaW51eF9jb250ZXh0KHBhdGhfbW91bnRfcG9pbnQpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoVHJ1ZSwgc3BlY2lhbF9jb250ZXh0KQoKICAgICAgICByZXR1cm4gKEZhbHNlLCBOb25lKQoKICAgIGRlZiBzZXRfZGVmYXVsdF9zZWxpbnV4X2NvbnRleHQoc2VsZiwgcGF0aCwgY2hhbmdlZCk6CiAgICAgICAgaWYgbm90IEhBVkVfU0VMSU5VWCBvciBub3Qgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQKICAgICAgICBjb250ZXh0ID0gc2VsZi5zZWxpbnV4X2RlZmF1bHRfY29udGV4dChwYXRoKQogICAgICAgIHJldHVybiBzZWxmLnNldF9jb250ZXh0X2lmX2RpZmZlcmVudChwYXRoLCBjb250ZXh0LCBGYWxzZSkKCiAgICBkZWYgc2V0X2NvbnRleHRfaWZfZGlmZmVyZW50KHNlbGYsIHBhdGgsIGNvbnRleHQsIGNoYW5nZWQsIGRpZmY9Tm9uZSk6CgogICAgICAgIGlmIG5vdCBIQVZFX1NFTElOVVggb3Igbm90IHNlbGYuc2VsaW51eF9lbmFibGVkKCk6CiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VkCiAgICAgICAgY3VyX2NvbnRleHQgPSBzZWxmLnNlbGludXhfY29udGV4dChwYXRoKQogICAgICAgIG5ld19jb250ZXh0ID0gbGlzdChjdXJfY29udGV4dCkKICAgICAgICAjIEl0ZXJhdGUgb3ZlciB0aGUgY3VycmVudCBjb250ZXh0IGluc3RlYWQgb2YgdGhlCiAgICAgICAgIyBhcmd1bWVudCBjb250ZXh0LCB3aGljaCBtYXkgaGF2ZSBzZWxldmVsLgoKICAgICAgICAoaXNfc3BlY2lhbF9zZSwgc3BfY29udGV4dCkgPSBzZWxmLmlzX3NwZWNpYWxfc2VsaW51eF9wYXRoKHBhdGgpCiAgICAgICAgaWYgaXNfc3BlY2lhbF9zZToKICAgICAgICAgICAgbmV3X2NvbnRleHQgPSBzcF9jb250ZXh0CiAgICAgICAgZWxzZToKICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKGN1cl9jb250ZXh0KSk6CiAgICAgICAgICAgICAgICBpZiBsZW4oY29udGV4dCkgPiBpOgogICAgICAgICAgICAgICAgICAgIGlmIGNvbnRleHRbaV0gaXMgbm90IE5vbmUgYW5kIGNvbnRleHRbaV0gIT0gY3VyX2NvbnRleHRbaV06CiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19jb250ZXh0W2ldID0gY29udGV4dFtpXQogICAgICAgICAgICAgICAgICAgIGVsaWYgY29udGV4dFtpXSBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICBuZXdfY29udGV4dFtpXSA9IGN1cl9jb250ZXh0W2ldCgogICAgICAgIGlmIGN1cl9jb250ZXh0ICE9IG5ld19jb250ZXh0OgogICAgICAgICAgICBpZiBkaWZmIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgaWYgJ2JlZm9yZScgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ10gPSB7fQogICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ11bJ3NlY29udGV4dCddID0gY3VyX2NvbnRleHQKICAgICAgICAgICAgICAgIGlmICdhZnRlcicgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYWZ0ZXInXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddWydzZWNvbnRleHQnXSA9IG5ld19jb250ZXh0CgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiBzZWxmLmNoZWNrX21vZGU6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgIHJjID0gc2VsaW51eC5sc2V0ZmlsZWNvbih0b19uYXRpdmUocGF0aCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyKCc6Jy5qb2luKG5ld19jb250ZXh0KSkpCiAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocGF0aD1wYXRoLCBtc2c9J2ludmFsaWQgc2VsaW51eCBjb250ZXh0OiAlcycgJSBzdHIoZSksIG5ld19jb250ZXh0PW5ld19jb250ZXh0LCBjdXJfY29udGV4dD1jdXJfY29udGV4dCwgaW5wdXRfd2FzPWNvbnRleHQpCiAgICAgICAgICAgIGlmIHJjICE9IDA6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nc2V0IHNlbGludXggY29udGV4dCBmYWlsZWQnKQogICAgICAgICAgICBjaGFuZ2VkID0gVHJ1ZQogICAgICAgIHJldHVybiBjaGFuZ2VkCgogICAgZGVmIHNldF9vd25lcl9pZl9kaWZmZXJlbnQoc2VsZiwgcGF0aCwgb3duZXIsIGNoYW5nZWQsIGRpZmY9Tm9uZSwgZXhwYW5kPVRydWUpOgogICAgICAgIGJfcGF0aCA9IHRvX2J5dGVzKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBpZiBleHBhbmQ6CiAgICAgICAgICAgIGJfcGF0aCA9IG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnMoYl9wYXRoKSkKICAgICAgICBwYXRoID0gdG9fdGV4dChiX3BhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBpZiBvd25lciBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gY2hhbmdlZAogICAgICAgIG9yaWdfdWlkLCBvcmlnX2dpZCA9IHNlbGYudXNlcl9hbmRfZ3JvdXAocGF0aCwgZXhwYW5kKQogICAgICAgIHRyeToKICAgICAgICAgICAgdWlkID0gaW50KG93bmVyKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB1aWQgPSBwd2QuZ2V0cHduYW0ob3duZXIpLnB3X3VpZAogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nY2hvd24gZmFpbGVkOiBmYWlsZWQgdG8gbG9vayB1cCB1c2VyICVzJyAlIG93bmVyKQogICAgICAgIGlmIG9yaWdfdWlkICE9IHVpZDoKCiAgICAgICAgICAgIGlmIGRpZmYgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBpZiAnYmVmb3JlJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXVsnb3duZXInXSA9IG9yaWdfdWlkCiAgICAgICAgICAgICAgICBpZiAnYWZ0ZXInIG5vdCBpbiBkaWZmOgogICAgICAgICAgICAgICAgICAgIGRpZmZbJ2FmdGVyJ10gPSB7fQogICAgICAgICAgICAgICAgZGlmZlsnYWZ0ZXInXVsnb3duZXInXSA9IHVpZAoKICAgICAgICAgICAgaWYgc2VsZi5jaGVja19tb2RlOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgb3MubGNob3duKGJfcGF0aCwgdWlkLCAtMSkKICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nY2hvd24gZmFpbGVkJykKICAgICAgICAgICAgY2hhbmdlZCA9IFRydWUKICAgICAgICByZXR1cm4gY2hhbmdlZAoKICAgIGRlZiBzZXRfZ3JvdXBfaWZfZGlmZmVyZW50KHNlbGYsIHBhdGgsIGdyb3VwLCBjaGFuZ2VkLCBkaWZmPU5vbmUsIGV4cGFuZD1UcnVlKToKICAgICAgICBiX3BhdGggPSB0b19ieXRlcyhwYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3N0cmljdCcpCiAgICAgICAgaWYgZXhwYW5kOgogICAgICAgICAgICBiX3BhdGggPSBvcy5wYXRoLmV4cGFuZHVzZXIob3MucGF0aC5leHBhbmR2YXJzKGJfcGF0aCkpCiAgICAgICAgcGF0aCA9IHRvX3RleHQoYl9wYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3N0cmljdCcpCiAgICAgICAgaWYgZ3JvdXAgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQKICAgICAgICBvcmlnX3VpZCwgb3JpZ19naWQgPSBzZWxmLnVzZXJfYW5kX2dyb3VwKGJfcGF0aCwgZXhwYW5kKQogICAgICAgIHRyeToKICAgICAgICAgICAgZ2lkID0gaW50KGdyb3VwKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBnaWQgPSBncnAuZ2V0Z3JuYW0oZ3JvdXApLmdyX2dpZAogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nY2hncnAgZmFpbGVkOiBmYWlsZWQgdG8gbG9vayB1cCBncm91cCAlcycgJSBncm91cCkKICAgICAgICBpZiBvcmlnX2dpZCAhPSBnaWQ6CgogICAgICAgICAgICBpZiBkaWZmIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgaWYgJ2JlZm9yZScgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ10gPSB7fQogICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ11bJ2dyb3VwJ10gPSBvcmlnX2dpZAogICAgICAgICAgICAgICAgaWYgJ2FmdGVyJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddID0ge30KICAgICAgICAgICAgICAgIGRpZmZbJ2FmdGVyJ11bJ2dyb3VwJ10gPSBnaWQKCiAgICAgICAgICAgIGlmIHNlbGYuY2hlY2tfbW9kZToKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG9zLmxjaG93bihiX3BhdGgsIC0xLCBnaWQpCiAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocGF0aD1wYXRoLCBtc2c9J2NoZ3JwIGZhaWxlZCcpCiAgICAgICAgICAgIGNoYW5nZWQgPSBUcnVlCiAgICAgICAgcmV0dXJuIGNoYW5nZWQKCiAgICBkZWYgc2V0X21vZGVfaWZfZGlmZmVyZW50KHNlbGYsIHBhdGgsIG1vZGUsIGNoYW5nZWQsIGRpZmY9Tm9uZSwgZXhwYW5kPVRydWUpOgogICAgICAgIGJfcGF0aCA9IHRvX2J5dGVzKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBpZiBleHBhbmQ6CiAgICAgICAgICAgIGJfcGF0aCA9IG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnMoYl9wYXRoKSkKICAgICAgICBwYXRoID0gdG9fdGV4dChiX3BhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBwYXRoX3N0YXQgPSBvcy5sc3RhdChiX3BhdGgpCgogICAgICAgIGlmIG1vZGUgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQKCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UobW9kZSwgaW50KToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbW9kZSA9IGludChtb2RlLCA4KQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIG1vZGUgPSBzZWxmLl9zeW1ib2xpY19tb2RlX3RvX29jdGFsKHBhdGhfc3RhdCwgbW9kZSkKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2c9Im1vZGUgbXVzdCBiZSBpbiBvY3RhbCBvciBzeW1ib2xpYyBmb3JtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzPXN0cihlKSkKCiAgICAgICAgICAgICAgICBpZiBtb2RlICE9IHN0YXQuU19JTU9ERShtb2RlKToKICAgICAgICAgICAgICAgICAgICAjIHByZXZlbnQgbW9kZSBmcm9tIGhhdmluZyBleHRyYSBpbmZvIG9yYmVpbmcgaW52YWxpZCBsb25nIG51bWJlcgogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSJJbnZhbGlkIG1vZGUgc3VwcGxpZWQsIG9ubHkgcGVybWlzc2lvbiBpbmZvIGlzIGFsbG93ZWQiLCBkZXRhaWxzPW1vZGUpCgogICAgICAgIHByZXZfbW9kZSA9IHN0YXQuU19JTU9ERShwYXRoX3N0YXQuc3RfbW9kZSkKCiAgICAgICAgaWYgcHJldl9tb2RlICE9IG1vZGU6CgogICAgICAgICAgICBpZiBkaWZmIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgaWYgJ2JlZm9yZScgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ10gPSB7fQogICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ11bJ21vZGUnXSA9ICcwJTAzbycgJSBwcmV2X21vZGUKICAgICAgICAgICAgICAgIGlmICdhZnRlcicgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYWZ0ZXInXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddWydtb2RlJ10gPSAnMCUwM28nICUgbW9kZQoKICAgICAgICAgICAgaWYgc2VsZi5jaGVja19tb2RlOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgIyBGSVhNRTogY29tcGFyaXNvbiBhZ2FpbnN0IHN0cmluZyBhYm92ZSB3aWxsIGNhdXNlIHRoaXMgdG8gYmUgZXhlY3V0ZWQKICAgICAgICAgICAgIyBldmVyeSB0aW1lCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIGhhc2F0dHIob3MsICdsY2htb2QnKToKICAgICAgICAgICAgICAgICAgICBvcy5sY2htb2QoYl9wYXRoLCBtb2RlKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5pc2xpbmsoYl9wYXRoKToKICAgICAgICAgICAgICAgICAgICAgICAgb3MuY2htb2QoYl9wYXRoLCBtb2RlKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICMgQXR0ZW1wdCB0byBzZXQgdGhlIHBlcm1zIG9mIHRoZSBzeW1saW5rIGJ1dCBiZQogICAgICAgICAgICAgICAgICAgICAgICAjIGNhcmVmdWwgbm90IHRvIGNoYW5nZSB0aGUgcGVybXMgb2YgdGhlIHVuZGVybHlpbmcKICAgICAgICAgICAgICAgICAgICAgICAgIyBmaWxlIHdoaWxlIHRyeWluZwogICAgICAgICAgICAgICAgICAgICAgICB1bmRlcmx5aW5nX3N0YXQgPSBvcy5zdGF0KGJfcGF0aCkKICAgICAgICAgICAgICAgICAgICAgICAgb3MuY2htb2QoYl9wYXRoLCBtb2RlKQogICAgICAgICAgICAgICAgICAgICAgICBuZXdfdW5kZXJseWluZ19zdGF0ID0gb3Muc3RhdChiX3BhdGgpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVuZGVybHlpbmdfc3RhdC5zdF9tb2RlICE9IG5ld191bmRlcmx5aW5nX3N0YXQuc3RfbW9kZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zLmNobW9kKGJfcGF0aCwgc3RhdC5TX0lNT0RFKHVuZGVybHlpbmdfc3RhdC5zdF9tb2RlKSkKICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmlzbGluayhiX3BhdGgpIGFuZCBlLmVycm5vID09IGVycm5vLkVQRVJNOiAgIyBDYW4ndCBzZXQgbW9kZSBvbiBzeW1ib2xpYyBsaW5rcwogICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgICAgIGVsaWYgZS5lcnJubyBpbiAoZXJybm8uRU5PRU5ULCBlcnJuby5FTE9PUCk6ICMgQ2FuJ3Qgc2V0IG1vZGUgb24gYnJva2VuIHN5bWJvbGljIGxpbmtzCiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICByYWlzZSBlCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nY2htb2QgZmFpbGVkJywgZGV0YWlscz1zdHIoZSkpCgogICAgICAgICAgICBwYXRoX3N0YXQgPSBvcy5sc3RhdChiX3BhdGgpCiAgICAgICAgICAgIG5ld19tb2RlID0gc3RhdC5TX0lNT0RFKHBhdGhfc3RhdC5zdF9tb2RlKQoKICAgICAgICAgICAgaWYgbmV3X21vZGUgIT0gcHJldl9tb2RlOgogICAgICAgICAgICAgICAgY2hhbmdlZCA9IFRydWUKICAgICAgICByZXR1cm4gY2hhbmdlZAoKICAgIGRlZiBzZXRfYXR0cmlidXRlc19pZl9kaWZmZXJlbnQoc2VsZiwgcGF0aCwgYXR0cmlidXRlcywgY2hhbmdlZCwgZGlmZj1Ob25lLCBleHBhbmQ9VHJ1ZSk6CgogICAgICAgIGlmIGF0dHJpYnV0ZXMgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQKCiAgICAgICAgYl9wYXRoID0gdG9fYnl0ZXMocGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9zdHJpY3QnKQogICAgICAgIGlmIGV4cGFuZDoKICAgICAgICAgICAgYl9wYXRoID0gb3MucGF0aC5leHBhbmR1c2VyKG9zLnBhdGguZXhwYW5kdmFycyhiX3BhdGgpKQogICAgICAgIHBhdGggPSB0b190ZXh0KGJfcGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9zdHJpY3QnKQoKICAgICAgICBleGlzdGluZyA9IHNlbGYuZ2V0X2ZpbGVfYXR0cmlidXRlcyhiX3BhdGgpCgogICAgICAgIGlmIGV4aXN0aW5nLmdldCgnYXR0cl9mbGFncycsJycpICE9IGF0dHJpYnV0ZXM6CiAgICAgICAgICAgIGF0dHJjbWQgPSBzZWxmLmdldF9iaW5fcGF0aCgnY2hhdHRyJykKICAgICAgICAgICAgaWYgYXR0cmNtZDoKICAgICAgICAgICAgICAgIGF0dHJjbWQgPSBbYXR0cmNtZCwgJz0lcycgJSBhdHRyaWJ1dGVzLCBiX3BhdGhdCiAgICAgICAgICAgICAgICBjaGFuZ2VkID0gVHJ1ZQoKICAgICAgICAgICAgICAgIGlmIGRpZmYgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgaWYgJ2JlZm9yZScgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZbJ2JlZm9yZSddID0ge30KICAgICAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXVsnYXR0cmlidXRlcyddID0gZXhpc3RpbmcuZ2V0KCdhdHRyX2ZsYWdzJykKICAgICAgICAgICAgICAgICAgICBpZiAnYWZ0ZXInIG5vdCBpbiBkaWZmOgogICAgICAgICAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddID0ge30KICAgICAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddWydhdHRyaWJ1dGVzJ10gPSBhdHRyaWJ1dGVzCgogICAgICAgICAgICAgICAgaWYgbm90IHNlbGYuY2hlY2tfbW9kZToKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJjLCBvdXQsIGVyciA9IHNlbGYucnVuX2NvbW1hbmQoYXR0cmNtZCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgcmMgIT0gMCBvciBlcnI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oIkVycm9yIHdoaWxlIHNldHRpbmcgYXR0cmlidXRlczogJXMiICUgKG91dCArIGVycikpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSdjaGF0dHIgZmFpbGVkJywgZGV0YWlscz1zdHIoZSkpCiAgICAgICAgcmV0dXJuIGNoYW5nZWQKCiAgICBkZWYgZ2V0X2ZpbGVfYXR0cmlidXRlcyhzZWxmLCBwYXRoKToKICAgICAgICBvdXRwdXQgPSB7fQogICAgICAgIGF0dHJjbWQgPSBzZWxmLmdldF9iaW5fcGF0aCgnbHNhdHRyJywgRmFsc2UpCiAgICAgICAgaWYgYXR0cmNtZDoKICAgICAgICAgICAgYXR0cmNtZCA9IFthdHRyY21kLCAnLXZkJywgcGF0aF0KICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmMsIG91dCwgZXJyID0gc2VsZi5ydW5fY29tbWFuZChhdHRyY21kKQogICAgICAgICAgICAgICAgaWYgcmMgPT0gMDoKICAgICAgICAgICAgICAgICAgICByZXMgPSBvdXQuc3BsaXQoJyAnKVswOjJdCiAgICAgICAgICAgICAgICAgICAgb3V0cHV0WydhdHRyX2ZsYWdzJ10gPSAgcmVzWzFdLnJlcGxhY2UoJy0nLCcnKS5zdHJpcCgpCiAgICAgICAgICAgICAgICAgICAgb3V0cHV0Wyd2ZXJzaW9uJ10gPSByZXNbMF0uc3RyaXAoKQogICAgICAgICAgICAgICAgICAgIG91dHB1dFsnYXR0cmlidXRlcyddID0gZm9ybWF0X2F0dHJpYnV0ZXMob3V0cHV0WydhdHRyX2ZsYWdzJ10pCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICByZXR1cm4gb3V0cHV0CgoKICAgIGRlZiBfc3ltYm9saWNfbW9kZV90b19vY3RhbChzZWxmLCBwYXRoX3N0YXQsIHN5bWJvbGljX21vZGUpOgogICAgICAgIG5ld19tb2RlID0gc3RhdC5TX0lNT0RFKHBhdGhfc3RhdC5zdF9tb2RlKQoKICAgICAgICBtb2RlX3JlID0gcmUuY29tcGlsZShyJ14oP1A8dXNlcnM+W3Vnb2FdKykoP1A8b3BlcmF0b3I+Wy0rPV0pKD9QPHBlcm1zPltyd3hYc3QtXSp8W3Vnb10pJCcpCiAgICAgICAgZm9yIG1vZGUgaW4gc3ltYm9saWNfbW9kZS5zcGxpdCgnLCcpOgogICAgICAgICAgICBtYXRjaCA9IG1vZGVfcmUubWF0Y2gobW9kZSkKICAgICAgICAgICAgaWYgbWF0Y2g6CiAgICAgICAgICAgICAgICB1c2VycyA9IG1hdGNoLmdyb3VwKCd1c2VycycpCiAgICAgICAgICAgICAgICBvcGVyYXRvciA9IG1hdGNoLmdyb3VwKCdvcGVyYXRvcicpCiAgICAgICAgICAgICAgICBwZXJtcyA9IG1hdGNoLmdyb3VwKCdwZXJtcycpCgogICAgICAgICAgICAgICAgaWYgdXNlcnMgPT0gJ2EnOgogICAgICAgICAgICAgICAgICAgIHVzZXJzID0gJ3VnbycKCiAgICAgICAgICAgICAgICBmb3IgdXNlciBpbiB1c2VyczoKICAgICAgICAgICAgICAgICAgICBtb2RlX3RvX2FwcGx5ID0gc2VsZi5fZ2V0X29jdGFsX21vZGVfZnJvbV9zeW1ib2xpY19wZXJtcyhwYXRoX3N0YXQsIHVzZXIsIHBlcm1zKQogICAgICAgICAgICAgICAgICAgIG5ld19tb2RlID0gc2VsZi5fYXBwbHlfb3BlcmF0aW9uX3RvX21vZGUodXNlciwgb3BlcmF0b3IsIG1vZGVfdG9fYXBwbHksIG5ld19tb2RlKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiYmFkIHN5bWJvbGljIHBlcm1pc3Npb24gZm9yIG1vZGU6ICVzIiAlIG1vZGUpCiAgICAgICAgcmV0dXJuIG5ld19tb2RlCgogICAgZGVmIF9hcHBseV9vcGVyYXRpb25fdG9fbW9kZShzZWxmLCB1c2VyLCBvcGVyYXRvciwgbW9kZV90b19hcHBseSwgY3VycmVudF9tb2RlKToKICAgICAgICBpZiBvcGVyYXRvciAgPT0gICc9JzoKICAgICAgICAgICAgaWYgdXNlciA9PSAndSc6CiAgICAgICAgICAgICAgICBtYXNrID0gc3RhdC5TX0lSV1hVIHwgc3RhdC5TX0lTVUlECiAgICAgICAgICAgIGVsaWYgdXNlciA9PSAnZyc6CiAgICAgICAgICAgICAgICBtYXNrID0gc3RhdC5TX0lSV1hHIHwgc3RhdC5TX0lTR0lECiAgICAgICAgICAgIGVsaWYgdXNlciA9PSAnbyc6CiAgICAgICAgICAgICAgICBtYXNrID0gc3RhdC5TX0lSV1hPIHwgc3RhdC5TX0lTVlRYCgogICAgICAgICAgICAjIG1hc2sgb3V0IHUsIGcsIG9yIG8gcGVybWlzc2lvbnMgZnJvbSBjdXJyZW50X21vZGUgYW5kIGFwcGx5IG5ldyBwZXJtaXNzaW9ucwogICAgICAgICAgICBpbnZlcnNlX21hc2sgPSBtYXNrIF4gUEVSTV9CSVRTCiAgICAgICAgICAgIG5ld19tb2RlID0gKGN1cnJlbnRfbW9kZSAmIGludmVyc2VfbWFzaykgfCBtb2RlX3RvX2FwcGx5CiAgICAgICAgZWxpZiBvcGVyYXRvciA9PSAnKyc6CiAgICAgICAgICAgIG5ld19tb2RlID0gY3VycmVudF9tb2RlIHwgbW9kZV90b19hcHBseQogICAgICAgIGVsaWYgb3BlcmF0b3IgPT0gJy0nOgogICAgICAgICAgICBuZXdfbW9kZSA9IGN1cnJlbnRfbW9kZSAtIChjdXJyZW50X21vZGUgJiBtb2RlX3RvX2FwcGx5KQogICAgICAgIHJldHVybiBuZXdfbW9kZQoKICAgIGRlZiBfZ2V0X29jdGFsX21vZGVfZnJvbV9zeW1ib2xpY19wZXJtcyhzZWxmLCBwYXRoX3N0YXQsIHVzZXIsIHBlcm1zKToKICAgICAgICBwcmV2X21vZGUgPSBzdGF0LlNfSU1PREUocGF0aF9zdGF0LnN0X21vZGUpCgogICAgICAgIGlzX2RpcmVjdG9yeSA9IHN0YXQuU19JU0RJUihwYXRoX3N0YXQuc3RfbW9kZSkKICAgICAgICBoYXNfeF9wZXJtaXNzaW9ucyA9IChwcmV2X21vZGUgJiBFWEVDX1BFUk1fQklUUykgPiAwCiAgICAgICAgYXBwbHlfWF9wZXJtaXNzaW9uID0gaXNfZGlyZWN0b3J5IG9yIGhhc194X3Blcm1pc3Npb25zCgogICAgICAgICMgUGVybWlzc2lvbiBiaXRzIGNvbnN0YW50cyBkb2N1bWVudGVkIGF0OgogICAgICAgICMgaHR0cDovL2RvY3MucHl0aG9uLm9yZy8yL2xpYnJhcnkvc3RhdC5odG1sI3N0YXQuU19JU1VJRAogICAgICAgIGlmIGFwcGx5X1hfcGVybWlzc2lvbjoKICAgICAgICAgICAgWF9wZXJtcyA9IHsKICAgICAgICAgICAgICAgICd1JzogeydYJzogc3RhdC5TX0lYVVNSfSwKICAgICAgICAgICAgICAgICdnJzogeydYJzogc3RhdC5TX0lYR1JQfSwKICAgICAgICAgICAgICAgICdvJzogeydYJzogc3RhdC5TX0lYT1RIfQogICAgICAgICAgICB9CiAgICAgICAgZWxzZToKICAgICAgICAgICAgWF9wZXJtcyA9IHsKICAgICAgICAgICAgICAgICd1JzogeydYJzogMH0sCiAgICAgICAgICAgICAgICAnZyc6IHsnWCc6IDB9LAogICAgICAgICAgICAgICAgJ28nOiB7J1gnOiAwfQogICAgICAgICAgICB9CgogICAgICAgIHVzZXJfcGVybXNfdG9fbW9kZXMgPSB7CiAgICAgICAgICAgICd1JzogewogICAgICAgICAgICAgICAgJ3InOiBzdGF0LlNfSVJVU1IsCiAgICAgICAgICAgICAgICAndyc6IHN0YXQuU19JV1VTUiwKICAgICAgICAgICAgICAgICd4Jzogc3RhdC5TX0lYVVNSLAogICAgICAgICAgICAgICAgJ3MnOiBzdGF0LlNfSVNVSUQsCiAgICAgICAgICAgICAgICAndCc6IDAsCiAgICAgICAgICAgICAgICAndSc6IHByZXZfbW9kZSAmIHN0YXQuU19JUldYVSwKICAgICAgICAgICAgICAgICdnJzogKHByZXZfbW9kZSAmIHN0YXQuU19JUldYRykgPDwgMywKICAgICAgICAgICAgICAgICdvJzogKHByZXZfbW9kZSAmIHN0YXQuU19JUldYTykgPDwgNiB9LAogICAgICAgICAgICAnZyc6IHsKICAgICAgICAgICAgICAgICdyJzogc3RhdC5TX0lSR1JQLAogICAgICAgICAgICAgICAgJ3cnOiBzdGF0LlNfSVdHUlAsCiAgICAgICAgICAgICAgICAneCc6IHN0YXQuU19JWEdSUCwKICAgICAgICAgICAgICAgICdzJzogc3RhdC5TX0lTR0lELAogICAgICAgICAgICAgICAgJ3QnOiAwLAogICAgICAgICAgICAgICAgJ3UnOiAocHJldl9tb2RlICYgc3RhdC5TX0lSV1hVKSA+PiAzLAogICAgICAgICAgICAgICAgJ2cnOiBwcmV2X21vZGUgJiBzdGF0LlNfSVJXWEcsCiAgICAgICAgICAgICAgICAnbyc6IChwcmV2X21vZGUgJiBzdGF0LlNfSVJXWE8pIDw8IDMgfSwKICAgICAgICAgICAgJ28nOiB7CiAgICAgICAgICAgICAgICAncic6IHN0YXQuU19JUk9USCwKICAgICAgICAgICAgICAgICd3Jzogc3RhdC5TX0lXT1RILAogICAgICAgICAgICAgICAgJ3gnOiBzdGF0LlNfSVhPVEgsCiAgICAgICAgICAgICAgICAncyc6IDAsCiAgICAgICAgICAgICAgICAndCc6IHN0YXQuU19JU1ZUWCwKICAgICAgICAgICAgICAgICd1JzogKHByZXZfbW9kZSAmIHN0YXQuU19JUldYVSkgPj4gNiwKICAgICAgICAgICAgICAgICdnJzogKHByZXZfbW9kZSAmIHN0YXQuU19JUldYRykgPj4gMywKICAgICAgICAgICAgICAgICdvJzogcHJldl9tb2RlICYgc3RhdC5TX0lSV1hPIH0KICAgICAgICB9CgogICAgICAgICMgSW5zZXJ0IFhfcGVybXMgaW50byB1c2VyX3Blcm1zX3RvX21vZGVzCiAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gWF9wZXJtcy5pdGVtcygpOgogICAgICAgICAgICB1c2VyX3Blcm1zX3RvX21vZGVzW2tleV0udXBkYXRlKHZhbHVlKQoKICAgICAgICBvcl9yZWR1Y2UgPSBsYW1iZGEgbW9kZSwgcGVybTogbW9kZSB8IHVzZXJfcGVybXNfdG9fbW9kZXNbdXNlcl1bcGVybV0KICAgICAgICByZXR1cm4gcmVkdWNlKG9yX3JlZHVjZSwgcGVybXMsIDApCgogICAgZGVmIHNldF9mc19hdHRyaWJ1dGVzX2lmX2RpZmZlcmVudChzZWxmLCBmaWxlX2FyZ3MsIGNoYW5nZWQsIGRpZmY9Tm9uZSwgZXhwYW5kPVRydWUpOgogICAgICAgICMgc2V0IG1vZGVzIG93bmVycyBhbmQgY29udGV4dCBhcyBuZWVkZWQKICAgICAgICBjaGFuZ2VkID0gc2VsZi5zZXRfY29udGV4dF9pZl9kaWZmZXJlbnQoCiAgICAgICAgICAgIGZpbGVfYXJnc1sncGF0aCddLCBmaWxlX2FyZ3NbJ3NlY29udGV4dCddLCBjaGFuZ2VkLCBkaWZmCiAgICAgICAgKQogICAgICAgIGNoYW5nZWQgPSBzZWxmLnNldF9vd25lcl9pZl9kaWZmZXJlbnQoCiAgICAgICAgICAgIGZpbGVfYXJnc1sncGF0aCddLCBmaWxlX2FyZ3NbJ293bmVyJ10sIGNoYW5nZWQsIGRpZmYsIGV4cGFuZAogICAgICAgICkKICAgICAgICBjaGFuZ2VkID0gc2VsZi5zZXRfZ3JvdXBfaWZfZGlmZmVyZW50KAogICAgICAgICAgICBmaWxlX2FyZ3NbJ3BhdGgnXSwgZmlsZV9hcmdzWydncm91cCddLCBjaGFuZ2VkLCBkaWZmLCBleHBhbmQKICAgICAgICApCiAgICAgICAgY2hhbmdlZCA9IHNlbGYuc2V0X21vZGVfaWZfZGlmZmVyZW50KAogICAgICAgICAgICBmaWxlX2FyZ3NbJ3BhdGgnXSwgZmlsZV9hcmdzWydtb2RlJ10sIGNoYW5nZWQsIGRpZmYsIGV4cGFuZAogICAgICAgICkKICAgICAgICBjaGFuZ2VkID0gc2VsZi5zZXRfYXR0cmlidXRlc19pZl9kaWZmZXJlbnQoCiAgICAgICAgICAgIGZpbGVfYXJnc1sncGF0aCddLCBmaWxlX2FyZ3NbJ2F0dHJpYnV0ZXMnXSwgY2hhbmdlZCwgZGlmZiwgZXhwYW5kCiAgICAgICAgKQogICAgICAgIHJldHVybiBjaGFuZ2VkCgogICAgZGVmIHNldF9kaXJlY3RvcnlfYXR0cmlidXRlc19pZl9kaWZmZXJlbnQoc2VsZiwgZmlsZV9hcmdzLCBjaGFuZ2VkLCBkaWZmPU5vbmUsIGV4cGFuZD1UcnVlKToKICAgICAgICByZXR1cm4gc2VsZi5zZXRfZnNfYXR0cmlidXRlc19pZl9kaWZmZXJlbnQoZmlsZV9hcmdzLCBjaGFuZ2VkLCBkaWZmLCBleHBhbmQpCgogICAgZGVmIHNldF9maWxlX2F0dHJpYnV0ZXNfaWZfZGlmZmVyZW50KHNlbGYsIGZpbGVfYXJncywgY2hhbmdlZCwgZGlmZj1Ob25lLCBleHBhbmQ9VHJ1ZSk6CiAgICAgICAgcmV0dXJuIHNlbGYuc2V0X2ZzX2F0dHJpYnV0ZXNfaWZfZGlmZmVyZW50KGZpbGVfYXJncywgY2hhbmdlZCwgZGlmZiwgZXhwYW5kKQoKICAgIGRlZiBhZGRfcGF0aF9pbmZvKHNlbGYsIGt3YXJncyk6CiAgICAgICAgJycnCiAgICAgICAgZm9yIHJlc3VsdHMgdGhhdCBhcmUgZmlsZXMsIHN1cHBsZW1lbnQgdGhlIGluZm8gYWJvdXQgdGhlIGZpbGUKICAgICAgICBpbiB0aGUgcmV0dXJuIHBhdGggd2l0aCBzdGF0cyBhYm91dCB0aGUgZmlsZSBwYXRoLgogICAgICAgICcnJwoKICAgICAgICBwYXRoID0ga3dhcmdzLmdldCgncGF0aCcsIGt3YXJncy5nZXQoJ2Rlc3QnLCBOb25lKSkKICAgICAgICBpZiBwYXRoIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBrd2FyZ3MKICAgICAgICBiX3BhdGggPSB0b19ieXRlcyhwYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKGJfcGF0aCk6CiAgICAgICAgICAgICh1aWQsIGdpZCkgPSBzZWxmLnVzZXJfYW5kX2dyb3VwKHBhdGgpCiAgICAgICAgICAgIGt3YXJnc1sndWlkJ10gPSB1aWQKICAgICAgICAgICAga3dhcmdzWydnaWQnXSA9IGdpZAogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB1c2VyID0gcHdkLmdldHB3dWlkKHVpZClbMF0KICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICAgICAgdXNlciA9IHN0cih1aWQpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGdyb3VwID0gZ3JwLmdldGdyZ2lkKGdpZClbMF0KICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICAgICAgZ3JvdXAgPSBzdHIoZ2lkKQogICAgICAgICAgICBrd2FyZ3NbJ293bmVyJ10gPSB1c2VyCiAgICAgICAgICAgIGt3YXJnc1snZ3JvdXAnXSA9IGdyb3VwCiAgICAgICAgICAgIHN0ID0gb3MubHN0YXQoYl9wYXRoKQogICAgICAgICAgICBrd2FyZ3NbJ21vZGUnXSA9ICcwJTAzbycgJSBzdGF0LlNfSU1PREUoc3Rbc3RhdC5TVF9NT0RFXSkKICAgICAgICAgICAgIyBzZWNvbnRleHQgbm90IHlldCBzdXBwb3J0ZWQKICAgICAgICAgICAgaWYgb3MucGF0aC5pc2xpbmsoYl9wYXRoKToKICAgICAgICAgICAgICAgIGt3YXJnc1snc3RhdGUnXSA9ICdsaW5rJwogICAgICAgICAgICBlbGlmIG9zLnBhdGguaXNkaXIoYl9wYXRoKToKICAgICAgICAgICAgICAgIGt3YXJnc1snc3RhdGUnXSA9ICdkaXJlY3RvcnknCiAgICAgICAgICAgIGVsaWYgb3Muc3RhdChiX3BhdGgpLnN0X25saW5rID4gMToKICAgICAgICAgICAgICAgIGt3YXJnc1snc3RhdGUnXSA9ICdoYXJkJwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAga3dhcmdzWydzdGF0ZSddID0gJ2ZpbGUnCiAgICAgICAgICAgIGlmIEhBVkVfU0VMSU5VWCBhbmQgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgICAgIGt3YXJnc1snc2Vjb250ZXh0J10gPSAnOicuam9pbihzZWxmLnNlbGludXhfY29udGV4dChwYXRoKSkKICAgICAgICAgICAga3dhcmdzWydzaXplJ10gPSBzdFtzdGF0LlNUX1NJWkVdCiAgICAgICAgZWxzZToKICAgICAgICAgICAga3dhcmdzWydzdGF0ZSddID0gJ2Fic2VudCcKICAgICAgICByZXR1cm4ga3dhcmdzCgogICAgZGVmIF9jaGVja19sb2NhbGUoc2VsZik6CiAgICAgICAgJycnCiAgICAgICAgVXNlcyB0aGUgbG9jYWxlIG1vZHVsZSB0byB0ZXN0IHRoZSBjdXJyZW50bHkgc2V0IGxvY2FsZQogICAgICAgIChwZXIgdGhlIExBTkcgYW5kIExDX0NUWVBFIGVudmlyb25tZW50IHNldHRpbmdzKQogICAgICAgICcnJwogICAgICAgIHRyeToKICAgICAgICAgICAgIyBzZXR0aW5nIHRoZSBsb2NhbGUgdG8gJycgdXNlcyB0aGUgZGVmYXVsdCBsb2NhbGUKICAgICAgICAgICAgIyBhcyBpdCB3b3VsZCBiZSByZXR1cm5lZCBieSBsb2NhbGUuZ2V0ZGVmYXVsdGxvY2FsZSgpCiAgICAgICAgICAgIGxvY2FsZS5zZXRsb2NhbGUobG9jYWxlLkxDX0FMTCwgJycpCiAgICAgICAgZXhjZXB0IGxvY2FsZS5FcnJvcjoKICAgICAgICAgICAgIyBmYWxsYmFjayB0byB0aGUgJ0MnIGxvY2FsZSwgd2hpY2ggbWF5IGNhdXNlIHVuaWNvZGUKICAgICAgICAgICAgIyBpc3N1ZXMgYnV0IGlzIHByZWZlcmFibGUgdG8gc2ltcGx5IGZhaWxpbmcgYmVjYXVzZQogICAgICAgICAgICAjIG9mIGFuIHVua25vd24gbG9jYWxlCiAgICAgICAgICAgIGxvY2FsZS5zZXRsb2NhbGUobG9jYWxlLkxDX0FMTCwgJ0MnKQogICAgICAgICAgICBvcy5lbnZpcm9uWydMQU5HJ10gPSAnQycKICAgICAgICAgICAgb3MuZW52aXJvblsnTENfQUxMJ10gPSAnQycKICAgICAgICAgICAgb3MuZW52aXJvblsnTENfTUVTU0FHRVMnXSA9ICdDJwogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJBbiB1bmtub3duIGVycm9yIHdhcyBlbmNvdW50ZXJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIHZhbGlkYXRlIHRoZSBsb2NhbGU6ICVzIiAlIGUpCgogICAgZGVmIF9oYW5kbGVfYWxpYXNlcyhzZWxmLCBzcGVjPU5vbmUpOgogICAgICAgICMgdGhpcyB1c2VzIGV4Y2VwdGlvbnMgYXMgaXQgaGFwcGVucyBiZWZvcmUgd2UgY2FuIHNhZmVseSBjYWxsIGZhaWxfanNvbgogICAgICAgIGFsaWFzZXNfcmVzdWx0cyA9IHt9ICNhbGlhczpjYW5vbgogICAgICAgIGlmIHNwZWMgaXMgTm9uZToKICAgICAgICAgICAgc3BlYyA9IHNlbGYuYXJndW1lbnRfc3BlYwogICAgICAgIGZvciAoayx2KSBpbiBzcGVjLml0ZW1zKCk6CiAgICAgICAgICAgIHNlbGYuX2xlZ2FsX2lucHV0cy5hcHBlbmQoaykKICAgICAgICAgICAgYWxpYXNlcyA9IHYuZ2V0KCdhbGlhc2VzJywgTm9uZSkKICAgICAgICAgICAgZGVmYXVsdCA9IHYuZ2V0KCdkZWZhdWx0JywgTm9uZSkKICAgICAgICAgICAgcmVxdWlyZWQgPSB2LmdldCgncmVxdWlyZWQnLCBGYWxzZSkKICAgICAgICAgICAgaWYgZGVmYXVsdCBpcyBub3QgTm9uZSBhbmQgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAjIG5vdCBhbGlhcyBzcGVjaWZpYyBidXQgdGhpcyBpcyBhIGdvb2QgcGxhY2UgdG8gY2hlY2sgdGhpcwogICAgICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJpbnRlcm5hbCBlcnJvcjogcmVxdWlyZWQgYW5kIGRlZmF1bHQgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZSBmb3IgJXMiICUgaykKICAgICAgICAgICAgaWYgYWxpYXNlcyBpcyBOb25lOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoYWxpYXNlcywgU0VRVUVOQ0VUWVBFKSBvciBpc2luc3RhbmNlKGFsaWFzZXMsIChiaW5hcnlfdHlwZSwgdGV4dF90eXBlKSk6CiAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oJ2ludGVybmFsIGVycm9yOiBhbGlhc2VzIG11c3QgYmUgYSBsaXN0IG9yIHR1cGxlJykKICAgICAgICAgICAgZm9yIGFsaWFzIGluIGFsaWFzZXM6CiAgICAgICAgICAgICAgICBzZWxmLl9sZWdhbF9pbnB1dHMuYXBwZW5kKGFsaWFzKQogICAgICAgICAgICAgICAgYWxpYXNlc19yZXN1bHRzW2FsaWFzXSA9IGsKICAgICAgICAgICAgICAgIGlmIGFsaWFzIGluIHNlbGYucGFyYW1zOgogICAgICAgICAgICAgICAgICAgIHNlbGYucGFyYW1zW2tdID0gc2VsZi5wYXJhbXNbYWxpYXNdCgogICAgICAgIHJldHVybiBhbGlhc2VzX3Jlc3VsdHMKCiAgICBkZWYgX2NoZWNrX2FyZ3VtZW50cyhzZWxmLCBjaGVja19pbnZhbGlkX2FyZ3VtZW50cyk6CiAgICAgICAgc2VsZi5fc3lzbG9nX2ZhY2lsaXR5ID0gJ0xPR19VU0VSJwogICAgICAgIHVuc3VwcG9ydGVkX3BhcmFtZXRlcnMgPSBzZXQoKQogICAgICAgIGZvciAoayx2KSBpbiBsaXN0KHNlbGYucGFyYW1zLml0ZW1zKCkpOgoKICAgICAgICAgICAgaWYgayA9PSAnX2Fuc2libGVfY2hlY2tfbW9kZScgYW5kIHY6CiAgICAgICAgICAgICAgICBzZWxmLmNoZWNrX21vZGUgPSBUcnVlCgogICAgICAgICAgICBlbGlmIGsgPT0gJ19hbnNpYmxlX25vX2xvZyc6CiAgICAgICAgICAgICAgICBzZWxmLm5vX2xvZyA9IHNlbGYuYm9vbGVhbih2KQoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV9kZWJ1Zyc6CiAgICAgICAgICAgICAgICBzZWxmLl9kZWJ1ZyA9IHNlbGYuYm9vbGVhbih2KQoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV9kaWZmJzoKICAgICAgICAgICAgICAgIHNlbGYuX2RpZmYgPSBzZWxmLmJvb2xlYW4odikKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfdmVyYm9zaXR5JzoKICAgICAgICAgICAgICAgIHNlbGYuX3ZlcmJvc2l0eSA9IHYKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfc2VsaW51eF9zcGVjaWFsX2ZzJzoKICAgICAgICAgICAgICAgIHNlbGYuX3NlbGludXhfc3BlY2lhbF9mcyA9IHYKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfc3lzbG9nX2ZhY2lsaXR5JzoKICAgICAgICAgICAgICAgIHNlbGYuX3N5c2xvZ19mYWNpbGl0eSA9IHYKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfdmVyc2lvbic6CiAgICAgICAgICAgICAgICBzZWxmLmFuc2libGVfdmVyc2lvbiA9IHYKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfbW9kdWxlX25hbWUnOgogICAgICAgICAgICAgICAgc2VsZi5fbmFtZSA9IHYKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfc29ja2V0JzoKICAgICAgICAgICAgICAgIHNlbGYuX3NvY2tldF9wYXRoID0gdgoKICAgICAgICAgICAgZWxpZiBjaGVja19pbnZhbGlkX2FyZ3VtZW50cyBhbmQgayBub3QgaW4gc2VsZi5fbGVnYWxfaW5wdXRzOgogICAgICAgICAgICAgICAgdW5zdXBwb3J0ZWRfcGFyYW1ldGVycy5hZGQoaykKCiAgICAgICAgICAgICNjbGVhbiB1cCBpbnRlcm5hbCBwYXJhbXM6CiAgICAgICAgICAgIGlmIGsuc3RhcnRzd2l0aCgnX2Fuc2libGVfJyk6CiAgICAgICAgICAgICAgICBkZWwgc2VsZi5wYXJhbXNba10KCiAgICAgICAgaWYgdW5zdXBwb3J0ZWRfcGFyYW1ldGVyczoKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJVbnN1cHBvcnRlZCBwYXJhbWV0ZXJzIGZvciAoJXMpIG1vZHVsZTogJXMuIFN1cHBvcnRlZCBwYXJhbWV0ZXJzIGluY2x1ZGU6ICVzIiAlIChzZWxmLl9uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcsJy5qb2luKHNvcnRlZChsaXN0KHVuc3VwcG9ydGVkX3BhcmFtZXRlcnMpKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJywnLmpvaW4oc29ydGVkKHNlbGYuYXJndW1lbnRfc3BlYy5rZXlzKCkpKSkpCiAgICAgICAgaWYgc2VsZi5jaGVja19tb2RlIGFuZCBub3Qgc2VsZi5zdXBwb3J0c19jaGVja19tb2RlOgogICAgICAgICAgICBzZWxmLmV4aXRfanNvbihza2lwcGVkPVRydWUsIG1zZz0icmVtb3RlIG1vZHVsZSAoJXMpIGRvZXMgbm90IHN1cHBvcnQgY2hlY2sgbW9kZSIgJSBzZWxmLl9uYW1lKQoKICAgIGRlZiBfY291bnRfdGVybXMoc2VsZiwgY2hlY2spOgogICAgICAgIGNvdW50ID0gMAogICAgICAgIGZvciB0ZXJtIGluIGNoZWNrOgogICAgICAgICAgICBpZiB0ZXJtIGluIHNlbGYucGFyYW1zOgogICAgICAgICAgICAgICAgY291bnQgKz0gMQogICAgICAgIHJldHVybiBjb3VudAoKICAgIGRlZiBfY2hlY2tfbXV0dWFsbHlfZXhjbHVzaXZlKHNlbGYsIHNwZWMpOgogICAgICAgIGlmIHNwZWMgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZm9yIGNoZWNrIGluIHNwZWM6CiAgICAgICAgICAgIGNvdW50ID0gc2VsZi5fY291bnRfdGVybXMoY2hlY2spCiAgICAgICAgICAgIGlmIGNvdW50ID4gMToKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0icGFyYW1ldGVycyBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlOiAlcyIgJSAoY2hlY2ssKSkKCiAgICBkZWYgX2NoZWNrX3JlcXVpcmVkX29uZV9vZihzZWxmLCBzcGVjKToKICAgICAgICBpZiBzcGVjIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGZvciBjaGVjayBpbiBzcGVjOgogICAgICAgICAgICBjb3VudCA9IHNlbGYuX2NvdW50X3Rlcm1zKGNoZWNrKQogICAgICAgICAgICBpZiBjb3VudCA9PSAwOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyByZXF1aXJlZDogJXMiICUgJywnLmpvaW4oY2hlY2spKQoKICAgIGRlZiBfY2hlY2tfcmVxdWlyZWRfdG9nZXRoZXIoc2VsZiwgc3BlYyk6CiAgICAgICAgaWYgc3BlYyBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4KICAgICAgICBmb3IgY2hlY2sgaW4gc3BlYzoKICAgICAgICAgICAgY291bnRzID0gWyBzZWxmLl9jb3VudF90ZXJtcyhbZmllbGRdKSBmb3IgZmllbGQgaW4gY2hlY2sgXQogICAgICAgICAgICBub25femVybyA9IFsgYyBmb3IgYyBpbiBjb3VudHMgaWYgYyA+IDAgXQogICAgICAgICAgICBpZiBsZW4obm9uX3plcm8pID4gMDoKICAgICAgICAgICAgICAgIGlmIDAgaW4gY291bnRzOgogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0icGFyYW1ldGVycyBhcmUgcmVxdWlyZWQgdG9nZXRoZXI6ICVzIiAlIChjaGVjaywpKQoKICAgIGRlZiBfY2hlY2tfcmVxdWlyZWRfYXJndW1lbnRzKHNlbGYsIHNwZWM9Tm9uZSwgcGFyYW09Tm9uZSApOgogICAgICAgICcnJyBlbnN1cmUgYWxsIHJlcXVpcmVkIGFyZ3VtZW50cyBhcmUgcHJlc2VudCAnJycKICAgICAgICBtaXNzaW5nID0gW10KICAgICAgICBpZiBzcGVjIGlzIE5vbmU6CiAgICAgICAgICAgIHNwZWMgPSBzZWxmLmFyZ3VtZW50X3NwZWMKICAgICAgICBpZiBwYXJhbSBpcyBOb25lOgogICAgICAgICAgICBwYXJhbSA9IHNlbGYucGFyYW1zCiAgICAgICAgZm9yIChrLHYpIGluIHNwZWMuaXRlbXMoKToKICAgICAgICAgICAgcmVxdWlyZWQgPSB2LmdldCgncmVxdWlyZWQnLCBGYWxzZSkKICAgICAgICAgICAgaWYgcmVxdWlyZWQgYW5kIGsgbm90IGluIHBhcmFtOgogICAgICAgICAgICAgICAgbWlzc2luZy5hcHBlbmQoaykKICAgICAgICBpZiBsZW4obWlzc2luZykgPiAwOgogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9Im1pc3NpbmcgcmVxdWlyZWQgYXJndW1lbnRzOiAlcyIgJSAiLCIuam9pbihtaXNzaW5nKSkKCiAgICBkZWYgX2NoZWNrX3JlcXVpcmVkX2lmKHNlbGYsIHNwZWMpOgogICAgICAgICcnJyBlbnN1cmUgdGhhdCBwYXJhbWV0ZXJzIHdoaWNoIGNvbmRpdGlvbmFsbHkgcmVxdWlyZWQgYXJlIHByZXNlbnQgJycnCiAgICAgICAgaWYgc3BlYyBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4KICAgICAgICBmb3Igc3AgaW4gc3BlYzoKICAgICAgICAgICAgbWlzc2luZyA9IFtdCiAgICAgICAgICAgIG1heF9taXNzaW5nX2NvdW50ID0gMAogICAgICAgICAgICBpc19vbmVfb2YgPSBGYWxzZQogICAgICAgICAgICBpZiBsZW4oc3ApID09IDQ6CiAgICAgICAgICAgICAgICBrZXksIHZhbCwgcmVxdWlyZW1lbnRzLCBpc19vbmVfb2YgPSBzcAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAga2V5LCB2YWwsIHJlcXVpcmVtZW50cyA9IHNwCgogICAgICAgICAgICAjIGlzX29uZV9vZiBpcyBUcnVlIGF0IGxlYXN0IG9uZSByZXF1aXJlbWVudCBzaG91bGQgYmUKICAgICAgICAgICAgIyBwcmVzZW50LCBlbHNlIGFsbCByZXF1aXJlbWVudHMgc2hvdWxkIGJlIHByZXNlbnQuCiAgICAgICAgICAgIGlmIGlzX29uZV9vZjoKICAgICAgICAgICAgICAgIG1heF9taXNzaW5nX2NvdW50ID0gbGVuKHJlcXVpcmVtZW50cykKCiAgICAgICAgICAgIGlmIGtleSBpbiBzZWxmLnBhcmFtcyBhbmQgc2VsZi5wYXJhbXNba2V5XSA9PSB2YWw6CiAgICAgICAgICAgICAgICBmb3IgY2hlY2sgaW4gcmVxdWlyZW1lbnRzOgogICAgICAgICAgICAgICAgICAgIGNvdW50ID0gc2VsZi5fY291bnRfdGVybXMoKGNoZWNrLCkpCiAgICAgICAgICAgICAgICAgICAgaWYgY291bnQgPT0gMDoKICAgICAgICAgICAgICAgICAgICAgICAgbWlzc2luZy5hcHBlbmQoY2hlY2spCiAgICAgICAgICAgIGlmIGxlbihtaXNzaW5nKSBhbmQgbGVuKG1pc3NpbmcpID49IG1heF9taXNzaW5nX2NvdW50OgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSIlcyBpcyAlcyBidXQgdGhlIGZvbGxvd2luZyBhcmUgbWlzc2luZzogJXMiICUgKGtleSwgdmFsLCAnLCcuam9pbihtaXNzaW5nKSkpCgogICAgZGVmIF9jaGVja19hcmd1bWVudF92YWx1ZXMoc2VsZiwgc3BlYz1Ob25lLCBwYXJhbT1Ob25lKToKICAgICAgICAnJycgZW5zdXJlIGFsbCBhcmd1bWVudHMgaGF2ZSB0aGUgcmVxdWVzdGVkIHZhbHVlcywgYW5kIHRoZXJlIGFyZSBubyBzdHJheSBhcmd1bWVudHMgJycnCiAgICAgICAgaWYgc3BlYyBpcyBOb25lOgogICAgICAgICAgICBzcGVjID0gc2VsZi5hcmd1bWVudF9zcGVjCiAgICAgICAgaWYgcGFyYW0gaXMgTm9uZToKICAgICAgICAgICAgcGFyYW0gPSBzZWxmLnBhcmFtcwogICAgICAgIGZvciAoayx2KSBpbiBzcGVjLml0ZW1zKCk6CiAgICAgICAgICAgIGNob2ljZXMgPSB2LmdldCgnY2hvaWNlcycsTm9uZSkKICAgICAgICAgICAgaWYgY2hvaWNlcyBpcyBOb25lOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShjaG9pY2VzLCBTRVFVRU5DRVRZUEUpIGFuZCBub3QgaXNpbnN0YW5jZShjaG9pY2VzLCAoYmluYXJ5X3R5cGUsIHRleHRfdHlwZSkpOgogICAgICAgICAgICAgICAgaWYgayBpbiBwYXJhbToKICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbVtrXSBub3QgaW4gY2hvaWNlczoKICAgICAgICAgICAgICAgICAgICAgICAgIyBQeVlhbWwgY29udmVydHMgY2VydGFpbiBzdHJpbmdzIHRvIGJvb2xzLiAgSWYgd2UgY2FuIHVuYW1iaWd1b3VzbHkgY29udmVydCBiYWNrLCBkbyBzbyBiZWZvcmUgY2hlY2tpbmcKICAgICAgICAgICAgICAgICAgICAgICAgIyB0aGUgdmFsdWUuICBJZiB3ZSBjYW4ndCBmaWd1cmUgdGhpcyBvdXQsIG1vZHVsZSBhdXRob3IgaXMgcmVzcG9uc2libGUuCiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyZWRfY2hvaWNlcyA9IE5vbmUKICAgICAgICAgICAgICAgICAgICAgICAgaWYgcGFyYW1ba10gPT0gJ0ZhbHNlJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyZWRfY2hvaWNlcyA9IF9sZW5pZW50X2xvd2VyY2FzZShjaG9pY2VzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRkFMU0VZID0gZnJvemVuc2V0KEJPT0xFQU5TX0ZBTFNFKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmxhcCA9IEZBTFNFWS5pbnRlcnNlY3Rpb24oY2hvaWNlcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbihvdmVybGFwKSA9PSAxOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgRXh0cmFjdCBmcm9tIGEgc2V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBhcmFtW2tdLCkgPSBvdmVybGFwCgogICAgICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbVtrXSA9PSAnVHJ1ZSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBsb3dlcmVkX2Nob2ljZXMgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb3dlcmVkX2Nob2ljZXMgPSBfbGVuaWVudF9sb3dlcmNhc2UoY2hvaWNlcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRSVVRIWSA9IGZyb3plbnNldChCT09MRUFOU19UUlVFKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmxhcCA9IFRSVVRIWS5pbnRlcnNlY3Rpb24oY2hvaWNlcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbihvdmVybGFwKSA9PSAxOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwYXJhbVtrXSwpID0gb3ZlcmxhcAoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgcGFyYW1ba10gbm90IGluIGNob2ljZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaG9pY2VzX3N0cj0iLCIuam9pbihbdG9fbmF0aXZlKGMpIGZvciBjIGluIGNob2ljZXNdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnPSJ2YWx1ZSBvZiAlcyBtdXN0IGJlIG9uZSBvZjogJXMsIGdvdDogJXMiICUgKGssIGNob2ljZXNfc3RyLCBwYXJhbVtrXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz1tc2cpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9ImludGVybmFsIGVycm9yOiBjaG9pY2VzIGZvciBhcmd1bWVudCAlcyBhcmUgbm90IGl0ZXJhYmxlOiAlcyIgJSAoaywgY2hvaWNlcykpCgogICAgZGVmIHNhZmVfZXZhbChzZWxmLCB2YWx1ZSwgbG9jYWxzPU5vbmUsIGluY2x1ZGVfZXhjZXB0aW9ucz1GYWxzZSk6CgogICAgICAgICMgZG8gbm90IGFsbG93IG1ldGhvZCBjYWxscyB0byBtb2R1bGVzCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UodmFsdWUsIHN0cmluZ190eXBlcyk6CiAgICAgICAgICAgICMgYWxyZWFkeSB0ZW1wbGF0ZWQgdG8gYSBkYXRhdmFsdWVzdHJ1Y3R1cmUsIHBlcmhhcHM/CiAgICAgICAgICAgIGlmIGluY2x1ZGVfZXhjZXB0aW9uczoKICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWUsIE5vbmUpCiAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgIGlmIHJlLnNlYXJjaChyJ1x3XC5cdytcKCcsIHZhbHVlKToKICAgICAgICAgICAgaWYgaW5jbHVkZV9leGNlcHRpb25zOgogICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSwgTm9uZSkKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCiAgICAgICAgIyBkbyBub3QgYWxsb3cgaW1wb3J0cwogICAgICAgIGlmIHJlLnNlYXJjaChyJ2ltcG9ydCBcdysnLCB2YWx1ZSk6CiAgICAgICAgICAgIGlmIGluY2x1ZGVfZXhjZXB0aW9uczoKICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWUsIE5vbmUpCiAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzdWx0ID0gbGl0ZXJhbF9ldmFsKHZhbHVlKQogICAgICAgICAgICBpZiBpbmNsdWRlX2V4Y2VwdGlvbnM6CiAgICAgICAgICAgICAgICByZXR1cm4gKHJlc3VsdCwgTm9uZSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgIGlmIGluY2x1ZGVfZXhjZXB0aW9uczoKICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWUsIGUpCiAgICAgICAgICAgIHJldHVybiB2YWx1ZQoKICAgIGRlZiBfY2hlY2tfdHlwZV9zdHIoc2VsZiwgdmFsdWUpOgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIHN0cmluZ190eXBlcyk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgICMgTm90ZTogVGhpcyBjb3VsZCB0aHJvdyBhIHVuaWNvZGUgZXJyb3IgaWYgdmFsdWUncyBfX3N0cl9fKCkgbWV0aG9kCiAgICAgICAgIyByZXR1cm5zIG5vbi1hc2NpaS4gIEhhdmUgdG8gcG9ydCB1dGlscy50b19ieXRlcygpIGlmIHRoYXQgaGFwcGVucwogICAgICAgIHJldHVybiBzdHIodmFsdWUpCgogICAgZGVmIF9jaGVja190eXBlX2xpc3Qoc2VsZiwgdmFsdWUpOgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIGxpc3QpOgogICAgICAgICAgICByZXR1cm4gdmFsdWUKCiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgc3RyaW5nX3R5cGVzKToKICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNwbGl0KCIsIikKICAgICAgICBlbGlmIGlzaW5zdGFuY2UodmFsdWUsIGludCkgb3IgaXNpbnN0YW5jZSh2YWx1ZSwgZmxvYXQpOgogICAgICAgICAgICByZXR1cm4gWyBzdHIodmFsdWUpIF0KCiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCclcyBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgbGlzdCcgJSB0eXBlKHZhbHVlKSkKCiAgICBkZWYgX2NoZWNrX3R5cGVfZGljdChzZWxmLCB2YWx1ZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgZGljdCk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQoKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICBpZiB2YWx1ZS5zdGFydHN3aXRoKCJ7Iik6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGpzb24ubG9hZHModmFsdWUpCiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdCwgZXhjKSA9IHNlbGYuc2FmZV9ldmFsKHZhbHVlLCBkaWN0KCksIGluY2x1ZGVfZXhjZXB0aW9ucz1UcnVlKQogICAgICAgICAgICAgICAgICAgIGlmIGV4YyBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCd1bmFibGUgdG8gZXZhbHVhdGUgc3RyaW5nIGFzIGRpY3Rpb25hcnknKQogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQKICAgICAgICAgICAgZWxpZiAnPScgaW4gdmFsdWU6CiAgICAgICAgICAgICAgICBmaWVsZHMgPSBbXQogICAgICAgICAgICAgICAgZmllbGRfYnVmZmVyID0gW10KICAgICAgICAgICAgICAgIGluX3F1b3RlID0gRmFsc2UKICAgICAgICAgICAgICAgIGluX2VzY2FwZSA9IEZhbHNlCiAgICAgICAgICAgICAgICBmb3IgYyBpbiB2YWx1ZS5zdHJpcCgpOgogICAgICAgICAgICAgICAgICAgIGlmIGluX2VzY2FwZToKICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfYnVmZmVyLmFwcGVuZChjKQogICAgICAgICAgICAgICAgICAgICAgICBpbl9lc2NhcGUgPSBGYWxzZQogICAgICAgICAgICAgICAgICAgIGVsaWYgYyA9PSAnXFwnOgogICAgICAgICAgICAgICAgICAgICAgICBpbl9lc2NhcGUgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgZWxpZiBub3QgaW5fcXVvdGUgYW5kIGMgaW4gKCdcJycsICciJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIGluX3F1b3RlID0gYwogICAgICAgICAgICAgICAgICAgIGVsaWYgaW5fcXVvdGUgYW5kIGluX3F1b3RlID09IGM6CiAgICAgICAgICAgICAgICAgICAgICAgIGluX3F1b3RlID0gRmFsc2UKICAgICAgICAgICAgICAgICAgICBlbGlmIG5vdCBpbl9xdW90ZSBhbmQgYyBpbiAoJywnLCAnICcpOgogICAgICAgICAgICAgICAgICAgICAgICBmaWVsZCA9ICcnLmpvaW4oZmllbGRfYnVmZmVyKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBmaWVsZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkcy5hcHBlbmQoZmllbGQpCiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkX2J1ZmZlciA9IFtdCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfYnVmZmVyLmFwcGVuZChjKQoKICAgICAgICAgICAgICAgIGZpZWxkID0gJycuam9pbihmaWVsZF9idWZmZXIpCiAgICAgICAgICAgICAgICBpZiBmaWVsZDoKICAgICAgICAgICAgICAgICAgICBmaWVsZHMuYXBwZW5kKGZpZWxkKQogICAgICAgICAgICAgICAgcmV0dXJuIGRpY3QoeC5zcGxpdCgiPSIsIDEpIGZvciB4IGluIGZpZWxkcykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigiZGljdGlvbmFyeSByZXF1ZXN0ZWQsIGNvdWxkIG5vdCBwYXJzZSBKU09OIG9yIGtleT12YWx1ZSIpCgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignJXMgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIGRpY3QnICUgdHlwZSh2YWx1ZSkpCgogICAgZGVmIF9jaGVja190eXBlX2Jvb2woc2VsZiwgdmFsdWUpOgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIGJvb2wpOgogICAgICAgICAgICByZXR1cm4gdmFsdWUKCiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgc3RyaW5nX3R5cGVzKSBvciBpc2luc3RhbmNlKHZhbHVlLCBpbnQpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5ib29sZWFuKHZhbHVlKQoKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYSBib29sJyAlIHR5cGUodmFsdWUpKQoKICAgIGRlZiBfY2hlY2tfdHlwZV9pbnQoc2VsZiwgdmFsdWUpOgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIGludCk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQoKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICByZXR1cm4gaW50KHZhbHVlKQoKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYW4gaW50JyAlIHR5cGUodmFsdWUpKQoKICAgIGRlZiBfY2hlY2tfdHlwZV9mbG9hdChzZWxmLCB2YWx1ZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgZmxvYXQpOgogICAgICAgICAgICByZXR1cm4gdmFsdWUKCiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgKGJpbmFyeV90eXBlLCB0ZXh0X3R5cGUsIGludCkpOgogICAgICAgICAgICByZXR1cm4gZmxvYXQodmFsdWUpCgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignJXMgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIGZsb2F0JyAlIHR5cGUodmFsdWUpKQoKICAgIGRlZiBfY2hlY2tfdHlwZV9wYXRoKHNlbGYsIHZhbHVlKToKICAgICAgICB2YWx1ZSA9IHNlbGYuX2NoZWNrX3R5cGVfc3RyKHZhbHVlKQogICAgICAgIHJldHVybiBvcy5wYXRoLmV4cGFuZHVzZXIob3MucGF0aC5leHBhbmR2YXJzKHZhbHVlKSkKCiAgICBkZWYgX2NoZWNrX3R5cGVfanNvbmFyZyhzZWxmLCB2YWx1ZSk6CiAgICAgICAgIyBSZXR1cm4gYSBqc29uaWZpZWQgc3RyaW5nLiAgU29tZXRpbWVzIHRoZSBjb250cm9sbGVyIHR1cm5zIGEganNvbgogICAgICAgICMgc3RyaW5nIGludG8gYSBkaWN0L2xpc3Qgc28gdHJhbnNmb3JtIGl0IGJhY2sgaW50byBqc29uIGhlcmUKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCAodGV4dF90eXBlLCBiaW5hcnlfdHlwZSkpOgogICAgICAgICAgICByZXR1cm4gdmFsdWUuc3RyaXAoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIChsaXN0LCB0dXBsZSwgZGljdCkpOgogICAgICAgICAgICAgICAgcmV0dXJuIGpzb24uZHVtcHModmFsdWUpCiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCclcyBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEganNvbiBzdHJpbmcnICUgdHlwZSh2YWx1ZSkpCgogICAgZGVmIF9jaGVja190eXBlX3JhdyhzZWxmLCB2YWx1ZSk6CiAgICAgICAgcmV0dXJuIHZhbHVlCgoKICAgIGRlZiBfY2hlY2tfdHlwZV9ieXRlcyhzZWxmLCB2YWx1ZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLmh1bWFuX3RvX2J5dGVzKHZhbHVlKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYSBCeXRlIHZhbHVlJyAlIHR5cGUodmFsdWUpKQoKCiAgICBkZWYgX2NoZWNrX3R5cGVfYml0cyhzZWxmLCB2YWx1ZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLmh1bWFuX3RvX2J5dGVzKHZhbHVlLCBpc2JpdHM9VHJ1ZSkKICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCclcyBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgQml0IHZhbHVlJyAlIHR5cGUodmFsdWUpKQoKICAgIGRlZiBfY2hlY2tfYXJndW1lbnRfdHlwZXMoc2VsZiwgc3BlYz1Ob25lLCBwYXJhbT1Ob25lKToKICAgICAgICAnJycgZW5zdXJlIGFsbCBhcmd1bWVudHMgaGF2ZSB0aGUgcmVxdWVzdGVkIHR5cGUgJycnCgogICAgICAgIGlmIHNwZWMgaXMgTm9uZToKICAgICAgICAgICAgc3BlYyA9IHNlbGYuYXJndW1lbnRfc3BlYwogICAgICAgIGlmIHBhcmFtIGlzIE5vbmU6CiAgICAgICAgICAgIHBhcmFtID0gc2VsZi5wYXJhbXMKCiAgICAgICAgZm9yIChrLCB2KSBpbiBzcGVjLml0ZW1zKCk6CiAgICAgICAgICAgIHdhbnRlZCA9IHYuZ2V0KCd0eXBlJywgTm9uZSkKICAgICAgICAgICAgaWYgayBub3QgaW4gcGFyYW06CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBpZiB3YW50ZWQgaXMgTm9uZToKICAgICAgICAgICAgICAgICMgTW9zdGx5IHdlIHdhbnQgdG8gZGVmYXVsdCB0byBzdHIuCiAgICAgICAgICAgICAgICAjIEZvciB2YWx1ZXMgc2V0IHRvIE5vbmUgZXhwbGljaXRseSwgcmV0dXJuIE5vbmUgaW5zdGVhZCBhcwogICAgICAgICAgICAgICAgIyB0aGF0IGFsbG93cyBhIHVzZXIgdG8gdW5zZXQgYSBwYXJhbWV0ZXIKICAgICAgICAgICAgICAgIGlmIHBhcmFtW2tdIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIHdhbnRlZCA9ICdzdHInCgogICAgICAgICAgICB2YWx1ZSA9IHBhcmFtW2tdCiAgICAgICAgICAgIGlmIHZhbHVlIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBjb250aW51ZQoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdHlwZV9jaGVja2VyID0gc2VsZi5fQ0hFQ0tfQVJHVU1FTlRfVFlQRVNfRElTUEFUQ0hFUlt3YW50ZWRdCiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0iaW1wbGVtZW50YXRpb24gZXJyb3I6IHVua25vd24gdHlwZSAlcyByZXF1ZXN0ZWQgZm9yICVzIiAlICh3YW50ZWQsIGspKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBwYXJhbVtrXSA9IHR5cGVfY2hlY2tlcih2YWx1ZSkKICAgICAgICAgICAgZXhjZXB0IChUeXBlRXJyb3IsIFZhbHVlRXJyb3IpOgogICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJhcmd1bWVudCAlcyBpcyBvZiB0eXBlICVzIGFuZCB3ZSB3ZXJlIHVuYWJsZSB0byBjb252ZXJ0IHRvICVzOiAlcyIgJSAoaywgdHlwZSh2YWx1ZSksIHdhbnRlZCwgZSkpCgogICAgICAgICAgICAjIGRlYWwgd2l0aCBzdWIgb3B0aW9ucyB0byBjcmVhdGUgc3ViIHNwZWMKICAgICAgICAgICAgc3BlYyA9IE5vbmUKICAgICAgICAgICAgaWYgd2FudGVkID09ICdkaWN0JyBvciAod2FudGVkID09ICdsaXN0JyBhbmQgdi5nZXQoJ2VsZW1lbnRzJywgJycpID09ICdkaWN0Jyk6CiAgICAgICAgICAgICAgICBzcGVjID0gdi5nZXQoJ29wdGlvbnMnLCBOb25lKQogICAgICAgICAgICAgICAgaWYgc3BlYzoKICAgICAgICAgICAgICAgICAgICBzZWxmLl9jaGVja19yZXF1aXJlZF9hcmd1bWVudHMoc3BlYywgcGFyYW1ba10pCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fY2hlY2tfYXJndW1lbnRfdHlwZXMoc3BlYywgcGFyYW1ba10pCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fY2hlY2tfYXJndW1lbnRfdmFsdWVzKHNwZWMsIHBhcmFtW2tdKQoKICAgIGRlZiBfc2V0X2RlZmF1bHRzKHNlbGYsIHByZT1UcnVlKToKICAgICAgICBmb3IgKGssdikgaW4gc2VsZi5hcmd1bWVudF9zcGVjLml0ZW1zKCk6CiAgICAgICAgICAgIGRlZmF1bHQgPSB2LmdldCgnZGVmYXVsdCcsIE5vbmUpCiAgICAgICAgICAgIGlmIHByZSBpcyBUcnVlOgogICAgICAgICAgICAgICAgIyB0aGlzIHByZXZlbnRzIHNldHRpbmcgZGVmYXVsdHMgb24gcmVxdWlyZWQgaXRlbXMKICAgICAgICAgICAgICAgIGlmIGRlZmF1bHQgaXMgbm90IE5vbmUgYW5kIGsgbm90IGluIHNlbGYucGFyYW1zOgogICAgICAgICAgICAgICAgICAgIHNlbGYucGFyYW1zW2tdID0gZGVmYXVsdAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBtYWtlIHN1cmUgdGhpbmdzIHdpdGhvdXQgYSBkZWZhdWx0IHN0aWxsIGdldCBzZXQgTm9uZQogICAgICAgICAgICAgICAgaWYgayBub3QgaW4gc2VsZi5wYXJhbXM6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5wYXJhbXNba10gPSBkZWZhdWx0CgogICAgZGVmIF9zZXRfZmFsbGJhY2tzKHNlbGYpOgogICAgICAgIGZvciBrLHYgaW4gc2VsZi5hcmd1bWVudF9zcGVjLml0ZW1zKCk6CiAgICAgICAgICAgIGZhbGxiYWNrID0gdi5nZXQoJ2ZhbGxiYWNrJywgKE5vbmUsKSkKICAgICAgICAgICAgZmFsbGJhY2tfc3RyYXRlZ3kgPSBmYWxsYmFja1swXQogICAgICAgICAgICBmYWxsYmFja19hcmdzID0gW10KICAgICAgICAgICAgZmFsbGJhY2tfa3dhcmdzID0ge30KICAgICAgICAgICAgaWYgayBub3QgaW4gc2VsZi5wYXJhbXMgYW5kIGZhbGxiYWNrX3N0cmF0ZWd5IGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgZm9yIGl0ZW0gaW4gZmFsbGJhY2tbMTpdOgogICAgICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoaXRlbSwgZGljdCk6CiAgICAgICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrX2t3YXJncyA9IGl0ZW0KICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBmYWxsYmFja19hcmdzID0gaXRlbQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHNlbGYucGFyYW1zW2tdID0gZmFsbGJhY2tfc3RyYXRlZ3koKmZhbGxiYWNrX2FyZ3MsICoqZmFsbGJhY2tfa3dhcmdzKQogICAgICAgICAgICAgICAgZXhjZXB0IEFuc2libGVGYWxsYmFja05vdEZvdW5kOgogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgZGVmIF9sb2FkX3BhcmFtcyhzZWxmKToKICAgICAgICAnJycgcmVhZCB0aGUgaW5wdXQgYW5kIHNldCB0aGUgcGFyYW1zIGF0dHJpYnV0ZS4KCiAgICAgICAgVGhpcyBtZXRob2QgaXMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiAgVGhlIGd1dHMgb2YgdGhlIGZ1bmN0aW9uCiAgICAgICAgd2VyZSBtb3ZlZCBvdXQgaW4gMi4xIHNvIHRoYXQgY3VzdG9tIG1vZHVsZXMgY291bGQgcmVhZCB0aGUgcGFyYW1ldGVycy4KICAgICAgICAnJycKICAgICAgICAjIGRlYnVnIG92ZXJyaWRlcyB0byByZWFkIGFyZ3MgZnJvbSBmaWxlIG9yIGNtZGxpbmUKICAgICAgICBzZWxmLnBhcmFtcyA9IF9sb2FkX3BhcmFtcygpCgogICAgZGVmIF9sb2dfdG9fc3lzbG9nKHNlbGYsIG1zZyk6CiAgICAgICAgaWYgSEFTX1NZU0xPRzoKICAgICAgICAgICAgbW9kdWxlID0gJ2Fuc2libGUtJXMnICUgc2VsZi5fbmFtZQogICAgICAgICAgICBmYWNpbGl0eSA9IGdldGF0dHIoc3lzbG9nLCBzZWxmLl9zeXNsb2dfZmFjaWxpdHksIHN5c2xvZy5MT0dfVVNFUikKICAgICAgICAgICAgc3lzbG9nLm9wZW5sb2coc3RyKG1vZHVsZSksIDAsIGZhY2lsaXR5KQogICAgICAgICAgICBzeXNsb2cuc3lzbG9nKHN5c2xvZy5MT0dfSU5GTywgbXNnKQoKICAgIGRlZiBkZWJ1ZyhzZWxmLCBtc2cpOgogICAgICAgIGlmIHNlbGYuX2RlYnVnOgogICAgICAgICAgICBzZWxmLmxvZygnW2RlYnVnXSAlcycgJSBtc2cpCgogICAgZGVmIGxvZyhzZWxmLCBtc2csIGxvZ19hcmdzPU5vbmUpOgoKICAgICAgICBpZiBub3Qgc2VsZi5ub19sb2c6CgogICAgICAgICAgICBpZiBsb2dfYXJncyBpcyBOb25lOgogICAgICAgICAgICAgICAgbG9nX2FyZ3MgPSBkaWN0KCkKCiAgICAgICAgICAgIG1vZHVsZSA9ICdhbnNpYmxlLSVzJyAlIHNlbGYuX25hbWUKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShtb2R1bGUsIGJpbmFyeV90eXBlKToKICAgICAgICAgICAgICAgIG1vZHVsZSA9IG1vZHVsZS5kZWNvZGUoJ3V0Zi04JywgJ3JlcGxhY2UnKQoKICAgICAgICAgICAgIyA2NjU1IC0gYWxsb3cgZm9yIGFjY2VudGVkIGNoYXJhY3RlcnMKICAgICAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UobXNnLCAoYmluYXJ5X3R5cGUsIHRleHRfdHlwZSkpOgogICAgICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJtc2cgc2hvdWxkIGJlIGEgc3RyaW5nIChnb3QgJXMpIiAlIHR5cGUobXNnKSkKCiAgICAgICAgICAgICMgV2Ugd2FudCBqb3VybmFsIHRvIGFsd2F5cyB0YWtlIHRleHQgdHlwZQogICAgICAgICAgICAjIHN5c2xvZyB0YWtlcyBieXRlcyBvbiBweTIsIHRleHQgdHlwZSBvbiBweTMKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShtc2csIGJpbmFyeV90eXBlKToKICAgICAgICAgICAgICAgIGpvdXJuYWxfbXNnID0gcmVtb3ZlX3ZhbHVlcyhtc2cuZGVjb2RlKCd1dGYtOCcsICdyZXBsYWNlJyksIHNlbGYubm9fbG9nX3ZhbHVlcykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgVE9ETzogc3Vycm9nYXRlZXNjYXBlIGlzIGEgZGFuZ2VyIGhlcmUgb24gUHkzCiAgICAgICAgICAgICAgICBqb3VybmFsX21zZyA9IHJlbW92ZV92YWx1ZXMobXNnLCBzZWxmLm5vX2xvZ192YWx1ZXMpCgogICAgICAgICAgICBpZiBQWTM6CiAgICAgICAgICAgICAgICBzeXNsb2dfbXNnID0gam91cm5hbF9tc2cKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHN5c2xvZ19tc2cgPSBqb3VybmFsX21zZy5lbmNvZGUoJ3V0Zi04JywgJ3JlcGxhY2UnKQoKICAgICAgICAgICAgaWYgaGFzX2pvdXJuYWw6CiAgICAgICAgICAgICAgICBqb3VybmFsX2FyZ3MgPSBbKCJNT0RVTEUiLCBvcy5wYXRoLmJhc2VuYW1lKF9fZmlsZV9fKSldCiAgICAgICAgICAgICAgICBmb3IgYXJnIGluIGxvZ19hcmdzOgogICAgICAgICAgICAgICAgICAgIGpvdXJuYWxfYXJncy5hcHBlbmQoKGFyZy51cHBlcigpLCBzdHIobG9nX2FyZ3NbYXJnXSkpKQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGpvdXJuYWwuc2VuZCh1IiVzICVzIiAlIChtb2R1bGUsIGpvdXJuYWxfbXNnKSwgKipkaWN0KGpvdXJuYWxfYXJncykpCiAgICAgICAgICAgICAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICAgICAgICAgICAgICAjIGZhbGwgYmFjayB0byBzeXNsb2cgc2luY2UgbG9nZ2luZyB0byBqb3VybmFsIGZhaWxlZAogICAgICAgICAgICAgICAgICAgIHNlbGYuX2xvZ190b19zeXNsb2coc3lzbG9nX21zZykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYuX2xvZ190b19zeXNsb2coc3lzbG9nX21zZykKCiAgICBkZWYgX2xvZ19pbnZvY2F0aW9uKHNlbGYpOgogICAgICAgICcnJyBsb2cgdGhhdCBhbnNpYmxlIHJhbiB0aGUgbW9kdWxlICcnJwogICAgICAgICMgVE9ETzogZ2VuZXJhbGl6ZSBhIHNlcGFyYXRlIGxvZyBmdW5jdGlvbiBhbmQgbWFrZSBsb2dfaW52b2NhdGlvbiB1c2UgaXQKICAgICAgICAjIFNhbml0aXplIHBvc3NpYmxlIHBhc3N3b3JkIGFyZ3VtZW50IHdoZW4gbG9nZ2luZy4KICAgICAgICBsb2dfYXJncyA9IGRpY3QoKQoKICAgICAgICBmb3IgcGFyYW0gaW4gc2VsZi5wYXJhbXM6CiAgICAgICAgICAgIGNhbm9uICA9IHNlbGYuYWxpYXNlcy5nZXQocGFyYW0sIHBhcmFtKQogICAgICAgICAgICBhcmdfb3B0cyA9IHNlbGYuYXJndW1lbnRfc3BlYy5nZXQoY2Fub24sIHt9KQogICAgICAgICAgICBub19sb2cgPSBhcmdfb3B0cy5nZXQoJ25vX2xvZycsIEZhbHNlKQoKICAgICAgICAgICAgaWYgc2VsZi5ib29sZWFuKG5vX2xvZyk6CiAgICAgICAgICAgICAgICBsb2dfYXJnc1twYXJhbV0gPSAnTk9UX0xPR0dJTkdfUEFSQU1FVEVSJwogICAgICAgICAgICAjIHRyeSB0byBjYXB0dXJlIGFsbCBwYXNzd29yZHMvcGFzc3BocmFzZSBuYW1lZCBmaWVsZHMgbWlzc2VkIGJ5IG5vX2xvZwogICAgICAgICAgICBlbGlmIFBBU1NXT1JEX01BVENILnNlYXJjaChwYXJhbSkgYW5kIFwKICAgICAgICAgICAgICBhcmdfb3B0cy5nZXQoJ3R5cGUnLCAnc3RyJykgIT0gJ2Jvb2wnIGFuZCBcCiAgICAgICAgICAgICAgbm90IGFyZ19vcHRzLmdldCgnY2hvaWNlcycsIEZhbHNlKToKICAgICAgICAgICAgICAgICMgc2tpcCBib29sZWFuIGFuZCBlbnVtcyBhcyB0aGV5IGFyZSBhYm91dCAncGFzc3dvcmQnIHN0YXRlCiAgICAgICAgICAgICAgICBsb2dfYXJnc1twYXJhbV0gPSAnTk9UX0xPR0dJTkdfUEFTU1dPUkQnCiAgICAgICAgICAgICAgICBzZWxmLndhcm4oJ01vZHVsZSBkaWQgbm90IHNldCBub19sb2cgZm9yICVzJyAlIHBhcmFtKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcGFyYW1fdmFsID0gc2VsZi5wYXJhbXNbcGFyYW1dCiAgICAgICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShwYXJhbV92YWwsICh0ZXh0X3R5cGUsIGJpbmFyeV90eXBlKSk6CiAgICAgICAgICAgICAgICAgICAgcGFyYW1fdmFsID0gc3RyKHBhcmFtX3ZhbCkKICAgICAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZShwYXJhbV92YWwsIHRleHRfdHlwZSk6CiAgICAgICAgICAgICAgICAgICAgcGFyYW1fdmFsID0gcGFyYW1fdmFsLmVuY29kZSgndXRmLTgnKQogICAgICAgICAgICAgICAgbG9nX2FyZ3NbcGFyYW1dID0gaGV1cmlzdGljX2xvZ19zYW5pdGl6ZShwYXJhbV92YWwsIHNlbGYubm9fbG9nX3ZhbHVlcykKCiAgICAgICAgbXNnID0gWyclcz0lcycgJSAodG9fbmF0aXZlKGFyZyksIHRvX25hdGl2ZSh2YWwpKSBmb3IgYXJnLCB2YWwgaW4gbG9nX2FyZ3MuaXRlbXMoKV0KICAgICAgICBpZiBtc2c6CiAgICAgICAgICAgIG1zZyA9ICdJbnZva2VkIHdpdGggJXMnICUgJyAnLmpvaW4obXNnKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG1zZyA9ICdJbnZva2VkJwoKICAgICAgICBzZWxmLmxvZyhtc2csIGxvZ19hcmdzPWxvZ19hcmdzKQoKCiAgICBkZWYgX3NldF9jd2Qoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBjd2QgPSBvcy5nZXRjd2QoKQogICAgICAgICAgICBpZiBub3Qgb3MuYWNjZXNzKGN3ZCwgb3MuRl9PS3xvcy5SX09LKToKICAgICAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbigpCiAgICAgICAgICAgIHJldHVybiBjd2QKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICMgd2UgZG9uJ3QgaGF2ZSBhY2Nlc3MgdG8gdGhlIGN3ZCwgcHJvYmFibHkgYmVjYXVzZSBvZiBzdWRvLgogICAgICAgICAgICAjIFRyeSBhbmQgbW92ZSB0byBhIG5ldXRyYWwgbG9jYXRpb24gdG8gcHJldmVudCBlcnJvcnMKICAgICAgICAgICAgZm9yIGN3ZCBpbiBbb3MucGF0aC5leHBhbmR2YXJzKCckSE9NRScpLCB0ZW1wZmlsZS5nZXR0ZW1wZGlyKCldOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGlmIG9zLmFjY2Vzcyhjd2QsIG9zLkZfT0t8b3MuUl9PSyk6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLmNoZGlyKGN3ZCkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN3ZAogICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAjIHdlIHdvbid0IGVycm9yIGhlcmUsIGFzIGl0IG1heSAqbm90KiBiZSBhIHByb2JsZW0sCiAgICAgICAgIyBhbmQgd2UgZG9uJ3Qgd2FudCB0byBicmVhayBtb2R1bGVzIHVubmVjZXNzYXJpbHkKICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiBnZXRfYmluX3BhdGgoc2VsZiwgYXJnLCByZXF1aXJlZD1GYWxzZSwgb3B0X2RpcnM9W10pOgogICAgICAgICcnJwogICAgICAgIGZpbmQgc3lzdGVtIGV4ZWN1dGFibGUgaW4gUEFUSC4KICAgICAgICBPcHRpb25hbCBhcmd1bWVudHM6CiAgICAgICAgICAgLSByZXF1aXJlZDogIGlmIGV4ZWN1dGFibGUgaXMgbm90IGZvdW5kIGFuZCByZXF1aXJlZCBpcyB0cnVlLCBmYWlsX2pzb24KICAgICAgICAgICAtIG9wdF9kaXJzOiAgb3B0aW9uYWwgbGlzdCBvZiBkaXJlY3RvcmllcyB0byBzZWFyY2ggaW4gYWRkaXRpb24gdG8gUEFUSAogICAgICAgIGlmIGZvdW5kIHJldHVybiBmdWxsIHBhdGg7IG90aGVyd2lzZSByZXR1cm4gTm9uZQogICAgICAgICcnJwogICAgICAgIHNiaW5fcGF0aHMgPSBbJy9zYmluJywgJy91c3Ivc2JpbicsICcvdXNyL2xvY2FsL3NiaW4nXQogICAgICAgIHBhdGhzID0gW10KICAgICAgICBmb3IgZCBpbiBvcHRfZGlyczoKICAgICAgICAgICAgaWYgZCBpcyBub3QgTm9uZSBhbmQgb3MucGF0aC5leGlzdHMoZCk6CiAgICAgICAgICAgICAgICBwYXRocy5hcHBlbmQoZCkKICAgICAgICBwYXRocyArPSBvcy5lbnZpcm9uLmdldCgnUEFUSCcsICcnKS5zcGxpdChvcy5wYXRoc2VwKQogICAgICAgIGJpbl9wYXRoID0gTm9uZQogICAgICAgICMgbWFuZ2xlIFBBVEggdG8gaW5jbHVkZSAvc2JpbiBkaXJzCiAgICAgICAgZm9yIHAgaW4gc2Jpbl9wYXRoczoKICAgICAgICAgICAgaWYgcCBub3QgaW4gcGF0aHMgYW5kIG9zLnBhdGguZXhpc3RzKHApOgogICAgICAgICAgICAgICAgcGF0aHMuYXBwZW5kKHApCiAgICAgICAgZm9yIGQgaW4gcGF0aHM6CiAgICAgICAgICAgIGlmIG5vdCBkOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgcGF0aCA9IG9zLnBhdGguam9pbihkLCBhcmcpCiAgICAgICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKHBhdGgpIGFuZCBub3Qgb3MucGF0aC5pc2RpcihwYXRoKSBhbmQgaXNfZXhlY3V0YWJsZShwYXRoKToKICAgICAgICAgICAgICAgIGJpbl9wYXRoID0gcGF0aAogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICBpZiByZXF1aXJlZCBhbmQgYmluX3BhdGggaXMgTm9uZToKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdGYWlsZWQgdG8gZmluZCByZXF1aXJlZCBleGVjdXRhYmxlICVzIGluIHBhdGhzOiAlcycgJSAoYXJnLCBvcy5wYXRoc2VwLmpvaW4ocGF0aHMpKSkKICAgICAgICByZXR1cm4gYmluX3BhdGgKCiAgICBkZWYgYm9vbGVhbihzZWxmLCBhcmcpOgogICAgICAgICcnJyByZXR1cm4gYSBib29sIGZvciB0aGUgYXJnICcnJwogICAgICAgIGlmIGFyZyBpcyBOb25lIG9yIGlzaW5zdGFuY2UoYXJnLCBib29sKToKICAgICAgICAgICAgcmV0dXJuIGFyZwogICAgICAgIGlmIGlzaW5zdGFuY2UoYXJnLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICBhcmcgPSBhcmcubG93ZXIoKQogICAgICAgIGlmIGFyZyBpbiBCT09MRUFOU19UUlVFOgogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGVsaWYgYXJnIGluIEJPT0xFQU5TX0ZBTFNFOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9JyVzIGlzIG5vdCBhIHZhbGlkIGJvb2xlYW4uIFZhbGlkIGJvb2xlYW5zIGluY2x1ZGU6ICVzJyAlICh0b190ZXh0KGFyZyksICcsJy5qb2luKFsnJXMnICUgeCBmb3IgeCBpbiBCT09MRUFOU10pKSkKCiAgICBkZWYganNvbmlmeShzZWxmLCBkYXRhKToKICAgICAgICBmb3IgZW5jb2RpbmcgaW4gKCJ1dGYtOCIsICJsYXRpbi0xIik6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHJldHVybiBqc29uLmR1bXBzKGRhdGEsIGVuY29kaW5nPWVuY29kaW5nKQogICAgICAgICAgICAjIE9sZCBzeXN0ZW1zIHVzaW5nIG9sZCBzaW1wbGVqc29uIG1vZHVsZSBkb2VzIG5vdCBzdXBwb3J0IGVuY29kaW5nIGtleXdvcmQuCiAgICAgICAgICAgIGV4Y2VwdCBUeXBlRXJyb3I6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgbmV3X2RhdGEgPSBqc29uX2RpY3RfYnl0ZXNfdG9fdW5pY29kZShkYXRhLCBlbmNvZGluZz1lbmNvZGluZykKICAgICAgICAgICAgICAgIGV4Y2VwdCBVbmljb2RlRGVjb2RlRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIHJldHVybiBqc29uLmR1bXBzKG5ld19kYXRhKQogICAgICAgICAgICBleGNlcHQgVW5pY29kZURlY29kZUVycm9yOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9J0ludmFsaWQgdW5pY29kZSBlbmNvZGluZyBlbmNvdW50ZXJlZCcpCgogICAgZGVmIGZyb21fanNvbihzZWxmLCBkYXRhKToKICAgICAgICByZXR1cm4ganNvbi5sb2FkcyhkYXRhKQoKICAgIGRlZiBhZGRfY2xlYW51cF9maWxlKHNlbGYsIHBhdGgpOgogICAgICAgIGlmIHBhdGggbm90IGluIHNlbGYuY2xlYW51cF9maWxlczoKICAgICAgICAgICAgc2VsZi5jbGVhbnVwX2ZpbGVzLmFwcGVuZChwYXRoKQoKICAgIGRlZiBkb19jbGVhbnVwX2ZpbGVzKHNlbGYpOgogICAgICAgIGZvciBwYXRoIGluIHNlbGYuY2xlYW51cF9maWxlczoKICAgICAgICAgICAgc2VsZi5jbGVhbnVwKHBhdGgpCgogICAgZGVmIF9yZXR1cm5fZm9ybWF0dGVkKHNlbGYsIGt3YXJncyk6CgogICAgICAgIHNlbGYuYWRkX3BhdGhfaW5mbyhrd2FyZ3MpCgogICAgICAgIGlmICdpbnZvY2F0aW9uJyBub3QgaW4ga3dhcmdzOgogICAgICAgICAgICBrd2FyZ3NbJ2ludm9jYXRpb24nXSA9IHsnbW9kdWxlX2FyZ3MnOiBzZWxmLnBhcmFtc30KCiAgICAgICAgaWYgJ3dhcm5pbmdzJyBpbiBrd2FyZ3M6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoa3dhcmdzWyd3YXJuaW5ncyddLCBsaXN0KToKICAgICAgICAgICAgICAgIGZvciB3IGluIGt3YXJnc1snd2FybmluZ3MnXToKICAgICAgICAgICAgICAgICAgICBzZWxmLndhcm4odykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYud2Fybihrd2FyZ3NbJ3dhcm5pbmdzJ10pCgogICAgICAgIGlmIHNlbGYuX3dhcm5pbmdzOgogICAgICAgICAgICBrd2FyZ3NbJ3dhcm5pbmdzJ10gPSBzZWxmLl93YXJuaW5ncwoKICAgICAgICBpZiAnZGVwcmVjYXRpb25zJyBpbiBrd2FyZ3M6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoa3dhcmdzWydkZXByZWNhdGlvbnMnXSwgbGlzdCk6CiAgICAgICAgICAgICAgICBmb3IgZCBpbiBrd2FyZ3NbJ2RlcHJlY2F0aW9ucyddOgogICAgICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoZCwgU0VRVUVOQ0VUWVBFKSBhbmQgbGVuKGQpID09IDI6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGVwcmVjYXRlKGRbMF0sIHZlcnNpb249ZFsxXSkKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRlcHJlY2F0ZShkKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5kZXByZWNhdGUoa3dhcmdzWydkZXByZWNhdGlvbnMnXSkKCiAgICAgICAgaWYgc2VsZi5fZGVwcmVjYXRpb25zOgogICAgICAgICAgICBrd2FyZ3NbJ2RlcHJlY2F0aW9ucyddID0gc2VsZi5fZGVwcmVjYXRpb25zCgogICAgICAgIGt3YXJncyA9IHJlbW92ZV92YWx1ZXMoa3dhcmdzLCBzZWxmLm5vX2xvZ192YWx1ZXMpCiAgICAgICAgcHJpbnQoJ1xuJXMnICUgc2VsZi5qc29uaWZ5KGt3YXJncykpCgogICAgZGVmIGV4aXRfanNvbihzZWxmLCAqKmt3YXJncyk6CiAgICAgICAgJycnIHJldHVybiBmcm9tIHRoZSBtb2R1bGUsIHdpdGhvdXQgZXJyb3IgJycnCgogICAgICAgIGlmIG5vdCAnY2hhbmdlZCcgaW4ga3dhcmdzOgogICAgICAgICAgICBrd2FyZ3NbJ2NoYW5nZWQnXSA9IEZhbHNlCgogICAgICAgIHNlbGYuZG9fY2xlYW51cF9maWxlcygpCiAgICAgICAgc2VsZi5fcmV0dXJuX2Zvcm1hdHRlZChrd2FyZ3MpCiAgICAgICAgc3lzLmV4aXQoMCkKCiAgICBkZWYgZmFpbF9qc29uKHNlbGYsICoqa3dhcmdzKToKICAgICAgICAnJycgcmV0dXJuIGZyb20gdGhlIG1vZHVsZSwgd2l0aCBhbiBlcnJvciBtZXNzYWdlICcnJwoKICAgICAgICBhc3NlcnQgJ21zZycgaW4ga3dhcmdzLCAiaW1wbGVtZW50YXRpb24gZXJyb3IgLS0gbXNnIHRvIGV4cGxhaW4gdGhlIGVycm9yIGlzIHJlcXVpcmVkIgogICAgICAgIGt3YXJnc1snZmFpbGVkJ10gPSBUcnVlCgogICAgICAgIGlmIG5vdCAnY2hhbmdlZCcgaW4ga3dhcmdzOgogICAgICAgICAgICBrd2FyZ3NbJ2NoYW5nZWQnXSA9IEZhbHNlCgogICAgICAgIHNlbGYuZG9fY2xlYW51cF9maWxlcygpCiAgICAgICAgc2VsZi5fcmV0dXJuX2Zvcm1hdHRlZChrd2FyZ3MpCiAgICAgICAgc3lzLmV4aXQoMSkKCiAgICBkZWYgZmFpbF9vbl9taXNzaW5nX3BhcmFtcyhzZWxmLCByZXF1aXJlZF9wYXJhbXM9Tm9uZSk6CiAgICAgICAgJycnIFRoaXMgaXMgZm9yIGNoZWNraW5nIGZvciByZXF1aXJlZCBwYXJhbXMgd2hlbiB3ZSBjYW4gbm90IGNoZWNrIHZpYSBhcmdzcGVjIGJlY2F1c2Ugd2UKICAgICAgICBuZWVkIG1vcmUgaW5mb3JtYXRpb24gdGhhbiBpcyBzaW1wbHkgZ2l2ZW4gaW4gdGhlIGFyZ3NwZWMuCiAgICAgICAgJycnCiAgICAgICAgaWYgbm90IHJlcXVpcmVkX3BhcmFtczoKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgbWlzc2luZ19wYXJhbXMgPSBbXQogICAgICAgIGZvciByZXF1aXJlZF9wYXJhbSBpbiByZXF1aXJlZF9wYXJhbXM6CiAgICAgICAgICAgIGlmIG5vdCBzZWxmLnBhcmFtcy5nZXQocmVxdWlyZWRfcGFyYW0pOgogICAgICAgICAgICAgICAgbWlzc2luZ19wYXJhbXMuYXBwZW5kKHJlcXVpcmVkX3BhcmFtKQogICAgICAgIGlmIG1pc3NpbmdfcGFyYW1zOgogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9Im1pc3NpbmcgcmVxdWlyZWQgYXJndW1lbnRzOiAlcyIgJSAnLCcuam9pbihtaXNzaW5nX3BhcmFtcykpCgogICAgZGVmIGRpZ2VzdF9mcm9tX2ZpbGUoc2VsZiwgZmlsZW5hbWUsIGFsZ29yaXRobSk6CiAgICAgICAgJycnIFJldHVybiBoZXggZGlnZXN0IG9mIGxvY2FsIGZpbGUgZm9yIGEgZGlnZXN0X21ldGhvZCBzcGVjaWZpZWQgYnkgbmFtZSwgb3IgTm9uZSBpZiBmaWxlIGlzIG5vdCBwcmVzZW50LiAnJycKICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoZmlsZW5hbWUpOgogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIGlmIG9zLnBhdGguaXNkaXIoZmlsZW5hbWUpOgogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9ImF0dGVtcHRlZCB0byB0YWtlIGNoZWNrc3VtIG9mIGRpcmVjdG9yeTogJXMiICUgZmlsZW5hbWUpCgogICAgICAgICMgcHJlc2VydmUgb2xkIGJlaGF2aW91ciB3aGVyZSB0aGUgdGhpcmQgcGFyYW1ldGVyIHdhcyBhIGhhc2ggYWxnb3JpdGhtIG9iamVjdAogICAgICAgIGlmIGhhc2F0dHIoYWxnb3JpdGhtLCAnaGV4ZGlnZXN0Jyk6CiAgICAgICAgICAgIGRpZ2VzdF9tZXRob2QgPSBhbGdvcml0aG0KICAgICAgICBlbHNlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBkaWdlc3RfbWV0aG9kID0gQVZBSUxBQkxFX0hBU0hfQUxHT1JJVEhNU1thbGdvcml0aG1dKCkKICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJDb3VsZCBub3QgaGFzaCBmaWxlICclcycgd2l0aCBhbGdvcml0aG0gJyVzJy4gQXZhaWxhYmxlIGFsZ29yaXRobXM6ICVzIiAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZpbGVuYW1lLCBhbGdvcml0aG0sICcsICcuam9pbihBVkFJTEFCTEVfSEFTSF9BTEdPUklUSE1TKSkpCgogICAgICAgIGJsb2Nrc2l6ZSA9IDY0ICogMTAyNAogICAgICAgIGluZmlsZSA9IG9wZW4ob3MucGF0aC5yZWFscGF0aChmaWxlbmFtZSksICdyYicpCiAgICAgICAgYmxvY2sgPSBpbmZpbGUucmVhZChibG9ja3NpemUpCiAgICAgICAgd2hpbGUgYmxvY2s6CiAgICAgICAgICAgIGRpZ2VzdF9tZXRob2QudXBkYXRlKGJsb2NrKQogICAgICAgICAgICBibG9jayA9IGluZmlsZS5yZWFkKGJsb2Nrc2l6ZSkKICAgICAgICBpbmZpbGUuY2xvc2UoKQogICAgICAgIHJldHVybiBkaWdlc3RfbWV0aG9kLmhleGRpZ2VzdCgpCgogICAgZGVmIG1kNShzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgJycnIFJldHVybiBNRDUgaGV4IGRpZ2VzdCBvZiBsb2NhbCBmaWxlIHVzaW5nIGRpZ2VzdF9mcm9tX2ZpbGUoKS4KCiAgICAgICAgRG8gbm90IHVzZSB0aGlzIGZ1bmN0aW9uIHVubGVzcyB5b3UgaGF2ZSBubyBvdGhlciBjaG9pY2UgZm9yOgogICAgICAgICAgICAxKSBPcHRpb25hbCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQogICAgICAgICAgICAyKSBDb21wYXRpYmlsaXR5IHdpdGggYSB0aGlyZCBwYXJ0eSBwcm90b2NvbAoKICAgICAgICBUaGlzIGZ1bmN0aW9uIHdpbGwgbm90IHdvcmsgb24gc3lzdGVtcyBjb21wbHlpbmcgd2l0aCBGSVBTLTE0MC0yLgoKICAgICAgICBNb3N0IHVzZXMgb2YgdGhpcyBmdW5jdGlvbiBjYW4gdXNlIHRoZSBtb2R1bGUuc2hhMSBmdW5jdGlvbiBpbnN0ZWFkLgogICAgICAgICcnJwogICAgICAgIGlmICdtZDUnIG5vdCBpbiBBVkFJTEFCTEVfSEFTSF9BTEdPUklUSE1TOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdNRDUgbm90IGF2YWlsYWJsZS4gIFBvc3NpYmx5IHJ1bm5pbmcgaW4gRklQUyBtb2RlJykKICAgICAgICByZXR1cm4gc2VsZi5kaWdlc3RfZnJvbV9maWxlKGZpbGVuYW1lLCAnbWQ1JykKCiAgICBkZWYgc2hhMShzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgJycnIFJldHVybiBTSEExIGhleCBkaWdlc3Qgb2YgbG9jYWwgZmlsZSB1c2luZyBkaWdlc3RfZnJvbV9maWxlKCkuICcnJwogICAgICAgIHJldHVybiBzZWxmLmRpZ2VzdF9mcm9tX2ZpbGUoZmlsZW5hbWUsICdzaGExJykKCiAgICBkZWYgc2hhMjU2KHNlbGYsIGZpbGVuYW1lKToKICAgICAgICAnJycgUmV0dXJuIFNIQS0yNTYgaGV4IGRpZ2VzdCBvZiBsb2NhbCBmaWxlIHVzaW5nIGRpZ2VzdF9mcm9tX2ZpbGUoKS4gJycnCiAgICAgICAgcmV0dXJuIHNlbGYuZGlnZXN0X2Zyb21fZmlsZShmaWxlbmFtZSwgJ3NoYTI1NicpCgogICAgZGVmIGJhY2t1cF9sb2NhbChzZWxmLCBmbik6CiAgICAgICAgJycnbWFrZSBhIGRhdGUtbWFya2VkIGJhY2t1cCBvZiB0aGUgc3BlY2lmaWVkIGZpbGUsIHJldHVybiBUcnVlIG9yIEZhbHNlIG9uIHN1Y2Nlc3Mgb3IgZmFpbHVyZScnJwoKICAgICAgICBiYWNrdXBkZXN0ID0gJycKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhmbik6CiAgICAgICAgICAgICMgYmFja3VwcyBuYW1lZCBiYXNlbmFtZS5QSUQuWVlZWS1NTS1EREBISDpNTTpTU34KICAgICAgICAgICAgZXh0ID0gdGltZS5zdHJmdGltZSgiJVktJW0tJWRAJUg6JU06JVN+IiwgdGltZS5sb2NhbHRpbWUodGltZS50aW1lKCkpKQogICAgICAgICAgICBiYWNrdXBkZXN0ID0gJyVzLiVzLiVzJyAlIChmbiwgb3MuZ2V0cGlkKCksIGV4dCkKCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNodXRpbC5jb3B5MihmbiwgYmFja3VwZGVzdCkKICAgICAgICAgICAgZXhjZXB0IChzaHV0aWwuRXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdDb3VsZCBub3QgbWFrZSBiYWNrdXAgb2YgJXMgdG8gJXM6ICVzJyAlIChmbiwgYmFja3VwZGVzdCwgZSkpCgogICAgICAgIHJldHVybiBiYWNrdXBkZXN0CgogICAgZGVmIGNsZWFudXAoc2VsZiwgdG1wZmlsZSk6CiAgICAgICAgaWYgb3MucGF0aC5leGlzdHModG1wZmlsZSk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG9zLnVubGluayh0bXBmaWxlKQogICAgICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgIHN5cy5zdGRlcnIud3JpdGUoImNvdWxkIG5vdCBjbGVhbnVwICVzOiAlcyIgJSAodG1wZmlsZSwgZSkpCgogICAgZGVmIGF0b21pY19tb3ZlKHNlbGYsIHNyYywgZGVzdCwgdW5zYWZlX3dyaXRlcz1GYWxzZSk6CiAgICAgICAgJycnYXRvbWljYWxseSBtb3ZlIHNyYyB0byBkZXN0LCBjb3B5aW5nIGF0dHJpYnV0ZXMgZnJvbSBkZXN0LCByZXR1cm5zIHRydWUgb24gc3VjY2VzcwogICAgICAgIGl0IHVzZXMgb3MucmVuYW1lIHRvIGVuc3VyZSB0aGlzIGFzIGl0IGlzIGFuIGF0b21pYyBvcGVyYXRpb24sIHJlc3Qgb2YgdGhlIGZ1bmN0aW9uIGlzCiAgICAgICAgdG8gd29yayBhcm91bmQgbGltaXRhdGlvbnMsIGNvcm5lciBjYXNlcyBhbmQgZW5zdXJlIHNlbGludXggY29udGV4dCBpcyBzYXZlZCBpZiBwb3NzaWJsZScnJwogICAgICAgIGNvbnRleHQgPSBOb25lCiAgICAgICAgZGVzdF9zdGF0ID0gTm9uZQogICAgICAgIGJfc3JjID0gdG9fYnl0ZXMoc3JjLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQogICAgICAgIGJfZGVzdCA9IHRvX2J5dGVzKGRlc3QsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMoYl9kZXN0KToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZGVzdF9zdGF0ID0gb3Muc3RhdChiX2Rlc3QpCgogICAgICAgICAgICAgICAgIyBjb3B5IG1vZGUgYW5kIG93bmVyc2hpcAogICAgICAgICAgICAgICAgb3MuY2htb2QoYl9zcmMsIGRlc3Rfc3RhdC5zdF9tb2RlICYgUEVSTV9CSVRTKQogICAgICAgICAgICAgICAgb3MuY2hvd24oYl9zcmMsIGRlc3Rfc3RhdC5zdF91aWQsIGRlc3Rfc3RhdC5zdF9naWQpCgogICAgICAgICAgICAgICAgIyB0cnkgdG8gY29weSBmbGFncyBpZiBwb3NzaWJsZQogICAgICAgICAgICAgICAgaWYgaGFzYXR0cihvcywgJ2NoZmxhZ3MnKSBhbmQgaGFzYXR0cihkZXN0X3N0YXQsICdzdF9mbGFncycpOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgb3MuY2hmbGFncyhiX3NyYywgZGVzdF9zdGF0LnN0X2ZsYWdzKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBlcnIgaW4gJ0VPUE5PVFNVUFAnLCAnRU5PVFNVUCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBoYXNhdHRyKGVycm5vLCBlcnIpIGFuZCBlLmVycm5vID09IGdldGF0dHIoZXJybm8sIGVycik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgaWYgZS5lcnJubyAhPSBlcnJuby5FUEVSTToKICAgICAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICBpZiBzZWxmLnNlbGludXhfZW5hYmxlZCgpOgogICAgICAgICAgICAgICAgY29udGV4dCA9IHNlbGYuc2VsaW51eF9jb250ZXh0KGRlc3QpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgICAgIGNvbnRleHQgPSBzZWxmLnNlbGludXhfZGVmYXVsdF9jb250ZXh0KGRlc3QpCgogICAgICAgIGNyZWF0aW5nID0gbm90IG9zLnBhdGguZXhpc3RzKGJfZGVzdCkKCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIE9wdGltaXN0aWNhbGx5IHRyeSBhIHJlbmFtZSwgc29sdmVzIHNvbWUgY29ybmVyIGNhc2VzIGFuZCBjYW4gYXZvaWQgdXNlbGVzcyB3b3JrLCB0aHJvd3MgZXhjZXB0aW9uIGlmIG5vdCBhdG9taWMuCiAgICAgICAgICAgIG9zLnJlbmFtZShiX3NyYywgYl9kZXN0KQogICAgICAgIGV4Y2VwdCAoSU9FcnJvciwgT1NFcnJvcik6CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgaWYgZS5lcnJubyBub3QgaW4gW2Vycm5vLkVQRVJNLCBlcnJuby5FWERFViwgZXJybm8uRUFDQ0VTLCBlcnJuby5FVFhUQlNZLCBlcnJuby5FQlVTWV06CiAgICAgICAgICAgICAgICAjIG9ubHkgdHJ5IHdvcmthcm91bmRzIGZvciBlcnJubyAxOCAoY3Jvc3MgZGV2aWNlKSwgMSAobm90IHBlcm1pdHRlZCksICAxMyAocGVybWlzc2lvbiBkZW5pZWQpCiAgICAgICAgICAgICAgICAjIGFuZCAyNiAodGV4dCBmaWxlIGJ1c3kpIHdoaWNoIGhhcHBlbnMgb24gdmFncmFudCBzeW5jZWQgZm9sZGVycyBhbmQgb3RoZXIgJ2V4b3RpYycgbm9uIHBvc2l4IGZpbGUgc3lzdGVtcwogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdDb3VsZCBub3QgcmVwbGFjZSBmaWxlOiAlcyB0byAlczogJXMnICUgKHNyYywgZGVzdCwgZSksIGV4Y2VwdGlvbj10cmFjZWJhY2suZm9ybWF0X2V4YygpKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgYl9kZXN0X2RpciA9IG9zLnBhdGguZGlybmFtZShiX2Rlc3QpCiAgICAgICAgICAgICAgICAjIFVzZSBieXRlcyBoZXJlLiAgSW4gdGhlIHNoaXBwYWJsZSBDSSwgdGhpcyBmYWlscyB3aXRoCiAgICAgICAgICAgICAgICAjIGEgVW5pY29kZUVycm9yIHdpdGggc3Vycm9nYXRlZXNjYXBlJ2Qgc3RyaW5ncyBmb3IgYW4gdW5rbm93bgogICAgICAgICAgICAgICAgIyByZWFzb24gKGRvZXNuJ3QgaGFwcGVuIGluIGEgbG9jYWwgVWJ1bnR1MTYuMDQgVk0pCiAgICAgICAgICAgICAgICBuYXRpdmVfZGVzdF9kaXIgPSBiX2Rlc3RfZGlyCiAgICAgICAgICAgICAgICBuYXRpdmVfc3VmZml4ID0gb3MucGF0aC5iYXNlbmFtZShiX2Rlc3QpCiAgICAgICAgICAgICAgICBuYXRpdmVfcHJlZml4ID0gYignLmFuc2libGVfdG1wJykKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICB0bXBfZGVzdF9mZCwgdG1wX2Rlc3RfbmFtZSA9IHRlbXBmaWxlLm1rc3RlbXAoIHByZWZpeD1uYXRpdmVfcHJlZml4LCBkaXI9bmF0aXZlX2Rlc3RfZGlyLCBzdWZmaXg9bmF0aXZlX3N1ZmZpeCkKICAgICAgICAgICAgICAgIGV4Y2VwdCAoT1NFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0nVGhlIGRlc3RpbmF0aW9uIGRpcmVjdG9yeSAoJXMpIGlzIG5vdCB3cml0YWJsZSBieSB0aGUgY3VycmVudCB1c2VyLiBFcnJvciB3YXM6ICVzJyAlIChvcy5wYXRoLmRpcm5hbWUoZGVzdCksIGUpKQogICAgICAgICAgICAgICAgZXhjZXB0IFR5cGVFcnJvcjoKICAgICAgICAgICAgICAgICAgICAjIFdlIGV4cGVjdCB0aGF0IHRoaXMgaXMgaGFwcGVuaW5nIGJlY2F1c2UgcHl0aG9uMy40LnggYW5kCiAgICAgICAgICAgICAgICAgICAgIyBiZWxvdyBjYW4ndCBoYW5kbGUgYnl0ZSBzdHJpbmdzIGluIG1rc3RlbXAoKS4gIFRyYWNlYmFjawogICAgICAgICAgICAgICAgICAgICMgd291bGQgZW5kIGluIHNvbWV0aGluZyBsaWtlOgogICAgICAgICAgICAgICAgICAgICMgICAgIGZpbGUgPSBfb3MucGF0aC5qb2luKGRpciwgcHJlICsgbmFtZSArIHN1ZikKICAgICAgICAgICAgICAgICAgICAjIFR5cGVFcnJvcjogY2FuJ3QgY29uY2F0IGJ5dGVzIHRvIHN0cgogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0nRmFpbGVkIGNyZWF0aW5nIHRlbXAgZmlsZSBmb3IgYXRvbWljIG1vdmUuICBUaGlzIHVzdWFsbHkgaGFwcGVucyB3aGVuIHVzaW5nIFB5dGhvbjMgbGVzcyB0aGFuIFB5dGhvbjMuNS4gJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUGxlYXNlIHVzZSBQeXRob24yLnggb3IgUHl0aG9uMy41IG9yIGdyZWF0ZXIuJywgZXhjZXB0aW9uPXRyYWNlYmFjay5mb3JtYXRfZXhjKCkpCgogICAgICAgICAgICAgICAgYl90bXBfZGVzdF9uYW1lID0gdG9fYnl0ZXModG1wX2Rlc3RfbmFtZSwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAjIGNsb3NlIHRtcCBmaWxlIGhhbmRsZSBiZWZvcmUgZmlsZSBvcGVyYXRpb25zIHRvIHByZXZlbnQgdGV4dCBmaWxlIGJ1c3kgZXJyb3JzIG9uIHZib3hmcyBzeW5jZWQgZm9sZGVycyAod2luZG93cyBob3N0KQogICAgICAgICAgICAgICAgICAgICAgICBvcy5jbG9zZSh0bXBfZGVzdF9mZCkKICAgICAgICAgICAgICAgICAgICAgICAgIyBsZWF2ZXMgdG1wIGZpbGUgYmVoaW5kIHdoZW4gc3VkbyBhbmQgbm90IHJvb3QKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2h1dGlsLm1vdmUoYl9zcmMsIGJfdG1wX2Rlc3RfbmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGNsZWFudXAgd2lsbCBoYXBwZW4gYnkgJ3JtJyBvZiB0ZW1wZGlyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGNvcHkyIHdpbGwgcHJlc2VydmUgc29tZSBtZXRhZGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2h1dGlsLmNvcHkyKGJfc3JjLCBiX3RtcF9kZXN0X25hbWUpCgogICAgICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLnNlbGludXhfZW5hYmxlZCgpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRfY29udGV4dF9pZl9kaWZmZXJlbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYl90bXBfZGVzdF9uYW1lLCBjb250ZXh0LCBGYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wX3N0YXQgPSBvcy5zdGF0KGJfdG1wX2Rlc3RfbmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGRlc3Rfc3RhdCBhbmQgKHRtcF9zdGF0LnN0X3VpZCAhPSBkZXN0X3N0YXQuc3RfdWlkIG9yIHRtcF9zdGF0LnN0X2dpZCAhPSBkZXN0X3N0YXQuc3RfZ2lkKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy5jaG93bihiX3RtcF9kZXN0X25hbWUsIGRlc3Rfc3RhdC5zdF91aWQsIGRlc3Rfc3RhdC5zdF9naWQpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgZS5lcnJubyAhPSBlcnJuby5FUEVSTToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy5yZW5hbWUoYl90bXBfZGVzdF9uYW1lLCBiX2Rlc3QpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCAoc2h1dGlsLkVycm9yLCBPU0Vycm9yLCBJT0Vycm9yKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVuc2FmZV93cml0ZXMgYW5kIGUuZXJybm8gPT0gZXJybm8uRUJVU1k6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fdW5zYWZlX3dyaXRlcyhiX3RtcF9kZXN0X25hbWUsIGJfZGVzdCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdVbmFibGUgdG8gcmVuYW1lIGZpbGU6ICVzIHRvICVzOiAlcycgJSAoc3JjLCBkZXN0LCBlKSwgZXhjZXB0aW9uPXRyYWNlYmFjay5mb3JtYXRfZXhjKCkpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IChzaHV0aWwuRXJyb3IsIE9TRXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0nRmFpbGVkIHRvIHJlcGxhY2UgZmlsZTogJXMgdG8gJXM6ICVzJyAlIChzcmMsIGRlc3QsIGUpLCBleGNlcHRpb249dHJhY2ViYWNrLmZvcm1hdF9leGMoKSkKICAgICAgICAgICAgICAgIGZpbmFsbHk6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5jbGVhbnVwKGJfdG1wX2Rlc3RfbmFtZSkKCiAgICAgICAgaWYgY3JlYXRpbmc6CiAgICAgICAgICAgICMgbWFrZSBzdXJlIHRoZSBmaWxlIGhhcyB0aGUgY29ycmVjdCBwZXJtaXNzaW9ucwogICAgICAgICAgICAjIGJhc2VkIG9uIHRoZSBjdXJyZW50IHZhbHVlIG9mIHVtYXNrCiAgICAgICAgICAgIHVtYXNrID0gb3MudW1hc2soMCkKICAgICAgICAgICAgb3MudW1hc2sodW1hc2spCiAgICAgICAgICAgIG9zLmNobW9kKGJfZGVzdCwgREVGQVVMVF9QRVJNICYgfnVtYXNrKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBvcy5jaG93bihiX2Rlc3QsIG9zLmdldGV1aWQoKSwgb3MuZ2V0ZWdpZCgpKQogICAgICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgICAgICMgV2UncmUgb2theSB3aXRoIHRyeWluZyBvdXIgYmVzdCBoZXJlLiAgSWYgdGhlIHVzZXIgaXMgbm90CiAgICAgICAgICAgICAgICAjIHJvb3QgKG9yIG9sZCBVbmljZXMpIHRoZXkgd29uJ3QgYmUgYWJsZSB0byBjaG93bi4KICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgaWYgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgIyByZW5hbWUgbWlnaHQgbm90IHByZXNlcnZlIGNvbnRleHQKICAgICAgICAgICAgc2VsZi5zZXRfY29udGV4dF9pZl9kaWZmZXJlbnQoZGVzdCwgY29udGV4dCwgRmFsc2UpCgogICAgZGVmIF91bnNhZmVfd3JpdGVzKHNlbGYsIHNyYywgZGVzdCk6CiAgICAgICAgIyBzYWRseSB0aGVyZSBhcmUgc29tZSBzaXR1YXRpb25zIHdoZXJlIHdlIGNhbm5vdCBlbnN1cmUgYXRvbWljaXR5LCBidXQgb25seSBpZgogICAgICAgICMgdGhlIHVzZXIgaW5zaXN0cyBhbmQgd2UgZ2V0IHRoZSBhcHByb3ByaWF0ZSBlcnJvciB3ZSB1cGRhdGUgdGhlIGZpbGUgdW5zYWZlbHkKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG91dF9kZXN0ID0gb3BlbihkZXN0LCAnd2InKQogICAgICAgICAgICAgICAgaW5fc3JjID0gb3BlbihzcmMsICdyYicpCiAgICAgICAgICAgICAgICBzaHV0aWwuY29weWZpbGVvYmooaW5fc3JjLCBvdXRfZGVzdCkKICAgICAgICAgICAgZmluYWxseTogICMgYXNzdXJpbmcgY2xvc2VkIGZpbGVzIGluIDIuNCBjb21wYXRpYmxlIHdheQogICAgICAgICAgICAgICAgaWYgb3V0X2Rlc3Q6CiAgICAgICAgICAgICAgICAgICAgb3V0X2Rlc3QuY2xvc2UoKQogICAgICAgICAgICAgICAgaWYgaW5fc3JjOgogICAgICAgICAgICAgICAgICAgIGluX3NyYy5jbG9zZSgpCiAgICAgICAgZXhjZXB0IChzaHV0aWwuRXJyb3IsIE9TRXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0nQ291bGQgbm90IHdyaXRlIGRhdGEgdG8gZmlsZSAoJXMpIGZyb20gKCVzKTogJXMnICUgKGRlc3QsIHNyYywgZSksIGV4Y2VwdGlvbj10cmFjZWJhY2suZm9ybWF0X2V4YygpKQoKCiAgICBkZWYgX3JlYWRfZnJvbV9waXBlcyhzZWxmLCBycGlwZXMsIHJmZHMsIGZpbGVfZGVzY3JpcHRvcik6CiAgICAgICAgZGF0YSA9IGIoJycpCiAgICAgICAgaWYgZmlsZV9kZXNjcmlwdG9yIGluIHJmZHM6CiAgICAgICAgICAgIGRhdGEgPSBvcy5yZWFkKGZpbGVfZGVzY3JpcHRvci5maWxlbm8oKSwgOTAwMCkKICAgICAgICAgICAgaWYgZGF0YSA9PSBiKCcnKToKICAgICAgICAgICAgICAgIHJwaXBlcy5yZW1vdmUoZmlsZV9kZXNjcmlwdG9yKQoKICAgICAgICByZXR1cm4gZGF0YQoKICAgIGRlZiBydW5fY29tbWFuZChzZWxmLCBhcmdzLCBjaGVja19yYz1GYWxzZSwgY2xvc2VfZmRzPVRydWUsIGV4ZWN1dGFibGU9Tm9uZSwgZGF0YT1Ob25lLCBiaW5hcnlfZGF0YT1GYWxzZSwgcGF0aF9wcmVmaXg9Tm9uZSwgY3dkPU5vbmUsCiAgICAgICAgICAgICAgICAgICAgdXNlX3Vuc2FmZV9zaGVsbD1GYWxzZSwgcHJvbXB0X3JlZ2V4PU5vbmUsIGVudmlyb25fdXBkYXRlPU5vbmUsIHVtYXNrPU5vbmUsIGVuY29kaW5nPSd1dGYtOCcsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpOgogICAgICAgICcnJwogICAgICAgIEV4ZWN1dGUgYSBjb21tYW5kLCByZXR1cm5zIHJjLCBzdGRvdXQsIGFuZCBzdGRlcnIuCgogICAgICAgIDphcmcgYXJnczogaXMgdGhlIGNvbW1hbmQgdG8gcnVuCiAgICAgICAgICAgICogSWYgYXJncyBpcyBhIGxpc3QsIHRoZSBjb21tYW5kIHdpbGwgYmUgcnVuIHdpdGggc2hlbGw9RmFsc2UuCiAgICAgICAgICAgICogSWYgYXJncyBpcyBhIHN0cmluZyBhbmQgdXNlX3Vuc2FmZV9zaGVsbD1GYWxzZSBpdCB3aWxsIHNwbGl0IGFyZ3MgdG8gYSBsaXN0IGFuZCBydW4gd2l0aCBzaGVsbD1GYWxzZQogICAgICAgICAgICAqIElmIGFyZ3MgaXMgYSBzdHJpbmcgYW5kIHVzZV91bnNhZmVfc2hlbGw9VHJ1ZSBpdCBydW5zIHdpdGggc2hlbGw9VHJ1ZS4KICAgICAgICA6a3cgY2hlY2tfcmM6IFdoZXRoZXIgdG8gY2FsbCBmYWlsX2pzb24gaW4gY2FzZSBvZiBub24gemVybyBSQy4KICAgICAgICAgICAgRGVmYXVsdCBGYWxzZQogICAgICAgIDprdyBjbG9zZV9mZHM6IFNlZSBkb2N1bWVudGF0aW9uIGZvciBzdWJwcm9jZXNzLlBvcGVuKCkuIERlZmF1bHQgVHJ1ZQogICAgICAgIDprdyBleGVjdXRhYmxlOiBTZWUgZG9jdW1lbnRhdGlvbiBmb3Igc3VicHJvY2Vzcy5Qb3BlbigpLiBEZWZhdWx0IE5vbmUKICAgICAgICA6a3cgZGF0YTogSWYgZ2l2ZW4sIGluZm9ybWF0aW9uIHRvIHdyaXRlIHRvIHRoZSBzdGRpbiBvZiB0aGUgY29tbWFuZAogICAgICAgIDprdyBiaW5hcnlfZGF0YTogSWYgRmFsc2UsIGFwcGVuZCBhIG5ld2xpbmUgdG8gdGhlIGRhdGEuICBEZWZhdWx0IEZhbHNlCiAgICAgICAgOmt3IHBhdGhfcHJlZml4OiBJZiBnaXZlbiwgYWRkaXRpb25hbCBwYXRoIHRvIGZpbmQgdGhlIGNvbW1hbmQgaW4uCiAgICAgICAgICAgIFRoaXMgYWRkcyB0byB0aGUgUEFUSCBlbnZpcm9ubWVudCB2YWlyYWJsZSBzbyBoZWxwZXIgY29tbWFuZHMgaW4KICAgICAgICAgICAgdGhlIHNhbWUgZGlyZWN0b3J5IGNhbiBhbHNvIGJlIGZvdW5kCiAgICAgICAgOmt3IGN3ZDogSWYgZ2l2ZW4sIHdvcmtpbmcgZGlyZWN0b3J5IHRvIHJ1biB0aGUgY29tbWFuZCBpbnNpZGUKICAgICAgICA6a3cgdXNlX3Vuc2FmZV9zaGVsbDogU2VlIGBhcmdzYCBwYXJhbWV0ZXIuICBEZWZhdWx0IEZhbHNlCiAgICAgICAgOmt3IHByb21wdF9yZWdleDogUmVnZXggc3RyaW5nIChub3QgYSBjb21waWxlZCByZWdleCkgd2hpY2ggY2FuIGJlCiAgICAgICAgICAgIHVzZWQgdG8gZGV0ZWN0IHByb21wdHMgaW4gdGhlIHN0ZG91dCB3aGljaCB3b3VsZCBvdGhlcndpc2UgY2F1c2UKICAgICAgICAgICAgdGhlIGV4ZWN1dGlvbiB0byBoYW5nIChlc3BlY2lhbGx5IGlmIG5vIGlucHV0IGRhdGEgaXMgc3BlY2lmaWVkKQogICAgICAgIDprdyBlbnZpcm9uX3VwZGF0ZTogZGljdGlvbmFyeSB0byAqdXBkYXRlKiBvcy5lbnZpcm9uIHdpdGgKICAgICAgICA6a3cgdW1hc2s6IFVtYXNrIHRvIGJlIHVzZWQgd2hlbiBydW5uaW5nIHRoZSBjb21tYW5kLiBEZWZhdWx0IE5vbmUKICAgICAgICA6a3cgZW5jb2Rpbmc6IFNpbmNlIHdlIHJldHVybiBuYXRpdmUgc3RyaW5ncywgb24gcHl0aG9uMyB3ZSBuZWVkIHRvCiAgICAgICAgICAgIGtub3cgdGhlIGVuY29kaW5nIHRvIHVzZSB0byB0cmFuc2Zvcm0gZnJvbSBieXRlcyB0byB0ZXh0LiAgSWYgeW91CiAgICAgICAgICAgIHdhbnQgdG8gYWx3YXlzIGdldCBieXRlcyBiYWNrLCB1c2UgZW5jb2Rpbmc9Tm9uZS4gIFRoZSBkZWZhdWx0IGlzCiAgICAgICAgICAgICJ1dGYtOCIuICBUaGlzIGRvZXMgbm90IGFmZmVjdCB0cmFuc2Zvcm1hdGlvbiBvZiBzdHJpbmdzIGdpdmVuIGFzCiAgICAgICAgICAgIGFyZ3MuCiAgICAgICAgOmt3IGVycm9yczogU2luY2Ugd2UgcmV0dXJuIG5hdGl2ZSBzdHJpbmdzLCBvbiBweXRob24zIHdlIG5lZWQgdG8KICAgICAgICAgICAgdHJhbnNmb3JtIHN0ZG91dCBhbmQgc3RkZXJyIGZyb20gYnl0ZXMgdG8gdGV4dC4gIElmIHRoZSBieXRlcyBhcmUKICAgICAgICAgICAgdW5kZWNvZGFibGUgaW4gdGhlIGBgZW5jb2RpbmdgYCBzcGVjaWZpZWQsIHRoZW4gdXNlIHRoaXMgZXJyb3IKICAgICAgICAgICAgaGFuZGxlciB0byBkZWFsIHdpdGggdGhlbS4gIFRoZSBkZWZhdWx0IGlzIGBgc3Vycm9nYXRlX29yX3N0cmljdGBgCiAgICAgICAgICAgIHdoaWNoIG1lYW5zIHRoYXQgdGhlIGJ5dGVzIHdpbGwgYmUgZGVjb2RlZCB1c2luZyB0aGUKICAgICAgICAgICAgc3Vycm9nYXRlZXNjYXBlIGVycm9yIGhhbmRsZXIgaWYgYXZhaWxhYmxlIChhdmFpbGFibGUgb24gYWxsCiAgICAgICAgICAgIHB5dGhvbjMgdmVyc2lvbnMgd2Ugc3VwcG9ydCkgb3RoZXJ3aXNlIGEgVW5pY29kZUVycm9yIHRyYWNlYmFjawogICAgICAgICAgICB3aWxsIGJlIHJhaXNlZC4gIFRoaXMgZG9lcyBub3QgYWZmZWN0IHRyYW5zZm9ybWF0aW9ucyBvZiBzdHJpbmdzCiAgICAgICAgICAgIGdpdmVuIGFzIGFyZ3MuCiAgICAgICAgOnJldHVybnM6IEEgMy10dXBsZSBvZiByZXR1cm4gY29kZSAoaW50ZWdlciksIHN0ZG91dCAobmF0aXZlIHN0cmluZyksCiAgICAgICAgICAgIGFuZCBzdGRlcnIgKG5hdGl2ZSBzdHJpbmcpLiAgT24gcHl0aG9uMiwgc3Rkb3V0IGFuZCBzdGRlcnIgYXJlIGJvdGgKICAgICAgICAgICAgYnl0ZSBzdHJpbmdzLiAgT24gcHl0aG9uMywgc3Rkb3V0IGFuZCBzdGRlcnIgYXJlIHRleHQgc3RyaW5ncyBjb252ZXJ0ZWQKICAgICAgICAgICAgYWNjb3JkaW5nIHRvIHRoZSBlbmNvZGluZyBhbmQgZXJyb3JzIHBhcmFtZXRlcnMuICBJZiB5b3Ugd2FudCBieXRlCiAgICAgICAgICAgIHN0cmluZ3Mgb24gcHl0aG9uMywgdXNlIGVuY29kaW5nPU5vbmUgdG8gdHVybiBkZWNvZGluZyB0byB0ZXh0IG9mZi4KICAgICAgICAnJycKCiAgICAgICAgaWYgaXNpbnN0YW5jZShhcmdzLCBsaXN0KToKICAgICAgICAgICAgaWYgdXNlX3Vuc2FmZV9zaGVsbDoKICAgICAgICAgICAgICAgIGFyZ3MgPSAiICIuam9pbihbc2hsZXhfcXVvdGUoeCkgZm9yIHggaW4gYXJnc10pCiAgICAgICAgICAgICAgICBzaGVsbCA9IFRydWUKICAgICAgICBlbGlmIGlzaW5zdGFuY2UoYXJncywgKGJpbmFyeV90eXBlLCB0ZXh0X3R5cGUpKSBhbmQgdXNlX3Vuc2FmZV9zaGVsbDoKICAgICAgICAgICAgc2hlbGwgPSBUcnVlCiAgICAgICAgZWxpZiBpc2luc3RhbmNlKGFyZ3MsIChiaW5hcnlfdHlwZSwgdGV4dF90eXBlKSk6CiAgICAgICAgICAgIGlmIG5vdCB1c2VfdW5zYWZlX3NoZWxsOgogICAgICAgICAgICAgICAgIyBPbiBweXRob24yLjYgYW5kIGJlbG93LCBzaGxleCBoYXMgcHJvYmxlbXMgd2l0aCB0ZXh0IHR5cGUKICAgICAgICAgICAgICAgICMgT24gcHl0aG9uMywgc2hsZXggbmVlZHMgYSB0ZXh0IHR5cGUuCiAgICAgICAgICAgICAgICBpZiBQWTI6CiAgICAgICAgICAgICAgICAgICAgYXJncyA9IHRvX2J5dGVzKGFyZ3MsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgICAgICAgICBlbGlmIFBZMzoKICAgICAgICAgICAgICAgICAgICBhcmdzID0gdG9fdGV4dChhcmdzLCBlcnJvcnM9J3N1cnJvZ2F0ZWVzY2FwZScpCiAgICAgICAgICAgICAgICBhcmdzID0gc2hsZXguc3BsaXQoYXJncykKICAgICAgICBlbHNlOgogICAgICAgICAgICBtc2cgPSAiQXJndW1lbnQgJ2FyZ3MnIHRvIHJ1bl9jb21tYW5kIG11c3QgYmUgbGlzdCBvciBzdHJpbmciCiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHJjPTI1NywgY21kPWFyZ3MsIG1zZz1tc2cpCgogICAgICAgIHNoZWxsID0gRmFsc2UKICAgICAgICBpZiB1c2VfdW5zYWZlX3NoZWxsOgogICAgICAgICAgICBpZiBleGVjdXRhYmxlIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBleGVjdXRhYmxlID0gb3MuZW52aXJvbi5nZXQoJ1NIRUxMJykKICAgICAgICAgICAgaWYgZXhlY3V0YWJsZToKICAgICAgICAgICAgICAgIGFyZ3MgPSBbZXhlY3V0YWJsZSwgJy1jJywgYXJnc10KICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNoZWxsID0gVHJ1ZQoKICAgICAgICBwcm9tcHRfcmUgPSBOb25lCiAgICAgICAgaWYgcHJvbXB0X3JlZ2V4OgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHByb21wdF9yZWdleCwgdGV4dF90eXBlKToKICAgICAgICAgICAgICAgIGlmIFBZMzoKICAgICAgICAgICAgICAgICAgICBwcm9tcHRfcmVnZXggPSB0b19ieXRlcyhwcm9tcHRfcmVnZXgsIGVycm9ycz0nc3Vycm9nYXRlZXNjYXBlJykKICAgICAgICAgICAgICAgIGVsaWYgUFkyOgogICAgICAgICAgICAgICAgICAgIHByb21wdF9yZWdleCA9IHRvX2J5dGVzKHByb21wdF9yZWdleCwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcHJvbXB0X3JlID0gcmUuY29tcGlsZShwcm9tcHRfcmVnZXgsIHJlLk1VTFRJTElORSkKICAgICAgICAgICAgZXhjZXB0IHJlLmVycm9yOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJpbnZhbGlkIHByb21wdCByZWd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gdG8gcnVuX2NvbW1hbmQiKQoKICAgICAgICAjIGV4cGFuZCB0aGluZ3MgbGlrZSAkSE9NRSBhbmQgfgogICAgICAgIGlmIG5vdCBzaGVsbDoKICAgICAgICAgICAgYXJncyA9IFsgb3MucGF0aC5leHBhbmR1c2VyKG9zLnBhdGguZXhwYW5kdmFycyh4KSkgZm9yIHggaW4gYXJncyBpZiB4IGlzIG5vdCBOb25lIF0KCiAgICAgICAgcmMgPSAwCiAgICAgICAgbXNnID0gTm9uZQogICAgICAgIHN0X2luID0gTm9uZQoKICAgICAgICAjIE1hbmlwdWxhdGUgdGhlIGVudmlyb24gd2UnbGwgc2VuZCB0byB0aGUgbmV3IHByb2Nlc3MKICAgICAgICBvbGRfZW52X3ZhbHMgPSB7fQogICAgICAgICMgV2UgY2FuIHNldCB0aGlzIGZyb20gYm90aCBhbiBhdHRyaWJ1dGUgYW5kIHBlciBjYWxsCiAgICAgICAgZm9yIGtleSwgdmFsIGluIHNlbGYucnVuX2NvbW1hbmRfZW52aXJvbl91cGRhdGUuaXRlbXMoKToKICAgICAgICAgICAgb2xkX2Vudl92YWxzW2tleV0gPSBvcy5lbnZpcm9uLmdldChrZXksIE5vbmUpCiAgICAgICAgICAgIG9zLmVudmlyb25ba2V5XSA9IHZhbAogICAgICAgIGlmIGVudmlyb25fdXBkYXRlOgogICAgICAgICAgICBmb3Iga2V5LCB2YWwgaW4gZW52aXJvbl91cGRhdGUuaXRlbXMoKToKICAgICAgICAgICAgICAgIG9sZF9lbnZfdmFsc1trZXldID0gb3MuZW52aXJvbi5nZXQoa2V5LCBOb25lKQogICAgICAgICAgICAgICAgb3MuZW52aXJvbltrZXldID0gdmFsCiAgICAgICAgaWYgcGF0aF9wcmVmaXg6CiAgICAgICAgICAgIG9sZF9lbnZfdmFsc1snUEFUSCddID0gb3MuZW52aXJvblsnUEFUSCddCiAgICAgICAgICAgIG9zLmVudmlyb25bJ1BBVEgnXSA9ICIlczolcyIgJSAocGF0aF9wcmVmaXgsIG9zLmVudmlyb25bJ1BBVEgnXSkKCiAgICAgICAgIyBJZiB1c2luZyB0ZXN0LW1vZHVsZSBhbmQgZXhwbG9kZSwgdGhlIHJlbW90ZSBsaWIgcGF0aCB3aWxsIHJlc2VtYmxlIC4uLgogICAgICAgICMgICAvdG1wL3Rlc3RfbW9kdWxlX3NjcmF0Y2gvZGVidWdfZGlyL2Fuc2libGUvbW9kdWxlX3V0aWxzL2Jhc2ljLnB5CiAgICAgICAgIyBJZiB1c2luZyBhbnNpYmxlIG9yIGFuc2libGUtcGxheWJvb2sgd2l0aCBhIHJlbW90ZSBzeXN0ZW0gLi4uCiAgICAgICAgIyAgIC90bXAvYW5zaWJsZV92bXdlTFEvYW5zaWJsZV9tb2RsaWIuemlwL2Fuc2libGUvbW9kdWxlX3V0aWxzL2Jhc2ljLnB5CgogICAgICAgICMgQ2xlYW4gb3V0IHB5dGhvbiBwYXRocyBzZXQgYnkgYW5zaWJhbGx6CiAgICAgICAgaWYgJ1BZVEhPTlBBVEgnIGluIG9zLmVudmlyb246CiAgICAgICAgICAgIHB5cGF0aHMgPSBvcy5lbnZpcm9uWydQWVRIT05QQVRIJ10uc3BsaXQoJzonKQogICAgICAgICAgICBweXBhdGhzID0gW3ggZm9yIHggaW4gcHlwYXRocyBcCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCB4LmVuZHN3aXRoKCcvYW5zaWJsZV9tb2RsaWIuemlwJykgXAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgbm90IHguZW5kc3dpdGgoJy9kZWJ1Z19kaXInKV0KICAgICAgICAgICAgb3MuZW52aXJvblsnUFlUSE9OUEFUSCddID0gJzonLmpvaW4ocHlwYXRocykKICAgICAgICAgICAgaWYgbm90IG9zLmVudmlyb25bJ1BZVEhPTlBBVEgnXToKICAgICAgICAgICAgICAgIGRlbCBvcy5lbnZpcm9uWydQWVRIT05QQVRIJ10KCiAgICAgICAgIyBjcmVhdGUgYSBwcmludGFibGUgdmVyc2lvbiBvZiB0aGUgY29tbWFuZCBmb3IgdXNlCiAgICAgICAgIyBpbiByZXBvcnRpbmcgbGF0ZXIsIHdoaWNoIHN0cmlwcyBvdXQgdGhpbmdzIGxpa2UKICAgICAgICAjIHBhc3N3b3JkcyBmcm9tIHRoZSBhcmdzIGxpc3QKICAgICAgICB0b19jbGVhbl9hcmdzID0gYXJncwogICAgICAgIGlmIFBZMjoKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShhcmdzLCB0ZXh0X3R5cGUpOgogICAgICAgICAgICAgICAgdG9fY2xlYW5fYXJncyA9IHRvX2J5dGVzKGFyZ3MpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShhcmdzLCBiaW5hcnlfdHlwZSk6CiAgICAgICAgICAgICAgICB0b19jbGVhbl9hcmdzID0gdG9fdGV4dChhcmdzKQogICAgICAgIGlmIGlzaW5zdGFuY2UoYXJncywgKHRleHRfdHlwZSwgYmluYXJ5X3R5cGUpKToKICAgICAgICAgICAgdG9fY2xlYW5fYXJncyA9IHNobGV4LnNwbGl0KHRvX2NsZWFuX2FyZ3MpCgogICAgICAgIGNsZWFuX2FyZ3MgPSBbXQogICAgICAgIGlzX3Bhc3N3ZCA9IEZhbHNlCiAgICAgICAgZm9yIGFyZyBpbiB0b19jbGVhbl9hcmdzOgogICAgICAgICAgICBpZiBpc19wYXNzd2Q6CiAgICAgICAgICAgICAgICBpc19wYXNzd2QgPSBGYWxzZQogICAgICAgICAgICAgICAgY2xlYW5fYXJncy5hcHBlbmQoJyoqKioqKioqJykKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGlmIFBBU1NXRF9BUkdfUkUubWF0Y2goYXJnKToKICAgICAgICAgICAgICAgIHNlcF9pZHggPSBhcmcuZmluZCgnPScpCiAgICAgICAgICAgICAgICBpZiBzZXBfaWR4ID4gLTE6CiAgICAgICAgICAgICAgICAgICAgY2xlYW5fYXJncy5hcHBlbmQoJyVzPSoqKioqKioqJyAlIGFyZ1s6c2VwX2lkeF0pCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgaXNfcGFzc3dkID0gVHJ1ZQogICAgICAgICAgICBhcmcgPSBoZXVyaXN0aWNfbG9nX3Nhbml0aXplKGFyZywgc2VsZi5ub19sb2dfdmFsdWVzKQogICAgICAgICAgICBjbGVhbl9hcmdzLmFwcGVuZChhcmcpCiAgICAgICAgY2xlYW5fYXJncyA9ICcgJy5qb2luKHNobGV4X3F1b3RlKGFyZykgZm9yIGFyZyBpbiBjbGVhbl9hcmdzKQoKICAgICAgICBpZiBkYXRhOgogICAgICAgICAgICBzdF9pbiA9IHN1YnByb2Nlc3MuUElQRQoKICAgICAgICBrd2FyZ3MgPSBkaWN0KAogICAgICAgICAgICBleGVjdXRhYmxlPWV4ZWN1dGFibGUsCiAgICAgICAgICAgIHNoZWxsPXNoZWxsLAogICAgICAgICAgICBjbG9zZV9mZHM9Y2xvc2VfZmRzLAogICAgICAgICAgICBzdGRpbj1zdF9pbiwKICAgICAgICAgICAgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwKICAgICAgICAgICAgc3RkZXJyPXN1YnByb2Nlc3MuUElQRSwKICAgICAgICApCgogICAgICAgICMgc3RvcmUgdGhlIHB3ZAogICAgICAgIHByZXZfZGlyID0gb3MuZ2V0Y3dkKCkKCiAgICAgICAgIyBtYWtlIHN1cmUgd2UncmUgaW4gdGhlIHJpZ2h0IHdvcmtpbmcgZGlyZWN0b3J5CiAgICAgICAgaWYgY3dkIGFuZCBvcy5wYXRoLmlzZGlyKGN3ZCk6CiAgICAgICAgICAgIGN3ZCA9IG9zLnBhdGguYWJzcGF0aChvcy5wYXRoLmV4cGFuZHVzZXIoY3dkKSkKICAgICAgICAgICAga3dhcmdzWydjd2QnXSA9IGN3ZAogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBvcy5jaGRpcihjd2QpCiAgICAgICAgICAgIGV4Y2VwdCAoT1NFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihyYz1lLmVycm5vLCBtc2c9IkNvdWxkIG5vdCBvcGVuICVzLCAlcyIgJSAoY3dkLCBzdHIoZSkpKQoKICAgICAgICBvbGRfdW1hc2sgPSBOb25lCiAgICAgICAgaWYgdW1hc2s6CiAgICAgICAgICAgIG9sZF91bWFzayA9IG9zLnVtYXNrKHVtYXNrKQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIHNlbGYuX2RlYnVnOgogICAgICAgICAgICAgICAgc2VsZi5sb2coJ0V4ZWN1dGluZzogJyArIGNsZWFuX2FyZ3MpCiAgICAgICAgICAgIGNtZCA9IHN1YnByb2Nlc3MuUG9wZW4oYXJncywgKiprd2FyZ3MpCgogICAgICAgICAgICAjIHRoZSBjb21tdW5pY2F0aW9uIGxvZ2ljIGhlcmUgaXMgZXNzZW50aWFsbHkgdGFrZW4gZnJvbSB0aGF0CiAgICAgICAgICAgICMgb2YgdGhlIF9jb21tdW5pY2F0ZSgpIGZ1bmN0aW9uIGluIHNzaC5weQoKICAgICAgICAgICAgc3Rkb3V0ID0gYignJykKICAgICAgICAgICAgc3RkZXJyID0gYignJykKICAgICAgICAgICAgcnBpcGVzID0gW2NtZC5zdGRvdXQsIGNtZC5zdGRlcnJdCgogICAgICAgICAgICBpZiBkYXRhOgogICAgICAgICAgICAgICAgaWYgbm90IGJpbmFyeV9kYXRhOgogICAgICAgICAgICAgICAgICAgIGRhdGEgKz0gJ1xuJwogICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShkYXRhLCB0ZXh0X3R5cGUpOgogICAgICAgICAgICAgICAgICAgIGRhdGEgPSB0b19ieXRlcyhkYXRhKQogICAgICAgICAgICAgICAgY21kLnN0ZGluLndyaXRlKGRhdGEpCiAgICAgICAgICAgICAgICBjbWQuc3RkaW4uY2xvc2UoKQoKICAgICAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgICAgIHJmZHMsIHdmZHMsIGVmZHMgPSBzZWxlY3Quc2VsZWN0KHJwaXBlcywgW10sIHJwaXBlcywgMSkKICAgICAgICAgICAgICAgIHN0ZG91dCArPSBzZWxmLl9yZWFkX2Zyb21fcGlwZXMocnBpcGVzLCByZmRzLCBjbWQuc3Rkb3V0KQogICAgICAgICAgICAgICAgc3RkZXJyICs9IHNlbGYuX3JlYWRfZnJvbV9waXBlcyhycGlwZXMsIHJmZHMsIGNtZC5zdGRlcnIpCiAgICAgICAgICAgICAgICAjIGlmIHdlJ3JlIGNoZWNraW5nIGZvciBwcm9tcHRzLCBkbyBpdCBub3cKICAgICAgICAgICAgICAgIGlmIHByb21wdF9yZToKICAgICAgICAgICAgICAgICAgICBpZiBwcm9tcHRfcmUuc2VhcmNoKHN0ZG91dCkgYW5kIG5vdCBkYXRhOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBlbmNvZGluZzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZG91dCA9IHRvX25hdGl2ZShzdGRvdXQsIGVuY29kaW5nPWVuY29kaW5nLCBlcnJvcnM9ZXJyb3JzKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Rkb3V0ID0gc3Rkb3V0CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoMjU3LCBzdGRvdXQsICJBIHByb21wdCB3YXMgZW5jb3VudGVyZWQgd2hpbGUgcnVubmluZyBhIGNvbW1hbmQsIGJ1dCBubyBpbnB1dCBkYXRhIHdhcyBzcGVjaWZpZWQiKQogICAgICAgICAgICAgICAgIyBvbmx5IGJyZWFrIG91dCBpZiBubyBwaXBlcyBhcmUgbGVmdCB0byByZWFkIG9yCiAgICAgICAgICAgICAgICAjIHRoZSBwaXBlcyBhcmUgY29tcGxldGVseSByZWFkIGFuZAogICAgICAgICAgICAgICAgIyB0aGUgcHJvY2VzcyBpcyB0ZXJtaW5hdGVkCiAgICAgICAgICAgICAgICBpZiAobm90IHJwaXBlcyBvciBub3QgcmZkcykgYW5kIGNtZC5wb2xsKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICMgTm8gcGlwZXMgYXJlIGxlZnQgdG8gcmVhZCBidXQgcHJvY2VzcyBpcyBub3QgeWV0IHRlcm1pbmF0ZWQKICAgICAgICAgICAgICAgICMgT25seSB0aGVuIGl0IGlzIHNhZmUgdG8gd2FpdCBmb3IgdGhlIHByb2Nlc3MgdG8gYmUgZmluaXNoZWQKICAgICAgICAgICAgICAgICMgTk9URTogQWN0dWFsbHkgY21kLnBvbGwoKSBpcyBhbHdheXMgTm9uZSBoZXJlIGlmIHJwaXBlcyBpcyBlbXB0eQogICAgICAgICAgICAgICAgZWxpZiBub3QgcnBpcGVzIGFuZCBjbWQucG9sbCgpIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgY21kLndhaXQoKQogICAgICAgICAgICAgICAgICAgICMgVGhlIHByb2Nlc3MgaXMgdGVybWluYXRlZC4gU2luY2Ugbm8gcGlwZXMgdG8gcmVhZCBmcm9tIGFyZQogICAgICAgICAgICAgICAgICAgICMgbGVmdCwgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIHNlbGVjdCgpIGFnYWluLgogICAgICAgICAgICAgICAgICAgIGJyZWFrCgogICAgICAgICAgICBjbWQuc3Rkb3V0LmNsb3NlKCkKICAgICAgICAgICAgY21kLnN0ZGVyci5jbG9zZSgpCgogICAgICAgICAgICByYyA9IGNtZC5yZXR1cm5jb2RlCiAgICAgICAgZXhjZXB0IChPU0Vycm9yLCBJT0Vycm9yKToKICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICBzZWxmLmxvZygiRXJyb3IgRXhlY3V0aW5nIENNRDolcyBFeGNlcHRpb246JXMiICUgKGNsZWFuX2FyZ3MsIHRvX25hdGl2ZShlKSkpCiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHJjPWUuZXJybm8sIG1zZz10b19uYXRpdmUoZSksIGNtZD1jbGVhbl9hcmdzKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgc2VsZi5sb2coIkVycm9yIEV4ZWN1dGluZyBDTUQ6JXMgRXhjZXB0aW9uOiVzIiAlIChjbGVhbl9hcmdzLHRvX25hdGl2ZSh0cmFjZWJhY2suZm9ybWF0X2V4YygpKSkpCiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHJjPTI1NywgbXNnPXRvX25hdGl2ZShlKSwgZXhjZXB0aW9uPXRyYWNlYmFjay5mb3JtYXRfZXhjKCksIGNtZD1jbGVhbl9hcmdzKQoKICAgICAgICAjIFJlc3RvcmUgZW52IHNldHRpbmdzCiAgICAgICAgZm9yIGtleSwgdmFsIGluIG9sZF9lbnZfdmFscy5pdGVtcygpOgogICAgICAgICAgICBpZiB2YWwgaXMgTm9uZToKICAgICAgICAgICAgICAgIGRlbCBvcy5lbnZpcm9uW2tleV0KICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG9zLmVudmlyb25ba2V5XSA9IHZhbAoKICAgICAgICBpZiBvbGRfdW1hc2s6CiAgICAgICAgICAgIG9zLnVtYXNrKG9sZF91bWFzaykKCiAgICAgICAgaWYgcmMgIT0gMCBhbmQgY2hlY2tfcmM6CiAgICAgICAgICAgIG1zZyA9IGhldXJpc3RpY19sb2dfc2FuaXRpemUoc3RkZXJyLnJzdHJpcCgpLCBzZWxmLm5vX2xvZ192YWx1ZXMpCiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKGNtZD1jbGVhbl9hcmdzLCByYz1yYywgc3Rkb3V0PXN0ZG91dCwgc3RkZXJyPXN0ZGVyciwgbXNnPW1zZykKCiAgICAgICAgIyByZXNldCB0aGUgcHdkCiAgICAgICAgb3MuY2hkaXIocHJldl9kaXIpCgogICAgICAgIGlmIGVuY29kaW5nIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXR1cm4gKHJjLCB0b19uYXRpdmUoc3Rkb3V0LCBlbmNvZGluZz1lbmNvZGluZywgZXJyb3JzPWVycm9ycyksCiAgICAgICAgICAgICAgICAgICAgdG9fbmF0aXZlKHN0ZGVyciwgZW5jb2Rpbmc9ZW5jb2RpbmcsIGVycm9ycz1lcnJvcnMpKQogICAgICAgIHJldHVybiAocmMsIHN0ZG91dCwgc3RkZXJyKQoKICAgIGRlZiBhcHBlbmRfdG9fZmlsZShzZWxmLCBmaWxlbmFtZSwgc3RyKToKICAgICAgICBmaWxlbmFtZSA9IG9zLnBhdGguZXhwYW5kdmFycyhvcy5wYXRoLmV4cGFuZHVzZXIoZmlsZW5hbWUpKQogICAgICAgIGZoID0gb3BlbihmaWxlbmFtZSwgJ2EnKQogICAgICAgIGZoLndyaXRlKHN0cikKICAgICAgICBmaC5jbG9zZSgpCgogICAgZGVmIGJ5dGVzX3RvX2h1bWFuKHNlbGYsIHNpemUpOgogICAgICAgIHJldHVybiBieXRlc190b19odW1hbihzaXplKQoKICAgICMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5CiAgICBwcmV0dHlfYnl0ZXMgPSBieXRlc190b19odW1hbgoKICAgIGRlZiBodW1hbl90b19ieXRlcyhzZWxmLCBudW1iZXIsIGlzYml0cz1GYWxzZSk6CiAgICAgICAgcmV0dXJuIGh1bWFuX3RvX2J5dGVzKG51bWJlciwgaXNiaXRzKQoKICAgICMKICAgICMgQmFja3dhcmRzIGNvbXBhdAogICAgIwoKICAgICMgSW4gMi4wLCBtb3ZlZCBmcm9tIGluc2lkZSB0aGUgbW9kdWxlIHRvIHRoZSB0b3BsZXZlbAogICAgaXNfZXhlY3V0YWJsZSA9IGlzX2V4ZWN1dGFibGUKCgpkZWYgZ2V0X21vZHVsZV9wYXRoKCk6CiAgICByZXR1cm4gb3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKQpQSwMEFAAAAAAAB7wrS12GtW87rQAAO60AABwAAABhbnNpYmxlL21vZHVsZV91dGlscy91cmxzLnB5IyBUaGlzIGNvZGUgaXMgcGFydCBvZiBBbnNpYmxlLCBidXQgaXMgYW4gaW5kZXBlbmRlbnQgY29tcG9uZW50LgojIFRoaXMgcGFydGljdWxhciBmaWxlIHNuaXBwZXQsIGFuZCB0aGlzIGZpbGUgc25pcHBldCBvbmx5LCBpcyBCU0QgbGljZW5zZWQuCiMgTW9kdWxlcyB5b3Ugd3JpdGUgdXNpbmcgdGhpcyBzbmlwcGV0LCB3aGljaCBpcyBlbWJlZGRlZCBkeW5hbWljYWxseSBieSBBbnNpYmxlCiMgc3RpbGwgYmVsb25nIHRvIHRoZSBhdXRob3Igb2YgdGhlIG1vZHVsZSwgYW5kIG1heSBhc3NpZ24gdGhlaXIgb3duIGxpY2Vuc2UKIyB0byB0aGUgY29tcGxldGUgd29yay4KIwojIENvcHlyaWdodCAoYyksIE1pY2hhZWwgRGVIYWFuIDxtaWNoYWVsLmRlaGFhbkBnbWFpbC5jb20+LCAyMDEyLTIwMTMKIyBDb3B5cmlnaHQgKGMpLCBUb3NoaW8gS3VyYXRvbWkgPHRrdXJhdG9taUBhbnNpYmxlLmNvbT4sIDIwMTUKIyBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwKIyBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6CiMKIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0CiMgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuCiMgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsCiMgICAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uCiMgICAgICBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KIwojIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTIElTIiBBTkQKIyBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRAojIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4KIyBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwKIyBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sCiMgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTCiMgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVAojIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRQojIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgojCiMgVGhlIG1hdGNoX2hvc3RuYW1lIGZ1bmN0aW9uIGFuZCBzdXBwb3J0aW5nIGNvZGUgaXMgdW5kZXIgdGhlIHRlcm1zIGFuZAojIGNvbmRpdGlvbnMgb2YgdGhlIFB5dGhvbiBTb2Z0d2FyZSBGb3VuZGF0aW9uIExpY2Vuc2UuICBUaGV5IHdlcmUgdGFrZW4gZnJvbQojIHRoZSBQeXRob24zIHN0YW5kYXJkIGxpYnJhcnkgYW5kIGFkYXB0ZWQgZm9yIHVzZSBpbiBQeXRob24yLiAgU2VlIGNvbW1lbnRzIGluIHRoZQojIHNvdXJjZSBmb3Igd2hpY2ggY29kZSBwcmVjaXNlbHkgaXMgdW5kZXIgdGhpcyBMaWNlbnNlLiAgUFNGIExpY2Vuc2UgdGV4dAojIGZvbGxvd3M6CiMKIyBQWVRIT04gU09GVFdBUkUgRk9VTkRBVElPTiBMSUNFTlNFIFZFUlNJT04gMgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiMKIyAxLiBUaGlzIExJQ0VOU0UgQUdSRUVNRU5UIGlzIGJldHdlZW4gdGhlIFB5dGhvbiBTb2Z0d2FyZSBGb3VuZGF0aW9uCiMgKCJQU0YiKSwgYW5kIHRoZSBJbmRpdmlkdWFsIG9yIE9yZ2FuaXphdGlvbiAoIkxpY2Vuc2VlIikgYWNjZXNzaW5nIGFuZAojIG90aGVyd2lzZSB1c2luZyB0aGlzIHNvZnR3YXJlICgiUHl0aG9uIikgaW4gc291cmNlIG9yIGJpbmFyeSBmb3JtIGFuZAojIGl0cyBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24uCiMKIyAyLiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50LCBQU0YgaGVyZWJ5CiMgZ3JhbnRzIExpY2Vuc2VlIGEgbm9uZXhjbHVzaXZlLCByb3lhbHR5LWZyZWUsIHdvcmxkLXdpZGUgbGljZW5zZSB0byByZXByb2R1Y2UsCiMgYW5hbHl6ZSwgdGVzdCwgcGVyZm9ybSBhbmQvb3IgZGlzcGxheSBwdWJsaWNseSwgcHJlcGFyZSBkZXJpdmF0aXZlIHdvcmtzLAojIGRpc3RyaWJ1dGUsIGFuZCBvdGhlcndpc2UgdXNlIFB5dGhvbiBhbG9uZSBvciBpbiBhbnkgZGVyaXZhdGl2ZSB2ZXJzaW9uLAojIHByb3ZpZGVkLCBob3dldmVyLCB0aGF0IFBTRidzIExpY2Vuc2UgQWdyZWVtZW50IGFuZCBQU0YncyBub3RpY2Ugb2YgY29weXJpZ2h0LAojIGkuZS4sICJDb3B5cmlnaHQgKGMpIDIwMDEsIDIwMDIsIDIwMDMsIDIwMDQsIDIwMDUsIDIwMDYsIDIwMDcsIDIwMDgsIDIwMDksIDIwMTAsCiMgMjAxMSwgMjAxMiwgMjAxMywgMjAxNCBQeXRob24gU29mdHdhcmUgRm91bmRhdGlvbjsgQWxsIFJpZ2h0cyBSZXNlcnZlZCIgYXJlCiMgcmV0YWluZWQgaW4gUHl0aG9uIGFsb25lIG9yIGluIGFueSBkZXJpdmF0aXZlIHZlcnNpb24gcHJlcGFyZWQgYnkgTGljZW5zZWUuCiMKIyAzLiBJbiB0aGUgZXZlbnQgTGljZW5zZWUgcHJlcGFyZXMgYSBkZXJpdmF0aXZlIHdvcmsgdGhhdCBpcyBiYXNlZCBvbgojIG9yIGluY29ycG9yYXRlcyBQeXRob24gb3IgYW55IHBhcnQgdGhlcmVvZiwgYW5kIHdhbnRzIHRvIG1ha2UKIyB0aGUgZGVyaXZhdGl2ZSB3b3JrIGF2YWlsYWJsZSB0byBvdGhlcnMgYXMgcHJvdmlkZWQgaGVyZWluLCB0aGVuCiMgTGljZW5zZWUgaGVyZWJ5IGFncmVlcyB0byBpbmNsdWRlIGluIGFueSBzdWNoIHdvcmsgYSBicmllZiBzdW1tYXJ5IG9mCiMgdGhlIGNoYW5nZXMgbWFkZSB0byBQeXRob24uCiMKIyA0LiBQU0YgaXMgbWFraW5nIFB5dGhvbiBhdmFpbGFibGUgdG8gTGljZW5zZWUgb24gYW4gIkFTIElTIgojIGJhc2lzLiAgUFNGIE1BS0VTIE5PIFJFUFJFU0VOVEFUSU9OUyBPUiBXQVJSQU5USUVTLCBFWFBSRVNTIE9SCiMgSU1QTElFRC4gIEJZIFdBWSBPRiBFWEFNUExFLCBCVVQgTk9UIExJTUlUQVRJT04sIFBTRiBNQUtFUyBOTyBBTkQKIyBESVNDTEFJTVMgQU5ZIFJFUFJFU0VOVEFUSU9OIE9SIFdBUlJBTlRZIE9GIE1FUkNIQU5UQUJJTElUWSBPUiBGSVRORVNTCiMgRk9SIEFOWSBQQVJUSUNVTEFSIFBVUlBPU0UgT1IgVEhBVCBUSEUgVVNFIE9GIFBZVEhPTiBXSUxMIE5PVAojIElORlJJTkdFIEFOWSBUSElSRCBQQVJUWSBSSUdIVFMuCiMKIyA1LiBQU0YgU0hBTEwgTk9UIEJFIExJQUJMRSBUTyBMSUNFTlNFRSBPUiBBTlkgT1RIRVIgVVNFUlMgT0YgUFlUSE9OCiMgRk9SIEFOWSBJTkNJREVOVEFMLCBTUEVDSUFMLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgTE9TUyBBUwojIEEgUkVTVUxUIE9GIE1PRElGWUlORywgRElTVFJJQlVUSU5HLCBPUiBPVEhFUldJU0UgVVNJTkcgUFlUSE9OLAojIE9SIEFOWSBERVJJVkFUSVZFIFRIRVJFT0YsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgVEhFUkVPRi4KIwojIDYuIFRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgd2lsbCBhdXRvbWF0aWNhbGx5IHRlcm1pbmF0ZSB1cG9uIGEgbWF0ZXJpYWwKIyBicmVhY2ggb2YgaXRzIHRlcm1zIGFuZCBjb25kaXRpb25zLgojCiMgNy4gTm90aGluZyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IHNoYWxsIGJlIGRlZW1lZCB0byBjcmVhdGUgYW55CiMgcmVsYXRpb25zaGlwIG9mIGFnZW5jeSwgcGFydG5lcnNoaXAsIG9yIGpvaW50IHZlbnR1cmUgYmV0d2VlbiBQU0YgYW5kCiMgTGljZW5zZWUuICBUaGlzIExpY2Vuc2UgQWdyZWVtZW50IGRvZXMgbm90IGdyYW50IHBlcm1pc3Npb24gdG8gdXNlIFBTRgojIHRyYWRlbWFya3Mgb3IgdHJhZGUgbmFtZSBpbiBhIHRyYWRlbWFyayBzZW5zZSB0byBlbmRvcnNlIG9yIHByb21vdGUKIyBwcm9kdWN0cyBvciBzZXJ2aWNlcyBvZiBMaWNlbnNlZSwgb3IgYW55IHRoaXJkIHBhcnR5LgojCiMgOC4gQnkgY29weWluZywgaW5zdGFsbGluZyBvciBvdGhlcndpc2UgdXNpbmcgUHl0aG9uLCBMaWNlbnNlZQojIGFncmVlcyB0byBiZSBib3VuZCBieSB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhpcyBMaWNlbnNlCiMgQWdyZWVtZW50LgoKJycnClRoZSAqKnVybHMqKiB1dGlscyBtb2R1bGUgb2ZmZXJzIGEgcmVwbGFjZW1lbnQgZm9yIHRoZSB1cmxsaWIyIHB5dGhvbiBsaWJyYXJ5LgoKdXJsbGliMiBpcyB0aGUgcHl0aG9uIHN0ZGxpYiB3YXkgdG8gcmV0cmlldmUgZmlsZXMgZnJvbSB0aGUgSW50ZXJuZXQgYnV0IGl0CmxhY2tzIHNvbWUgc2VjdXJpdHkgZmVhdHVyZXMgKGFyb3VuZCB2ZXJpZnlpbmcgU1NMIGNlcnRpZmljYXRlcykgdGhhdCB1c2VycwpzaG91bGQgY2FyZSBhYm91dCBpbiBtb3N0IHNpdHVhdGlvbnMuIFVzaW5nIHRoZSBmdW5jdGlvbnMgaW4gdGhpcyBtb2R1bGUgY29ycmVjdHMKZGVmaWNpZW5jaWVzIGluIHRoZSB1cmxsaWIyIG1vZHVsZSB3aGVyZXZlciBwb3NzaWJsZS4KClRoZXJlIGFyZSBhbHNvIHRoaXJkLXBhcnR5IGxpYnJhcmllcyAoZm9yIGluc3RhbmNlLCByZXF1ZXN0cykgd2hpY2ggY2FuIGJlIHVzZWQKdG8gcmVwbGFjZSB1cmxsaWIyIHdpdGggYSBtb3JlIHNlY3VyZSBsaWJyYXJ5LiBIb3dldmVyLCBhbGwgdGhpcmQgcGFydHkgbGlicmFyaWVzCnJlcXVpcmUgdGhhdCB0aGUgbGlicmFyeSBiZSBpbnN0YWxsZWQgb24gdGhlIG1hbmFnZWQgbWFjaGluZS4gVGhhdCBpcyBhbiBleHRyYSBzdGVwCmZvciB1c2VycyBtYWtpbmcgdXNlIG9mIGEgbW9kdWxlLiBJZiBwb3NzaWJsZSwgYXZvaWQgdGhpcmQgcGFydHkgbGlicmFyaWVzIGJ5IHVzaW5nCnRoaXMgY29kZSBpbnN0ZWFkLgonJycKCmltcG9ydCBuZXRyYwppbXBvcnQgb3MKaW1wb3J0IHJlCmltcG9ydCBzeXMKaW1wb3J0IHNvY2tldAppbXBvcnQgcGxhdGZvcm0KaW1wb3J0IHRlbXBmaWxlCmltcG9ydCBiYXNlNjQKCnRyeToKICAgIGltcG9ydCBodHRwbGliCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICMgUHl0aG9uIDMKICAgIGltcG9ydCBodHRwLmNsaWVudCBhcyBodHRwbGliCgppbXBvcnQgYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4Lm1vdmVzLnVybGxpYi5yZXF1ZXN0IGFzIHVybGxpYl9yZXF1ZXN0CmltcG9ydCBhbnNpYmxlLm1vZHVsZV91dGlscy5zaXgubW92ZXMudXJsbGliLmVycm9yIGFzIHVybGxpYl9lcnJvcgpmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLmJhc2ljIGltcG9ydCBnZXRfZGlzdHJpYnV0aW9uLCBnZXRfZXhjZXB0aW9uCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4IGltcG9ydCBiCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuX3RleHQgaW1wb3J0IHRvX2J5dGVzLCB0b19uYXRpdmUsIHRvX3RleHQKCnRyeToKICAgICMgcHl0aG9uMwogICAgaW1wb3J0IHVybGxpYi5yZXF1ZXN0IGFzIHVybGxpYl9yZXF1ZXN0CiAgICBmcm9tIHVybGxpYi5yZXF1ZXN0IGltcG9ydCBBYnN0cmFjdEhUVFBIYW5kbGVyCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICMgcHl0aG9uMgogICAgaW1wb3J0IHVybGxpYjIgYXMgdXJsbGliX3JlcXVlc3QKICAgIGZyb20gdXJsbGliMiBpbXBvcnQgQWJzdHJhY3RIVFRQSGFuZGxlcgoKdHJ5OgogICAgZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5zaXgubW92ZXMudXJsbGliLnBhcnNlIGltcG9ydCB1cmxwYXJzZSwgdXJsdW5wYXJzZQogICAgSEFTX1VSTFBBUlNFID0gVHJ1ZQpleGNlcHQ6CiAgICBIQVNfVVJMUEFSU0UgPSBGYWxzZQoKdHJ5OgogICAgaW1wb3J0IHNzbAogICAgSEFTX1NTTCA9IFRydWUKZXhjZXB0OgogICAgSEFTX1NTTCA9IEZhbHNlCgp0cnk6CiAgICAjIFNOSSBIYW5kbGluZyBuZWVkcyBweXRob24yLjcuOSdzIFNTTENvbnRleHQKICAgIGZyb20gc3NsIGltcG9ydCBjcmVhdGVfZGVmYXVsdF9jb250ZXh0LCBTU0xDb250ZXh0CiAgICBIQVNfU1NMQ09OVEVYVCA9IFRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgSEFTX1NTTENPTlRFWFQgPSBGYWxzZQoKIyBTTkkgSGFuZGxpbmcgZm9yIHB5dGhvbiA8IDIuNy45IHdpdGggdXJsbGliMyBzdXBwb3J0CnRyeToKICAgICMgdXJsbGliMz49MS4xNQogICAgSEFTX1VSTExJQjNfU1NMX1dSQVBfU09DS0VUID0gRmFsc2UKICAgIHRyeToKICAgICAgICBmcm9tIHVybGxpYjMuY29udHJpYi5weW9wZW5zc2wgaW1wb3J0IFB5T3BlblNTTENvbnRleHQKICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBmcm9tIHJlcXVlc3RzLnBhY2thZ2VzLnVybGxpYjMuY29udHJpYi5weW9wZW5zc2wgaW1wb3J0IFB5T3BlblNTTENvbnRleHQKICAgIEhBU19VUkxMSUIzX1BZT1BFTlNTTENPTlRFWFQgPSBUcnVlCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICMgdXJsbGliMzwxLjE1LD49MS42CiAgICBIQVNfVVJMTElCM19QWU9QRU5TU0xDT05URVhUID0gRmFsc2UKICAgIHRyeToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGZyb20gdXJsbGliMy5jb250cmliLnB5b3BlbnNzbCBpbXBvcnQgc3NsX3dyYXBfc29ja2V0CiAgICAgICAgZXhjZXB0IEltcG9ydEVycm9yOgogICAgICAgICAgICBmcm9tIHJlcXVlc3RzLnBhY2thZ2VzLnVybGxpYjMuY29udHJpYi5weW9wZW5zc2wgaW1wb3J0IHNzbF93cmFwX3NvY2tldAogICAgICAgIEhBU19VUkxMSUIzX1NTTF9XUkFQX1NPQ0tFVCA9IFRydWUKICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBwYXNzCgojIFNlbGVjdCBhIHByb3RvY29sIHRoYXQgaW5jbHVkZXMgYWxsIHNlY3VyZSB0bHMgcHJvdG9jb2xzCiMgRXhjbHVkZSBpbnNlY3VyZSBzc2wgcHJvdG9jb2xzIGlmIHBvc3NpYmxlCgppZiBIQVNfU1NMOgogICAgIyBJZiB3ZSBjYW4ndCBmaW5kIGV4dHJhIHRscyBtZXRob2RzLCBzc2wuUFJPVE9DT0xfVExTdjEgaXMgc3VmZmljaWVudAogICAgUFJPVE9DT0wgPSBzc2wuUFJPVE9DT0xfVExTdjEKaWYgbm90IEhBU19TU0xDT05URVhUIGFuZCBIQVNfU1NMOgogICAgdHJ5OgogICAgICAgIGltcG9ydCBjdHlwZXMKICAgICAgICBpbXBvcnQgY3R5cGVzLnV0aWwKICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICAjIHB5dGhvbiAyLjQgKGxpa2VseSByaGVsNSB3aGljaCBkb2Vzbid0IGhhdmUgdGxzMS4xIHN1cHBvcnQgaW4gaXRzIG9wZW5zc2wpCiAgICAgICAgcGFzcwogICAgZWxzZToKICAgICAgICBsaWJzc2xfbmFtZSA9IGN0eXBlcy51dGlsLmZpbmRfbGlicmFyeSgnc3NsJykKICAgICAgICBsaWJzc2wgPSBjdHlwZXMuQ0RMTChsaWJzc2xfbmFtZSkKICAgICAgICBmb3IgbWV0aG9kIGluICgnVExTdjFfMV9tZXRob2QnLCAnVExTdjFfMl9tZXRob2QnKToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbGlic3NsW21ldGhvZF0KICAgICAgICAgICAgICAgICMgRm91bmQgc29tZXRoaW5nIC0gd2UnbGwgbGV0IG9wZW5zc2wgYXV0b25lZ290aWF0ZSBhbmQgaG9wZQogICAgICAgICAgICAgICAgIyB0aGUgc2VydmVyIGhhcyBkaXNhYmxlZCBzc2x2MiBhbmQgMy4gIGJlc3Qgd2UgY2FuIGRvLgogICAgICAgICAgICAgICAgUFJPVE9DT0wgPSBzc2wuUFJPVE9DT0xfU1NMdjIzCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgZGVsIGxpYnNzbAoKCkxPQURFRF9WRVJJRllfTE9DQVRJT05TID0gc2V0KCkKCkhBU19NQVRDSF9IT1NUTkFNRSA9IFRydWUKdHJ5OgogICAgZnJvbSBzc2wgaW1wb3J0IG1hdGNoX2hvc3RuYW1lLCBDZXJ0aWZpY2F0ZUVycm9yCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIHRyeToKICAgICAgICBmcm9tIGJhY2twb3J0cy5zc2xfbWF0Y2hfaG9zdG5hbWUgaW1wb3J0IG1hdGNoX2hvc3RuYW1lLCBDZXJ0aWZpY2F0ZUVycm9yCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgSEFTX01BVENIX0hPU1ROQU1FID0gRmFsc2UKCmlmIG5vdCBIQVNfTUFUQ0hfSE9TVE5BTUU6CiAgICAjIyMKICAgICMjIyBUaGUgZm9sbG93aW5nIGJsb2NrIG9mIGNvZGUgaXMgdW5kZXIgdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoZQogICAgIyMjIFB5dGhvbiBTb2Z0d2FyZSBGb3VuZGF0aW9uIExpY2Vuc2UKICAgICMjIwoKICAgICIiIlRoZSBtYXRjaF9ob3N0bmFtZSgpIGZ1bmN0aW9uIGZyb20gUHl0aG9uIDMuNCwgZXNzZW50aWFsIHdoZW4gdXNpbmcgU1NMLiIiIgoKICAgIGNsYXNzIENlcnRpZmljYXRlRXJyb3IoVmFsdWVFcnJvcik6CiAgICAgICAgcGFzcwoKCiAgICBkZWYgX2Ruc25hbWVfbWF0Y2goZG4sIGhvc3RuYW1lLCBtYXhfd2lsZGNhcmRzPTEpOgogICAgICAgICIiIk1hdGNoaW5nIGFjY29yZGluZyB0byBSRkMgNjEyNSwgc2VjdGlvbiA2LjQuMwoKICAgICAgICBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2MTI1I3NlY3Rpb24tNi40LjMKICAgICAgICAiIiIKICAgICAgICBwYXRzID0gW10KICAgICAgICBpZiBub3QgZG46CiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICAjIFBvcnRlZCBmcm9tIHB5dGhvbjMtc3ludGF4OgogICAgICAgICMgbGVmdG1vc3QsICpyZW1haW5kZXIgPSBkbi5zcGxpdChyJy4nKQogICAgICAgIHBhcnRzID0gZG4uc3BsaXQocicuJykKICAgICAgICBsZWZ0bW9zdCA9IHBhcnRzWzBdCiAgICAgICAgcmVtYWluZGVyID0gcGFydHNbMTpdCgogICAgICAgIHdpbGRjYXJkcyA9IGxlZnRtb3N0LmNvdW50KCcqJykKICAgICAgICBpZiB3aWxkY2FyZHMgPiBtYXhfd2lsZGNhcmRzOgogICAgICAgICAgICAjIElzc3VlICMxNzk4MDogYXZvaWQgZGVuaWFscyBvZiBzZXJ2aWNlIGJ5IHJlZnVzaW5nIG1vcmUKICAgICAgICAgICAgIyB0aGFuIG9uZSB3aWxkY2FyZCBwZXIgZnJhZ21lbnQuICBBIHN1cnZleSBvZiBlc3RhYmxpc2hlZAogICAgICAgICAgICAjIHBvbGljeSBhbW9uZyBTU0wgaW1wbGVtZW50YXRpb25zIHNob3dlZCBpdCB0byBiZSBhCiAgICAgICAgICAgICMgcmVhc29uYWJsZSBjaG9pY2UuCiAgICAgICAgICAgIHJhaXNlIENlcnRpZmljYXRlRXJyb3IoCiAgICAgICAgICAgICAgICAidG9vIG1hbnkgd2lsZGNhcmRzIGluIGNlcnRpZmljYXRlIEROUyBuYW1lOiAiICsgcmVwcihkbikpCgogICAgICAgICMgc3BlZWQgdXAgY29tbW9uIGNhc2Ugdy9vIHdpbGRjYXJkcwogICAgICAgIGlmIG5vdCB3aWxkY2FyZHM6CiAgICAgICAgICAgIHJldHVybiBkbi5sb3dlcigpID09IGhvc3RuYW1lLmxvd2VyKCkKCiAgICAgICAgIyBSRkMgNjEyNSwgc2VjdGlvbiA2LjQuMywgc3ViaXRlbSAxLgogICAgICAgICMgVGhlIGNsaWVudCBTSE9VTEQgTk9UIGF0dGVtcHQgdG8gbWF0Y2ggYSBwcmVzZW50ZWQgaWRlbnRpZmllciBpbiB3aGljaAogICAgICAgICMgdGhlIHdpbGRjYXJkIGNoYXJhY3RlciBjb21wcmlzZXMgYSBsYWJlbCBvdGhlciB0aGFuIHRoZSBsZWZ0LW1vc3QgbGFiZWwuCiAgICAgICAgaWYgbGVmdG1vc3QgPT0gJyonOgogICAgICAgICAgICAjIFdoZW4gJyonIGlzIGEgZnJhZ21lbnQgYnkgaXRzZWxmLCBpdCBtYXRjaGVzIGEgbm9uLWVtcHR5IGRvdGxlc3MKICAgICAgICAgICAgIyBmcmFnbWVudC4KICAgICAgICAgICAgcGF0cy5hcHBlbmQoJ1teLl0rJykKICAgICAgICBlbGlmIGxlZnRtb3N0LnN0YXJ0c3dpdGgoJ3huLS0nKSBvciBob3N0bmFtZS5zdGFydHN3aXRoKCd4bi0tJyk6CiAgICAgICAgICAgICMgUkZDIDYxMjUsIHNlY3Rpb24gNi40LjMsIHN1Yml0ZW0gMy4KICAgICAgICAgICAgIyBUaGUgY2xpZW50IFNIT1VMRCBOT1QgYXR0ZW1wdCB0byBtYXRjaCBhIHByZXNlbnRlZCBpZGVudGlmaWVyCiAgICAgICAgICAgICMgd2hlcmUgdGhlIHdpbGRjYXJkIGNoYXJhY3RlciBpcyBlbWJlZGRlZCB3aXRoaW4gYW4gQS1sYWJlbCBvcgogICAgICAgICAgICAjIFUtbGFiZWwgb2YgYW4gaW50ZXJuYXRpb25hbGl6ZWQgZG9tYWluIG5hbWUuCiAgICAgICAgICAgIHBhdHMuYXBwZW5kKHJlLmVzY2FwZShsZWZ0bW9zdCkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBPdGhlcndpc2UsICcqJyBtYXRjaGVzIGFueSBkb3RsZXNzIHN0cmluZywgZS5nLiB3d3cqCiAgICAgICAgICAgIHBhdHMuYXBwZW5kKHJlLmVzY2FwZShsZWZ0bW9zdCkucmVwbGFjZShyJ1wqJywgJ1teLl0qJykpCgogICAgICAgICMgYWRkIHRoZSByZW1haW5pbmcgZnJhZ21lbnRzLCBpZ25vcmUgYW55IHdpbGRjYXJkcwogICAgICAgIGZvciBmcmFnIGluIHJlbWFpbmRlcjoKICAgICAgICAgICAgcGF0cy5hcHBlbmQocmUuZXNjYXBlKGZyYWcpKQoKICAgICAgICBwYXQgPSByZS5jb21waWxlKHInXEEnICsgcidcLicuam9pbihwYXRzKSArIHInXFonLCByZS5JR05PUkVDQVNFKQogICAgICAgIHJldHVybiBwYXQubWF0Y2goaG9zdG5hbWUpCgoKICAgIGRlZiBtYXRjaF9ob3N0bmFtZShjZXJ0LCBob3N0bmFtZSk6CiAgICAgICAgIiIiVmVyaWZ5IHRoYXQgKmNlcnQqIChpbiBkZWNvZGVkIGZvcm1hdCBhcyByZXR1cm5lZCBieQogICAgICAgIFNTTFNvY2tldC5nZXRwZWVyY2VydCgpKSBtYXRjaGVzIHRoZSAqaG9zdG5hbWUqLiAgUkZDIDI4MTggYW5kIFJGQyA2MTI1CiAgICAgICAgcnVsZXMgYXJlIGZvbGxvd2VkLCBidXQgSVAgYWRkcmVzc2VzIGFyZSBub3QgYWNjZXB0ZWQgZm9yICpob3N0bmFtZSouCgogICAgICAgIENlcnRpZmljYXRlRXJyb3IgaXMgcmFpc2VkIG9uIGZhaWx1cmUuIE9uIHN1Y2Nlc3MsIHRoZSBmdW5jdGlvbgogICAgICAgIHJldHVybnMgbm90aGluZy4KICAgICAgICAiIiIKICAgICAgICBpZiBub3QgY2VydDoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiZW1wdHkgb3Igbm8gY2VydGlmaWNhdGUiKQogICAgICAgIGRuc25hbWVzID0gW10KICAgICAgICBzYW4gPSBjZXJ0LmdldCgnc3ViamVjdEFsdE5hbWUnLCAoKSkKICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBzYW46CiAgICAgICAgICAgIGlmIGtleSA9PSAnRE5TJzoKICAgICAgICAgICAgICAgIGlmIF9kbnNuYW1lX21hdGNoKHZhbHVlLCBob3N0bmFtZSk6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICBkbnNuYW1lcy5hcHBlbmQodmFsdWUpCiAgICAgICAgaWYgbm90IGRuc25hbWVzOgogICAgICAgICAgICAjIFRoZSBzdWJqZWN0IGlzIG9ubHkgY2hlY2tlZCB3aGVuIHRoZXJlIGlzIG5vIGROU05hbWUgZW50cnkKICAgICAgICAgICAgIyBpbiBzdWJqZWN0QWx0TmFtZQogICAgICAgICAgICBmb3Igc3ViIGluIGNlcnQuZ2V0KCdzdWJqZWN0JywgKCkpOgogICAgICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gc3ViOgogICAgICAgICAgICAgICAgICAgICMgWFhYIGFjY29yZGluZyB0byBSRkMgMjgxOCwgdGhlIG1vc3Qgc3BlY2lmaWMgQ29tbW9uIE5hbWUKICAgICAgICAgICAgICAgICAgICAjIG11c3QgYmUgdXNlZC4KICAgICAgICAgICAgICAgICAgICBpZiBrZXkgPT0gJ2NvbW1vbk5hbWUnOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBfZG5zbmFtZV9tYXRjaCh2YWx1ZSwgaG9zdG5hbWUpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgIGRuc25hbWVzLmFwcGVuZCh2YWx1ZSkKICAgICAgICBpZiBsZW4oZG5zbmFtZXMpID4gMToKICAgICAgICAgICAgcmFpc2UgQ2VydGlmaWNhdGVFcnJvcigiaG9zdG5hbWUgJXIgIgogICAgICAgICAgICAgICAgImRvZXNuJ3QgbWF0Y2ggZWl0aGVyIG9mICVzIgogICAgICAgICAgICAgICAgJSAoaG9zdG5hbWUsICcsICcuam9pbihtYXAocmVwciwgZG5zbmFtZXMpKSkpCiAgICAgICAgZWxpZiBsZW4oZG5zbmFtZXMpID09IDE6CiAgICAgICAgICAgIHJhaXNlIENlcnRpZmljYXRlRXJyb3IoImhvc3RuYW1lICVyICIKICAgICAgICAgICAgICAgICJkb2Vzbid0IG1hdGNoICVyIgogICAgICAgICAgICAgICAgJSAoaG9zdG5hbWUsIGRuc25hbWVzWzBdKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICByYWlzZSBDZXJ0aWZpY2F0ZUVycm9yKCJubyBhcHByb3ByaWF0ZSBjb21tb25OYW1lIG9yICIKICAgICAgICAgICAgICAgICJzdWJqZWN0QWx0TmFtZSBmaWVsZHMgd2VyZSBmb3VuZCIpCgogICAgIyMjCiAgICAjIyMgRW5kIG9mIFB5dGhvbiBTb2Z0d2FyZSBGb3VuZGF0aW9uIExpY2Vuc2VkIGNvZGUKICAgICMjIwoKICAgIEhBU19NQVRDSF9IT1NUTkFNRSA9IFRydWUKCgojIFRoaXMgaXMgYSBkdW1teSBjYWNlcnQgcHJvdmlkZWQgZm9yIE1hYyBPUyBzaW5jZSB5b3UgbmVlZCBhdCBsZWFzdCAxCiMgY2EgY2VydCwgcmVnYXJkbGVzcyBvZiB2YWxpZGl0eSwgZm9yIFB5dGhvbiBvbiBNYWMgT1MgdG8gdXNlIHRoZQojIGtleWNoYWluIGZ1bmN0aW9uYWxpdHkgaW4gT3BlblNTTCBmb3IgdmFsaWRhdGluZyBTU0wgY2VydGlmaWNhdGVzLgojIFNlZTogaHR0cDovL21lcmN1cmlhbC5zZWxlbmljLmNvbS93aWtpL0NBQ2VydGlmaWNhdGVzI01hY19PU19YXzEwLjZfYW5kX2hpZ2hlcgpiX0RVTU1ZX0NBX0NFUlQgPSBiKCIiIi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDdkRDQ0FpV2dBd0lCQWdJSkFPOEUxMlM3L3FFcE1BMEdDU3FHU0liM0RRRUJCUVVBTUVreEN6QUpCZ05WCkJBWVRBbFZUTVJjd0ZRWURWUVFJRXc1T2IzSjBhQ0JEWVhKdmJHbHVZVEVQTUEwR0ExVUVCeE1HUkhWeWFHRnQKTVJBd0RnWURWUVFLRXdkQmJuTnBZbXhsTUI0WERURTBNRE14T0RJeU1EQXlNbG9YRFRJME1ETXhOVEl5TURBeQpNbG93U1RFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1ROHdEUVlEClZRUUhFd1pFZFhKb1lXMHhFREFPQmdOVkJBb1RCMEZ1YzJsaWJHVXdnWjh3RFFZSktvWklodmNOQVFFQkJRQUQKZ1kwQU1JR0pBb0dCQU50dnBQcTNJbE5sUmJDSGhaQWNQNldDemhjNVJic0RxeWgxenJrbUxpMEd3Y1Ezei9yOQpnYVdmUUJZaEhwb2JLMlRpcTExVGZyYUhlTkIzL1ZmTkltalpjR3BOOEZsM01Xd3U3TGZWa0p5M2dOTm54a0ExCjRHbzAvTG1JdlJGSGhiemdmdW85TkZnalBtbWFiOWVxWEpjZXFaSWx6MkM4eEE3RWVHN2t1MCt2QWdNQkFBR2oKZ2Fzd2dhZ3dIUVlEVlIwT0JCWUVGUG5OMW5QUnFORFhHbENxQ3ZkWmNoUk5pL0ZhTUhrR0ExVWRJd1J5TUhDQQpGUG5OMW5QUnFORFhHbENxQ3ZkWmNoUk5pL0Zhb1Uya1N6QkpNUXN3Q1FZRFZRUUdFd0pWVXpFWE1CVUdBMVVFCkNCTU9UbTl5ZEdnZ1EyRnliMnhwYm1FeER6QU5CZ05WQkFjVEJrUjFjbWhoYlRFUU1BNEdBMVVFQ2hNSFFXNXoKYVdKc1pZSUpBTzhFMTJTNy9xRXBNQXdHQTFVZEV3UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUZCUUFEZ1lFQQpNVUI4MElSNmtucTlLL3RZK2h2UHNaZXI2ZUZNek8zSkdrUkZCaDJrbjZKZE1EbmhZR1g3QVhWSEdmbHJ3TlFICnFGeSthZW5XWHNDMFp2cmlrRnhiUW5YOEdWdERBRHRWem54T2k3WHpGdzdKT3hkc1ZycFhnU04wZWgwYU16dlYKektQWnNaMm1pVkdjbGljSkh6bTVxMDgwYjFwL3NadHVLSUVaazZ2WnFFZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoiIiIpCgojCiMgRXhjZXB0aW9ucwojCgoKY2xhc3MgQ29ubmVjdGlvbkVycm9yKEV4Y2VwdGlvbik6CiAgICAiIiJGYWlsZWQgdG8gY29ubmVjdCB0byB0aGUgc2VydmVyIiIiCiAgICBwYXNzCgoKY2xhc3MgUHJveHlFcnJvcihDb25uZWN0aW9uRXJyb3IpOgogICAgIiIiRmFpbHVyZSB0byBjb25uZWN0IGJlY2F1c2Ugb2YgYSBwcm94eSIiIgogICAgcGFzcwoKCmNsYXNzIFNTTFZhbGlkYXRpb25FcnJvcihDb25uZWN0aW9uRXJyb3IpOgogICAgIiIiRmFpbHVyZSB0byBjb25uZWN0IGR1ZSB0byBTU0wgdmFsaWRhdGlvbiBmYWlsaW5nIiIiCiAgICBwYXNzCgoKY2xhc3MgTm9TU0xFcnJvcihTU0xWYWxpZGF0aW9uRXJyb3IpOgogICAgIiIiTmVlZGVkIHRvIGNvbm5lY3QgdG8gYW4gSFRUUFMgdXJsIGJ1dCBubyBzc2wgbGlicmFyeSBhdmFpbGFibGUgdG8gdmVyaWZ5IHRoZSBjZXJ0aWZpY2F0ZSIiIgogICAgcGFzcwoKIyBTb21lIGVudmlyb25tZW50cyAoR29vZ2xlIENvbXB1dGUgRW5naW5lJ3MgQ29yZU9TIGRlcGxveXMpIGRvIG5vdCBjb21waWxlCiMgYWdhaW5zdCBvcGVuc3NsIGFuZCB0aHVzIGRvIG5vdCBoYXZlIGFueSBIVFRQUyBzdXBwb3J0LgpDdXN0b21IVFRQU0Nvbm5lY3Rpb24gPSBDdXN0b21IVFRQU0hhbmRsZXIgPSBOb25lCmlmIGhhc2F0dHIoaHR0cGxpYiwgJ0hUVFBTQ29ubmVjdGlvbicpIGFuZCBoYXNhdHRyKHVybGxpYl9yZXF1ZXN0LCAnSFRUUFNIYW5kbGVyJyk6CiAgICBjbGFzcyBDdXN0b21IVFRQU0Nvbm5lY3Rpb24oaHR0cGxpYi5IVFRQU0Nvbm5lY3Rpb24pOgogICAgICAgIGRlZiBfX2luaXRfXyhzZWxmLCAqYXJncywgKiprd2FyZ3MpOgogICAgICAgICAgICBodHRwbGliLkhUVFBTQ29ubmVjdGlvbi5fX2luaXRfXyhzZWxmLCAqYXJncywgKiprd2FyZ3MpCiAgICAgICAgICAgIHNlbGYuY29udGV4dCA9IE5vbmUKICAgICAgICAgICAgaWYgSEFTX1NTTENPTlRFWFQ6CiAgICAgICAgICAgICAgICBzZWxmLmNvbnRleHQgPSBjcmVhdGVfZGVmYXVsdF9jb250ZXh0KCkKICAgICAgICAgICAgZWxpZiBIQVNfVVJMTElCM19QWU9QRU5TU0xDT05URVhUOgogICAgICAgICAgICAgICAgc2VsZi5jb250ZXh0ID0gUHlPcGVuU1NMQ29udGV4dChQUk9UT0NPTCkKICAgICAgICAgICAgaWYgc2VsZi5jb250ZXh0IGFuZCBzZWxmLmNlcnRfZmlsZToKICAgICAgICAgICAgICAgIHNlbGYuY29udGV4dC5sb2FkX2NlcnRfY2hhaW4oc2VsZi5jZXJ0X2ZpbGUsIHNlbGYua2V5X2ZpbGUpCgogICAgICAgIGRlZiBjb25uZWN0KHNlbGYpOgogICAgICAgICAgICAiQ29ubmVjdCB0byBhIGhvc3Qgb24gYSBnaXZlbiAoU1NMKSBwb3J0LiIKCiAgICAgICAgICAgIGlmIGhhc2F0dHIoc2VsZiwgJ3NvdXJjZV9hZGRyZXNzJyk6CiAgICAgICAgICAgICAgICBzb2NrID0gc29ja2V0LmNyZWF0ZV9jb25uZWN0aW9uKChzZWxmLmhvc3QsIHNlbGYucG9ydCksIHNlbGYudGltZW91dCwgc2VsZi5zb3VyY2VfYWRkcmVzcykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNvY2sgPSBzb2NrZXQuY3JlYXRlX2Nvbm5lY3Rpb24oKHNlbGYuaG9zdCwgc2VsZi5wb3J0KSwgc2VsZi50aW1lb3V0KQoKICAgICAgICAgICAgc2VydmVyX2hvc3RuYW1lID0gc2VsZi5ob3N0CiAgICAgICAgICAgICMgTm90ZTogc2VsZi5fdHVubmVsX2hvc3QgaXMgbm90IGF2YWlsYWJsZSBvbiBweSA8IDIuNiBidXQgdGhpcyBjb2RlCiAgICAgICAgICAgICMgaXNuJ3QgdXNlZCBvbiBweSA8IDIuNiAobGFjayBvZiBjcmVhdGVfY29ubmVjdGlvbikKICAgICAgICAgICAgaWYgc2VsZi5fdHVubmVsX2hvc3Q6CiAgICAgICAgICAgICAgICBzZWxmLnNvY2sgPSBzb2NrCiAgICAgICAgICAgICAgICBzZWxmLl90dW5uZWwoKQogICAgICAgICAgICAgICAgc2VydmVyX2hvc3RuYW1lID0gc2VsZi5fdHVubmVsX2hvc3QKCiAgICAgICAgICAgIGlmIEhBU19TU0xDT05URVhUIG9yIEhBU19VUkxMSUIzX1BZT1BFTlNTTENPTlRFWFQ6CiAgICAgICAgICAgICAgICBzZWxmLnNvY2sgPSBzZWxmLmNvbnRleHQud3JhcF9zb2NrZXQoc29jaywgc2VydmVyX2hvc3RuYW1lPXNlcnZlcl9ob3N0bmFtZSkKICAgICAgICAgICAgZWxpZiBIQVNfVVJMTElCM19TU0xfV1JBUF9TT0NLRVQ6CiAgICAgICAgICAgICAgICBzZWxmLnNvY2sgPSBzc2xfd3JhcF9zb2NrZXQoc29jaywga2V5ZmlsZT1zZWxmLmtleV9maWxlLCBjZXJ0X3JlcXM9c3NsLkNFUlRfTk9ORSwgY2VydGZpbGU9c2VsZi5jZXJ0X2ZpbGUsIHNzbF92ZXJzaW9uPVBST1RPQ09MLAogICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJfaG9zdG5hbWU9c2VydmVyX2hvc3RuYW1lKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5zb2NrID0gc3NsLndyYXBfc29ja2V0KHNvY2ssIGtleWZpbGU9c2VsZi5rZXlfZmlsZSwgY2VydGZpbGU9c2VsZi5jZXJ0X2ZpbGUsIHNzbF92ZXJzaW9uPVBST1RPQ09MKQoKICAgIGNsYXNzIEN1c3RvbUhUVFBTSGFuZGxlcih1cmxsaWJfcmVxdWVzdC5IVFRQU0hhbmRsZXIpOgoKICAgICAgICBkZWYgaHR0cHNfb3BlbihzZWxmLCByZXEpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5kb19vcGVuKEN1c3RvbUhUVFBTQ29ubmVjdGlvbiwgcmVxKQoKICAgICAgICBodHRwc19yZXF1ZXN0ID0gQWJzdHJhY3RIVFRQSGFuZGxlci5kb19yZXF1ZXN0XwoKCmNsYXNzIEhUVFBTQ2xpZW50QXV0aEhhbmRsZXIodXJsbGliX3JlcXVlc3QuSFRUUFNIYW5kbGVyKToKICAgICcnJ0hhbmRsZXMgY2xpZW50IGF1dGhlbnRpY2F0aW9uIHZpYSBjZXJ0L2tleQoKICAgIFRoaXMgaXMgYSBmYWlybHkgbGlnaHR3ZWlnaHQgZXh0ZW5zaW9uIG9uIEhUVFBTSGFuZGxlciwgYW5kIGNhbiBiZSB1c2VkCiAgICBpbiBwbGFjZSBvZiBIVFRQU0hhbmRsZXIKICAgICcnJwoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjbGllbnRfY2VydD1Ob25lLCBjbGllbnRfa2V5PU5vbmUsICoqa3dhcmdzKToKICAgICAgICB1cmxsaWJfcmVxdWVzdC5IVFRQU0hhbmRsZXIuX19pbml0X18oc2VsZiwgKiprd2FyZ3MpCiAgICAgICAgc2VsZi5jbGllbnRfY2VydCA9IGNsaWVudF9jZXJ0CiAgICAgICAgc2VsZi5jbGllbnRfa2V5ID0gY2xpZW50X2tleQoKICAgIGRlZiBodHRwc19vcGVuKHNlbGYsIHJlcSk6CiAgICAgICAgcmV0dXJuIHNlbGYuZG9fb3BlbihzZWxmLl9idWlsZF9odHRwc19jb25uZWN0aW9uLCByZXEpCgogICAgZGVmIF9idWlsZF9odHRwc19jb25uZWN0aW9uKHNlbGYsIGhvc3QsICoqa3dhcmdzKToKICAgICAgICBrd2FyZ3MudXBkYXRlKHsKICAgICAgICAgICAgJ2NlcnRfZmlsZSc6IHNlbGYuY2xpZW50X2NlcnQsCiAgICAgICAgICAgICdrZXlfZmlsZSc6IHNlbGYuY2xpZW50X2tleSwKICAgICAgICB9KQogICAgICAgIHRyeToKICAgICAgICAgICAga3dhcmdzWydjb250ZXh0J10gPSBzZWxmLl9jb250ZXh0CiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICBwYXNzCiAgICAgICAgcmV0dXJuIGh0dHBsaWIuSFRUUFNDb25uZWN0aW9uKGhvc3QsICoqa3dhcmdzKQoKCmRlZiBnZW5lcmljX3VybHBhcnNlKHBhcnRzKToKICAgICcnJwogICAgUmV0dXJucyBhIGRpY3Rpb25hcnkgb2YgdXJsIHBhcnRzIGFzIHBhcnNlZCBieSB1cmxwYXJzZSwKICAgIGJ1dCBhY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBvbGRlciB2ZXJzaW9ucyBvZiB0aGF0CiAgICBsaWJyYXJ5IGRvIG5vdCBzdXBwb3J0IG5hbWVkIGF0dHJpYnV0ZXMgKGllLiAubmV0bG9jKQogICAgJycnCiAgICBnZW5lcmljX3BhcnRzID0gZGljdCgpCiAgICBpZiBoYXNhdHRyKHBhcnRzLCAnbmV0bG9jJyk6CiAgICAgICAgIyB1cmxwYXJzZSBpcyBuZXdlciwganVzdCByZWFkIHRoZSBmaWVsZHMgc3RyYWlnaHQKICAgICAgICAjIGZyb20gdGhlIHBhcnRzIG9iamVjdAogICAgICAgIGdlbmVyaWNfcGFydHNbJ3NjaGVtZSddICAgPSBwYXJ0cy5zY2hlbWUKICAgICAgICBnZW5lcmljX3BhcnRzWyduZXRsb2MnXSAgID0gcGFydHMubmV0bG9jCiAgICAgICAgZ2VuZXJpY19wYXJ0c1sncGF0aCddICAgICA9IHBhcnRzLnBhdGgKICAgICAgICBnZW5lcmljX3BhcnRzWydwYXJhbXMnXSAgID0gcGFydHMucGFyYW1zCiAgICAgICAgZ2VuZXJpY19wYXJ0c1sncXVlcnknXSAgICA9IHBhcnRzLnF1ZXJ5CiAgICAgICAgZ2VuZXJpY19wYXJ0c1snZnJhZ21lbnQnXSA9IHBhcnRzLmZyYWdtZW50CiAgICAgICAgZ2VuZXJpY19wYXJ0c1sndXNlcm5hbWUnXSA9IHBhcnRzLnVzZXJuYW1lCiAgICAgICAgZ2VuZXJpY19wYXJ0c1sncGFzc3dvcmQnXSA9IHBhcnRzLnBhc3N3b3JkCiAgICAgICAgZ2VuZXJpY19wYXJ0c1snaG9zdG5hbWUnXSA9IHBhcnRzLmhvc3RuYW1lCiAgICAgICAgZ2VuZXJpY19wYXJ0c1sncG9ydCddICAgICA9IHBhcnRzLnBvcnQKICAgIGVsc2U6CiAgICAgICAgIyB3ZSBoYXZlIHRvIHVzZSBpbmRleGVzLCBhbmQgdGhlbiBwYXJzZSBvdXQKICAgICAgICAjIHRoZSBvdGhlciBwYXJ0cyBub3Qgc3VwcG9ydGVkIGJ5IGluZGV4aW5nCiAgICAgICAgZ2VuZXJpY19wYXJ0c1snc2NoZW1lJ10gICA9IHBhcnRzWzBdCiAgICAgICAgZ2VuZXJpY19wYXJ0c1snbmV0bG9jJ10gICA9IHBhcnRzWzFdCiAgICAgICAgZ2VuZXJpY19wYXJ0c1sncGF0aCddICAgICA9IHBhcnRzWzJdCiAgICAgICAgZ2VuZXJpY19wYXJ0c1sncGFyYW1zJ10gICA9IHBhcnRzWzNdCiAgICAgICAgZ2VuZXJpY19wYXJ0c1sncXVlcnknXSAgICA9IHBhcnRzWzRdCiAgICAgICAgZ2VuZXJpY19wYXJ0c1snZnJhZ21lbnQnXSA9IHBhcnRzWzVdCiAgICAgICAgIyBnZXQgdGhlIHVzZXJuYW1lLCBwYXNzd29yZCwgZXRjLgogICAgICAgIHRyeToKICAgICAgICAgICAgbmV0bG9jX3JlID0gcmUuY29tcGlsZShyJ14oKD86XHcpKyg/OjooPzpcdykrKT9AKT8oW0EtWmEtejAtOS4tXSspKDpcZCspPyQnKQogICAgICAgICAgICBtYXRjaCA9IG5ldGxvY19yZS5tYXRjaChwYXJ0c1sxXSkKICAgICAgICAgICAgYXV0aCA9IG1hdGNoLmdyb3VwKDEpCiAgICAgICAgICAgIGhvc3RuYW1lID0gbWF0Y2guZ3JvdXAoMikKICAgICAgICAgICAgcG9ydCA9IG1hdGNoLmdyb3VwKDMpCiAgICAgICAgICAgIGlmIHBvcnQ6CiAgICAgICAgICAgICAgICAjIHRoZSBjYXB0dXJlIGdyb3VwIGZvciB0aGUgcG9ydCB3aWxsIGluY2x1ZGUgdGhlICc6JywKICAgICAgICAgICAgICAgICMgc28gcmVtb3ZlIGl0IGFuZCBjb252ZXJ0IHRoZSBwb3J0IHRvIGFuIGludGVnZXIKICAgICAgICAgICAgICAgIHBvcnQgPSBpbnQocG9ydFsxOl0pCiAgICAgICAgICAgIGlmIGF1dGg6CiAgICAgICAgICAgICAgICAjIHRoZSBjYXB0dXJlIGdyb3VwIGFib3ZlIGluY2x1ZXMgdGhlIEAsIHNvIHJlbW92ZSBpdAogICAgICAgICAgICAgICAgIyBhbmQgdGhlbiBzcGxpdCBpdCB1cCBiYXNlZCBvbiB0aGUgZmlyc3QgJzonIGZvdW5kCiAgICAgICAgICAgICAgICBhdXRoID0gYXV0aFs6LTFdCiAgICAgICAgICAgICAgICB1c2VybmFtZSwgcGFzc3dvcmQgPSBhdXRoLnNwbGl0KCc6JywgMSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gcGFzc3dvcmQgPSBOb25lCiAgICAgICAgICAgIGdlbmVyaWNfcGFydHNbJ3VzZXJuYW1lJ10gPSB1c2VybmFtZQogICAgICAgICAgICBnZW5lcmljX3BhcnRzWydwYXNzd29yZCddID0gcGFzc3dvcmQKICAgICAgICAgICAgZ2VuZXJpY19wYXJ0c1snaG9zdG5hbWUnXSA9IGhvc3RuYW1lCiAgICAgICAgICAgIGdlbmVyaWNfcGFydHNbJ3BvcnQnXSAgICAgPSBwb3J0CiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBnZW5lcmljX3BhcnRzWyd1c2VybmFtZSddID0gTm9uZQogICAgICAgICAgICBnZW5lcmljX3BhcnRzWydwYXNzd29yZCddID0gTm9uZQogICAgICAgICAgICBnZW5lcmljX3BhcnRzWydob3N0bmFtZSddID0gcGFydHNbMV0KICAgICAgICAgICAgZ2VuZXJpY19wYXJ0c1sncG9ydCddICAgICA9IE5vbmUKICAgIHJldHVybiBnZW5lcmljX3BhcnRzCgoKY2xhc3MgUmVxdWVzdFdpdGhNZXRob2QodXJsbGliX3JlcXVlc3QuUmVxdWVzdCk6CiAgICAnJycKICAgIFdvcmthcm91bmQgZm9yIHVzaW5nIERFTEVURS9QVVQvZXRjIHdpdGggdXJsbGliMgogICAgT3JpZ2luYWxseSBjb250YWluZWQgaW4gbGlicmFyeS9uZXRfaW5mcmFzdHJ1Y3R1cmUvZG5zbWFkZWVhc3kKICAgICcnJwoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCB1cmwsIG1ldGhvZCwgZGF0YT1Ob25lLCBoZWFkZXJzPU5vbmUpOgogICAgICAgIGlmIGhlYWRlcnMgaXMgTm9uZToKICAgICAgICAgICAgaGVhZGVycyA9IHt9CiAgICAgICAgc2VsZi5fbWV0aG9kID0gbWV0aG9kLnVwcGVyKCkKICAgICAgICB1cmxsaWJfcmVxdWVzdC5SZXF1ZXN0Ll9faW5pdF9fKHNlbGYsIHVybCwgZGF0YSwgaGVhZGVycykKCiAgICBkZWYgZ2V0X21ldGhvZChzZWxmKToKICAgICAgICBpZiBzZWxmLl9tZXRob2Q6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9tZXRob2QKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gdXJsbGliX3JlcXVlc3QuUmVxdWVzdC5nZXRfbWV0aG9kKHNlbGYpCgoKZGVmIFJlZGlyZWN0SGFuZGxlckZhY3RvcnkoZm9sbG93X3JlZGlyZWN0cz1Ob25lLCB2YWxpZGF0ZV9jZXJ0cz1UcnVlKToKICAgICIiIlRoaXMgaXMgYSBjbGFzcyBmYWN0b3J5IHRoYXQgY2xvc2VzIG92ZXIgdGhlIHZhbHVlIG9mCiAgICBgYGZvbGxvd19yZWRpcmVjdHNgYCBzbyB0aGF0IHRoZSBSZWRpcmVjdEhhbmRsZXIgY2xhc3MgaGFzIGFjY2VzcyB0bwogICAgdGhhdCB2YWx1ZSB3aXRob3V0IGhhdmluZyB0byB1c2UgZ2xvYmFscywgYW5kIHBvdGVudGlhbGx5IGNhdXNlIHByb2JsZW1zCiAgICB3aGVyZSBgYG9wZW5fdXJsYGAgb3IgYGBmZXRjaF91cmxgYCBhcmUgdXNlZCBtdWx0aXBsZSB0aW1lcyBpbiBhIG1vZHVsZS4KICAgICIiIgoKICAgIGNsYXNzIFJlZGlyZWN0SGFuZGxlcih1cmxsaWJfcmVxdWVzdC5IVFRQUmVkaXJlY3RIYW5kbGVyKToKICAgICAgICAiIiJUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGEgUmVkaXJlY3RIYW5kbGVyIHRvIG1hdGNoIHRoZQogICAgICAgIGZ1bmN0aW9uYWxpdHkgcHJvdmlkZWQgYnkgaHR0cGxpYjIuIEl0IHdpbGwgdXRpbGl6ZSB0aGUgdmFsdWUgb2YKICAgICAgICBgYGZvbGxvd19yZWRpcmVjdHNgYCB0aGF0IGlzIHBhc3NlZCBpbnRvIGBgUmVkaXJlY3RIYW5kbGVyRmFjdG9yeWBgCiAgICAgICAgdG8gZGV0ZXJtaW5lIGhvdyByZWRpcmVjdHMgc2hvdWxkIGJlIGhhbmRsZWQgaW4gdXJsbGliMi4KICAgICAgICAiIiIKCiAgICAgICAgZGVmIHJlZGlyZWN0X3JlcXVlc3Qoc2VsZiwgcmVxLCBmcCwgY29kZSwgbXNnLCBoZHJzLCBuZXd1cmwpOgogICAgICAgICAgICBoYW5kbGVyID0gbWF5YmVfYWRkX3NzbF9oYW5kbGVyKG5ld3VybCwgdmFsaWRhdGVfY2VydHMpCiAgICAgICAgICAgIGlmIGhhbmRsZXI6CiAgICAgICAgICAgICAgICB1cmxsaWJfcmVxdWVzdC5fb3BlbmVyLmFkZF9oYW5kbGVyKGhhbmRsZXIpCgogICAgICAgICAgICBpZiBmb2xsb3dfcmVkaXJlY3RzID09ICd1cmxsaWIyJzoKICAgICAgICAgICAgICAgIHJldHVybiB1cmxsaWJfcmVxdWVzdC5IVFRQUmVkaXJlY3RIYW5kbGVyLnJlZGlyZWN0X3JlcXVlc3Qoc2VsZiwgcmVxLCBmcCwgY29kZSwgbXNnLCBoZHJzLCBuZXd1cmwpCiAgICAgICAgICAgIGVsaWYgZm9sbG93X3JlZGlyZWN0cyBpbiBbJ25vJywgJ25vbmUnLCBGYWxzZV06CiAgICAgICAgICAgICAgICByYWlzZSB1cmxsaWJfZXJyb3IuSFRUUEVycm9yKG5ld3VybCwgY29kZSwgbXNnLCBoZHJzLCBmcCkKCiAgICAgICAgICAgIGRvX3JlZGlyZWN0ID0gRmFsc2UKICAgICAgICAgICAgaWYgZm9sbG93X3JlZGlyZWN0cyBpbiBbJ2FsbCcsICd5ZXMnLCBUcnVlXToKICAgICAgICAgICAgICAgIGRvX3JlZGlyZWN0ID0gKGNvZGUgPj0gMzAwIGFuZCBjb2RlIDwgNDAwKQoKICAgICAgICAgICAgZWxpZiBmb2xsb3dfcmVkaXJlY3RzID09ICdzYWZlJzoKICAgICAgICAgICAgICAgIG0gPSByZXEuZ2V0X21ldGhvZCgpCiAgICAgICAgICAgICAgICBkb19yZWRpcmVjdCA9IChjb2RlID49IDMwMCBhbmQgY29kZSA8IDQwMCBhbmQgbSBpbiAoJ0dFVCcsICdIRUFEJykpCgogICAgICAgICAgICBpZiBkb19yZWRpcmVjdDoKICAgICAgICAgICAgICAgICMgYmUgY29uY2lsaWFudCB3aXRoIFVSSXMgY29udGFpbmluZyBhIHNwYWNlCiAgICAgICAgICAgICAgICBuZXd1cmwgPSBuZXd1cmwucmVwbGFjZSgnICcsICclMjAnKQogICAgICAgICAgICAgICAgbmV3aGVhZGVycyA9IGRpY3QoKGssdikgZm9yIGssdiBpbiByZXEuaGVhZGVycy5pdGVtcygpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBrLmxvd2VyKCkgbm90IGluICgiY29udGVudC1sZW5ndGgiLCAiY29udGVudC10eXBlIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICMgUHl0aG9uIDItMy4zCiAgICAgICAgICAgICAgICAgICAgb3JpZ2luX3JlcV9ob3N0ID0gcmVxLmdldF9vcmlnaW5fcmVxX2hvc3QoKQogICAgICAgICAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICAgICAgICAgICMgUHl0aG9uIDMuNCsKICAgICAgICAgICAgICAgICAgICBvcmlnaW5fcmVxX2hvc3QgPSByZXEub3JpZ2luX3JlcV9ob3N0CiAgICAgICAgICAgICAgICByZXR1cm4gdXJsbGliX3JlcXVlc3QuUmVxdWVzdChuZXd1cmwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPW5ld2hlYWRlcnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5fcmVxX2hvc3Q9b3JpZ2luX3JlcV9ob3N0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW52ZXJpZmlhYmxlPVRydWUpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByYWlzZSB1cmxsaWJfZXJyb3IuSFRUUEVycm9yKHJlcS5nZXRfZnVsbF91cmwoKSwgY29kZSwgbXNnLCBoZHJzLCBmcCkKCiAgICByZXR1cm4gUmVkaXJlY3RIYW5kbGVyCgoKZGVmIGJ1aWxkX3NzbF92YWxpZGF0aW9uX2Vycm9yKGhvc3RuYW1lLCBwb3J0LCBwYXRocywgZXhjPU5vbmUpOgogICAgJycnSW50ZWxpZ2VudGx5IGJ1aWxkIG91dCB0aGUgU1NMVmFsaWRhdGlvbkVycm9yIGJhc2VkIG9uIHdoYXQgc3VwcG9ydAogICAgeW91IGhhdmUgaW5zdGFsbGVkCiAgICAnJycKCiAgICBtc2cgPSBbCiAgICAgICAgKCdGYWlsZWQgdG8gdmFsaWRhdGUgdGhlIFNTTCBjZXJ0aWZpY2F0ZSBmb3IgJXM6JXMuJwogICAgICAgICAnIE1ha2Ugc3VyZSB5b3VyIG1hbmFnZWQgc3lzdGVtcyBoYXZlIGEgdmFsaWQgQ0EnCiAgICAgICAgICcgY2VydGlmaWNhdGUgaW5zdGFsbGVkLicpCiAgICBdCiAgICBpZiBub3QgSEFTX1NTTENPTlRFWFQ6CiAgICAgICAgbXNnLmFwcGVuZCgnSWYgdGhlIHdlYnNpdGUgc2VydmluZyB0aGUgdXJsIHVzZXMgU05JIHlvdSBuZWVkJwogICAgICAgICAgICAgICAgICAgJyBweXRob24gPj0gMi43Ljkgb24geW91ciBtYW5hZ2VkIG1hY2hpbmUnKQogICAgICAgIGlmIG5vdCBIQVNfVVJMTElCM19QWU9QRU5TU0xDT05URVhUIG9yIG5vdCBIQVNfVVJMTElCM19TU0xfV1JBUF9TT0NLRVQ6CiAgICAgICAgICAgIG1zZy5hcHBlbmQoJ29yIHlvdSBjYW4gaW5zdGFsbCB0aGUgYHVybGxpYjNgLCBgcHlPcGVuU1NMYCwnCiAgICAgICAgICAgICAgICAgICAgICAgJyBgbmRnLWh0dHBzY2xpZW50YCwgYW5kIGBweWFzbjFgIHB5dGhvbiBtb2R1bGVzJykKCiAgICAgICAgbXNnLmFwcGVuZCgndG8gcGVyZm9ybSBTTkkgdmVyaWZpY2F0aW9uIGluIHB5dGhvbiA+PSAyLjYuJykKCiAgICBtc2cuYXBwZW5kKCdZb3UgY2FuIHVzZSB2YWxpZGF0ZV9jZXJ0cz1GYWxzZSBpZiB5b3UgZG8nCiAgICAgICAgICAgICAgICcgbm90IG5lZWQgdG8gY29uZmlybSB0aGUgc2VydmVycyBpZGVudGl0eSBidXQgdGhpcyBpcycKICAgICAgICAgICAgICAgJyB1bnNhZmUgYW5kIG5vdCByZWNvbW1lbmRlZC4nCiAgICAgICAgICAgICAgICcgUGF0aHMgY2hlY2tlZCBmb3IgdGhpcyBwbGF0Zm9ybTogJXMuJykKCiAgICBpZiBleGM6CiAgICAgICAgbXNnLmFwcGVuZCgnVGhlIGV4Y2VwdGlvbiBtc2cgd2FzOiAlcy4nICUgdG9fbmF0aXZlKGV4YykpCgogICAgcmFpc2UgU1NMVmFsaWRhdGlvbkVycm9yKCcgJy5qb2luKG1zZykgJSAoaG9zdG5hbWUsIHBvcnQsICIsICIuam9pbihwYXRocykpKQoKCmNsYXNzIFNTTFZhbGlkYXRpb25IYW5kbGVyKHVybGxpYl9yZXF1ZXN0LkJhc2VIYW5kbGVyKToKICAgICcnJwogICAgQSBjdXN0b20gaGFuZGxlciBjbGFzcyBmb3IgU1NMIHZhbGlkYXRpb24uCgogICAgQmFzZWQgb246CiAgICBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwODcyMjcvdmFsaWRhdGUtc3NsLWNlcnRpZmljYXRlcy13aXRoLXB5dGhvbgogICAgaHR0cDovL3RlY2hrbmFjay5uZXQvcHl0aG9uLXVybGxpYjItaGFuZGxlcnMvCiAgICAnJycKICAgIENPTk5FQ1RfQ09NTUFORCA9ICJDT05ORUNUICVzOiVzIEhUVFAvMS4wXHJcbkNvbm5lY3Rpb246IGNsb3NlXHJcbiIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgaG9zdG5hbWUsIHBvcnQpOgogICAgICAgIHNlbGYuaG9zdG5hbWUgPSBob3N0bmFtZQogICAgICAgIHNlbGYucG9ydCA9IHBvcnQKCiAgICBkZWYgZ2V0X2NhX2NlcnRzKHNlbGYpOgogICAgICAgICMgdHJpZXMgdG8gZmluZCBhIHZhbGlkIENBIGNlcnQgaW4gb25lIG9mIHRoZQogICAgICAgICMgc3RhbmRhcmQgbG9jYXRpb25zIGZvciB0aGUgY3VycmVudCBkaXN0cmlidXRpb24KCiAgICAgICAgY2FfY2VydHMgPSBbXQogICAgICAgIHBhdGhzX2NoZWNrZWQgPSBbXQoKICAgICAgICBzeXN0ZW0gPSB0b190ZXh0KHBsYXRmb3JtLnN5c3RlbSgpLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQogICAgICAgICMgYnVpbGQgYSBsaXN0IG9mIHBhdGhzIHRvIGNoZWNrIGZvciAuY3J0Ly5wZW0gZmlsZXMKICAgICAgICAjIGJhc2VkIG9uIHRoZSBwbGF0Zm9ybSB0eXBlCiAgICAgICAgcGF0aHNfY2hlY2tlZC5hcHBlbmQoJy9ldGMvc3NsL2NlcnRzJykKICAgICAgICBpZiBzeXN0ZW0gPT0gdSdMaW51eCc6CiAgICAgICAgICAgIHBhdGhzX2NoZWNrZWQuYXBwZW5kKCcvZXRjL3BraS9jYS10cnVzdC9leHRyYWN0ZWQvcGVtJykKICAgICAgICAgICAgcGF0aHNfY2hlY2tlZC5hcHBlbmQoJy9ldGMvcGtpL3Rscy9jZXJ0cycpCiAgICAgICAgICAgIHBhdGhzX2NoZWNrZWQuYXBwZW5kKCcvdXNyL3NoYXJlL2NhLWNlcnRpZmljYXRlcy9jYWNlcnQub3JnJykKICAgICAgICBlbGlmIHN5c3RlbSA9PSB1J0ZyZWVCU0QnOgogICAgICAgICAgICBwYXRoc19jaGVja2VkLmFwcGVuZCgnL3Vzci9sb2NhbC9zaGFyZS9jZXJ0cycpCiAgICAgICAgZWxpZiBzeXN0ZW0gPT0gdSdPcGVuQlNEJzoKICAgICAgICAgICAgcGF0aHNfY2hlY2tlZC5hcHBlbmQoJy9ldGMvc3NsJykKICAgICAgICBlbGlmIHN5c3RlbSA9PSB1J05ldEJTRCc6CiAgICAgICAgICAgIGNhX2NlcnRzLmFwcGVuZCgnL2V0Yy9vcGVuc3NsL2NlcnRzJykKICAgICAgICBlbGlmIHN5c3RlbSA9PSB1J1N1bk9TJzoKICAgICAgICAgICAgcGF0aHNfY2hlY2tlZC5hcHBlbmQoJy9vcHQvbG9jYWwvZXRjL29wZW5zc2wvY2VydHMnKQoKICAgICAgICAjIGZhbGwgYmFjayB0byBhIHVzZXItZGVwbG95ZWQgY2VydCBpbiBhIHN0YW5kYXJkCiAgICAgICAgIyBsb2NhdGlvbiBpZiB0aGUgT1MgcGxhdGZvcm0gb25lIGlzIG5vdCBhdmFpbGFibGUKICAgICAgICBwYXRoc19jaGVja2VkLmFwcGVuZCgnL2V0Yy9hbnNpYmxlJykKCiAgICAgICAgdG1wX2ZkLCB0bXBfcGF0aCA9IHRlbXBmaWxlLm1rc3RlbXAoKQogICAgICAgIHRvX2FkZF9mZCwgdG9fYWRkX3BhdGggPSB0ZW1wZmlsZS5ta3N0ZW1wKCkKICAgICAgICB0b19hZGQgPSBGYWxzZQoKICAgICAgICAjIFdyaXRlIHRoZSBkdW1teSBjYSBjZXJ0IGlmIHdlIGFyZSBydW5uaW5nIG9uIE1hYyBPUyBYCiAgICAgICAgaWYgc3lzdGVtID09IHUnRGFyd2luJzoKICAgICAgICAgICAgb3Mud3JpdGUodG1wX2ZkLCBiX0RVTU1ZX0NBX0NFUlQpCiAgICAgICAgICAgICMgRGVmYXVsdCBIb21lYnJldyBwYXRoIGZvciBPcGVuU1NMIGNlcnRzCiAgICAgICAgICAgIHBhdGhzX2NoZWNrZWQuYXBwZW5kKCcvdXNyL2xvY2FsL2V0Yy9vcGVuc3NsJykKCiAgICAgICAgIyBmb3IgYWxsIG9mIHRoZSBwYXRocywgZmluZCBhbnkgIC5jcnQgb3IgLnBlbSBmaWxlcwogICAgICAgICMgYW5kIGNvbXBpbGUgdGhlbSBpbnRvIHNpbmdsZSB0ZW1wIGZpbGUgZm9yIHVzZQogICAgICAgICMgaW4gdGhlIHNzbCBjaGVjayB0byBzcGVlZCB1cCB0aGUgdGVzdAogICAgICAgIGZvciBwYXRoIGluIHBhdGhzX2NoZWNrZWQ6CiAgICAgICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKHBhdGgpIGFuZCBvcy5wYXRoLmlzZGlyKHBhdGgpOgogICAgICAgICAgICAgICAgZGlyX2NvbnRlbnRzID0gb3MubGlzdGRpcihwYXRoKQogICAgICAgICAgICAgICAgZm9yIGYgaW4gZGlyX2NvbnRlbnRzOgogICAgICAgICAgICAgICAgICAgIGZ1bGxfcGF0aCA9IG9zLnBhdGguam9pbihwYXRoLCBmKQogICAgICAgICAgICAgICAgICAgIGlmIG9zLnBhdGguaXNmaWxlKGZ1bGxfcGF0aCkgYW5kIG9zLnBhdGguc3BsaXRleHQoZilbMV0gaW4gKCcuY3J0JywnLnBlbScpOgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZXJ0X2ZpbGUgPSBvcGVuKGZ1bGxfcGF0aCwgJ3JiJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlcnQgPSBjZXJ0X2ZpbGUucmVhZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZXJ0X2ZpbGUuY2xvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Mud3JpdGUodG1wX2ZkLCBjZXJ0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Mud3JpdGUodG1wX2ZkLCBiKCdcbicpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgZnVsbF9wYXRoIG5vdCBpbiBMT0FERURfVkVSSUZZX0xPQ0FUSU9OUzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b19hZGQgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Mud3JpdGUodG9fYWRkX2ZkLCBjZXJ0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zLndyaXRlKHRvX2FkZF9mZCwgYignXG4nKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMT0FERURfVkVSSUZZX0xPQ0FUSU9OUy5hZGQoZnVsbF9wYXRoKQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgKE9TRXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICBpZiBub3QgdG9fYWRkOgogICAgICAgICAgICB0b19hZGRfcGF0aCA9IE5vbmUKICAgICAgICByZXR1cm4gKHRtcF9wYXRoLCB0b19hZGRfcGF0aCwgcGF0aHNfY2hlY2tlZCkKCiAgICBkZWYgdmFsaWRhdGVfcHJveHlfcmVzcG9uc2Uoc2VsZiwgcmVzcG9uc2UsIHZhbGlkX2NvZGVzPVsyMDBdKToKICAgICAgICAnJycKICAgICAgICBtYWtlIHN1cmUgd2UgZ2V0IGJhY2sgYSB2YWxpZCBjb2RlIGZyb20gdGhlIHByb3h5CiAgICAgICAgJycnCiAgICAgICAgdHJ5OgogICAgICAgICAgICAoaHR0cF92ZXJzaW9uLCByZXNwX2NvZGUsIG1zZykgPSByZS5tYXRjaChyJyhIVFRQL1xkXC5cZCkgKFxkXGRcZCkgKC4qKScsIHJlc3BvbnNlKS5ncm91cHMoKQogICAgICAgICAgICBpZiBpbnQocmVzcF9jb2RlKSBub3QgaW4gdmFsaWRfY29kZXM6CiAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24KICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHJhaXNlIFByb3h5RXJyb3IoJ0Nvbm5lY3Rpb24gdG8gcHJveHkgZmFpbGVkJykKCiAgICBkZWYgZGV0ZWN0X25vX3Byb3h5KHNlbGYsIHVybCk6CiAgICAgICAgJycnCiAgICAgICAgRGV0ZWN0IGlmIHRoZSAnbm9fcHJveHknIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIHNldCBhbmQgaG9ub3IgdGhvc2UgbG9jYXRpb25zLgogICAgICAgICcnJwogICAgICAgIGVudl9ub19wcm94eSA9IG9zLmVudmlyb24uZ2V0KCdub19wcm94eScpCiAgICAgICAgaWYgZW52X25vX3Byb3h5OgogICAgICAgICAgICBlbnZfbm9fcHJveHkgPSBlbnZfbm9fcHJveHkuc3BsaXQoJywnKQogICAgICAgICAgICBuZXRsb2MgPSB1cmxwYXJzZSh1cmwpLm5ldGxvYwoKICAgICAgICAgICAgZm9yIGhvc3QgaW4gZW52X25vX3Byb3h5OgogICAgICAgICAgICAgICAgaWYgbmV0bG9jLmVuZHN3aXRoKGhvc3QpIG9yIG5ldGxvYy5zcGxpdCgnOicpWzBdLmVuZHN3aXRoKGhvc3QpOgogICAgICAgICAgICAgICAgICAgICMgT3VyIHJlcXVlc3RlZCBVUkwgbWF0Y2hlcyBzb21ldGhpbmcgaW4gbm9fcHJveHksIHNvIGRvbid0CiAgICAgICAgICAgICAgICAgICAgIyB1c2UgdGhlIHByb3h5IGZvciB0aGlzCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgX21ha2VfY29udGV4dChzZWxmLCB0b19hZGRfY2FfY2VydF9wYXRoKToKICAgICAgICBpZiBIQVNfVVJMTElCM19QWU9QRU5TU0xDT05URVhUOgogICAgICAgICAgICBjb250ZXh0ID0gUHlPcGVuU1NMQ29udGV4dChQUk9UT0NPTCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBjb250ZXh0ID0gY3JlYXRlX2RlZmF1bHRfY29udGV4dCgpCiAgICAgICAgaWYgdG9fYWRkX2NhX2NlcnRfcGF0aDoKICAgICAgICAgICAgY29udGV4dC5sb2FkX3ZlcmlmeV9sb2NhdGlvbnModG9fYWRkX2NhX2NlcnRfcGF0aCkKICAgICAgICByZXR1cm4gY29udGV4dAoKICAgIGRlZiBodHRwX3JlcXVlc3Qoc2VsZiwgcmVxKToKICAgICAgICB0bXBfY2FfY2VydF9wYXRoLCB0b19hZGRfY2FfY2VydF9wYXRoLCBwYXRoc19jaGVja2VkID0gc2VsZi5nZXRfY2FfY2VydHMoKQogICAgICAgIGh0dHBzX3Byb3h5ID0gb3MuZW52aXJvbi5nZXQoJ2h0dHBzX3Byb3h5JykKICAgICAgICBjb250ZXh0ID0gTm9uZQogICAgICAgIGlmIEhBU19TU0xDT05URVhUIG9yIEhBU19VUkxMSUIzX1BZT1BFTlNTTENPTlRFWFQ6CiAgICAgICAgICAgIGNvbnRleHQgPSBzZWxmLl9tYWtlX2NvbnRleHQodG9fYWRkX2NhX2NlcnRfcGF0aCkKCiAgICAgICAgIyBEZXRlY3QgaWYgJ25vX3Byb3h5JyBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBzZXQgYW5kIGlmIG91ciBVUkwgaXMgaW5jbHVkZWQKICAgICAgICB1c2VfcHJveHkgPSBzZWxmLmRldGVjdF9ub19wcm94eShyZXEuZ2V0X2Z1bGxfdXJsKCkpCgogICAgICAgIGlmIG5vdCB1c2VfcHJveHk6CiAgICAgICAgICAgICMgaWdub3JlIHByb3h5IHNldHRpbmdzIGZvciB0aGlzIGhvc3QgcmVxdWVzdAogICAgICAgICAgICByZXR1cm4gcmVxCgogICAgICAgIHRyeToKICAgICAgICAgICAgcyA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkKICAgICAgICAgICAgaWYgaHR0cHNfcHJveHk6CiAgICAgICAgICAgICAgICBwcm94eV9wYXJ0cyA9IGdlbmVyaWNfdXJscGFyc2UodXJscGFyc2UoaHR0cHNfcHJveHkpKQogICAgICAgICAgICAgICAgcG9ydCA9IHByb3h5X3BhcnRzLmdldCgncG9ydCcpIG9yIDQ0MwogICAgICAgICAgICAgICAgcy5jb25uZWN0KChwcm94eV9wYXJ0cy5nZXQoJ2hvc3RuYW1lJyksIHBvcnQpKQogICAgICAgICAgICAgICAgaWYgcHJveHlfcGFydHMuZ2V0KCdzY2hlbWUnKSA9PSAnaHR0cCc6CiAgICAgICAgICAgICAgICAgICAgcy5zZW5kYWxsKHNlbGYuQ09OTkVDVF9DT01NQU5EICUgKHNlbGYuaG9zdG5hbWUsIHNlbGYucG9ydCkpCiAgICAgICAgICAgICAgICAgICAgaWYgcHJveHlfcGFydHMuZ2V0KCd1c2VybmFtZScpOgogICAgICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFscyA9ICIlczolcyIgJSAocHJveHlfcGFydHMuZ2V0KCd1c2VybmFtZScsJycpLCBwcm94eV9wYXJ0cy5nZXQoJ3Bhc3N3b3JkJywnJykpCiAgICAgICAgICAgICAgICAgICAgICAgIHMuc2VuZGFsbChiKCdQcm94eS1BdXRob3JpemF0aW9uOiBCYXNpYyAlc1xyXG4nKSAlIGJhc2U2NC5iNjRlbmNvZGUodG9fYnl0ZXMoY3JlZGVudGlhbHMsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpKS5zdHJpcCgpKQogICAgICAgICAgICAgICAgICAgIHMuc2VuZGFsbChiKCdcclxuJykpCiAgICAgICAgICAgICAgICAgICAgY29ubmVjdF9yZXN1bHQgPSBiKCIiKQogICAgICAgICAgICAgICAgICAgIHdoaWxlIGNvbm5lY3RfcmVzdWx0LmZpbmQoYigiXHJcblxyXG4iKSkgPD0gMDoKICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdF9yZXN1bHQgKz0gcy5yZWN2KDQwOTYpCiAgICAgICAgICAgICAgICAgICAgICAgICMgMTI4IGtpbG9ieXRlcyBvZiBoZWFkZXJzIHNob3VsZCBiZSBlbm91Z2ggZm9yIGV2ZXJ5b25lLgogICAgICAgICAgICAgICAgICAgICAgICBpZiBsZW4oY29ubmVjdF9yZXN1bHQpID4gMTMxMDcyOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UgUHJveHlFcnJvcignUHJveHkgc2VudCB0b28gdmVyYm9zZSBoZWFkZXJzLiBPbmx5IDEyOEtpQiBhbGxvd2VkLicpCiAgICAgICAgICAgICAgICAgICAgc2VsZi52YWxpZGF0ZV9wcm94eV9yZXNwb25zZShjb25uZWN0X3Jlc3VsdCkKICAgICAgICAgICAgICAgICAgICBpZiBjb250ZXh0OgogICAgICAgICAgICAgICAgICAgICAgICBzc2xfcyA9IGNvbnRleHQud3JhcF9zb2NrZXQocywgc2VydmVyX2hvc3RuYW1lPXNlbGYuaG9zdG5hbWUpCiAgICAgICAgICAgICAgICAgICAgZWxpZiBIQVNfVVJMTElCM19TU0xfV1JBUF9TT0NLRVQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHNzbF9zID0gc3NsX3dyYXBfc29ja2V0KHMsIGNhX2NlcnRzPXRtcF9jYV9jZXJ0X3BhdGgsIGNlcnRfcmVxcz1zc2wuQ0VSVF9SRVFVSVJFRCwgc3NsX3ZlcnNpb249UFJPVE9DT0wsIHNlcnZlcl9ob3N0bmFtZT1zZWxmLmhvc3RuYW1lKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHNzbF9zID0gc3NsLndyYXBfc29ja2V0KHMsIGNhX2NlcnRzPXRtcF9jYV9jZXJ0X3BhdGgsIGNlcnRfcmVxcz1zc2wuQ0VSVF9SRVFVSVJFRCwgc3NsX3ZlcnNpb249UFJPVE9DT0wpCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoX2hvc3RuYW1lKHNzbF9zLmdldHBlZXJjZXJ0KCksIHNlbGYuaG9zdG5hbWUpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHJhaXNlIFByb3h5RXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3h5IHNjaGVtZTogJXMuIEN1cnJlbnRseSBhbnNpYmxlIG9ubHkgc3VwcG9ydHMgSFRUUCBwcm94aWVzLicgJSBwcm94eV9wYXJ0cy5nZXQoJ3NjaGVtZScpKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcy5jb25uZWN0KChzZWxmLmhvc3RuYW1lLCBzZWxmLnBvcnQpKQogICAgICAgICAgICAgICAgaWYgY29udGV4dDoKICAgICAgICAgICAgICAgICAgICBzc2xfcyA9IGNvbnRleHQud3JhcF9zb2NrZXQocywgc2VydmVyX2hvc3RuYW1lPXNlbGYuaG9zdG5hbWUpCiAgICAgICAgICAgICAgICBlbGlmIEhBU19VUkxMSUIzX1NTTF9XUkFQX1NPQ0tFVDoKICAgICAgICAgICAgICAgICAgICBzc2xfcyA9IHNzbF93cmFwX3NvY2tldChzLCBjYV9jZXJ0cz10bXBfY2FfY2VydF9wYXRoLCBjZXJ0X3JlcXM9c3NsLkNFUlRfUkVRVUlSRUQsIHNzbF92ZXJzaW9uPVBST1RPQ09MLCBzZXJ2ZXJfaG9zdG5hbWU9c2VsZi5ob3N0bmFtZSkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgc3NsX3MgPSBzc2wud3JhcF9zb2NrZXQocywgY2FfY2VydHM9dG1wX2NhX2NlcnRfcGF0aCwgY2VydF9yZXFzPXNzbC5DRVJUX1JFUVVJUkVELCBzc2xfdmVyc2lvbj1QUk9UT0NPTCkKICAgICAgICAgICAgICAgICAgICBtYXRjaF9ob3N0bmFtZShzc2xfcy5nZXRwZWVyY2VydCgpLCBzZWxmLmhvc3RuYW1lKQogICAgICAgICAgICAjIGNsb3NlIHRoZSBzc2wgY29ubmVjdGlvbgogICAgICAgICAgICAjc3NsX3MudW53cmFwKCkKICAgICAgICAgICAgcy5jbG9zZSgpCiAgICAgICAgZXhjZXB0IChzc2wuU1NMRXJyb3IsIENlcnRpZmljYXRlRXJyb3IpOgogICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgIGJ1aWxkX3NzbF92YWxpZGF0aW9uX2Vycm9yKHNlbGYuaG9zdG5hbWUsIHNlbGYucG9ydCwgcGF0aHNfY2hlY2tlZCwgZSkKICAgICAgICBleGNlcHQgc29ja2V0LmVycm9yOgogICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgIHJhaXNlIENvbm5lY3Rpb25FcnJvcignRmFpbGVkIHRvIGNvbm5lY3QgdG8gJXMgYXQgcG9ydCAlczogJXMnICUgKHNlbGYuaG9zdG5hbWUsIHNlbGYucG9ydCwgdG9fbmF0aXZlKGUpKSkKCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIGNsZWFudXAgdGhlIHRlbXAgZmlsZSBjcmVhdGVkLCBkb24ndCB3b3JyeQogICAgICAgICAgICAjIGlmIGl0IGZhaWxzIGZvciBzb21lIHJlYXNvbgogICAgICAgICAgICBvcy5yZW1vdmUodG1wX2NhX2NlcnRfcGF0aCkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHBhc3MKCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIGNsZWFudXAgdGhlIHRlbXAgZmlsZSBjcmVhdGVkLCBkb24ndCB3b3JyeQogICAgICAgICAgICAjIGlmIGl0IGZhaWxzIGZvciBzb21lIHJlYXNvbgogICAgICAgICAgICBpZiB0b19hZGRfY2FfY2VydF9wYXRoOgogICAgICAgICAgICAgICAgb3MucmVtb3ZlKHRvX2FkZF9jYV9jZXJ0X3BhdGgpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBwYXNzCgogICAgICAgIHJldHVybiByZXEKCiAgICBodHRwc19yZXF1ZXN0ID0gaHR0cF9yZXF1ZXN0CgoKZGVmIG1heWJlX2FkZF9zc2xfaGFuZGxlcih1cmwsIHZhbGlkYXRlX2NlcnRzKToKICAgICMgRklYTUU6IGNoYW5nZSB0aGUgZm9sbG93aW5nIHRvIHVzZSB0aGUgZ2VuZXJpY191cmxwYXJzZSBmdW5jdGlvbgogICAgIyAgICAgICAgdG8gcmVtb3ZlIHRoZSBpbmRleGVkIHJlZmVyZW5jZXMgZm9yICdwYXJzZWQnCiAgICBwYXJzZWQgPSB1cmxwYXJzZSh1cmwpCiAgICBpZiBwYXJzZWRbMF0gPT0gJ2h0dHBzJyBhbmQgdmFsaWRhdGVfY2VydHM6CiAgICAgICAgaWYgbm90IEhBU19TU0w6CiAgICAgICAgICAgIHJhaXNlIE5vU1NMRXJyb3IoJ1NTTCB2YWxpZGF0aW9uIGlzIG5vdCBhdmFpbGFibGUgaW4geW91ciB2ZXJzaW9uIG9mIHB5dGhvbi4gWW91IGNhbiB1c2UgdmFsaWRhdGVfY2VydHM9RmFsc2UsJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgaG93ZXZlciB0aGlzIGlzIHVuc2FmZSBhbmQgbm90IHJlY29tbWVuZGVkJykKCiAgICAgICAgIyBkbyB0aGUgY2VydCB2YWxpZGF0aW9uCiAgICAgICAgbmV0bG9jID0gcGFyc2VkWzFdCiAgICAgICAgaWYgJ0AnIGluIG5ldGxvYzoKICAgICAgICAgICAgbmV0bG9jID0gbmV0bG9jLnNwbGl0KCdAJywgMSlbMV0KICAgICAgICBpZiAnOicgaW4gbmV0bG9jOgogICAgICAgICAgICBob3N0bmFtZSwgcG9ydCA9IG5ldGxvYy5zcGxpdCgnOicsIDEpCiAgICAgICAgICAgIHBvcnQgPSBpbnQocG9ydCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBob3N0bmFtZSA9IG5ldGxvYwogICAgICAgICAgICBwb3J0ID0gNDQzCiAgICAgICAgIyBjcmVhdGUgdGhlIFNTTCB2YWxpZGF0aW9uIGhhbmRsZXIgYW5kCiAgICAgICAgIyBhZGQgaXQgdG8gdGhlIGxpc3Qgb2YgaGFuZGxlcnMKICAgICAgICByZXR1cm4gU1NMVmFsaWRhdGlvbkhhbmRsZXIoaG9zdG5hbWUsIHBvcnQpCgoKZGVmIG9wZW5fdXJsKHVybCwgZGF0YT1Ob25lLCBoZWFkZXJzPU5vbmUsIG1ldGhvZD1Ob25lLCB1c2VfcHJveHk9VHJ1ZSwKICAgICAgICAgICAgIGZvcmNlPUZhbHNlLCBsYXN0X21vZF90aW1lPU5vbmUsIHRpbWVvdXQ9MTAsIHZhbGlkYXRlX2NlcnRzPVRydWUsCiAgICAgICAgICAgICB1cmxfdXNlcm5hbWU9Tm9uZSwgdXJsX3Bhc3N3b3JkPU5vbmUsIGh0dHBfYWdlbnQ9Tm9uZSwKICAgICAgICAgICAgIGZvcmNlX2Jhc2ljX2F1dGg9RmFsc2UsIGZvbGxvd19yZWRpcmVjdHM9J3VybGxpYjInLAogICAgICAgICAgICAgY2xpZW50X2NlcnQ9Tm9uZSwgY2xpZW50X2tleT1Ob25lKToKICAgICcnJwogICAgU2VuZHMgYSByZXF1ZXN0IHZpYSBIVFRQKFMpIG9yIEZUUCB1c2luZyB1cmxsaWIyIChQeXRob24yKSBvciB1cmxsaWIgKFB5dGhvbjMpCgogICAgRG9lcyBub3QgcmVxdWlyZSB0aGUgbW9kdWxlIGVudmlyb25tZW50CiAgICAnJycKICAgIGhhbmRsZXJzID0gW10KICAgIHNzbF9oYW5kbGVyID0gbWF5YmVfYWRkX3NzbF9oYW5kbGVyKHVybCwgdmFsaWRhdGVfY2VydHMpCiAgICBpZiBzc2xfaGFuZGxlcjoKICAgICAgICBoYW5kbGVycy5hcHBlbmQoc3NsX2hhbmRsZXIpCgogICAgIyBGSVhNRTogY2hhbmdlIHRoZSBmb2xsb3dpbmcgdG8gdXNlIHRoZSBnZW5lcmljX3VybHBhcnNlIGZ1bmN0aW9uCiAgICAjICAgICAgICB0byByZW1vdmUgdGhlIGluZGV4ZWQgcmVmZXJlbmNlcyBmb3IgJ3BhcnNlZCcKICAgIHBhcnNlZCA9IHVybHBhcnNlKHVybCkKICAgIGlmIHBhcnNlZFswXSAhPSAnZnRwJzoKICAgICAgICB1c2VybmFtZSA9IHVybF91c2VybmFtZQoKICAgICAgICBpZiBoZWFkZXJzIGlzIE5vbmU6CiAgICAgICAgICAgIGhlYWRlcnMgPSB7fQoKICAgICAgICBpZiB1c2VybmFtZToKICAgICAgICAgICAgcGFzc3dvcmQgPSB1cmxfcGFzc3dvcmQKICAgICAgICAgICAgbmV0bG9jID0gcGFyc2VkWzFdCiAgICAgICAgZWxpZiAnQCcgaW4gcGFyc2VkWzFdOgogICAgICAgICAgICBjcmVkZW50aWFscywgbmV0bG9jID0gcGFyc2VkWzFdLnNwbGl0KCdAJywgMSkKICAgICAgICAgICAgaWYgJzonIGluIGNyZWRlbnRpYWxzOgogICAgICAgICAgICAgICAgdXNlcm5hbWUsIHBhc3N3b3JkID0gY3JlZGVudGlhbHMuc3BsaXQoJzonLCAxKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBjcmVkZW50aWFscwogICAgICAgICAgICAgICAgcGFzc3dvcmQgPSAnJwoKICAgICAgICAgICAgcGFyc2VkID0gbGlzdChwYXJzZWQpCiAgICAgICAgICAgIHBhcnNlZFsxXSA9IG5ldGxvYwoKICAgICAgICAgICAgIyByZWNvbnN0cnVjdCB1cmwgd2l0aG91dCBjcmVkZW50aWFscwogICAgICAgICAgICB1cmwgPSB1cmx1bnBhcnNlKHBhcnNlZCkKCiAgICAgICAgaWYgdXNlcm5hbWUgYW5kIG5vdCBmb3JjZV9iYXNpY19hdXRoOgogICAgICAgICAgICBwYXNzbWFuID0gdXJsbGliX3JlcXVlc3QuSFRUUFBhc3N3b3JkTWdyV2l0aERlZmF1bHRSZWFsbSgpCgogICAgICAgICAgICAjIHRoaXMgY3JlYXRlcyBhIHBhc3N3b3JkIG1hbmFnZXIKICAgICAgICAgICAgcGFzc21hbi5hZGRfcGFzc3dvcmQoTm9uZSwgbmV0bG9jLCB1c2VybmFtZSwgcGFzc3dvcmQpCgogICAgICAgICAgICAjIGJlY2F1c2Ugd2UgaGF2ZSBwdXQgTm9uZSBhdCB0aGUgc3RhcnQgaXQgd2lsbCBhbHdheXMKICAgICAgICAgICAgIyB1c2UgdGhpcyB1c2VybmFtZS9wYXNzd29yZCBjb21iaW5hdGlvbiBmb3IgIHVybHMKICAgICAgICAgICAgIyBmb3Igd2hpY2ggYHRoZXVybGAgaXMgYSBzdXBlci11cmwKICAgICAgICAgICAgYXV0aGhhbmRsZXIgPSB1cmxsaWJfcmVxdWVzdC5IVFRQQmFzaWNBdXRoSGFuZGxlcihwYXNzbWFuKQogICAgICAgICAgICBkaWdlc3RfYXV0aGhhbmRsZXIgPSB1cmxsaWJfcmVxdWVzdC5IVFRQRGlnZXN0QXV0aEhhbmRsZXIocGFzc21hbikKCiAgICAgICAgICAgICMgY3JlYXRlIHRoZSBBdXRoSGFuZGxlcgogICAgICAgICAgICBoYW5kbGVycy5hcHBlbmQoYXV0aGhhbmRsZXIpCiAgICAgICAgICAgIGhhbmRsZXJzLmFwcGVuZChkaWdlc3RfYXV0aGhhbmRsZXIpCgogICAgICAgIGVsaWYgdXNlcm5hbWUgYW5kIGZvcmNlX2Jhc2ljX2F1dGg6CiAgICAgICAgICAgIGhlYWRlcnNbIkF1dGhvcml6YXRpb24iXSA9IGJhc2ljX2F1dGhfaGVhZGVyKHVzZXJuYW1lLCBwYXNzd29yZCkKCiAgICAgICAgZWxzZToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmMgPSBuZXRyYy5uZXRyYyhvcy5lbnZpcm9uLmdldCgnTkVUUkMnKSkKICAgICAgICAgICAgICAgIGxvZ2luID0gcmMuYXV0aGVudGljYXRvcnMocGFyc2VkWzFdKQogICAgICAgICAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICAgICAgICAgIGxvZ2luID0gTm9uZQoKICAgICAgICAgICAgaWYgbG9naW46CiAgICAgICAgICAgICAgICB1c2VybmFtZSwgXywgcGFzc3dvcmQgPSBsb2dpbgogICAgICAgICAgICAgICAgaWYgdXNlcm5hbWUgYW5kIHBhc3N3b3JkOgogICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbIkF1dGhvcml6YXRpb24iXSA9IGJhc2ljX2F1dGhfaGVhZGVyKHVzZXJuYW1lLCBwYXNzd29yZCkKCiAgICBpZiBub3QgdXNlX3Byb3h5OgogICAgICAgIHByb3h5aGFuZGxlciA9IHVybGxpYl9yZXF1ZXN0LlByb3h5SGFuZGxlcih7fSkKICAgICAgICBoYW5kbGVycy5hcHBlbmQocHJveHloYW5kbGVyKQoKICAgIGlmIEhBU19TU0xDT05URVhUIGFuZCBub3QgdmFsaWRhdGVfY2VydHM6CiAgICAgICAgIyBJbiAyLjcuOSwgdGhlIGRlZmF1bHQgY29udGV4dCB2YWxpZGF0ZXMgY2VydGlmaWNhdGVzCiAgICAgICAgY29udGV4dCA9IFNTTENvbnRleHQoc3NsLlBST1RPQ09MX1NTTHYyMykKICAgICAgICBjb250ZXh0Lm9wdGlvbnMgfD0gc3NsLk9QX05PX1NTTHYyCiAgICAgICAgY29udGV4dC5vcHRpb25zIHw9IHNzbC5PUF9OT19TU0x2MwogICAgICAgIGNvbnRleHQudmVyaWZ5X21vZGUgPSBzc2wuQ0VSVF9OT05FCiAgICAgICAgY29udGV4dC5jaGVja19ob3N0bmFtZSA9IEZhbHNlCiAgICAgICAgaGFuZGxlcnMuYXBwZW5kKEhUVFBTQ2xpZW50QXV0aEhhbmRsZXIoY2xpZW50X2NlcnQ9Y2xpZW50X2NlcnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50X2tleT1jbGllbnRfa2V5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ9Y29udGV4dCkpCiAgICBlbGlmIGNsaWVudF9jZXJ0OgogICAgICAgIGhhbmRsZXJzLmFwcGVuZChIVFRQU0NsaWVudEF1dGhIYW5kbGVyKGNsaWVudF9jZXJ0PWNsaWVudF9jZXJ0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudF9rZXk9Y2xpZW50X2tleSkpCgogICAgIyBwcmUtMi42IHZlcnNpb25zIG9mIHB5dGhvbiBjYW5ub3QgdXNlIHRoZSBjdXN0b20gaHR0cHMKICAgICMgaGFuZGxlciwgc2luY2UgdGhlIHNvY2tldCBjbGFzcyBpcyBsYWNraW5nIGNyZWF0ZV9jb25uZWN0aW9uLgogICAgIyBTb21lIHB5dGhvbiBidWlsZHMgbGFjayBIVFRQUyBzdXBwb3J0LgogICAgaWYgaGFzYXR0cihzb2NrZXQsICdjcmVhdGVfY29ubmVjdGlvbicpIGFuZCBDdXN0b21IVFRQU0hhbmRsZXI6CiAgICAgICAgaGFuZGxlcnMuYXBwZW5kKEN1c3RvbUhUVFBTSGFuZGxlcikKCiAgICBoYW5kbGVycy5hcHBlbmQoUmVkaXJlY3RIYW5kbGVyRmFjdG9yeShmb2xsb3dfcmVkaXJlY3RzLCB2YWxpZGF0ZV9jZXJ0cykpCgogICAgb3BlbmVyID0gdXJsbGliX3JlcXVlc3QuYnVpbGRfb3BlbmVyKCpoYW5kbGVycykKICAgIHVybGxpYl9yZXF1ZXN0Lmluc3RhbGxfb3BlbmVyKG9wZW5lcikKCiAgICBkYXRhID0gdG9fYnl0ZXMoZGF0YSwgbm9uc3RyaW5nPSdwYXNzdGhydScpCiAgICBpZiBtZXRob2Q6CiAgICAgICAgaWYgbWV0aG9kLnVwcGVyKCkgbm90IGluICgnT1BUSU9OUycsJ0dFVCcsJ0hFQUQnLCdQT1NUJywnUFVUJywnREVMRVRFJywnVFJBQ0UnLCdDT05ORUNUJywnUEFUQ0gnKToKICAgICAgICAgICAgcmFpc2UgQ29ubmVjdGlvbkVycm9yKCdpbnZhbGlkIEhUVFAgcmVxdWVzdCBtZXRob2Q7ICVzJyAlIG1ldGhvZC51cHBlcigpKQogICAgICAgIHJlcXVlc3QgPSBSZXF1ZXN0V2l0aE1ldGhvZCh1cmwsIG1ldGhvZC51cHBlcigpLCBkYXRhKQogICAgZWxzZToKICAgICAgICByZXF1ZXN0ID0gdXJsbGliX3JlcXVlc3QuUmVxdWVzdCh1cmwsIGRhdGEpCgogICAgIyBhZGQgdGhlIGN1c3RvbSBhZ2VudCBoZWFkZXIsIHRvIGhlbHAgcHJldmVudCBpc3N1ZXMKICAgICMgd2l0aCBzaXRlcyB0aGF0IGJsb2NrIHRoZSBkZWZhdWx0IHVybGxpYiBhZ2VudCBzdHJpbmcKICAgIGlmIGh0dHBfYWdlbnQ6CiAgICAgICAgcmVxdWVzdC5hZGRfaGVhZGVyKCdVc2VyLWFnZW50JywgaHR0cF9hZ2VudCkKCiAgICAjIENhY2hlIGNvbnRyb2wKICAgICMgRWl0aGVyIHdlIGRpcmVjdGx5IGZvcmNlIGEgY2FjaGUgcmVmcmVzaAogICAgaWYgZm9yY2U6CiAgICAgICAgcmVxdWVzdC5hZGRfaGVhZGVyKCdjYWNoZS1jb250cm9sJywgJ25vLWNhY2hlJykKICAgICMgb3Igd2UgZG8gaXQgaWYgdGhlIG9yaWdpbmFsIGlzIG1vcmUgcmVjZW50IHRoYW4gb3VyIGNvcHkKICAgIGVsaWYgbGFzdF9tb2RfdGltZToKICAgICAgICB0c3RhbXAgPSBsYXN0X21vZF90aW1lLnN0cmZ0aW1lKCclYSwgJWQgJWIgJVkgJUg6JU06JVMgKzAwMDAnKQogICAgICAgIHJlcXVlc3QuYWRkX2hlYWRlcignSWYtTW9kaWZpZWQtU2luY2UnLCB0c3RhbXApCgogICAgIyB1c2VyIGRlZmluZWQgaGVhZGVycyBub3csIHdoaWNoIG1heSBvdmVycmlkZSB0aGluZ3Mgd2UndmUgc2V0IGFib3ZlCiAgICBpZiBoZWFkZXJzOgogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKGhlYWRlcnMsIGRpY3QpOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJoZWFkZXJzIHByb3ZpZGVkIHRvIGZldGNoX3VybCgpIG11c3QgYmUgYSBkaWN0IikKICAgICAgICBmb3IgaGVhZGVyIGluIGhlYWRlcnM6CiAgICAgICAgICAgIHJlcXVlc3QuYWRkX2hlYWRlcihoZWFkZXIsIGhlYWRlcnNbaGVhZGVyXSkKCiAgICB1cmxvcGVuX2FyZ3MgPSBbcmVxdWVzdCwgTm9uZV0KICAgIGlmIHN5cy52ZXJzaW9uX2luZm8gPj0gKDIsNiwwKToKICAgICAgICAjIHVybG9wZW4gaW4gcHl0aG9uIHByaW9yIHRvIDIuNi4wIGRpZCBub3QKICAgICAgICAjIGhhdmUgYSB0aW1lb3V0IHBhcmFtZXRlcgogICAgICAgIHVybG9wZW5fYXJncy5hcHBlbmQodGltZW91dCkKCiAgICByID0gdXJsbGliX3JlcXVlc3QudXJsb3BlbigqdXJsb3Blbl9hcmdzKQogICAgcmV0dXJuIHIKCiMKIyBNb2R1bGUtcmVsYXRlZCBmdW5jdGlvbnMKIwoKCmRlZiBiYXNpY19hdXRoX2hlYWRlcih1c2VybmFtZSwgcGFzc3dvcmQpOgogICAgIiIiVGFrZXMgYSB1c2VybmFtZSBhbmQgcGFzc3dvcmQgYW5kIHJldHVybnMgYSBieXRlIHN0cmluZyBzdWl0YWJsZSBmb3IKICAgIHVzaW5nIGFzIHZhbHVlIG9mIGFuIEF1dGhvcml6YXRpb24gaGVhZGVyIHRvIGRvIGJhc2ljIGF1dGguCiAgICAiIiIKICAgIHJldHVybiBiKCJCYXNpYyAlcyIpICUgYmFzZTY0LmI2NGVuY29kZSh0b19ieXRlcygiJXM6JXMiICUgKHVzZXJuYW1lLCBwYXNzd29yZCksIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpKQoKCmRlZiB1cmxfYXJndW1lbnRfc3BlYygpOgogICAgJycnCiAgICBDcmVhdGVzIGFuIGFyZ3VtZW50IHNwZWMgdGhhdCBjYW4gYmUgdXNlZCB3aXRoIGFueSBtb2R1bGUKICAgIHRoYXQgd2lsbCBiZSByZXF1ZXN0aW5nIGNvbnRlbnQgdmlhIHVybGxpYi91cmxsaWIyCiAgICAnJycKICAgIHJldHVybiBkaWN0KAogICAgICAgIHVybD1kaWN0KCksCiAgICAgICAgZm9yY2U9ZGljdChkZWZhdWx0PSdubycsIGFsaWFzZXM9Wyd0aGlyc3R5J10sIHR5cGU9J2Jvb2wnKSwKICAgICAgICBodHRwX2FnZW50PWRpY3QoZGVmYXVsdD0nYW5zaWJsZS1odHRwZ2V0JyksCiAgICAgICAgdXNlX3Byb3h5PWRpY3QoZGVmYXVsdD0neWVzJywgdHlwZT0nYm9vbCcpLAogICAgICAgIHZhbGlkYXRlX2NlcnRzPWRpY3QoZGVmYXVsdD0neWVzJywgdHlwZT0nYm9vbCcpLAogICAgICAgIHVybF91c2VybmFtZT1kaWN0KHJlcXVpcmVkPUZhbHNlKSwKICAgICAgICB1cmxfcGFzc3dvcmQ9ZGljdChyZXF1aXJlZD1GYWxzZSwgbm9fbG9nPVRydWUpLAogICAgICAgIGZvcmNlX2Jhc2ljX2F1dGg9ZGljdChyZXF1aXJlZD1GYWxzZSwgdHlwZT0nYm9vbCcsIGRlZmF1bHQ9J25vJyksCiAgICAgICAgY2xpZW50X2NlcnQ9ZGljdChyZXF1aXJlZD1GYWxzZSwgdHlwZT0ncGF0aCcsIGRlZmF1bHQ9Tm9uZSksCiAgICAgICAgY2xpZW50X2tleT1kaWN0KHJlcXVpcmVkPUZhbHNlLCB0eXBlPSdwYXRoJywgZGVmYXVsdD1Ob25lKSwKICAgICkKCgpkZWYgZmV0Y2hfdXJsKG1vZHVsZSwgdXJsLCBkYXRhPU5vbmUsIGhlYWRlcnM9Tm9uZSwgbWV0aG9kPU5vbmUsCiAgICAgICAgICAgICAgdXNlX3Byb3h5PVRydWUsIGZvcmNlPUZhbHNlLCBsYXN0X21vZF90aW1lPU5vbmUsIHRpbWVvdXQ9MTApOgogICAgIiIiU2VuZHMgYSByZXF1ZXN0IHZpYSBIVFRQKFMpIG9yIEZUUCAobmVlZHMgdGhlIG1vZHVsZSBhcyBwYXJhbWV0ZXIpCgogICAgOmFyZyBtb2R1bGU6IFRoZSBBbnNpYmxlTW9kdWxlICh1c2VkIHRvIGdldCB1c2VybmFtZSwgcGFzc3dvcmQgZXRjLiAocy5iLikuCiAgICA6YXJnIHVybDogICAgICAgICAgICAgVGhlIHVybCB0byB1c2UuCgogICAgOmt3YXJnIGRhdGE6ICAgICAgICAgIFRoZSBkYXRhIHRvIGJlIHNlbnQgKGluIGNhc2Ugb2YgUE9TVC9QVVQpLgogICAgOmt3YXJnIGhlYWRlcnM6ICAgICAgIEEgZGljdCB3aXRoIHRoZSByZXF1ZXN0IGhlYWRlcnMuCiAgICA6a3dhcmcgbWV0aG9kOiAgICAgICAgIlBPU1QiLCAiUFVUIiwgZXRjLgogICAgOmt3YXJnIGJvb2xlYW4gdXNlX3Byb3h5OiAgICAgRGVmYXVsdDogVHJ1ZQogICAgOmt3YXJnIGJvb2xlYW4gZm9yY2U6IElmIFRydWU6IERvIG5vdCBnZXQgYSBjYWNoZWQgY29weSAoRGVmYXVsdDogRmFsc2UpCiAgICA6a3dhcmcgbGFzdF9tb2RfdGltZTogRGVmYXVsdDogTm9uZQogICAgOmt3YXJnIGludCB0aW1lb3V0OiAgIERlZmF1bHQ6IDEwCgogICAgOnJldHVybnM6IEEgdHVwbGUgb2YgKCoqcmVzcG9uc2UqKiwgKippbmZvKiopLiBVc2UgYGByZXNwb25zZS5ib2R5KClgYCB0byByZWFkIHRoZSBkYXRhLgogICAgICAgIFRoZSAqKmluZm8qKiBjb250YWlucyB0aGUgJ3N0YXR1cycgYW5kIG90aGVyIG1ldGEgZGF0YS4gV2hlbiBhIEh0dHBFcnJvciAoc3RhdHVzID4gNDAwKQogICAgICAgIG9jY3VycmVkIHRoZW4gYGBpbmZvWydib2R5J11gYCBjb250YWlucyB0aGUgZXJyb3IgcmVzcG9uc2UgZGF0YTo6CgogICAgRXhhbXBsZTo6CgogICAgICAgIGRhdGE9ey4uLn0KICAgICAgICByZXNwLCBpbmZvID0gZmV0Y2hfdXJsKG1vZHVsZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJodHRwOi8vZXhhbXBsZS5jb20iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YT1tb2R1bGUuanNvbmlmeShkYXRhKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyPXtDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kPSJQT1NUIikKICAgICAgICBzdGF0dXNfY29kZSA9IGluZm9bInN0YXR1cyJdCiAgICAgICAgYm9keSA9IHJlc3AucmVhZCgpCiAgICAgICAgaWYgc3RhdHVzX2NvZGUgPj0gNDAwIDoKICAgICAgICAgICAgYm9keSA9IGluZm9bJ2JvZHknXQogICAgIiIiCgogICAgaWYgbm90IEhBU19VUkxQQVJTRToKICAgICAgICBtb2R1bGUuZmFpbF9qc29uKG1zZz0ndXJscGFyc2UgaXMgbm90IGluc3RhbGxlZCcpCgogICAgIyBHZXQgdmFsaWRhdGVfY2VydHMgZnJvbSB0aGUgbW9kdWxlIHBhcmFtcwogICAgdmFsaWRhdGVfY2VydHMgPSBtb2R1bGUucGFyYW1zLmdldCgndmFsaWRhdGVfY2VydHMnLCBUcnVlKQoKICAgIHVzZXJuYW1lID0gbW9kdWxlLnBhcmFtcy5nZXQoJ3VybF91c2VybmFtZScsICcnKQogICAgcGFzc3dvcmQgPSBtb2R1bGUucGFyYW1zLmdldCgndXJsX3Bhc3N3b3JkJywgJycpCiAgICBodHRwX2FnZW50ID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2h0dHBfYWdlbnQnLCBOb25lKQogICAgZm9yY2VfYmFzaWNfYXV0aCA9IG1vZHVsZS5wYXJhbXMuZ2V0KCdmb3JjZV9iYXNpY19hdXRoJywgJycpCgogICAgZm9sbG93X3JlZGlyZWN0cyA9IG1vZHVsZS5wYXJhbXMuZ2V0KCdmb2xsb3dfcmVkaXJlY3RzJywgJ3VybGxpYjInKQoKICAgIGNsaWVudF9jZXJ0ID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2NsaWVudF9jZXJ0JykKICAgIGNsaWVudF9rZXkgPSBtb2R1bGUucGFyYW1zLmdldCgnY2xpZW50X2tleScpCgogICAgciA9IE5vbmUKICAgIGluZm8gPSBkaWN0KHVybD11cmwpCiAgICB0cnk6CiAgICAgICAgciA9IG9wZW5fdXJsKHVybCwgZGF0YT1kYXRhLCBoZWFkZXJzPWhlYWRlcnMsIG1ldGhvZD1tZXRob2QsCiAgICAgICAgICAgICAgICAgICAgIHVzZV9wcm94eT11c2VfcHJveHksIGZvcmNlPWZvcmNlLCBsYXN0X21vZF90aW1lPWxhc3RfbW9kX3RpbWUsIHRpbWVvdXQ9dGltZW91dCwKICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVfY2VydHM9dmFsaWRhdGVfY2VydHMsIHVybF91c2VybmFtZT11c2VybmFtZSwKICAgICAgICAgICAgICAgICAgICAgdXJsX3Bhc3N3b3JkPXBhc3N3b3JkLCBodHRwX2FnZW50PWh0dHBfYWdlbnQsIGZvcmNlX2Jhc2ljX2F1dGg9Zm9yY2VfYmFzaWNfYXV0aCwKICAgICAgICAgICAgICAgICAgICAgZm9sbG93X3JlZGlyZWN0cz1mb2xsb3dfcmVkaXJlY3RzLCBjbGllbnRfY2VydD1jbGllbnRfY2VydCwKICAgICAgICAgICAgICAgICAgICAgY2xpZW50X2tleT1jbGllbnRfa2V5KQogICAgICAgIGluZm8udXBkYXRlKHIuaW5mbygpKQogICAgICAgIGluZm8udXBkYXRlKGRpY3QobXNnPSJPSyAoJXMgYnl0ZXMpIiAlIHIuaGVhZGVycy5nZXQoJ0NvbnRlbnQtTGVuZ3RoJywgJ3Vua25vd24nKSwgdXJsPXIuZ2V0dXJsKCksIHN0YXR1cz1yLmNvZGUpKQogICAgZXhjZXB0IE5vU1NMRXJyb3I6CiAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgIGRpc3RyaWJ1dGlvbiA9IGdldF9kaXN0cmlidXRpb24oKQogICAgICAgIGlmIGRpc3RyaWJ1dGlvbiBpcyBub3QgTm9uZSBhbmQgZGlzdHJpYnV0aW9uLmxvd2VyKCkgPT0gJ3JlZGhhdCc6CiAgICAgICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSclcy4gWW91IGNhbiBhbHNvIGluc3RhbGwgcHl0aG9uLXNzbCBmcm9tIEVQRUwnICUgc3RyKGUpKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSclcycgJSBzdHIoZSkpCiAgICBleGNlcHQgKENvbm5lY3Rpb25FcnJvciwgVmFsdWVFcnJvcik6CiAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPXN0cihlKSkKICAgIGV4Y2VwdCB1cmxsaWJfZXJyb3IuSFRUUEVycm9yOgogICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICB0cnk6CiAgICAgICAgICAgIGJvZHkgPSBlLnJlYWQoKQogICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoKICAgICAgICAgICAgYm9keSA9ICcnCgogICAgICAgICMgVHJ5IHRvIGFkZCBleGNlcHRpb24gaW5mbyB0byB0aGUgb3V0cHV0IGJ1dCBkb24ndCBmYWlsIGlmIHdlIGNhbid0CiAgICAgICAgZXhjX2luZm8gPSBlLmluZm8oKQogICAgICAgIHRyeToKICAgICAgICAgICAgaW5mby51cGRhdGUoZGljdCgqKmUuaW5mbygpKSkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHBhc3MKCiAgICAgICAgaW5mby51cGRhdGUoeydtc2cnOiBzdHIoZSksICdib2R5JzogYm9keSwgJ3N0YXR1cyc6IGUuY29kZX0pCgogICAgZXhjZXB0IHVybGxpYl9lcnJvci5VUkxFcnJvcjoKICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgY29kZSA9IGludChnZXRhdHRyKGUsICdjb2RlJywgLTEpKQogICAgICAgIGluZm8udXBkYXRlKGRpY3QobXNnPSJSZXF1ZXN0IGZhaWxlZDogJXMiICUgc3RyKGUpLCBzdGF0dXM9Y29kZSkpCiAgICBleGNlcHQgc29ja2V0LmVycm9yOgogICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICBpbmZvLnVwZGF0ZShkaWN0KG1zZz0iQ29ubmVjdGlvbiBmYWlsdXJlOiAlcyIgJSBzdHIoZSksIHN0YXR1cz0tMSkpCiAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICBpbmZvLnVwZGF0ZShkaWN0KG1zZz0iQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZDogJXMiICUgc3RyKGUpLCBzdGF0dXM9LTEpKQoKICAgIHJldHVybiByLCBpbmZvClBLAwQUAAAAAAAHvCtLtdgEBiUwAAAlMAAAHQAAAGFuc2libGUvbW9kdWxlX3V0aWxzL190ZXh0LnB5IyBUaGlzIGNvZGUgaXMgcGFydCBvZiBBbnNpYmxlLCBidXQgaXMgYW4gaW5kZXBlbmRlbnQgY29tcG9uZW50LgojIFRoaXMgcGFydGljdWxhciBmaWxlIHNuaXBwZXQsIGFuZCB0aGlzIGZpbGUgc25pcHBldCBvbmx5LCBpcyBCU0QgbGljZW5zZWQuCiMgTW9kdWxlcyB5b3Ugd3JpdGUgdXNpbmcgdGhpcyBzbmlwcGV0LCB3aGljaCBpcyBlbWJlZGRlZCBkeW5hbWljYWxseSBieSBBbnNpYmxlCiMgc3RpbGwgYmVsb25nIHRvIHRoZSBhdXRob3Igb2YgdGhlIG1vZHVsZSwgYW5kIG1heSBhc3NpZ24gdGhlaXIgb3duIGxpY2Vuc2UKIyB0byB0aGUgY29tcGxldGUgd29yay4KIwojIENvcHlyaWdodCAoYyksIFRvc2hpbyBLdXJhdG9taSA8YS5iYWRnZXJAZ21haWwuY29tPiwgMjAxNgojCiMgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwKIyBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6CiMKIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0CiMgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuCiMgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsCiMgICAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uCiMgICAgICBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KIwojIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTIElTIiBBTkQKIyBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRAojIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4KIyBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwKIyBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sCiMgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTCiMgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVAojIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRQojIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgojCgoiIiIKLi4gd2Fybjo6IFRoaXMgbW9kdWxlX3V0aWwgaXMgY3VycmVudGx5IGludGVybmFsIGltcGxlbWVudGF0aW9uLgogICAgV2Ugd2FudCB0byBldmFsdWF0ZSB0aGlzIGNvZGUgZm9yIHN0YWJpbGl0eSBhbmQgQVBJIHN1aXRhYmlsaXR5IGJlZm9yZQogICAgbWFraW5nIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMuICBUaGUgQVBJIG1heSBjaGFuZ2UgYmV0d2VlbgogICAgcmVsZWFzZXMuICBEbyBub3QgdXNlIHRoaXMgdW5sZXNzIHlvdSBhcmUgd2lsbGluZyB0byBwb3J0IHlvdXIgbW9kdWxlIGNvZGUuCiIiIgppbXBvcnQgY29kZWNzCgpmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeCBpbXBvcnQgUFkzLCB0ZXh0X3R5cGUsIGJpbmFyeV90eXBlCgoKdHJ5OgogICAgY29kZWNzLmxvb2t1cF9lcnJvcignc3Vycm9nYXRlZXNjYXBlJykKICAgIEhBU19TVVJST0dBVEVFU0NBUEUgPSBUcnVlCmV4Y2VwdCBMb29rdXBFcnJvcjoKICAgIEhBU19TVVJST0dBVEVFU0NBUEUgPSBGYWxzZQoKCl9DT01QT1NFRF9FUlJPUl9IQU5ETEVSUyA9IGZyb3plbnNldCgoTm9uZSwgJ3N1cnJvZ2F0ZV9vcl9lc2NhcGUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N1cnJvZ2F0ZV9vcl9zdHJpY3QnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N1cnJvZ2F0ZV90aGVuX3JlcGxhY2UnKSkKCgpkZWYgdG9fYnl0ZXMob2JqLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9Tm9uZSwgbm9uc3RyaW5nPSdzaW1wbGVyZXByJyk6CiAgICAiIiJNYWtlIHN1cmUgdGhhdCBhIHN0cmluZyBpcyBhIGJ5dGUgc3RyaW5nCgogICAgOmFyZyBvYmo6IEFuIG9iamVjdCB0byBtYWtlIHN1cmUgaXMgYSBieXRlIHN0cmluZy4gIEluIG1vc3QgY2FzZXMgdGhpcwogICAgICAgIHdpbGwgYmUgZWl0aGVyIGEgdGV4dCBzdHJpbmcgb3IgYSBieXRlIHN0cmluZy4gIEhvd2V2ZXIsIHdpdGgKICAgICAgICBgYG5vbnN0cmluZz0nc2ltcGxlcmVwcidgYCwgdGhpcyBjYW4gYmUgdXNlZCBhcyBhIHRyYWNlYmFjay1mcmVlCiAgICAgICAgdmVyc2lvbiBvZiBgYHN0cihvYmopYGAuCiAgICA6a3dhcmcgZW5jb2Rpbmc6IFRoZSBlbmNvZGluZyB0byB1c2UgdG8gdHJhbnNmb3JtIGZyb20gYSB0ZXh0IHN0cmluZyB0bwogICAgICAgIGEgYnl0ZSBzdHJpbmcuICBEZWZhdWx0cyB0byB1c2luZyAndXRmLTgnLgogICAgOmt3YXJnIGVycm9yczogVGhlIGVycm9yIGhhbmRsZXIgdG8gdXNlIGlmIHRoZSB0ZXh0IHN0cmluZyBpcyBub3QKICAgICAgICBlbmNvZGFibGUgdXNpbmcgdGhlIHNwZWNpZmllZCBlbmNvZGluZy4gIEFueSB2YWxpZCBgY29kZWNzIGVycm9yCiAgICAgICAgaGFuZGxlciA8aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMi9saWJyYXJ5L2NvZGVjcy5odG1sI2NvZGVjLWJhc2UtY2xhc3Nlcz5gXwogICAgICAgIG1heSBiZSBzcGVjaWZpZWQuIFRoZXJlIGFyZSB0aHJlZSBhZGRpdGlvbmFsIGVycm9yIHN0cmF0ZWdpZXMKICAgICAgICBzcGVjaWZpY2FsbHkgYWltZWQgYXQgaGVscGluZyBwZW9wbGUgdG8gcG9ydCBjb2RlLiAgVGhlIGZpcnN0IHR3byBhcmU6CgogICAgICAgICAgICA6c3Vycm9nYXRlX29yX3N0cmljdDogV2lsbCB1c2UgYGBzdXJyb2dhdGVlc2NhcGVgYCBpZiBpdCBpcyBhIHZhbGlkCiAgICAgICAgICAgICAgICBoYW5kbGVyLCBvdGhlcndpc2UgaXQgd2lsbCB1c2UgYGBzdHJpY3RgYAogICAgICAgICAgICA6c3Vycm9nYXRlX29yX3JlcGxhY2U6IFdpbGwgdXNlIGBgc3Vycm9nYXRlZXNjYXBlYGAgaWYgaXQgaXMgYSB2YWxpZAogICAgICAgICAgICAgICAgaGFuZGxlciwgb3RoZXJ3aXNlIGl0IHdpbGwgdXNlIGBgcmVwbGFjZWBgLgoKICAgICAgICBCZWNhdXNlIGBgc3Vycm9nYXRlZXNjYXBlYGAgd2FzIGFkZGVkIGluIFB5dGhvbjMgdGhpcyB1c3VhbGx5IG1lYW5zIHRoYXQKICAgICAgICBQeXRob24zIHdpbGwgdXNlIGBgc3Vycm9nYXRlZXNjYXBlYGAgYW5kIFB5dGhvbjIgd2lsbCB1c2UgdGhlIGZhbGxiYWNrCiAgICAgICAgZXJyb3IgaGFuZGxlci4gTm90ZSB0aGF0IHRoZSBjb2RlIGNoZWNrcyBmb3IgYGBzdXJyb2dhdGVlc2NhcGVgYCB3aGVuIHRoZQogICAgICAgIG1vZHVsZSBpcyBpbXBvcnRlZC4gIElmIHlvdSBoYXZlIGEgYmFja3BvcnQgb2YgYGBzdXJyb2dhdGVlc2NhcGVgYCBmb3IKICAgICAgICBQeXRob24yLCBiZSBzdXJlIHRvIHJlZ2lzdGVyIHRoZSBlcnJvciBoYW5kbGVyIHByaW9yIHRvIGltcG9ydGluZyB0aGlzCiAgICAgICAgbW9kdWxlLgoKICAgICAgICBUaGUgbGFzdCBlcnJvciBoYW5kbGVyIGlzOgoKICAgICAgICAgICAgOnN1cnJvZ2F0ZV90aGVuX3JlcGxhY2U6IFdpbGwgdXNlIGBgc3Vycm9nYXRlZXNjYXBlYGAgaWYgaXQgaXMgYSB2YWxpZAogICAgICAgICAgICAgICAgaGFuZGxlci4gIElmIGVuY29kaW5nIHdpdGggYGBzdXJyb2dhdGVlc2NhcGVgYCB3b3VsZCB0cmFjZWJhY2ssCiAgICAgICAgICAgICAgICBzdXJyb2dhdGVzIGFyZSBmaXJzdCByZXBsYWNlZCB3aXRoIGEgcmVwbGFjZW1lbnQgY2hhcmFjdGVycwogICAgICAgICAgICAgICAgYW5kIHRoZW4gdGhlIHN0cmluZyBpcyBlbmNvZGVkIHVzaW5nIGBgcmVwbGFjZWBgICh3aGljaCByZXBsYWNlcwogICAgICAgICAgICAgICAgdGhlIHJlc3Qgb2YgdGhlIG5vbmVuY29kYWJsZSBieXRlcykuICBJZiBgYHN1cnJvZ2F0ZWVzY2FwZWBgIGlzCiAgICAgICAgICAgICAgICBub3QgcHJlc2VudCBpdCB3aWxsIHNpbXBseSB1c2UgYGByZXBsYWNlYGAuICAoQWRkZWQgaW4gQW5zaWJsZSAyLjMpCiAgICAgICAgICAgICAgICBUaGlzIHN0cmF0ZWd5IGlzIGRlc2lnbmVkIHRvIG5ldmVyIHRyYWNlYmFjayB3aGVuIGl0IGF0dGVtcHRzCiAgICAgICAgICAgICAgICB0byBlbmNvZGUgYSBzdHJpbmcuCgogICAgICAgIFRoZSBkZWZhdWx0IHVudGlsIEFuc2libGUtMi4yIHdhcyBgYHN1cnJvZ2F0ZV9vcl9yZXBsYWNlYGAKICAgICAgICBGcm9tIEFuc2libGUtMi4zIG9ud2FyZHMsIHRoZSBkZWZhdWx0IGlzIGBgc3Vycm9nYXRlX3RoZW5fcmVwbGFjZWBgLgoKICAgIDprd2FyZyBub25zdHJpbmc6IFRoZSBzdHJhdGVneSB0byB1c2UgaWYgYSBub25zdHJpbmcgaXMgc3BlY2lmaWVkIGluCiAgICAgICAgYGBvYmpgYC4gIERlZmF1bHQgaXMgJ3NpbXBsZXJlcHInLiAgVmFsaWQgdmFsdWVzIGFyZToKCiAgICAgICAgOnNpbXBsZXJlcHI6IFRoZSBkZWZhdWx0LiAgVGhpcyB0YWtlcyB0aGUgYGBzdHJgYCBvZiB0aGUgb2JqZWN0IGFuZAogICAgICAgICAgICB0aGVuIHJldHVybnMgdGhlIGJ5dGVzIHZlcnNpb24gb2YgdGhhdCBzdHJpbmcuCiAgICAgICAgOmVtcHR5OiBSZXR1cm4gYW4gZW1wdHkgYnl0ZSBzdHJpbmcKICAgICAgICA6cGFzc3RocnU6IFJldHVybiB0aGUgb2JqZWN0IHBhc3NlZCBpbgogICAgICAgIDpzdHJpY3Q6IFJhaXNlIGEgOmV4YzpgVHlwZUVycm9yYAoKICAgIDpyZXR1cm5zOiBUeXBpY2FsbHkgdGhpcyByZXR1cm5zIGEgYnl0ZSBzdHJpbmcuICBJZiBhIG5vbnN0cmluZyBvYmplY3QgaXMKICAgICAgICBwYXNzZWQgaW4gdGhpcyBtYXkgYmUgYSBkaWZmZXJlbnQgdHlwZSBkZXBlbmRpbmcgb24gdGhlIHN0cmF0ZWd5CiAgICAgICAgc3BlY2lmaWVkIGJ5IG5vbnN0cmluZy4gIFRoaXMgd2lsbCBuZXZlciByZXR1cm4gYSB0ZXh0IHN0cmluZy4KCiAgICAuLiBub3RlOjogSWYgcGFzc2VkIGEgYnl0ZSBzdHJpbmcsIHRoaXMgZnVuY3Rpb24gZG9lcyBub3QgY2hlY2sgdGhhdCB0aGUKICAgICAgICBzdHJpbmcgaXMgdmFsaWQgaW4gdGhlIHNwZWNpZmllZCBlbmNvZGluZy4gIElmIGl0J3MgaW1wb3J0YW50IHRoYXQgdGhlCiAgICAgICAgYnl0ZSBzdHJpbmcgaXMgaW4gdGhlIHNwZWNpZmllZCBlbmNvZGluZyBkbzo6CgogICAgICAgICAgICBlbmNvZGVkX3N0cmluZyA9IHRvX2J5dGVzKHRvX3RleHQoaW5wdXRfc3RyaW5nLCAnbGF0aW4tMScpLCAndXRmLTgnKQoKICAgIC4uIHZlcnNpb25fY2hhbmdlZDo6IDIuMwoKICAgICAgICBBZGRlZCB0aGUgYGBzdXJyb2dhdGVfdGhlbl9yZXBsYWNlYGAgZXJyb3IgaGFuZGxlciBhbmQgbWFkZSBpdCB0aGUgZGVmYXVsdCBlcnJvciBoYW5kbGVyLgogICAgIiIiCiAgICBpZiBpc2luc3RhbmNlKG9iaiwgYmluYXJ5X3R5cGUpOgogICAgICAgIHJldHVybiBvYmoKCiAgICAjIFdlJ3JlIGdpdmVuIGEgdGV4dCBzdHJpbmcKICAgICMgSWYgaXQgaGFzIHN1cnJvZ2F0ZXMsIHdlIGtub3cgYmVjYXVzZSBpdCB3aWxsIGRlY29kZQogICAgb3JpZ2luYWxfZXJyb3JzID0gZXJyb3JzCiAgICBpZiBlcnJvcnMgaW4gX0NPTVBPU0VEX0VSUk9SX0hBTkRMRVJTOgogICAgICAgIGlmIEhBU19TVVJST0dBVEVFU0NBUEU6CiAgICAgICAgICAgIGVycm9ycyA9ICdzdXJyb2dhdGVlc2NhcGUnCiAgICAgICAgZWxpZiBlcnJvcnMgPT0gJ3N1cnJvZ2F0ZV9vcl9zdHJpY3QnOgogICAgICAgICAgICBlcnJvcnMgPSAnc3RyaWN0JwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGVycm9ycyA9ICdyZXBsYWNlJwoKICAgIGlmIGlzaW5zdGFuY2Uob2JqLCB0ZXh0X3R5cGUpOgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBUcnkgdGhpcyBmaXJzdCBhcyBpdCdzIHRoZSBmYXN0ZXN0CiAgICAgICAgICAgIHJldHVybiBvYmouZW5jb2RlKGVuY29kaW5nLCBlcnJvcnMpCiAgICAgICAgZXhjZXB0IFVuaWNvZGVFbmNvZGVFcnJvcjoKICAgICAgICAgICAgaWYgb3JpZ2luYWxfZXJyb3JzIGluIChOb25lLCAnc3Vycm9nYXRlX3RoZW5fcmVwbGFjZScpOgogICAgICAgICAgICAgICAgIyBTbG93IGJ1dCB3b3JrcwogICAgICAgICAgICAgICAgcmV0dXJuX3N0cmluZyA9IG9iai5lbmNvZGUoJ3V0Zi04JywgJ3N1cnJvZ2F0ZWVzY2FwZScpCiAgICAgICAgICAgICAgICByZXR1cm5fc3RyaW5nID0gcmV0dXJuX3N0cmluZy5kZWNvZGUoJ3V0Zi04JywgJ3JlcGxhY2UnKQogICAgICAgICAgICAgICAgcmV0dXJuIHJldHVybl9zdHJpbmcuZW5jb2RlKGVuY29kaW5nLCAncmVwbGFjZScpCiAgICAgICAgICAgIHJhaXNlCgogICAgIyBOb3RlOiBXZSBkbyB0aGVzZSBsYXN0IGV2ZW4gdGhvdWdoIHdlIGhhdmUgdG8gY2FsbCB0b19ieXRlcyBhZ2FpbiBvbiB0aGUKICAgICMgdmFsdWUgYmVjYXVzZSB3ZSdyZSBvcHRpbWl6aW5nIHRoZSBjb21tb24gY2FzZQogICAgaWYgbm9uc3RyaW5nID09ICdzaW1wbGVyZXByJzoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbHVlID0gc3RyKG9iaikKICAgICAgICBleGNlcHQgVW5pY29kZUVycm9yOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlcHIob2JqKQogICAgICAgICAgICBleGNlcHQgVW5pY29kZUVycm9yOgogICAgICAgICAgICAgICAgIyBHaXZpbmcgdXAKICAgICAgICAgICAgICAgIHJldHVybiB0b19ieXRlcygnJykKICAgIGVsaWYgbm9uc3RyaW5nID09ICdwYXNzdGhydSc6CiAgICAgICAgcmV0dXJuIG9iagogICAgZWxpZiBub25zdHJpbmcgPT0gJ2VtcHR5JzoKICAgICAgICAjIHB5dGhvbjIuNCBkb2Vzbid0IGhhdmUgYicnCiAgICAgICAgcmV0dXJuIHRvX2J5dGVzKCcnKQogICAgZWxpZiBub25zdHJpbmcgPT0gJ3N0cmljdCc6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdvYmogbXVzdCBiZSBhIHN0cmluZyB0eXBlJykKICAgIGVsc2U6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdJbnZhbGlkIHZhbHVlICVzIGZvciB0b19ieXRlc1wnIG5vbnN0cmluZyBwYXJhbWV0ZXInICUgbm9uc3RyaW5nKQoKICAgIHJldHVybiB0b19ieXRlcyh2YWx1ZSwgZW5jb2RpbmcsIGVycm9ycykKCgpkZWYgdG9fdGV4dChvYmosIGVuY29kaW5nPSd1dGYtOCcsIGVycm9ycz1Ob25lLCBub25zdHJpbmc9J3NpbXBsZXJlcHInKToKICAgICIiIk1ha2Ugc3VyZSB0aGF0IGEgc3RyaW5nIGlzIGEgdGV4dCBzdHJpbmcKCiAgICA6YXJnIG9iajogQW4gb2JqZWN0IHRvIG1ha2Ugc3VyZSBpcyBhIHRleHQgc3RyaW5nLiAgSW4gbW9zdCBjYXNlcyB0aGlzCiAgICAgICAgd2lsbCBiZSBlaXRoZXIgYSB0ZXh0IHN0cmluZyBvciBhIGJ5dGUgc3RyaW5nLiAgSG93ZXZlciwgd2l0aAogICAgICAgIGBgbm9uc3RyaW5nPSdzaW1wbGVyZXByJ2BgLCB0aGlzIGNhbiBiZSB1c2VkIGFzIGEgdHJhY2ViYWNrLWZyZWUKICAgICAgICB2ZXJzaW9uIG9mIGBgc3RyKG9iailgYC4KICAgIDprd2FyZyBlbmNvZGluZzogVGhlIGVuY29kaW5nIHRvIHVzZSB0byB0cmFuc2Zvcm0gZnJvbSBhIGJ5dGUgc3RyaW5nIHRvCiAgICAgICAgYSB0ZXh0IHN0cmluZy4gIERlZmF1bHRzIHRvIHVzaW5nICd1dGYtOCcuCiAgICA6a3dhcmcgZXJyb3JzOiBUaGUgZXJyb3IgaGFuZGxlciB0byB1c2UgaWYgdGhlIGJ5dGUgc3RyaW5nIGlzIG5vdAogICAgICAgIGRlY29kYWJsZSB1c2luZyB0aGUgc3BlY2lmaWVkIGVuY29kaW5nLiAgQW55IHZhbGlkIGBjb2RlY3MgZXJyb3IKICAgICAgICBoYW5kbGVyIDxodHRwczovL2RvY3MucHl0aG9uLm9yZy8yL2xpYnJhcnkvY29kZWNzLmh0bWwjY29kZWMtYmFzZS1jbGFzc2VzPmBfCiAgICAgICAgbWF5IGJlIHNwZWNpZmllZC4gICBXZSBzdXBwb3J0IHRocmVlIGFkZGl0aW9uYWwgZXJyb3Igc3RyYXRlZ2llcwogICAgICAgIHNwZWNpZmljYWxseSBhaW1lZCBhdCBoZWxwaW5nIHBlb3BsZSB0byBwb3J0IGNvZGU6CgogICAgICAgICAgICA6c3Vycm9nYXRlX29yX3N0cmljdDogV2lsbCB1c2Ugc3Vycm9nYXRlZXNjYXBlIGlmIGl0IGlzIGEgdmFsaWQKICAgICAgICAgICAgICAgIGhhbmRsZXIsIG90aGVyd2lzZSBpdCB3aWxsIHVzZSBzdHJpY3QKICAgICAgICAgICAgOnN1cnJvZ2F0ZV9vcl9yZXBsYWNlOiBXaWxsIHVzZSBzdXJyb2dhdGVlc2NhcGUgaWYgaXQgaXMgYSB2YWxpZAogICAgICAgICAgICAgICAgaGFuZGxlciwgb3RoZXJ3aXNlIGl0IHdpbGwgdXNlIHJlcGxhY2UuCiAgICAgICAgICAgIDpzdXJyb2dhdGVfdGhlbl9yZXBsYWNlOiBEb2VzIHRoZSBzYW1lIGFzIHN1cnJvZ2F0ZV9vcl9yZXBsYWNlIGJ1dAogICAgICAgICAgICAgICAgYHdhcyBhZGRlZCBmb3Igc3ltbWV0cnkgd2l0aCB0aGUgZXJyb3IgaGFuZGxlcnMgaW4KICAgICAgICAgICAgICAgIDpmdW5jOmBhbnNpYmxlLm1vZHVsZV91dGlscy5fdGV4dC50b19ieXRlc2AgKEFkZGVkIGluIEFuc2libGUgMi4zKQoKICAgICAgICBCZWNhdXNlIHN1cnJvZ2F0ZWVzY2FwZSB3YXMgYWRkZWQgaW4gUHl0aG9uMyB0aGlzIHVzdWFsbHkgbWVhbnMgdGhhdAogICAgICAgIFB5dGhvbjMgd2lsbCB1c2UgYHN1cnJvZ2F0ZWVzY2FwZWAgYW5kIFB5dGhvbjIgd2lsbCB1c2UgdGhlIGZhbGxiYWNrCiAgICAgICAgZXJyb3IgaGFuZGxlci4gTm90ZSB0aGF0IHRoZSBjb2RlIGNoZWNrcyBmb3Igc3Vycm9nYXRlZXNjYXBlIHdoZW4gdGhlCiAgICAgICAgbW9kdWxlIGlzIGltcG9ydGVkLiAgSWYgeW91IGhhdmUgYSBiYWNrcG9ydCBvZiBgc3Vycm9nYXRlZXNjYXBlYCBmb3IKICAgICAgICBweXRob24yLCBiZSBzdXJlIHRvIHJlZ2lzdGVyIHRoZSBlcnJvciBoYW5kbGVyIHByaW9yIHRvIGltcG9ydGluZyB0aGlzCiAgICAgICAgbW9kdWxlLgoKICAgICAgICBUaGUgZGVmYXVsdCB1bnRpbCBBbnNpYmxlLTIuMiB3YXMgYHN1cnJvZ2F0ZV9vcl9yZXBsYWNlYAogICAgICAgIEluIEFuc2libGUtMi4zIHRoaXMgZGVmYXVsdHMgdG8gYHN1cnJvZ2F0ZV90aGVuX3JlcGxhY2VgIGZvciBzeW1tZXRyeQogICAgICAgIHdpdGggOmZ1bmM6YGFuc2libGUubW9kdWxlX3V0aWxzLl90ZXh0LnRvX2J5dGVzYCAuCiAgICA6a3dhcmcgbm9uc3RyaW5nOiBUaGUgc3RyYXRlZ3kgdG8gdXNlIGlmIGEgbm9uc3RyaW5nIGlzIHNwZWNpZmllZCBpbgogICAgICAgIGBgb2JqYGAuICBEZWZhdWx0IGlzICdzaW1wbGVyZXByJy4gIFZhbGlkIHZhbHVlcyBhcmU6CgogICAgICAgIDpzaW1wbGVyZXByOiBUaGUgZGVmYXVsdC4gIFRoaXMgdGFrZXMgdGhlIGBgc3RyYGAgb2YgdGhlIG9iamVjdCBhbmQKICAgICAgICAgICAgdGhlbiByZXR1cm5zIHRoZSB0ZXh0IHZlcnNpb24gb2YgdGhhdCBzdHJpbmcuCiAgICAgICAgOmVtcHR5OiBSZXR1cm4gYW4gZW1wdHkgdGV4dCBzdHJpbmcKICAgICAgICA6cGFzc3RocnU6IFJldHVybiB0aGUgb2JqZWN0IHBhc3NlZCBpbgogICAgICAgIDpzdHJpY3Q6IFJhaXNlIGEgOmV4YzpgVHlwZUVycm9yYAoKICAgIDpyZXR1cm5zOiBUeXBpY2FsbHkgdGhpcyByZXR1cm5zIGEgdGV4dCBzdHJpbmcuICBJZiBhIG5vbnN0cmluZyBvYmplY3QgaXMKICAgICAgICBwYXNzZWQgaW4gdGhpcyBtYXkgYmUgYSBkaWZmZXJlbnQgdHlwZSBkZXBlbmRpbmcgb24gdGhlIHN0cmF0ZWd5CiAgICAgICAgc3BlY2lmaWVkIGJ5IG5vbnN0cmluZy4gIFRoaXMgd2lsbCBuZXZlciByZXR1cm4gYSBieXRlIHN0cmluZy4KICAgICAgICBGcm9tIEFuc2libGUtMi4zIG9ud2FyZHMsIHRoZSBkZWZhdWx0IGlzIGBzdXJyb2dhdGVfdGhlbl9yZXBsYWNlYC4KCiAgICAuLiB2ZXJzaW9uX2NoYW5nZWQ6OiAyLjMKCiAgICAgICAgQWRkZWQgdGhlIHN1cnJvZ2F0ZV90aGVuX3JlcGxhY2UgZXJyb3IgaGFuZGxlciBhbmQgbWFkZSBpdCB0aGUgZGVmYXVsdCBlcnJvciBoYW5kbGVyLgogICAgIiIiCiAgICBpZiBpc2luc3RhbmNlKG9iaiwgdGV4dF90eXBlKToKICAgICAgICByZXR1cm4gb2JqCgogICAgaWYgZXJyb3JzIGluIF9DT01QT1NFRF9FUlJPUl9IQU5ETEVSUzoKICAgICAgICBpZiBIQVNfU1VSUk9HQVRFRVNDQVBFOgogICAgICAgICAgICBlcnJvcnMgPSAnc3Vycm9nYXRlZXNjYXBlJwogICAgICAgIGVsaWYgZXJyb3JzID09ICdzdXJyb2dhdGVfb3Jfc3RyaWN0JzoKICAgICAgICAgICAgZXJyb3JzID0gJ3N0cmljdCcKICAgICAgICBlbHNlOgogICAgICAgICAgICBlcnJvcnMgPSAncmVwbGFjZScKCiAgICBpZiBpc2luc3RhbmNlKG9iaiwgYmluYXJ5X3R5cGUpOgogICAgICAgICMgTm90ZTogV2UgZG9uJ3QgbmVlZCBzcGVjaWFsIGhhbmRsaW5nIGZvciBzdXJyb2dhdGVfdGhlbl9yZXBsYWNlCiAgICAgICAgIyBiZWNhdXNlIGFsbCBieXRlcyB3aWxsIGVpdGhlciBiZSBtYWRlIGludG8gc3Vycm9nYXRlcyBvciBhcmUgdmFsaWQKICAgICAgICAjIHRvIGRlY29kZS4KICAgICAgICByZXR1cm4gb2JqLmRlY29kZShlbmNvZGluZywgZXJyb3JzKQoKICAgICMgTm90ZTogV2UgZG8gdGhlc2UgbGFzdCBldmVuIHRob3VnaCB3ZSBoYXZlIHRvIGNhbGwgdG9fdGV4dCBhZ2FpbiBvbiB0aGUKICAgICMgdmFsdWUgYmVjYXVzZSB3ZSdyZSBvcHRpbWl6aW5nIHRoZSBjb21tb24gY2FzZQogICAgaWYgbm9uc3RyaW5nID09ICdzaW1wbGVyZXByJzoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbHVlID0gc3RyKG9iaikKICAgICAgICBleGNlcHQgVW5pY29kZUVycm9yOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlcHIob2JqKQogICAgICAgICAgICBleGNlcHQgVW5pY29kZUVycm9yOgogICAgICAgICAgICAgICAgIyBHaXZpbmcgdXAKICAgICAgICAgICAgICAgIHJldHVybiB1JycKICAgIGVsaWYgbm9uc3RyaW5nID09ICdwYXNzdGhydSc6CiAgICAgICAgcmV0dXJuIG9iagogICAgZWxpZiBub25zdHJpbmcgPT0gJ2VtcHR5JzoKICAgICAgICByZXR1cm4gdScnCiAgICBlbGlmIG5vbnN0cmluZyA9PSAnc3RyaWN0JzoKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ29iaiBtdXN0IGJlIGEgc3RyaW5nIHR5cGUnKQogICAgZWxzZToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ0ludmFsaWQgdmFsdWUgJXMgZm9yIHRvX3RleHRcJ3Mgbm9uc3RyaW5nIHBhcmFtZXRlcicgJSBub25zdHJpbmcpCgogICAgcmV0dXJuIHRvX3RleHQodmFsdWUsIGVuY29kaW5nLCBlcnJvcnMpCgoKIzogOnB5OmZ1bmM6YHRvX25hdGl2ZWAKIzogICAgICBUcmFuc2Zvcm0gYSB2YXJpYWJsZSBpbnRvIHRoZSBuYXRpdmUgc3RyIHR5cGUgZm9yIHRoZSBweXRob24gdmVyc2lvbgojOgojOiAgICAgIE9uIFB5dGhvbjIsIHRoaXMgaXMgYW4gYWxpYXMgZm9yCiM6ICAgICAgOmZ1bmM6YH5hbnNpYmxlLm1vZHVsZV91dGlscy50b19ieXRlc2AuICBPbiBQeXRob24zIGl0IGlzIGFuIGFsaWFzIGZvcgojOiAgICAgIDpmdW5jOmB+YW5zaWJsZS5tb2R1bGVfdXRpbHMudG9fdGV4dGAuICBJdCBtYWtlcyBpdCBlYXNpZXIgdG8KIzogICAgICB0cmFuc2Zvcm0gYSB2YXJpYWJsZSBpbnRvIHRoZSBuYXRpdmUgc3RyIHR5cGUgZm9yIHRoZSBweXRob24gdmVyc2lvbgojOiAgICAgIHRoZSBjb2RlIGlzIHJ1bm5pbmcgb24uICBVc2UgdGhpcyB3aGVuIGNvbnN0cnVjdGluZyB0aGUgbWVzc2FnZSB0bwojOiAgICAgIHNlbmQgdG8gZXhjZXB0aW9ucyBvciB3aGVuIGRlYWxpbmcgd2l0aCBhbiBBUEkgdGhhdCBuZWVkcyB0byB0YWtlCiM6ICAgICAgYSBuYXRpdmUgc3RyaW5nLiAgRXhhbXBsZTo6CiM6CiM6ICAgICAgICAgIHRyeToKIzogICAgICAgICAgICAgIDEvLzAKIzogICAgICAgICAgZXhjZXB0IFplcm9EaXZpc2lvbkVycm9yIGFzIGU6CiM6ICAgICAgICAgICAgICByYWlzZSBNeUV4Y2VwdGlvbignRW5jb3VudGVyZWQgYW5kIGVycm9yOiAlcycgJSB0b19uYXRpdmUoZSkpCmlmIFBZMzoKICAgIHRvX25hdGl2ZSA9IHRvX3RleHQKZWxzZToKICAgIHRvX25hdGl2ZSA9IHRvX2J5dGVzClBLAwQUAAAAAAAHvCtLJdy0fhMQAAATEAAAIgAAAGFuc2libGUvbW9kdWxlX3V0aWxzL3B5Y29tcGF0MjQucHkjIFRoaXMgY29kZSBpcyBwYXJ0IG9mIEFuc2libGUsIGJ1dCBpcyBhbiBpbmRlcGVuZGVudCBjb21wb25lbnQuCiMgVGhpcyBwYXJ0aWN1bGFyIGZpbGUgc25pcHBldCwgYW5kIHRoaXMgZmlsZSBzbmlwcGV0IG9ubHksIGlzIEJTRCBsaWNlbnNlZC4KIyBNb2R1bGVzIHlvdSB3cml0ZSB1c2luZyB0aGlzIHNuaXBwZXQsIHdoaWNoIGlzIGVtYmVkZGVkIGR5bmFtaWNhbGx5IGJ5IEFuc2libGUKIyBzdGlsbCBiZWxvbmcgdG8gdGhlIGF1dGhvciBvZiB0aGUgbW9kdWxlLCBhbmQgbWF5IGFzc2lnbiB0aGVpciBvd24gbGljZW5zZQojIHRvIHRoZSBjb21wbGV0ZSB3b3JrLgojCiMgQ29weXJpZ2h0IChjKSAyMDE2LCBUb3NoaW8gS3VyYXRvbWkgPHRrdXJhdG9taUBhbnNpYmxlLmNvbT4KIyBDb3B5cmlnaHQgKGMpIDIwMTUsIE1hcml1cyBHZWRtaW5hcwojCiMgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwKIyBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6CiMKIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0CiMgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuCiMgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsCiMgICAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uCiMgICAgICBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KIwojIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTIElTIiBBTkQKIyBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRAojIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4KIyBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwKIyBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sCiMgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTCiMgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVAojIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRQojIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgojCgppbXBvcnQgc3lzCgpkZWYgZ2V0X2V4Y2VwdGlvbigpOgogICAgIiIiR2V0IHRoZSBjdXJyZW50IGV4Y2VwdGlvbi4KCiAgICBUaGlzIGNvZGUgbmVlZHMgdG8gd29yayBvbiBQeXRob24gMi40IHRocm91Z2ggMy54LCBzbyB3ZSBjYW5ub3QgdXNlCiAgICAiZXhjZXB0IEV4Y2VwdGlvbiwgZToiIChTeW50YXhFcnJvciBvbiBQeXRob24gMy54KSBub3IKICAgICJleGNlcHQgRXhjZXB0aW9uIGFzIGU6IiAoU3ludGF4RXJyb3Igb24gUHl0aG9uIDIuNC0yLjUpLgogICAgSW5zdGVhZCB3ZSBtdXN0IHVzZSA6OgoKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCgogICAgIiIiCiAgICByZXR1cm4gc3lzLmV4Y19pbmZvKClbMV0KCnRyeToKICAgICMgUHl0aG9uIDIuNisKICAgIGZyb20gYXN0IGltcG9ydCBsaXRlcmFsX2V2YWwKZXhjZXB0IEltcG9ydEVycm9yOgogICAgIyBhIHJlcGxhY2VtZW50IGZvciBsaXRlcmFsX2V2YWwgdGhhdCB3b3JrcyB3aXRoIHB5dGhvbiAyLjQuIGZyb206CiAgICAjIGh0dHBzOi8vbWFpbC5weXRob24ub3JnL3BpcGVybWFpbC9weXRob24tbGlzdC8yMDA5LVNlcHRlbWJlci81NTE4ODAuaHRtbAogICAgIyB3aGljaCBpcyBlc3NlbnRpYWxseSBhIGN1dC9wYXN0ZSBmcm9tIGFuIGVhcmxpZXIgKDIuNikgdmVyc2lvbiBvZiBweXRob24ncwogICAgIyBhc3QucHkKICAgIGZyb20gY29tcGlsZXIgaW1wb3J0IGFzdCwgcGFyc2UKICAgIGZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4IGltcG9ydCBiaW5hcnlfdHlwZSwgc3RyaW5nX3R5cGVzLCB0ZXh0X3R5cGUKCiAgICBkZWYgbGl0ZXJhbF9ldmFsKG5vZGVfb3Jfc3RyaW5nKToKICAgICAgICAiIiIKICAgICAgICBTYWZlbHkgZXZhbHVhdGUgYW4gZXhwcmVzc2lvbiBub2RlIG9yIGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBQeXRob24KICAgICAgICBleHByZXNzaW9uLiAgVGhlIHN0cmluZyBvciBub2RlIHByb3ZpZGVkIG1heSBvbmx5IGNvbnNpc3Qgb2YgdGhlICBmb2xsb3dpbmcKICAgICAgICBQeXRob24gbGl0ZXJhbCBzdHJ1Y3R1cmVzOiBzdHJpbmdzLCBudW1iZXJzLCB0dXBsZXMsIGxpc3RzLCBkaWN0cywgIGJvb2xlYW5zLAogICAgICAgIGFuZCBOb25lLgogICAgICAgICIiIgogICAgICAgIF9zYWZlX25hbWVzID0geydOb25lJzogTm9uZSwgJ1RydWUnOiBUcnVlLCAnRmFsc2UnOiBGYWxzZX0KICAgICAgICBpZiBpc2luc3RhbmNlKG5vZGVfb3Jfc3RyaW5nLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICBub2RlX29yX3N0cmluZyA9IHBhcnNlKG5vZGVfb3Jfc3RyaW5nLCBtb2RlPSdldmFsJykKICAgICAgICBpZiBpc2luc3RhbmNlKG5vZGVfb3Jfc3RyaW5nLCBhc3QuRXhwcmVzc2lvbik6CiAgICAgICAgICAgIG5vZGVfb3Jfc3RyaW5nID0gbm9kZV9vcl9zdHJpbmcubm9kZQoKICAgICAgICBkZWYgX2NvbnZlcnQobm9kZSk6CiAgICAgICAgICAgICMgT2theSB0byB1c2UgbG9uZyBoZXJlIGJlY2F1c2UgdGhpcyBpcyBvbmx5IGZvciBweXRob24gMi40IGFuZCAyLjUKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShub2RlLCBhc3QuQ29uc3QpIGFuZCBpc2luc3RhbmNlKG5vZGUudmFsdWUsICh0ZXh0X3R5cGUsIGJpbmFyeV90eXBlLCBpbnQsIGZsb2F0LCBsb25nLCBjb21wbGV4KSk6CiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS52YWx1ZQogICAgICAgICAgICBlbGlmIGlzaW5zdGFuY2Uobm9kZSwgYXN0LlR1cGxlKToKICAgICAgICAgICAgICAgIHJldHVybiB0dXBsZShtYXAoX2NvbnZlcnQsIG5vZGUubm9kZXMpKQogICAgICAgICAgICBlbGlmIGlzaW5zdGFuY2Uobm9kZSwgYXN0Lkxpc3QpOgogICAgICAgICAgICAgICAgcmV0dXJuIGxpc3QobWFwKF9jb252ZXJ0LCBub2RlLm5vZGVzKSkKICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKG5vZGUsIGFzdC5EaWN0KToKICAgICAgICAgICAgICAgIHJldHVybiBkaWN0KChfY29udmVydChrKSwgX2NvbnZlcnQodikpIGZvciBrLCB2IGluIG5vZGUuaXRlbXMoKSkKICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKG5vZGUsIGFzdC5OYW1lKToKICAgICAgICAgICAgICAgIGlmIG5vZGUubmFtZSBpbiBfc2FmZV9uYW1lczoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3NhZmVfbmFtZXNbbm9kZS5uYW1lXQogICAgICAgICAgICBlbGlmIGlzaW5zdGFuY2Uobm9kZSwgYXN0LlVuYXJ5U3ViKToKICAgICAgICAgICAgICAgIHJldHVybiAtX2NvbnZlcnQobm9kZS5leHByKQogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdtYWxmb3JtZWQgc3RyaW5nJykKICAgICAgICByZXR1cm4gX2NvbnZlcnQobm9kZV9vcl9zdHJpbmcpCgpfX2FsbF9fID0gKCdnZXRfZXhjZXB0aW9uJywgJ2xpdGVyYWxfZXZhbCcpClBLAwQUAAAAAAAHvCtLGBdy9QERAAABEQAAJAAAAGFuc2libGUvbW9kdWxlX3V0aWxzL3NpeC9fX2luaXRfXy5weSMgVGhpcyBjb2RlIGlzIHBhcnQgb2YgQW5zaWJsZSwgYnV0IGlzIGFuIGluZGVwZW5kZW50IGNvbXBvbmVudC4KIyBUaGlzIHBhcnRpY3VsYXIgZmlsZSBzbmlwcGV0LCBhbmQgdGhpcyBmaWxlIHNuaXBwZXQgb25seSwgaXMgQlNEIGxpY2Vuc2VkLgojIE1vZHVsZXMgeW91IHdyaXRlIHVzaW5nIHRoaXMgc25pcHBldCwgd2hpY2ggaXMgZW1iZWRkZWQgZHluYW1pY2FsbHkgYnkgQW5zaWJsZQojIHN0aWxsIGJlbG9uZyB0byB0aGUgYXV0aG9yIG9mIHRoZSBtb2R1bGUsIGFuZCBtYXkgYXNzaWduIHRoZWlyIG93biBsaWNlbnNlCiMgdG8gdGhlIGNvbXBsZXRlIHdvcmsuCiMKIyBDb3B5cmlnaHQgKGMpIDIwMTcsIFRvc2hpbyBLdXJhdG9taSA8dGt1cmF0b21pQGFuc2libGUuY29tPgojCiMgVGhpcyBjb2RlIGlzIGJhc2VkIG9uIGNvZGUgZnJvbSBBc3Ryb3B5IGFuZCByZXRhaW5zIHRoZWlyIDMtY2xhdXNlIEJTRCBsaWNlbnNlCiMgcmVwcm9kdWNlZCBiZWxvdzoKIwojIENvcHlyaWdodCAoYykgMjAxMS0yMDE2LCBBc3Ryb3B5IERldmVsb3BlcnMKIwojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQKIyBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDoKIwojICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzCiMgICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KIyAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwKIyAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24KIyAgIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgojICogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgQXN0cm9weSBUZWFtIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkKIyAgIGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQKIyAgIHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi4KIwojIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTIElTIgojIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUKIyBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUKIyBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFCiMgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwKIyBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUgojIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSCiMgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwKIyBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRQojIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCiMKIyBBc3Ryb3B5IExpY2Vuc2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9hc3Ryb3B5L2FzdHJvcHkvYmxvYi9jZjMyNjVlNDJhMGRiOGUwMGJiOTA2NDRkYjM3YzgxNTBmNWFjMDBjL2xpY2Vuc2VzL0xJQ0VOU0UucnN0CiMgQXN0cm9weSBDb2RlOiBodHRwczovL2dpdGh1Yi5jb20vYXN0cm9weS9hc3Ryb3B5L2Jsb2IvY2YzMjY1ZTQyYTBkYjhlMDBiYjkwNjQ0ZGIzN2M4MTUwZjVhYzAwYy9hc3Ryb3B5L2V4dGVybi9zaXgucHkKCiIiIgpIYW5kbGUgbG9hZGluZyBzaXggcGFja2FnZSBmcm9tIHN5c3RlbSBvciBmcm9tIHRoZSBidW5kbGVkIGNvcHkKIiIiCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYWJzb2x1dGVfaW1wb3J0CgppbXBvcnQgaW1wIGFzIF9pbXAKaW1wb3J0IHN5cyBhcyBfc3lzCgp0cnk6CiAgICBmcm9tIGRpc3R1dGlscy52ZXJzaW9uIGltcG9ydCBMb29zZVZlcnNpb24gYXMgX0xvb3NlVmVyc2lvbgpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAjIFNvbWUgcGxhdGZvcm1zICpjb3VnaCpTb2xhcmlzKmNvdWdoKiBkb24ndCBzaGlwIHRoZSB3aG9sZSBzdGRsaWIKICAgIF9Mb29zZVZlcnNpb24gPSBOb25lCgp0cnk6CiAgICBpbXBvcnQgc2l4IGFzIF9zeXN0ZW1fc2l4CmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIF9zeXN0ZW1fc2l4ID0gTm9uZQoKZnJvbSAuIGltcG9ydCBfc2l4IGFzIF9idW5kbGVkX3NpeAoKCmRlZiBfZmluZF9tb2R1bGUobmFtZSwgcGF0aD1Ob25lKToKICAgICIiIkFsdGVybmF0aXZlIHRvIGBpbXAuZmluZF9tb2R1bGVgIHRoYXQgY2FuIGFsc28gc2VhcmNoIGluIHN1YnBhY2thZ2VzIiIiCiAgICBwYXJ0cyA9IG5hbWUuc3BsaXQoJy4nKQoKICAgIGZvciBwYXJ0IGluIHBhcnRzOgogICAgICAgIGlmIHBhdGggaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHBhdGggPSBbcGF0aF0KICAgICAgICBmaCwgcGF0aCwgZGVzY3IgPSBfaW1wLmZpbmRfbW9kdWxlKHBhcnQsIHBhdGgpCiAgICByZXR1cm4gZmgsIHBhdGgsIGRlc2NyCgoKZGVmIF9nZXRfYnVuZGxlZF9zaXhfc291cmNlKCk6CiAgICAjIFNwZWNpYWwgaW1wb3J0IGxvYWRlciAoemlwaW1wb3J0IGZvciBpbnN0YW5jZSkKICAgIGZvdW5kID0gRmFsc2UKICAgIGZvciBwYXRoIGluIF9zeXMucGF0aDoKICAgICAgICBpbXBvcnRlciA9IF9zeXMucGF0aF9pbXBvcnRlcl9jYWNoZS5nZXQocGF0aCkKICAgICAgICBpZiBpbXBvcnRlcjoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZm91bmQgPSBpbXBvcnRlci5maW5kX21vZHVsZSgnYW5zaWJsZS9tb2R1bGVfdXRpbHMvc2l4L19zaXgnKQogICAgICAgICAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBpZiBmb3VuZDoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICBlbHNlOgogICAgICAgIHJhaXNlIEltcG9ydEVycm9yKCJDb3VsZCBub3QgZmluZCBhbnNpYmxlLm1vZHVsZV91dGlscy5zaXguX3NpeCIpCgogICAgbW9kdWxlX3NvdXJjZSA9IGltcG9ydGVyLmdldF9zb3VyY2UoJ2Fuc2libGUvbW9kdWxlX3V0aWxzL3NpeC9fc2l4JykKICAgIHJldHVybiBtb2R1bGVfc291cmNlCgoKZGVmIF9nZXRfc2l4X3NvdXJjZSgpOgogICAgIiIiSW1wb3J0IHRoZSBuZXdlc3QgdmVyc2lvbiBvZiB0aGUgc2l4IGxpYnJhcnkgdGhhdCdzIGF2YWlsYWJsZSIiIgogICAgbW9kX2luZm8gPSBOb25lCiAgICB0cnk6CiAgICAgICAgaWYgX3N5c3RlbV9zaXggYW5kIF9Mb29zZVZlcnNpb24gYW5kIFwKICAgICAgICAgICAgICAgIF9Mb29zZVZlcnNpb24oX3N5c3RlbV9zaXguX192ZXJzaW9uX18pID49IF9Mb29zZVZlcnNpb24oX2J1bmRsZWRfc2l4Ll9fdmVyc2lvbl9fKToKICAgICAgICAgICAgbW9kX2luZm8gPSBfZmluZF9tb2R1bGUoJ3NpeCcpCiAgICBleGNlcHQ6CiAgICAgICAgIyBBbnkgZXJyb3JzIGZpbmRpbmcgdGhlIHN5c3RlbSBsaWJyYXJ5LCB1c2Ugb3VyIGJ1bmRsZWQgbGliIGluc3RlYWQKICAgICAgICBwYXNzCgogICAgaWYgbm90IG1vZF9pbmZvOgogICAgICAgIHRyeToKICAgICAgICAgICAgbW9kX2luZm8gPSBfZmluZF9tb2R1bGUoJ2Fuc2libGUubW9kdWxlX3V0aWxzLnNpeC5fc2l4JykKICAgICAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgICAgICMgemlwaW1wb3J0CiAgICAgICAgICAgIG1vZHVsZV9zb3VyY2UgPSBfZ2V0X2J1bmRsZWRfc2l4X3NvdXJjZSgpCiAgICAgICAgICAgIHJldHVybiBtb2R1bGVfc291cmNlCgogICAgcmV0dXJuIG1vZF9pbmZvWzBdLnJlYWQoKQoKc291cmNlID0gX2dldF9zaXhfc291cmNlKCkKZXhlYyhzb3VyY2UpClBLAwQUAAAAAAAHvCtLOOLH0ZF1AACRdQAAIAAAAGFuc2libGUvbW9kdWxlX3V0aWxzL3NpeC9fc2l4LnB5IiIiVXRpbGl0aWVzIGZvciB3cml0aW5nIGNvZGUgdGhhdCBydW5zIG9uIFB5dGhvbiAyIGFuZCAzIiIiCgojIENvcHlyaWdodCAoYykgMjAxMC0yMDE1IEJlbmphbWluIFBldGVyc29uCiMKIyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5CiMgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKIyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzCiMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbAojIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwojIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CiMKIyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwKIyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgojCiMgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKIyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKIyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKIyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCiMgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKIyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRQojIFNPRlRXQVJFLgoKZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhYnNvbHV0ZV9pbXBvcnQKCmltcG9ydCBmdW5jdG9vbHMKaW1wb3J0IGl0ZXJ0b29scwppbXBvcnQgb3BlcmF0b3IKaW1wb3J0IHN5cwppbXBvcnQgdHlwZXMKCl9fYXV0aG9yX18gPSAiQmVuamFtaW4gUGV0ZXJzb24gPGJlbmphbWluQHB5dGhvbi5vcmc+IgpfX3ZlcnNpb25fXyA9ICIxLjEwLjAiCgoKIyBVc2VmdWwgZm9yIHZlcnkgY29hcnNlIHZlcnNpb24gZGlmZmVyZW50aWF0aW9uLgpQWTIgPSBzeXMudmVyc2lvbl9pbmZvWzBdID09IDIKUFkzID0gc3lzLnZlcnNpb25faW5mb1swXSA9PSAzClBZMzQgPSBzeXMudmVyc2lvbl9pbmZvWzA6Ml0gPj0gKDMsIDQpCgppZiBQWTM6CiAgICBzdHJpbmdfdHlwZXMgPSBzdHIsCiAgICBpbnRlZ2VyX3R5cGVzID0gaW50LAogICAgY2xhc3NfdHlwZXMgPSB0eXBlLAogICAgdGV4dF90eXBlID0gc3RyCiAgICBiaW5hcnlfdHlwZSA9IGJ5dGVzCiAgICBNQVhTSVpFID0gc3lzLm1heHNpemUKZWxzZToKICAgIHN0cmluZ190eXBlcyA9IGJhc2VzdHJpbmcsCiAgICBpbnRlZ2VyX3R5cGVzID0gKGludCwgbG9uZykKICAgIGNsYXNzX3R5cGVzID0gKHR5cGUsIHR5cGVzLkNsYXNzVHlwZSkKICAgIHRleHRfdHlwZSA9IHVuaWNvZGUKICAgIGJpbmFyeV90eXBlID0gc3RyCgogICAgaWYgc3lzLnBsYXRmb3JtLnN0YXJ0c3dpdGgoImphdmEiKToKICAgICAgICAjIEp5dGhvbiBhbHdheXMgdXNlcyAzMiBiaXRzLgogICAgICAgIE1BWFNJWkUgPSBpbnQoKDEgPDwgMzEpIC0gMSkKICAgIGVsc2U6CiAgICAgICAgIyBJdCdzIHBvc3NpYmxlIHRvIGhhdmUgc2l6ZW9mKGxvbmcpICE9IHNpemVvZihQeV9zc2l6ZV90KS4KICAgICAgICBjbGFzcyBYKG9iamVjdCk6CgogICAgICAgICAgICBkZWYgX19sZW5fXyhzZWxmKToKICAgICAgICAgICAgICAgIHJldHVybiAxIDw8IDMxCiAgICAgICAgdHJ5OgogICAgICAgICAgICBsZW4oWCgpKQogICAgICAgIGV4Y2VwdCBPdmVyZmxvd0Vycm9yOgogICAgICAgICAgICAjIDMyLWJpdAogICAgICAgICAgICBNQVhTSVpFID0gaW50KCgxIDw8IDMxKSAtIDEpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyA2NC1iaXQKICAgICAgICAgICAgTUFYU0laRSA9IGludCgoMSA8PCA2MykgLSAxKQogICAgICAgIGRlbCBYCgoKZGVmIF9hZGRfZG9jKGZ1bmMsIGRvYyk6CiAgICAiIiJBZGQgZG9jdW1lbnRhdGlvbiB0byBhIGZ1bmN0aW9uLiIiIgogICAgZnVuYy5fX2RvY19fID0gZG9jCgoKZGVmIF9pbXBvcnRfbW9kdWxlKG5hbWUpOgogICAgIiIiSW1wb3J0IG1vZHVsZSwgcmV0dXJuaW5nIHRoZSBtb2R1bGUgYWZ0ZXIgdGhlIGxhc3QgZG90LiIiIgogICAgX19pbXBvcnRfXyhuYW1lKQogICAgcmV0dXJuIHN5cy5tb2R1bGVzW25hbWVdCgoKY2xhc3MgX0xhenlEZXNjcihvYmplY3QpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBuYW1lKToKICAgICAgICBzZWxmLm5hbWUgPSBuYW1lCgogICAgZGVmIF9fZ2V0X18oc2VsZiwgb2JqLCB0cCk6CiAgICAgICAgcmVzdWx0ID0gc2VsZi5fcmVzb2x2ZSgpCiAgICAgICAgc2V0YXR0cihvYmosIHNlbGYubmFtZSwgcmVzdWx0KSAgIyBJbnZva2VzIF9fc2V0X18uCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFRoaXMgaXMgYSBiaXQgdWdseSwgYnV0IGl0IGF2b2lkcyBydW5uaW5nIHRoaXMgYWdhaW4gYnkKICAgICAgICAgICAgIyByZW1vdmluZyB0aGlzIGRlc2NyaXB0b3IuCiAgICAgICAgICAgIGRlbGF0dHIob2JqLl9fY2xhc3NfXywgc2VsZi5uYW1lKQogICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIHJldHVybiByZXN1bHQKCgpjbGFzcyBNb3ZlZE1vZHVsZShfTGF6eURlc2NyKToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgbmFtZSwgb2xkLCBuZXc9Tm9uZSk6CiAgICAgICAgc3VwZXIoTW92ZWRNb2R1bGUsIHNlbGYpLl9faW5pdF9fKG5hbWUpCiAgICAgICAgaWYgUFkzOgogICAgICAgICAgICBpZiBuZXcgaXMgTm9uZToKICAgICAgICAgICAgICAgIG5ldyA9IG5hbWUKICAgICAgICAgICAgc2VsZi5tb2QgPSBuZXcKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLm1vZCA9IG9sZAoKICAgIGRlZiBfcmVzb2x2ZShzZWxmKToKICAgICAgICByZXR1cm4gX2ltcG9ydF9tb2R1bGUoc2VsZi5tb2QpCgogICAgZGVmIF9fZ2V0YXR0cl9fKHNlbGYsIGF0dHIpOgogICAgICAgIF9tb2R1bGUgPSBzZWxmLl9yZXNvbHZlKCkKICAgICAgICB2YWx1ZSA9IGdldGF0dHIoX21vZHVsZSwgYXR0cikKICAgICAgICBzZXRhdHRyKHNlbGYsIGF0dHIsIHZhbHVlKQogICAgICAgIHJldHVybiB2YWx1ZQoKCmNsYXNzIF9MYXp5TW9kdWxlKHR5cGVzLk1vZHVsZVR5cGUpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBuYW1lKToKICAgICAgICBzdXBlcihfTGF6eU1vZHVsZSwgc2VsZikuX19pbml0X18obmFtZSkKICAgICAgICBzZWxmLl9fZG9jX18gPSBzZWxmLl9fY2xhc3NfXy5fX2RvY19fCgogICAgZGVmIF9fZGlyX18oc2VsZik6CiAgICAgICAgYXR0cnMgPSBbIl9fZG9jX18iLCAiX19uYW1lX18iXQogICAgICAgIGF0dHJzICs9IFthdHRyLm5hbWUgZm9yIGF0dHIgaW4gc2VsZi5fbW92ZWRfYXR0cmlidXRlc10KICAgICAgICByZXR1cm4gYXR0cnMKCiAgICAjIFN1YmNsYXNzZXMgc2hvdWxkIG92ZXJyaWRlIHRoaXMKICAgIF9tb3ZlZF9hdHRyaWJ1dGVzID0gW10KCgpjbGFzcyBNb3ZlZEF0dHJpYnV0ZShfTGF6eURlc2NyKToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgbmFtZSwgb2xkX21vZCwgbmV3X21vZCwgb2xkX2F0dHI9Tm9uZSwgbmV3X2F0dHI9Tm9uZSk6CiAgICAgICAgc3VwZXIoTW92ZWRBdHRyaWJ1dGUsIHNlbGYpLl9faW5pdF9fKG5hbWUpCiAgICAgICAgaWYgUFkzOgogICAgICAgICAgICBpZiBuZXdfbW9kIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBuZXdfbW9kID0gbmFtZQogICAgICAgICAgICBzZWxmLm1vZCA9IG5ld19tb2QKICAgICAgICAgICAgaWYgbmV3X2F0dHIgaXMgTm9uZToKICAgICAgICAgICAgICAgIGlmIG9sZF9hdHRyIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgbmV3X2F0dHIgPSBuYW1lCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIG5ld19hdHRyID0gb2xkX2F0dHIKICAgICAgICAgICAgc2VsZi5hdHRyID0gbmV3X2F0dHIKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLm1vZCA9IG9sZF9tb2QKICAgICAgICAgICAgaWYgb2xkX2F0dHIgaXMgTm9uZToKICAgICAgICAgICAgICAgIG9sZF9hdHRyID0gbmFtZQogICAgICAgICAgICBzZWxmLmF0dHIgPSBvbGRfYXR0cgoKICAgIGRlZiBfcmVzb2x2ZShzZWxmKToKICAgICAgICBtb2R1bGUgPSBfaW1wb3J0X21vZHVsZShzZWxmLm1vZCkKICAgICAgICByZXR1cm4gZ2V0YXR0cihtb2R1bGUsIHNlbGYuYXR0cikKCgpjbGFzcyBfU2l4TWV0YVBhdGhJbXBvcnRlcihvYmplY3QpOgoKICAgICIiIgogICAgQSBtZXRhIHBhdGggaW1wb3J0ZXIgdG8gaW1wb3J0IHNpeC5tb3ZlcyBhbmQgaXRzIHN1Ym1vZHVsZXMuCgogICAgVGhpcyBjbGFzcyBpbXBsZW1lbnRzIGEgUEVQMzAyIGZpbmRlciBhbmQgbG9hZGVyLiBJdCBzaG91bGQgYmUgY29tcGF0aWJsZQogICAgd2l0aCBQeXRob24gMi41IGFuZCBhbGwgZXhpc3RpbmcgdmVyc2lvbnMgb2YgUHl0aG9uMwogICAgIiIiCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHNpeF9tb2R1bGVfbmFtZSk6CiAgICAgICAgc2VsZi5uYW1lID0gc2l4X21vZHVsZV9uYW1lCiAgICAgICAgc2VsZi5rbm93bl9tb2R1bGVzID0ge30KCiAgICBkZWYgX2FkZF9tb2R1bGUoc2VsZiwgbW9kLCAqZnVsbG5hbWVzKToKICAgICAgICBmb3IgZnVsbG5hbWUgaW4gZnVsbG5hbWVzOgogICAgICAgICAgICBzZWxmLmtub3duX21vZHVsZXNbc2VsZi5uYW1lICsgIi4iICsgZnVsbG5hbWVdID0gbW9kCgogICAgZGVmIF9nZXRfbW9kdWxlKHNlbGYsIGZ1bGxuYW1lKToKICAgICAgICByZXR1cm4gc2VsZi5rbm93bl9tb2R1bGVzW3NlbGYubmFtZSArICIuIiArIGZ1bGxuYW1lXQoKICAgIGRlZiBmaW5kX21vZHVsZShzZWxmLCBmdWxsbmFtZSwgcGF0aD1Ob25lKToKICAgICAgICBpZiBmdWxsbmFtZSBpbiBzZWxmLmtub3duX21vZHVsZXM6CiAgICAgICAgICAgIHJldHVybiBzZWxmCiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICBkZWYgX19nZXRfbW9kdWxlKHNlbGYsIGZ1bGxuYW1lKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLmtub3duX21vZHVsZXNbZnVsbG5hbWVdCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICByYWlzZSBJbXBvcnRFcnJvcigiVGhpcyBsb2FkZXIgZG9lcyBub3Qga25vdyBtb2R1bGUgIiArIGZ1bGxuYW1lKQoKICAgIGRlZiBsb2FkX21vZHVsZShzZWxmLCBmdWxsbmFtZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIGluIGNhc2Ugb2YgYSByZWxvYWQKICAgICAgICAgICAgcmV0dXJuIHN5cy5tb2R1bGVzW2Z1bGxuYW1lXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIG1vZCA9IHNlbGYuX19nZXRfbW9kdWxlKGZ1bGxuYW1lKQogICAgICAgIGlmIGlzaW5zdGFuY2UobW9kLCBNb3ZlZE1vZHVsZSk6CiAgICAgICAgICAgIG1vZCA9IG1vZC5fcmVzb2x2ZSgpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbW9kLl9fbG9hZGVyX18gPSBzZWxmCiAgICAgICAgc3lzLm1vZHVsZXNbZnVsbG5hbWVdID0gbW9kCiAgICAgICAgcmV0dXJuIG1vZAoKICAgIGRlZiBpc19wYWNrYWdlKHNlbGYsIGZ1bGxuYW1lKToKICAgICAgICAiIiIKICAgICAgICBSZXR1cm4gdHJ1ZSwgaWYgdGhlIG5hbWVkIG1vZHVsZSBpcyBhIHBhY2thZ2UuCgogICAgICAgIFdlIG5lZWQgdGhpcyBtZXRob2QgdG8gZ2V0IGNvcnJlY3Qgc3BlYyBvYmplY3RzIHdpdGgKICAgICAgICBQeXRob24gMy40IChzZWUgUEVQNDUxKQogICAgICAgICIiIgogICAgICAgIHJldHVybiBoYXNhdHRyKHNlbGYuX19nZXRfbW9kdWxlKGZ1bGxuYW1lKSwgIl9fcGF0aF9fIikKCiAgICBkZWYgZ2V0X2NvZGUoc2VsZiwgZnVsbG5hbWUpOgogICAgICAgICIiIlJldHVybiBOb25lCgogICAgICAgIFJlcXVpcmVkLCBpZiBpc19wYWNrYWdlIGlzIGltcGxlbWVudGVkIiIiCiAgICAgICAgc2VsZi5fX2dldF9tb2R1bGUoZnVsbG5hbWUpICAjIGV2ZW50dWFsbHkgcmFpc2VzIEltcG9ydEVycm9yCiAgICAgICAgcmV0dXJuIE5vbmUKICAgIGdldF9zb3VyY2UgPSBnZXRfY29kZSAgIyBzYW1lIGFzIGdldF9jb2RlCgpfaW1wb3J0ZXIgPSBfU2l4TWV0YVBhdGhJbXBvcnRlcihfX25hbWVfXykKCgpjbGFzcyBfTW92ZWRJdGVtcyhfTGF6eU1vZHVsZSk6CgogICAgIiIiTGF6eSBsb2FkaW5nIG9mIG1vdmVkIG9iamVjdHMiIiIKICAgIF9fcGF0aF9fID0gW10gICMgbWFyayBhcyBwYWNrYWdlCgoKX21vdmVkX2F0dHJpYnV0ZXMgPSBbCiAgICBNb3ZlZEF0dHJpYnV0ZSgiY1N0cmluZ0lPIiwgImNTdHJpbmdJTyIsICJpbyIsICJTdHJpbmdJTyIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImZpbHRlciIsICJpdGVydG9vbHMiLCAiYnVpbHRpbnMiLCAiaWZpbHRlciIsICJmaWx0ZXIiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJmaWx0ZXJmYWxzZSIsICJpdGVydG9vbHMiLCAiaXRlcnRvb2xzIiwgImlmaWx0ZXJmYWxzZSIsICJmaWx0ZXJmYWxzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImlucHV0IiwgIl9fYnVpbHRpbl9fIiwgImJ1aWx0aW5zIiwgInJhd19pbnB1dCIsICJpbnB1dCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImludGVybiIsICJfX2J1aWx0aW5fXyIsICJzeXMiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJtYXAiLCAiaXRlcnRvb2xzIiwgImJ1aWx0aW5zIiwgImltYXAiLCAibWFwIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiZ2V0Y3dkIiwgIm9zIiwgIm9zIiwgImdldGN3ZHUiLCAiZ2V0Y3dkIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiZ2V0Y3dkYiIsICJvcyIsICJvcyIsICJnZXRjd2QiLCAiZ2V0Y3dkYiIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInJhbmdlIiwgIl9fYnVpbHRpbl9fIiwgImJ1aWx0aW5zIiwgInhyYW5nZSIsICJyYW5nZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInJlbG9hZF9tb2R1bGUiLCAiX19idWlsdGluX18iLCAiaW1wb3J0bGliIiBpZiBQWTM0IGVsc2UgImltcCIsICJyZWxvYWQiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJyZWR1Y2UiLCAiX19idWlsdGluX18iLCAiZnVuY3Rvb2xzIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgic2hsZXhfcXVvdGUiLCAicGlwZXMiLCAic2hsZXgiLCAicXVvdGUiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJTdHJpbmdJTyIsICJTdHJpbmdJTyIsICJpbyIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlVzZXJEaWN0IiwgIlVzZXJEaWN0IiwgImNvbGxlY3Rpb25zIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiVXNlckxpc3QiLCAiVXNlckxpc3QiLCAiY29sbGVjdGlvbnMiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJVc2VyU3RyaW5nIiwgIlVzZXJTdHJpbmciLCAiY29sbGVjdGlvbnMiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ4cmFuZ2UiLCAiX19idWlsdGluX18iLCAiYnVpbHRpbnMiLCAieHJhbmdlIiwgInJhbmdlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiemlwIiwgIml0ZXJ0b29scyIsICJidWlsdGlucyIsICJpemlwIiwgInppcCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInppcF9sb25nZXN0IiwgIml0ZXJ0b29scyIsICJpdGVydG9vbHMiLCAiaXppcF9sb25nZXN0IiwgInppcF9sb25nZXN0IiksCiAgICBNb3ZlZE1vZHVsZSgiYnVpbHRpbnMiLCAiX19idWlsdGluX18iKSwKICAgIE1vdmVkTW9kdWxlKCJjb25maWdwYXJzZXIiLCAiQ29uZmlnUGFyc2VyIiksCiAgICBNb3ZlZE1vZHVsZSgiY29weXJlZyIsICJjb3B5X3JlZyIpLAogICAgTW92ZWRNb2R1bGUoImRibV9nbnUiLCAiZ2RibSIsICJkYm0uZ251IiksCiAgICBNb3ZlZE1vZHVsZSgiX2R1bW15X3RocmVhZCIsICJkdW1teV90aHJlYWQiLCAiX2R1bW15X3RocmVhZCIpLAogICAgTW92ZWRNb2R1bGUoImh0dHBfY29va2llamFyIiwgImNvb2tpZWxpYiIsICJodHRwLmNvb2tpZWphciIpLAogICAgTW92ZWRNb2R1bGUoImh0dHBfY29va2llcyIsICJDb29raWUiLCAiaHR0cC5jb29raWVzIiksCiAgICBNb3ZlZE1vZHVsZSgiaHRtbF9lbnRpdGllcyIsICJodG1sZW50aXR5ZGVmcyIsICJodG1sLmVudGl0aWVzIiksCiAgICBNb3ZlZE1vZHVsZSgiaHRtbF9wYXJzZXIiLCAiSFRNTFBhcnNlciIsICJodG1sLnBhcnNlciIpLAogICAgTW92ZWRNb2R1bGUoImh0dHBfY2xpZW50IiwgImh0dHBsaWIiLCAiaHR0cC5jbGllbnQiKSwKICAgIE1vdmVkTW9kdWxlKCJlbWFpbF9taW1lX211bHRpcGFydCIsICJlbWFpbC5NSU1FTXVsdGlwYXJ0IiwgImVtYWlsLm1pbWUubXVsdGlwYXJ0IiksCiAgICBNb3ZlZE1vZHVsZSgiZW1haWxfbWltZV9ub25tdWx0aXBhcnQiLCAiZW1haWwuTUlNRU5vbk11bHRpcGFydCIsICJlbWFpbC5taW1lLm5vbm11bHRpcGFydCIpLAogICAgTW92ZWRNb2R1bGUoImVtYWlsX21pbWVfdGV4dCIsICJlbWFpbC5NSU1FVGV4dCIsICJlbWFpbC5taW1lLnRleHQiKSwKICAgIE1vdmVkTW9kdWxlKCJlbWFpbF9taW1lX2Jhc2UiLCAiZW1haWwuTUlNRUJhc2UiLCAiZW1haWwubWltZS5iYXNlIiksCiAgICBNb3ZlZE1vZHVsZSgiQmFzZUhUVFBTZXJ2ZXIiLCAiQmFzZUhUVFBTZXJ2ZXIiLCAiaHR0cC5zZXJ2ZXIiKSwKICAgIE1vdmVkTW9kdWxlKCJDR0lIVFRQU2VydmVyIiwgIkNHSUhUVFBTZXJ2ZXIiLCAiaHR0cC5zZXJ2ZXIiKSwKICAgIE1vdmVkTW9kdWxlKCJTaW1wbGVIVFRQU2VydmVyIiwgIlNpbXBsZUhUVFBTZXJ2ZXIiLCAiaHR0cC5zZXJ2ZXIiKSwKICAgIE1vdmVkTW9kdWxlKCJjUGlja2xlIiwgImNQaWNrbGUiLCAicGlja2xlIiksCiAgICBNb3ZlZE1vZHVsZSgicXVldWUiLCAiUXVldWUiKSwKICAgIE1vdmVkTW9kdWxlKCJyZXBybGliIiwgInJlcHIiKSwKICAgIE1vdmVkTW9kdWxlKCJzb2NrZXRzZXJ2ZXIiLCAiU29ja2V0U2VydmVyIiksCiAgICBNb3ZlZE1vZHVsZSgiX3RocmVhZCIsICJ0aHJlYWQiLCAiX3RocmVhZCIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXIiLCAiVGtpbnRlciIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfZGlhbG9nIiwgIkRpYWxvZyIsICJ0a2ludGVyLmRpYWxvZyIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfZmlsZWRpYWxvZyIsICJGaWxlRGlhbG9nIiwgInRraW50ZXIuZmlsZWRpYWxvZyIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfc2Nyb2xsZWR0ZXh0IiwgIlNjcm9sbGVkVGV4dCIsICJ0a2ludGVyLnNjcm9sbGVkdGV4dCIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfc2ltcGxlZGlhbG9nIiwgIlNpbXBsZURpYWxvZyIsICJ0a2ludGVyLnNpbXBsZWRpYWxvZyIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfdGl4IiwgIlRpeCIsICJ0a2ludGVyLnRpeCIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfdHRrIiwgInR0ayIsICJ0a2ludGVyLnR0ayIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfY29uc3RhbnRzIiwgIlRrY29uc3RhbnRzIiwgInRraW50ZXIuY29uc3RhbnRzIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9kbmQiLCAiVGtkbmQiLCAidGtpbnRlci5kbmQiKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX2NvbG9yY2hvb3NlciIsICJ0a0NvbG9yQ2hvb3NlciIsCiAgICAgICAgICAgICAgICAidGtpbnRlci5jb2xvcmNob29zZXIiKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX2NvbW1vbmRpYWxvZyIsICJ0a0NvbW1vbkRpYWxvZyIsCiAgICAgICAgICAgICAgICAidGtpbnRlci5jb21tb25kaWFsb2ciKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX3RrZmlsZWRpYWxvZyIsICJ0a0ZpbGVEaWFsb2ciLCAidGtpbnRlci5maWxlZGlhbG9nIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9mb250IiwgInRrRm9udCIsICJ0a2ludGVyLmZvbnQiKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX21lc3NhZ2Vib3giLCAidGtNZXNzYWdlQm94IiwgInRraW50ZXIubWVzc2FnZWJveCIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfdGtzaW1wbGVkaWFsb2ciLCAidGtTaW1wbGVEaWFsb2ciLAogICAgICAgICAgICAgICAgInRraW50ZXIuc2ltcGxlZGlhbG9nIiksCiAgICBNb3ZlZE1vZHVsZSgidXJsbGliX3BhcnNlIiwgX19uYW1lX18gKyAiLm1vdmVzLnVybGxpYl9wYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkTW9kdWxlKCJ1cmxsaWJfZXJyb3IiLCBfX25hbWVfXyArICIubW92ZXMudXJsbGliX2Vycm9yIiwgInVybGxpYi5lcnJvciIpLAogICAgTW92ZWRNb2R1bGUoInVybGxpYiIsIF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWIiLCBfX25hbWVfXyArICIubW92ZXMudXJsbGliIiksCiAgICBNb3ZlZE1vZHVsZSgidXJsbGliX3JvYm90cGFyc2VyIiwgInJvYm90cGFyc2VyIiwgInVybGxpYi5yb2JvdHBhcnNlciIpLAogICAgTW92ZWRNb2R1bGUoInhtbHJwY19jbGllbnQiLCAieG1scnBjbGliIiwgInhtbHJwYy5jbGllbnQiKSwKICAgIE1vdmVkTW9kdWxlKCJ4bWxycGNfc2VydmVyIiwgIlNpbXBsZVhNTFJQQ1NlcnZlciIsICJ4bWxycGMuc2VydmVyIiksCl0KIyBBZGQgd2luZG93cyBzcGVjaWZpYyBtb2R1bGVzLgppZiBzeXMucGxhdGZvcm0gPT0gIndpbjMyIjoKICAgIF9tb3ZlZF9hdHRyaWJ1dGVzICs9IFsKICAgICAgICBNb3ZlZE1vZHVsZSgid2lucmVnIiwgIl93aW5yZWciKSwKICAgIF0KCmZvciBhdHRyIGluIF9tb3ZlZF9hdHRyaWJ1dGVzOgogICAgc2V0YXR0cihfTW92ZWRJdGVtcywgYXR0ci5uYW1lLCBhdHRyKQogICAgaWYgaXNpbnN0YW5jZShhdHRyLCBNb3ZlZE1vZHVsZSk6CiAgICAgICAgX2ltcG9ydGVyLl9hZGRfbW9kdWxlKGF0dHIsICJtb3Zlcy4iICsgYXR0ci5uYW1lKQpkZWwgYXR0cgoKX01vdmVkSXRlbXMuX21vdmVkX2F0dHJpYnV0ZXMgPSBfbW92ZWRfYXR0cmlidXRlcwoKbW92ZXMgPSBfTW92ZWRJdGVtcyhfX25hbWVfXyArICIubW92ZXMiKQpfaW1wb3J0ZXIuX2FkZF9tb2R1bGUobW92ZXMsICJtb3ZlcyIpCgoKY2xhc3MgTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcGFyc2UoX0xhenlNb2R1bGUpOgoKICAgICIiIkxhenkgbG9hZGluZyBvZiBtb3ZlZCBvYmplY3RzIGluIHNpeC5tb3Zlcy51cmxsaWJfcGFyc2UiIiIKCgpfdXJsbGliX3BhcnNlX21vdmVkX2F0dHJpYnV0ZXMgPSBbCiAgICBNb3ZlZEF0dHJpYnV0ZSgiUGFyc2VSZXN1bHQiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiU3BsaXRSZXN1bHQiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicGFyc2VfcXMiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicGFyc2VfcXNsIiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVybGRlZnJhZyIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1cmxqb2luIiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVybHBhcnNlIiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVybHNwbGl0IiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVybHVucGFyc2UiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsdW5zcGxpdCIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJxdW90ZSIsICJ1cmxsaWIiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicXVvdGVfcGx1cyIsICJ1cmxsaWIiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidW5xdW90ZSIsICJ1cmxsaWIiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidW5xdW90ZV9wbHVzIiwgInVybGxpYiIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1cmxlbmNvZGUiLCAidXJsbGliIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInNwbGl0cXVlcnkiLCAidXJsbGliIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInNwbGl0dGFnIiwgInVybGxpYiIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJzcGxpdHVzZXIiLCAidXJsbGliIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVzZXNfZnJhZ21lbnQiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXNlc19uZXRsb2MiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXNlc19wYXJhbXMiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXNlc19xdWVyeSIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1c2VzX3JlbGF0aXZlIiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLApdCmZvciBhdHRyIGluIF91cmxsaWJfcGFyc2VfbW92ZWRfYXR0cmlidXRlczoKICAgIHNldGF0dHIoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcGFyc2UsIGF0dHIubmFtZSwgYXR0cikKZGVsIGF0dHIKCk1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3BhcnNlLl9tb3ZlZF9hdHRyaWJ1dGVzID0gX3VybGxpYl9wYXJzZV9tb3ZlZF9hdHRyaWJ1dGVzCgpfaW1wb3J0ZXIuX2FkZF9tb2R1bGUoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcGFyc2UoX19uYW1lX18gKyAiLm1vdmVzLnVybGxpYl9wYXJzZSIpLAogICAgICAgICAgICAgICAgICAgICAgIm1vdmVzLnVybGxpYl9wYXJzZSIsICJtb3Zlcy51cmxsaWIucGFyc2UiKQoKCmNsYXNzIE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX2Vycm9yKF9MYXp5TW9kdWxlKToKCiAgICAiIiJMYXp5IGxvYWRpbmcgb2YgbW92ZWQgb2JqZWN0cyBpbiBzaXgubW92ZXMudXJsbGliX2Vycm9yIiIiCgoKX3VybGxpYl9lcnJvcl9tb3ZlZF9hdHRyaWJ1dGVzID0gWwogICAgTW92ZWRBdHRyaWJ1dGUoIlVSTEVycm9yIiwgInVybGxpYjIiLCAidXJsbGliLmVycm9yIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUEVycm9yIiwgInVybGxpYjIiLCAidXJsbGliLmVycm9yIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiQ29udGVudFRvb1Nob3J0RXJyb3IiLCAidXJsbGliIiwgInVybGxpYi5lcnJvciIpLApdCmZvciBhdHRyIGluIF91cmxsaWJfZXJyb3JfbW92ZWRfYXR0cmlidXRlczoKICAgIHNldGF0dHIoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfZXJyb3IsIGF0dHIubmFtZSwgYXR0cikKZGVsIGF0dHIKCk1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX2Vycm9yLl9tb3ZlZF9hdHRyaWJ1dGVzID0gX3VybGxpYl9lcnJvcl9tb3ZlZF9hdHRyaWJ1dGVzCgpfaW1wb3J0ZXIuX2FkZF9tb2R1bGUoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfZXJyb3IoX19uYW1lX18gKyAiLm1vdmVzLnVybGxpYi5lcnJvciIpLAogICAgICAgICAgICAgICAgICAgICAgIm1vdmVzLnVybGxpYl9lcnJvciIsICJtb3Zlcy51cmxsaWIuZXJyb3IiKQoKCmNsYXNzIE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3JlcXVlc3QoX0xhenlNb2R1bGUpOgoKICAgICIiIkxhenkgbG9hZGluZyBvZiBtb3ZlZCBvYmplY3RzIGluIHNpeC5tb3Zlcy51cmxsaWJfcmVxdWVzdCIiIgoKCl91cmxsaWJfcmVxdWVzdF9tb3ZlZF9hdHRyaWJ1dGVzID0gWwogICAgTW92ZWRBdHRyaWJ1dGUoInVybG9wZW4iLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImluc3RhbGxfb3BlbmVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJidWlsZF9vcGVuZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInBhdGhuYW1lMnVybCIsICJ1cmxsaWIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1cmwycGF0aG5hbWUiLCAidXJsbGliIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiZ2V0cHJveGllcyIsICJ1cmxsaWIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJSZXF1ZXN0IiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJPcGVuZXJEaXJlY3RvciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUERlZmF1bHRFcnJvckhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBSZWRpcmVjdEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBDb29raWVQcm9jZXNzb3IiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlByb3h5SGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiQmFzZUhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBQYXNzd29yZE1nciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUFBhc3N3b3JkTWdyV2l0aERlZmF1bHRSZWFsbSIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiQWJzdHJhY3RCYXNpY0F1dGhIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQQmFzaWNBdXRoSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiUHJveHlCYXNpY0F1dGhIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJBYnN0cmFjdERpZ2VzdEF1dGhIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQRGlnZXN0QXV0aEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlByb3h5RGlnZXN0QXV0aEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQU0hhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkZpbGVIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJGVFBIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJDYWNoZUZUUEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlVua25vd25IYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQRXJyb3JQcm9jZXNzb3IiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVybHJldHJpZXZlIiwgInVybGxpYiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVybGNsZWFudXAiLCAidXJsbGliIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiVVJMb3BlbmVyIiwgInVybGxpYiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkZhbmN5VVJMb3BlbmVyIiwgInVybGxpYiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInByb3h5X2J5cGFzcyIsICJ1cmxsaWIiLCAidXJsbGliLnJlcXVlc3QiKSwKXQpmb3IgYXR0ciBpbiBfdXJsbGliX3JlcXVlc3RfbW92ZWRfYXR0cmlidXRlczoKICAgIHNldGF0dHIoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcmVxdWVzdCwgYXR0ci5uYW1lLCBhdHRyKQpkZWwgYXR0cgoKTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcmVxdWVzdC5fbW92ZWRfYXR0cmlidXRlcyA9IF91cmxsaWJfcmVxdWVzdF9tb3ZlZF9hdHRyaWJ1dGVzCgpfaW1wb3J0ZXIuX2FkZF9tb2R1bGUoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcmVxdWVzdChfX25hbWVfXyArICIubW92ZXMudXJsbGliLnJlcXVlc3QiKSwKICAgICAgICAgICAgICAgICAgICAgICJtb3Zlcy51cmxsaWJfcmVxdWVzdCIsICJtb3Zlcy51cmxsaWIucmVxdWVzdCIpCgoKY2xhc3MgTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcmVzcG9uc2UoX0xhenlNb2R1bGUpOgoKICAgICIiIkxhenkgbG9hZGluZyBvZiBtb3ZlZCBvYmplY3RzIGluIHNpeC5tb3Zlcy51cmxsaWJfcmVzcG9uc2UiIiIKCgpfdXJsbGliX3Jlc3BvbnNlX21vdmVkX2F0dHJpYnV0ZXMgPSBbCiAgICBNb3ZlZEF0dHJpYnV0ZSgiYWRkYmFzZSIsICJ1cmxsaWIiLCAidXJsbGliLnJlc3BvbnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiYWRkY2xvc2Vob29rIiwgInVybGxpYiIsICJ1cmxsaWIucmVzcG9uc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJhZGRpbmZvIiwgInVybGxpYiIsICJ1cmxsaWIucmVzcG9uc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJhZGRpbmZvdXJsIiwgInVybGxpYiIsICJ1cmxsaWIucmVzcG9uc2UiKSwKXQpmb3IgYXR0ciBpbiBfdXJsbGliX3Jlc3BvbnNlX21vdmVkX2F0dHJpYnV0ZXM6CiAgICBzZXRhdHRyKE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3Jlc3BvbnNlLCBhdHRyLm5hbWUsIGF0dHIpCmRlbCBhdHRyCgpNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yZXNwb25zZS5fbW92ZWRfYXR0cmlidXRlcyA9IF91cmxsaWJfcmVzcG9uc2VfbW92ZWRfYXR0cmlidXRlcwoKX2ltcG9ydGVyLl9hZGRfbW9kdWxlKE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3Jlc3BvbnNlKF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWIucmVzcG9uc2UiKSwKICAgICAgICAgICAgICAgICAgICAgICJtb3Zlcy51cmxsaWJfcmVzcG9uc2UiLCAibW92ZXMudXJsbGliLnJlc3BvbnNlIikKCgpjbGFzcyBNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yb2JvdHBhcnNlcihfTGF6eU1vZHVsZSk6CgogICAgIiIiTGF6eSBsb2FkaW5nIG9mIG1vdmVkIG9iamVjdHMgaW4gc2l4Lm1vdmVzLnVybGxpYl9yb2JvdHBhcnNlciIiIgoKCl91cmxsaWJfcm9ib3RwYXJzZXJfbW92ZWRfYXR0cmlidXRlcyA9IFsKICAgIE1vdmVkQXR0cmlidXRlKCJSb2JvdEZpbGVQYXJzZXIiLCAicm9ib3RwYXJzZXIiLCAidXJsbGliLnJvYm90cGFyc2VyIiksCl0KZm9yIGF0dHIgaW4gX3VybGxpYl9yb2JvdHBhcnNlcl9tb3ZlZF9hdHRyaWJ1dGVzOgogICAgc2V0YXR0cihNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yb2JvdHBhcnNlciwgYXR0ci5uYW1lLCBhdHRyKQpkZWwgYXR0cgoKTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcm9ib3RwYXJzZXIuX21vdmVkX2F0dHJpYnV0ZXMgPSBfdXJsbGliX3JvYm90cGFyc2VyX21vdmVkX2F0dHJpYnV0ZXMKCl9pbXBvcnRlci5fYWRkX21vZHVsZShNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yb2JvdHBhcnNlcihfX25hbWVfXyArICIubW92ZXMudXJsbGliLnJvYm90cGFyc2VyIiksCiAgICAgICAgICAgICAgICAgICAgICAibW92ZXMudXJsbGliX3JvYm90cGFyc2VyIiwgIm1vdmVzLnVybGxpYi5yb2JvdHBhcnNlciIpCgoKY2xhc3MgTW9kdWxlX3NpeF9tb3Zlc191cmxsaWIodHlwZXMuTW9kdWxlVHlwZSk6CgogICAgIiIiQ3JlYXRlIGEgc2l4Lm1vdmVzLnVybGxpYiBuYW1lc3BhY2UgdGhhdCByZXNlbWJsZXMgdGhlIFB5dGhvbiAzIG5hbWVzcGFjZSIiIgogICAgX19wYXRoX18gPSBbXSAgIyBtYXJrIGFzIHBhY2thZ2UKICAgIHBhcnNlID0gX2ltcG9ydGVyLl9nZXRfbW9kdWxlKCJtb3Zlcy51cmxsaWJfcGFyc2UiKQogICAgZXJyb3IgPSBfaW1wb3J0ZXIuX2dldF9tb2R1bGUoIm1vdmVzLnVybGxpYl9lcnJvciIpCiAgICByZXF1ZXN0ID0gX2ltcG9ydGVyLl9nZXRfbW9kdWxlKCJtb3Zlcy51cmxsaWJfcmVxdWVzdCIpCiAgICByZXNwb25zZSA9IF9pbXBvcnRlci5fZ2V0X21vZHVsZSgibW92ZXMudXJsbGliX3Jlc3BvbnNlIikKICAgIHJvYm90cGFyc2VyID0gX2ltcG9ydGVyLl9nZXRfbW9kdWxlKCJtb3Zlcy51cmxsaWJfcm9ib3RwYXJzZXIiKQoKICAgIGRlZiBfX2Rpcl9fKHNlbGYpOgogICAgICAgIHJldHVybiBbJ3BhcnNlJywgJ2Vycm9yJywgJ3JlcXVlc3QnLCAncmVzcG9uc2UnLCAncm9ib3RwYXJzZXInXQoKX2ltcG9ydGVyLl9hZGRfbW9kdWxlKE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliKF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWIiKSwKICAgICAgICAgICAgICAgICAgICAgICJtb3Zlcy51cmxsaWIiKQoKCmRlZiBhZGRfbW92ZShtb3ZlKToKICAgICIiIkFkZCBhbiBpdGVtIHRvIHNpeC5tb3Zlcy4iIiIKICAgIHNldGF0dHIoX01vdmVkSXRlbXMsIG1vdmUubmFtZSwgbW92ZSkKCgpkZWYgcmVtb3ZlX21vdmUobmFtZSk6CiAgICAiIiJSZW1vdmUgaXRlbSBmcm9tIHNpeC5tb3Zlcy4iIiIKICAgIHRyeToKICAgICAgICBkZWxhdHRyKF9Nb3ZlZEl0ZW1zLCBuYW1lKQogICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgIHRyeToKICAgICAgICAgICAgZGVsIG1vdmVzLl9fZGljdF9fW25hbWVdCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcigibm8gc3VjaCBtb3ZlLCAlciIgJSAobmFtZSwpKQoKCmlmIFBZMzoKICAgIF9tZXRoX2Z1bmMgPSAiX19mdW5jX18iCiAgICBfbWV0aF9zZWxmID0gIl9fc2VsZl9fIgoKICAgIF9mdW5jX2Nsb3N1cmUgPSAiX19jbG9zdXJlX18iCiAgICBfZnVuY19jb2RlID0gIl9fY29kZV9fIgogICAgX2Z1bmNfZGVmYXVsdHMgPSAiX19kZWZhdWx0c19fIgogICAgX2Z1bmNfZ2xvYmFscyA9ICJfX2dsb2JhbHNfXyIKZWxzZToKICAgIF9tZXRoX2Z1bmMgPSAiaW1fZnVuYyIKICAgIF9tZXRoX3NlbGYgPSAiaW1fc2VsZiIKCiAgICBfZnVuY19jbG9zdXJlID0gImZ1bmNfY2xvc3VyZSIKICAgIF9mdW5jX2NvZGUgPSAiZnVuY19jb2RlIgogICAgX2Z1bmNfZGVmYXVsdHMgPSAiZnVuY19kZWZhdWx0cyIKICAgIF9mdW5jX2dsb2JhbHMgPSAiZnVuY19nbG9iYWxzIgoKCnRyeToKICAgIGFkdmFuY2VfaXRlcmF0b3IgPSBuZXh0CmV4Y2VwdCBOYW1lRXJyb3I6CiAgICBkZWYgYWR2YW5jZV9pdGVyYXRvcihpdCk6CiAgICAgICAgcmV0dXJuIGl0Lm5leHQoKQpuZXh0ID0gYWR2YW5jZV9pdGVyYXRvcgoKCnRyeToKICAgIGNhbGxhYmxlID0gY2FsbGFibGUKZXhjZXB0IE5hbWVFcnJvcjoKICAgIGRlZiBjYWxsYWJsZShvYmopOgogICAgICAgIHJldHVybiBhbnkoIl9fY2FsbF9fIiBpbiBrbGFzcy5fX2RpY3RfXyBmb3Iga2xhc3MgaW4gdHlwZShvYmopLl9fbXJvX18pCgoKaWYgUFkzOgogICAgZGVmIGdldF91bmJvdW5kX2Z1bmN0aW9uKHVuYm91bmQpOgogICAgICAgIHJldHVybiB1bmJvdW5kCgogICAgY3JlYXRlX2JvdW5kX21ldGhvZCA9IHR5cGVzLk1ldGhvZFR5cGUKCiAgICBkZWYgY3JlYXRlX3VuYm91bmRfbWV0aG9kKGZ1bmMsIGNscyk6CiAgICAgICAgcmV0dXJuIGZ1bmMKCiAgICBJdGVyYXRvciA9IG9iamVjdAplbHNlOgogICAgZGVmIGdldF91bmJvdW5kX2Z1bmN0aW9uKHVuYm91bmQpOgogICAgICAgIHJldHVybiB1bmJvdW5kLmltX2Z1bmMKCiAgICBkZWYgY3JlYXRlX2JvdW5kX21ldGhvZChmdW5jLCBvYmopOgogICAgICAgIHJldHVybiB0eXBlcy5NZXRob2RUeXBlKGZ1bmMsIG9iaiwgb2JqLl9fY2xhc3NfXykKCiAgICBkZWYgY3JlYXRlX3VuYm91bmRfbWV0aG9kKGZ1bmMsIGNscyk6CiAgICAgICAgcmV0dXJuIHR5cGVzLk1ldGhvZFR5cGUoZnVuYywgTm9uZSwgY2xzKQoKICAgIGNsYXNzIEl0ZXJhdG9yKG9iamVjdCk6CgogICAgICAgIGRlZiBuZXh0KHNlbGYpOgogICAgICAgICAgICByZXR1cm4gdHlwZShzZWxmKS5fX25leHRfXyhzZWxmKQoKICAgIGNhbGxhYmxlID0gY2FsbGFibGUKX2FkZF9kb2MoZ2V0X3VuYm91bmRfZnVuY3Rpb24sCiAgICAgICAgICIiIkdldCB0aGUgZnVuY3Rpb24gb3V0IG9mIGEgcG9zc2libHkgdW5ib3VuZCBmdW5jdGlvbiIiIikKCgpnZXRfbWV0aG9kX2Z1bmN0aW9uID0gb3BlcmF0b3IuYXR0cmdldHRlcihfbWV0aF9mdW5jKQpnZXRfbWV0aG9kX3NlbGYgPSBvcGVyYXRvci5hdHRyZ2V0dGVyKF9tZXRoX3NlbGYpCmdldF9mdW5jdGlvbl9jbG9zdXJlID0gb3BlcmF0b3IuYXR0cmdldHRlcihfZnVuY19jbG9zdXJlKQpnZXRfZnVuY3Rpb25fY29kZSA9IG9wZXJhdG9yLmF0dHJnZXR0ZXIoX2Z1bmNfY29kZSkKZ2V0X2Z1bmN0aW9uX2RlZmF1bHRzID0gb3BlcmF0b3IuYXR0cmdldHRlcihfZnVuY19kZWZhdWx0cykKZ2V0X2Z1bmN0aW9uX2dsb2JhbHMgPSBvcGVyYXRvci5hdHRyZ2V0dGVyKF9mdW5jX2dsb2JhbHMpCgoKaWYgUFkzOgogICAgZGVmIGl0ZXJrZXlzKGQsICoqa3cpOgogICAgICAgIHJldHVybiBpdGVyKGQua2V5cygqKmt3KSkKCiAgICBkZWYgaXRlcnZhbHVlcyhkLCAqKmt3KToKICAgICAgICByZXR1cm4gaXRlcihkLnZhbHVlcygqKmt3KSkKCiAgICBkZWYgaXRlcml0ZW1zKGQsICoqa3cpOgogICAgICAgIHJldHVybiBpdGVyKGQuaXRlbXMoKiprdykpCgogICAgZGVmIGl0ZXJsaXN0cyhkLCAqKmt3KToKICAgICAgICByZXR1cm4gaXRlcihkLmxpc3RzKCoqa3cpKQoKICAgIHZpZXdrZXlzID0gb3BlcmF0b3IubWV0aG9kY2FsbGVyKCJrZXlzIikKCiAgICB2aWV3dmFsdWVzID0gb3BlcmF0b3IubWV0aG9kY2FsbGVyKCJ2YWx1ZXMiKQoKICAgIHZpZXdpdGVtcyA9IG9wZXJhdG9yLm1ldGhvZGNhbGxlcigiaXRlbXMiKQplbHNlOgogICAgZGVmIGl0ZXJrZXlzKGQsICoqa3cpOgogICAgICAgIHJldHVybiBkLml0ZXJrZXlzKCoqa3cpCgogICAgZGVmIGl0ZXJ2YWx1ZXMoZCwgKiprdyk6CiAgICAgICAgcmV0dXJuIGQuaXRlcnZhbHVlcygqKmt3KQoKICAgIGRlZiBpdGVyaXRlbXMoZCwgKiprdyk6CiAgICAgICAgcmV0dXJuIGQuaXRlcml0ZW1zKCoqa3cpCgogICAgZGVmIGl0ZXJsaXN0cyhkLCAqKmt3KToKICAgICAgICByZXR1cm4gZC5pdGVybGlzdHMoKiprdykKCiAgICB2aWV3a2V5cyA9IG9wZXJhdG9yLm1ldGhvZGNhbGxlcigidmlld2tleXMiKQoKICAgIHZpZXd2YWx1ZXMgPSBvcGVyYXRvci5tZXRob2RjYWxsZXIoInZpZXd2YWx1ZXMiKQoKICAgIHZpZXdpdGVtcyA9IG9wZXJhdG9yLm1ldGhvZGNhbGxlcigidmlld2l0ZW1zIikKCl9hZGRfZG9jKGl0ZXJrZXlzLCAiUmV0dXJuIGFuIGl0ZXJhdG9yIG92ZXIgdGhlIGtleXMgb2YgYSBkaWN0aW9uYXJ5LiIpCl9hZGRfZG9jKGl0ZXJ2YWx1ZXMsICJSZXR1cm4gYW4gaXRlcmF0b3Igb3ZlciB0aGUgdmFsdWVzIG9mIGEgZGljdGlvbmFyeS4iKQpfYWRkX2RvYyhpdGVyaXRlbXMsCiAgICAgICAgICJSZXR1cm4gYW4gaXRlcmF0b3Igb3ZlciB0aGUgKGtleSwgdmFsdWUpIHBhaXJzIG9mIGEgZGljdGlvbmFyeS4iKQpfYWRkX2RvYyhpdGVybGlzdHMsCiAgICAgICAgICJSZXR1cm4gYW4gaXRlcmF0b3Igb3ZlciB0aGUgKGtleSwgW3ZhbHVlc10pIHBhaXJzIG9mIGEgZGljdGlvbmFyeS4iKQoKCmlmIFBZMzoKICAgIGRlZiBiKHMpOgogICAgICAgIHJldHVybiBzLmVuY29kZSgibGF0aW4tMSIpCgogICAgZGVmIHUocyk6CiAgICAgICAgcmV0dXJuIHMKICAgIHVuaWNociA9IGNocgogICAgaW1wb3J0IHN0cnVjdAogICAgaW50MmJ5dGUgPSBzdHJ1Y3QuU3RydWN0KCI+QiIpLnBhY2sKICAgIGRlbCBzdHJ1Y3QKICAgIGJ5dGUyaW50ID0gb3BlcmF0b3IuaXRlbWdldHRlcigwKQogICAgaW5kZXhieXRlcyA9IG9wZXJhdG9yLmdldGl0ZW0KICAgIGl0ZXJieXRlcyA9IGl0ZXIKICAgIGltcG9ydCBpbwogICAgU3RyaW5nSU8gPSBpby5TdHJpbmdJTwogICAgQnl0ZXNJTyA9IGlvLkJ5dGVzSU8KICAgIF9hc3NlcnRDb3VudEVxdWFsID0gImFzc2VydENvdW50RXF1YWwiCiAgICBpZiBzeXMudmVyc2lvbl9pbmZvWzFdIDw9IDE6CiAgICAgICAgX2Fzc2VydFJhaXNlc1JlZ2V4ID0gImFzc2VydFJhaXNlc1JlZ2V4cCIKICAgICAgICBfYXNzZXJ0UmVnZXggPSAiYXNzZXJ0UmVnZXhwTWF0Y2hlcyIKICAgIGVsc2U6CiAgICAgICAgX2Fzc2VydFJhaXNlc1JlZ2V4ID0gImFzc2VydFJhaXNlc1JlZ2V4IgogICAgICAgIF9hc3NlcnRSZWdleCA9ICJhc3NlcnRSZWdleCIKZWxzZToKICAgIGRlZiBiKHMpOgogICAgICAgIHJldHVybiBzCiAgICAjIFdvcmthcm91bmQgZm9yIHN0YW5kYWxvbmUgYmFja3NsYXNoCgogICAgZGVmIHUocyk6CiAgICAgICAgcmV0dXJuIHVuaWNvZGUocy5yZXBsYWNlKHInXFwnLCByJ1xcXFwnKSwgInVuaWNvZGVfZXNjYXBlIikKICAgIHVuaWNociA9IHVuaWNocgogICAgaW50MmJ5dGUgPSBjaHIKCiAgICBkZWYgYnl0ZTJpbnQoYnMpOgogICAgICAgIHJldHVybiBvcmQoYnNbMF0pCgogICAgZGVmIGluZGV4Ynl0ZXMoYnVmLCBpKToKICAgICAgICByZXR1cm4gb3JkKGJ1ZltpXSkKICAgIGl0ZXJieXRlcyA9IGZ1bmN0b29scy5wYXJ0aWFsKGl0ZXJ0b29scy5pbWFwLCBvcmQpCiAgICBpbXBvcnQgU3RyaW5nSU8KICAgIFN0cmluZ0lPID0gQnl0ZXNJTyA9IFN0cmluZ0lPLlN0cmluZ0lPCiAgICBfYXNzZXJ0Q291bnRFcXVhbCA9ICJhc3NlcnRJdGVtc0VxdWFsIgogICAgX2Fzc2VydFJhaXNlc1JlZ2V4ID0gImFzc2VydFJhaXNlc1JlZ2V4cCIKICAgIF9hc3NlcnRSZWdleCA9ICJhc3NlcnRSZWdleHBNYXRjaGVzIgpfYWRkX2RvYyhiLCAiIiJCeXRlIGxpdGVyYWwiIiIpCl9hZGRfZG9jKHUsICIiIlRleHQgbGl0ZXJhbCIiIikKCgpkZWYgYXNzZXJ0Q291bnRFcXVhbChzZWxmLCAqYXJncywgKiprd2FyZ3MpOgogICAgcmV0dXJuIGdldGF0dHIoc2VsZiwgX2Fzc2VydENvdW50RXF1YWwpKCphcmdzLCAqKmt3YXJncykKCgpkZWYgYXNzZXJ0UmFpc2VzUmVnZXgoc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToKICAgIHJldHVybiBnZXRhdHRyKHNlbGYsIF9hc3NlcnRSYWlzZXNSZWdleCkoKmFyZ3MsICoqa3dhcmdzKQoKCmRlZiBhc3NlcnRSZWdleChzZWxmLCAqYXJncywgKiprd2FyZ3MpOgogICAgcmV0dXJuIGdldGF0dHIoc2VsZiwgX2Fzc2VydFJlZ2V4KSgqYXJncywgKiprd2FyZ3MpCgoKaWYgUFkzOgogICAgZXhlY18gPSBnZXRhdHRyKG1vdmVzLmJ1aWx0aW5zLCAiZXhlYyIpCgogICAgZGVmIHJlcmFpc2UodHAsIHZhbHVlLCB0Yj1Ob25lKToKICAgICAgICBpZiB2YWx1ZSBpcyBOb25lOgogICAgICAgICAgICB2YWx1ZSA9IHRwKCkKICAgICAgICBpZiB2YWx1ZS5fX3RyYWNlYmFja19fIGlzIG5vdCB0YjoKICAgICAgICAgICAgcmFpc2UgdmFsdWUud2l0aF90cmFjZWJhY2sodGIpCiAgICAgICAgcmFpc2UgdmFsdWUKCmVsc2U6CiAgICBkZWYgZXhlY18oX2NvZGVfLCBfZ2xvYnNfPU5vbmUsIF9sb2NzXz1Ob25lKToKICAgICAgICAiIiJFeGVjdXRlIGNvZGUgaW4gYSBuYW1lc3BhY2UuIiIiCiAgICAgICAgaWYgX2dsb2JzXyBpcyBOb25lOgogICAgICAgICAgICBmcmFtZSA9IHN5cy5fZ2V0ZnJhbWUoMSkKICAgICAgICAgICAgX2dsb2JzXyA9IGZyYW1lLmZfZ2xvYmFscwogICAgICAgICAgICBpZiBfbG9jc18gaXMgTm9uZToKICAgICAgICAgICAgICAgIF9sb2NzXyA9IGZyYW1lLmZfbG9jYWxzCiAgICAgICAgICAgIGRlbCBmcmFtZQogICAgICAgIGVsaWYgX2xvY3NfIGlzIE5vbmU6CiAgICAgICAgICAgIF9sb2NzXyA9IF9nbG9ic18KICAgICAgICBleGVjKCIiImV4ZWMgX2NvZGVfIGluIF9nbG9ic18sIF9sb2NzXyIiIikKCiAgICBleGVjXygiIiJkZWYgcmVyYWlzZSh0cCwgdmFsdWUsIHRiPU5vbmUpOgogICAgcmFpc2UgdHAsIHZhbHVlLCB0YgoiIiIpCgoKaWYgc3lzLnZlcnNpb25faW5mb1s6Ml0gPT0gKDMsIDIpOgogICAgZXhlY18oIiIiZGVmIHJhaXNlX2Zyb20odmFsdWUsIGZyb21fdmFsdWUpOgogICAgaWYgZnJvbV92YWx1ZSBpcyBOb25lOgogICAgICAgIHJhaXNlIHZhbHVlCiAgICByYWlzZSB2YWx1ZSBmcm9tIGZyb21fdmFsdWUKIiIiKQplbGlmIHN5cy52ZXJzaW9uX2luZm9bOjJdID4gKDMsIDIpOgogICAgZXhlY18oIiIiZGVmIHJhaXNlX2Zyb20odmFsdWUsIGZyb21fdmFsdWUpOgogICAgcmFpc2UgdmFsdWUgZnJvbSBmcm9tX3ZhbHVlCiIiIikKZWxzZToKICAgIGRlZiByYWlzZV9mcm9tKHZhbHVlLCBmcm9tX3ZhbHVlKToKICAgICAgICByYWlzZSB2YWx1ZQoKCnByaW50XyA9IGdldGF0dHIobW92ZXMuYnVpbHRpbnMsICJwcmludCIsIE5vbmUpCmlmIHByaW50XyBpcyBOb25lOgogICAgZGVmIHByaW50XygqYXJncywgKiprd2FyZ3MpOgogICAgICAgICIiIlRoZSBuZXctc3R5bGUgcHJpbnQgZnVuY3Rpb24gZm9yIFB5dGhvbiAyLjQgYW5kIDIuNS4iIiIKICAgICAgICBmcCA9IGt3YXJncy5wb3AoImZpbGUiLCBzeXMuc3Rkb3V0KQogICAgICAgIGlmIGZwIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybgoKICAgICAgICBkZWYgd3JpdGUoZGF0YSk6CiAgICAgICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKGRhdGEsIGJhc2VzdHJpbmcpOgogICAgICAgICAgICAgICAgZGF0YSA9IHN0cihkYXRhKQogICAgICAgICAgICAjIElmIHRoZSBmaWxlIGhhcyBhbiBlbmNvZGluZywgZW5jb2RlIHVuaWNvZGUgd2l0aCBpdC4KICAgICAgICAgICAgaWYgKGlzaW5zdGFuY2UoZnAsIGZpbGUpIGFuZAogICAgICAgICAgICAgICAgICAgIGlzaW5zdGFuY2UoZGF0YSwgdW5pY29kZSkgYW5kCiAgICAgICAgICAgICAgICAgICAgZnAuZW5jb2RpbmcgaXMgbm90IE5vbmUpOgogICAgICAgICAgICAgICAgZXJyb3JzID0gZ2V0YXR0cihmcCwgImVycm9ycyIsIE5vbmUpCiAgICAgICAgICAgICAgICBpZiBlcnJvcnMgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSAic3RyaWN0IgogICAgICAgICAgICAgICAgZGF0YSA9IGRhdGEuZW5jb2RlKGZwLmVuY29kaW5nLCBlcnJvcnMpCiAgICAgICAgICAgIGZwLndyaXRlKGRhdGEpCiAgICAgICAgd2FudF91bmljb2RlID0gRmFsc2UKICAgICAgICBzZXAgPSBrd2FyZ3MucG9wKCJzZXAiLCBOb25lKQogICAgICAgIGlmIHNlcCBpcyBub3QgTm9uZToKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShzZXAsIHVuaWNvZGUpOgogICAgICAgICAgICAgICAgd2FudF91bmljb2RlID0gVHJ1ZQogICAgICAgICAgICBlbGlmIG5vdCBpc2luc3RhbmNlKHNlcCwgc3RyKToKICAgICAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigic2VwIG11c3QgYmUgTm9uZSBvciBhIHN0cmluZyIpCiAgICAgICAgZW5kID0ga3dhcmdzLnBvcCgiZW5kIiwgTm9uZSkKICAgICAgICBpZiBlbmQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoZW5kLCB1bmljb2RlKToKICAgICAgICAgICAgICAgIHdhbnRfdW5pY29kZSA9IFRydWUKICAgICAgICAgICAgZWxpZiBub3QgaXNpbnN0YW5jZShlbmQsIHN0cik6CiAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoImVuZCBtdXN0IGJlIE5vbmUgb3IgYSBzdHJpbmciKQogICAgICAgIGlmIGt3YXJnczoKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJpbnZhbGlkIGtleXdvcmQgYXJndW1lbnRzIHRvIHByaW50KCkiKQogICAgICAgIGlmIG5vdCB3YW50X3VuaWNvZGU6CiAgICAgICAgICAgIGZvciBhcmcgaW4gYXJnczoKICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoYXJnLCB1bmljb2RlKToKICAgICAgICAgICAgICAgICAgICB3YW50X3VuaWNvZGUgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICBpZiB3YW50X3VuaWNvZGU6CiAgICAgICAgICAgIG5ld2xpbmUgPSB1bmljb2RlKCJcbiIpCiAgICAgICAgICAgIHNwYWNlID0gdW5pY29kZSgiICIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbmV3bGluZSA9ICJcbiIKICAgICAgICAgICAgc3BhY2UgPSAiICIKICAgICAgICBpZiBzZXAgaXMgTm9uZToKICAgICAgICAgICAgc2VwID0gc3BhY2UKICAgICAgICBpZiBlbmQgaXMgTm9uZToKICAgICAgICAgICAgZW5kID0gbmV3bGluZQogICAgICAgIGZvciBpLCBhcmcgaW4gZW51bWVyYXRlKGFyZ3MpOgogICAgICAgICAgICBpZiBpOgogICAgICAgICAgICAgICAgd3JpdGUoc2VwKQogICAgICAgICAgICB3cml0ZShhcmcpCiAgICAgICAgd3JpdGUoZW5kKQppZiBzeXMudmVyc2lvbl9pbmZvWzoyXSA8ICgzLCAzKToKICAgIF9wcmludCA9IHByaW50XwoKICAgIGRlZiBwcmludF8oKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICBmcCA9IGt3YXJncy5nZXQoImZpbGUiLCBzeXMuc3Rkb3V0KQogICAgICAgIGZsdXNoID0ga3dhcmdzLnBvcCgiZmx1c2giLCBGYWxzZSkKICAgICAgICBfcHJpbnQoKmFyZ3MsICoqa3dhcmdzKQogICAgICAgIGlmIGZsdXNoIGFuZCBmcCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZnAuZmx1c2goKQoKX2FkZF9kb2MocmVyYWlzZSwgIiIiUmVyYWlzZSBhbiBleGNlcHRpb24uIiIiKQoKaWYgc3lzLnZlcnNpb25faW5mb1swOjJdIDwgKDMsIDQpOgogICAgZGVmIHdyYXBzKHdyYXBwZWQsIGFzc2lnbmVkPWZ1bmN0b29scy5XUkFQUEVSX0FTU0lHTk1FTlRTLAogICAgICAgICAgICAgIHVwZGF0ZWQ9ZnVuY3Rvb2xzLldSQVBQRVJfVVBEQVRFUyk6CiAgICAgICAgZGVmIHdyYXBwZXIoZik6CiAgICAgICAgICAgIGYgPSBmdW5jdG9vbHMud3JhcHMod3JhcHBlZCwgYXNzaWduZWQsIHVwZGF0ZWQpKGYpCiAgICAgICAgICAgIGYuX193cmFwcGVkX18gPSB3cmFwcGVkCiAgICAgICAgICAgIHJldHVybiBmCiAgICAgICAgcmV0dXJuIHdyYXBwZXIKZWxzZToKICAgIHdyYXBzID0gZnVuY3Rvb2xzLndyYXBzCgoKZGVmIHdpdGhfbWV0YWNsYXNzKG1ldGEsICpiYXNlcyk6CiAgICAiIiJDcmVhdGUgYSBiYXNlIGNsYXNzIHdpdGggYSBtZXRhY2xhc3MuIiIiCiAgICAjIFRoaXMgcmVxdWlyZXMgYSBiaXQgb2YgZXhwbGFuYXRpb246IHRoZSBiYXNpYyBpZGVhIGlzIHRvIG1ha2UgYSBkdW1teQogICAgIyBtZXRhY2xhc3MgZm9yIG9uZSBsZXZlbCBvZiBjbGFzcyBpbnN0YW50aWF0aW9uIHRoYXQgcmVwbGFjZXMgaXRzZWxmIHdpdGgKICAgICMgdGhlIGFjdHVhbCBtZXRhY2xhc3MuCiAgICBjbGFzcyBtZXRhY2xhc3MobWV0YSk6CgogICAgICAgIGRlZiBfX25ld19fKGNscywgbmFtZSwgdGhpc19iYXNlcywgZCk6CiAgICAgICAgICAgIHJldHVybiBtZXRhKG5hbWUsIGJhc2VzLCBkKQogICAgcmV0dXJuIHR5cGUuX19uZXdfXyhtZXRhY2xhc3MsICd0ZW1wb3JhcnlfY2xhc3MnLCAoKSwge30pCgoKZGVmIGFkZF9tZXRhY2xhc3MobWV0YWNsYXNzKToKICAgICIiIkNsYXNzIGRlY29yYXRvciBmb3IgY3JlYXRpbmcgYSBjbGFzcyB3aXRoIGEgbWV0YWNsYXNzLiIiIgogICAgZGVmIHdyYXBwZXIoY2xzKToKICAgICAgICBvcmlnX3ZhcnMgPSBjbHMuX19kaWN0X18uY29weSgpCiAgICAgICAgc2xvdHMgPSBvcmlnX3ZhcnMuZ2V0KCdfX3Nsb3RzX18nKQogICAgICAgIGlmIHNsb3RzIGlzIG5vdCBOb25lOgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHNsb3RzLCBzdHIpOgogICAgICAgICAgICAgICAgc2xvdHMgPSBbc2xvdHNdCiAgICAgICAgICAgIGZvciBzbG90c192YXIgaW4gc2xvdHM6CiAgICAgICAgICAgICAgICBvcmlnX3ZhcnMucG9wKHNsb3RzX3ZhcikKICAgICAgICBvcmlnX3ZhcnMucG9wKCdfX2RpY3RfXycsIE5vbmUpCiAgICAgICAgb3JpZ192YXJzLnBvcCgnX193ZWFrcmVmX18nLCBOb25lKQogICAgICAgIHJldHVybiBtZXRhY2xhc3MoY2xzLl9fbmFtZV9fLCBjbHMuX19iYXNlc19fLCBvcmlnX3ZhcnMpCiAgICByZXR1cm4gd3JhcHBlcgoKCmRlZiBweXRob25fMl91bmljb2RlX2NvbXBhdGlibGUoa2xhc3MpOgogICAgIiIiCiAgICBBIGRlY29yYXRvciB0aGF0IGRlZmluZXMgX191bmljb2RlX18gYW5kIF9fc3RyX18gbWV0aG9kcyB1bmRlciBQeXRob24gMi4KICAgIFVuZGVyIFB5dGhvbiAzIGl0IGRvZXMgbm90aGluZy4KCiAgICBUbyBzdXBwb3J0IFB5dGhvbiAyIGFuZCAzIHdpdGggYSBzaW5nbGUgY29kZSBiYXNlLCBkZWZpbmUgYSBfX3N0cl9fIG1ldGhvZAogICAgcmV0dXJuaW5nIHRleHQgYW5kIGFwcGx5IHRoaXMgZGVjb3JhdG9yIHRvIHRoZSBjbGFzcy4KICAgICIiIgogICAgaWYgUFkyOgogICAgICAgIGlmICdfX3N0cl9fJyBub3QgaW4ga2xhc3MuX19kaWN0X186CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIkBweXRob25fMl91bmljb2RlX2NvbXBhdGlibGUgY2Fubm90IGJlIGFwcGxpZWQgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0byAlcyBiZWNhdXNlIGl0IGRvZXNuJ3QgZGVmaW5lIF9fc3RyX18oKS4iICUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrbGFzcy5fX25hbWVfXykKICAgICAgICBrbGFzcy5fX3VuaWNvZGVfXyA9IGtsYXNzLl9fc3RyX18KICAgICAgICBrbGFzcy5fX3N0cl9fID0gbGFtYmRhIHNlbGY6IHNlbGYuX191bmljb2RlX18oKS5lbmNvZGUoJ3V0Zi04JykKICAgIHJldHVybiBrbGFzcwoKCiMgQ29tcGxldGUgdGhlIG1vdmVzIGltcGxlbWVudGF0aW9uLgojIFRoaXMgY29kZSBpcyBhdCB0aGUgZW5kIG9mIHRoaXMgbW9kdWxlIHRvIHNwZWVkIHVwIG1vZHVsZSBsb2FkaW5nLgojIFR1cm4gdGhpcyBtb2R1bGUgaW50byBhIHBhY2thZ2UuCl9fcGF0aF9fID0gW10gICMgcmVxdWlyZWQgZm9yIFBFUCAzMDIgYW5kIFBFUCA0NTEKX19wYWNrYWdlX18gPSBfX25hbWVfXyAgIyBzZWUgUEVQIDM2NiBAUmVzZXJ2ZWRBc3NpZ25tZW50CmlmIGdsb2JhbHMoKS5nZXQoIl9fc3BlY19fIikgaXMgbm90IE5vbmU6CiAgICBfX3NwZWNfXy5zdWJtb2R1bGVfc2VhcmNoX2xvY2F0aW9ucyA9IFtdICAjIFBFUCA0NTEgQFVuZGVmaW5lZFZhcmlhYmxlCiMgUmVtb3ZlIG90aGVyIHNpeCBtZXRhIHBhdGggaW1wb3J0ZXJzLCBzaW5jZSB0aGV5IGNhdXNlIHByb2JsZW1zLiBUaGlzIGNhbgojIGhhcHBlbiBpZiBzaXggaXMgcmVtb3ZlZCBmcm9tIHN5cy5tb2R1bGVzIGFuZCB0aGVuIHJlbG9hZGVkLiAoU2V0dXB0b29scyBkb2VzCiMgdGhpcyBmb3Igc29tZSByZWFzb24uKQppZiBzeXMubWV0YV9wYXRoOgogICAgZm9yIGksIGltcG9ydGVyIGluIGVudW1lcmF0ZShzeXMubWV0YV9wYXRoKToKICAgICAgICAjIEhlcmUncyBzb21lIHJlYWwgbmFzdGluZXNzOiBBbm90aGVyICJpbnN0YW5jZSIgb2YgdGhlIHNpeCBtb2R1bGUgbWlnaHQKICAgICAgICAjIGJlIGZsb2F0aW5nIGFyb3VuZC4gVGhlcmVmb3JlLCB3ZSBjYW4ndCB1c2UgaXNpbnN0YW5jZSgpIHRvIGNoZWNrIGZvcgogICAgICAgICMgdGhlIHNpeCBtZXRhIHBhdGggaW1wb3J0ZXIsIHNpbmNlIHRoZSBvdGhlciBzaXggaW5zdGFuY2Ugd2lsbCBoYXZlCiAgICAgICAgIyBpbnNlcnRlZCBhbiBpbXBvcnRlciB3aXRoIGRpZmZlcmVudCBjbGFzcy4KICAgICAgICBpZiAodHlwZShpbXBvcnRlcikuX19uYW1lX18gPT0gIl9TaXhNZXRhUGF0aEltcG9ydGVyIiBhbmQKICAgICAgICAgICAgICAgIGltcG9ydGVyLm5hbWUgPT0gX19uYW1lX18pOgogICAgICAgICAgICBkZWwgc3lzLm1ldGFfcGF0aFtpXQogICAgICAgICAgICBicmVhawogICAgZGVsIGksIGltcG9ydGVyCiMgRmluYWxseSwgYWRkIHRoZSBpbXBvcnRlciB0byB0aGUgbWV0YSBwYXRoIGltcG9ydCBob29rLgpzeXMubWV0YV9wYXRoLmFwcGVuZChfaW1wb3J0ZXIpClBLAQIUAxQAAAAAAAe8K0uPp/FSdwAAAHcAAAATAAAAAAAAAAAAAACAAQAAAABhbnNpYmxlL19faW5pdF9fLnB5UEsBAhQDFAAAAAAAB7wrS53F8WtIAAAASAAAACAAAAAAAAAAAAAAAIABqAAAAGFuc2libGUvbW9kdWxlX3V0aWxzL19faW5pdF9fLnB5UEsBAhQDFAAAAAAAB7wrS9AGVM3kOwAA5DsAABwAAAAAAAAAAAAAAIABLgEAAGFuc2libGVfbW9kdWxlX2t1YmVybmV0ZXMucHlQSwECFAMUAAAAAAAHvCtLO985lTCKAQAwigEAHQAAAAAAAAAAAAAAgAFMPQAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvYmFzaWMucHlQSwECFAMUAAAAAAAHvCtLXYa1bzutAAA7rQAAHAAAAAAAAAAAAAAAgAG3xwEAYW5zaWJsZS9tb2R1bGVfdXRpbHMvdXJscy5weVBLAQIUAxQAAAAAAAe8K0u12AQGJTAAACUwAAAdAAAAAAAAAAAAAACAASx1AgBhbnNpYmxlL21vZHVsZV91dGlscy9fdGV4dC5weVBLAQIUAxQAAAAAAAe8K0sl3LR+ExAAABMQAAAiAAAAAAAAAAAAAACAAYylAgBhbnNpYmxlL21vZHVsZV91dGlscy9weWNvbXBhdDI0LnB5UEsBAhQDFAAAAAAAB7wrSxgXcvUBEQAAAREAACQAAAAAAAAAAAAAAIAB37UCAGFuc2libGUvbW9kdWxlX3V0aWxzL3NpeC9fX2luaXRfXy5weVBLAQIUAxQAAAAAAAe8K0s44sfRkXUAAJF1AAAgAAAAAAAAAAAAAACAASLHAgBhbnNpYmxlL21vZHVsZV91dGlscy9zaXgvX3NpeC5weVBLBQYAAAAACQAJAKkCAADxPAMAAAA="""
def invoke_module(module, modlib_path, json_params):
    pythonpath = os.environ.get('PYTHONPATH')
    if pythonpath:
        os.environ['PYTHONPATH'] = ':'.join((modlib_path, pythonpath))
    else:
        os.environ['PYTHONPATH'] = modlib_path
    p = subprocess.Popen(['/usr/bin/python', module], env=os.environ, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
    (stdout, stderr) = p.communicate(json_params)
    if not isinstance(stderr, (bytes, unicode)):
        stderr = stderr.read()
    if not isinstance(stdout, (bytes, unicode)):
        stdout = stdout.read()
    if PY3:
        sys.stderr.buffer.write(stderr)
        sys.stdout.buffer.write(stdout)
    else:
        sys.stderr.write(stderr)
        sys.stdout.write(stdout)
    return p.returncode
def debug(command, zipped_mod, json_params):
    basedir = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'debug_dir')
    args_path = os.path.join(basedir, 'args')
    script_path = os.path.join(basedir, 'ansible_module_kubernetes.py')
    if command == 'explode':
        z = zipfile.ZipFile(zipped_mod)
        for filename in z.namelist():
            if filename.startswith('/'):
                raise Exception('Something wrong with this module zip file: should not contain absolute paths')
            dest_filename = os.path.join(basedir, filename)
            if dest_filename.endswith(os.path.sep) and not os.path.exists(dest_filename):
                os.makedirs(dest_filename)
            else:
                directory = os.path.dirname(dest_filename)
                if not os.path.exists(directory):
                    os.makedirs(directory)
                f = open(dest_filename, 'wb')
                f.write(z.read(filename))
                f.close()
        f = open(args_path, 'wb')
        f.write(json_params)
        f.close()
        print('Module expanded into:')
        print('%s' % basedir)
        exitcode = 0
    elif command == 'execute':
        pythonpath = os.environ.get('PYTHONPATH')
        if pythonpath:
            os.environ['PYTHONPATH'] = ':'.join((basedir, pythonpath))
        else:
            os.environ['PYTHONPATH'] = basedir
        p = subprocess.Popen(['/usr/bin/python', script_path, args_path],
                env=os.environ, shell=False, stdout=subprocess.PIPE,
                stderr=subprocess.PIPE, stdin=subprocess.PIPE)
        (stdout, stderr) = p.communicate()
        if not isinstance(stderr, (bytes, unicode)):
            stderr = stderr.read()
        if not isinstance(stdout, (bytes, unicode)):
            stdout = stdout.read()
        if PY3:
            sys.stderr.buffer.write(stderr)
            sys.stdout.buffer.write(stdout)
        else:
            sys.stderr.write(stderr)
            sys.stdout.write(stdout)
        return p.returncode
    elif command == 'excommunicate':
        sys.argv = ['kubernetes', args_path]
        sys.path.insert(0, basedir)
        from ansible_module_kubernetes import main
        main()
        print('WARNING: Module returned to wrapper instead of exiting')
        sys.exit(1)
    else:
        print('WARNING: Unknown debug command.  Doing nothing.')
        exitcode = 0
    return exitcode
if __name__ == '__main__':
    ANSIBALLZ_PARAMS = json.dumps({"ANSIBLE_MODULE_ARGS": json.load(sys.stdin)})
    if PY3:
        ANSIBALLZ_PARAMS = ANSIBALLZ_PARAMS.encode('utf-8')
    try:
        temp_path = tempfile.mkdtemp(prefix='ansible_')
        zipped_mod = os.path.join(temp_path, 'ansible_modlib.zip')
        modlib = open(zipped_mod, 'wb')
        modlib.write(base64.b64decode(ZIPDATA))
        modlib.close()
        if len(sys.argv) == 2:
            exitcode = debug(sys.argv[1], zipped_mod, ANSIBALLZ_PARAMS)
        else:
            z = zipfile.ZipFile(zipped_mod, mode='r')
            module = os.path.join(temp_path, 'ansible_module_kubernetes.py')
            f = open(module, 'wb')
            f.write(z.read('ansible_module_kubernetes.py'))
            f.close()
            z = zipfile.ZipFile(zipped_mod, mode='a')
            sitecustomize = u'import sys\nsys.path.insert(0,"%s")\n' %  zipped_mod
            sitecustomize = sitecustomize.encode('utf-8')
            zinfo = zipfile.ZipInfo()
            zinfo.filename = 'sitecustomize.py'
            zinfo.date_time = ( 2017, 9, 11, 23, 32, 15)
            z.writestr(zinfo, sitecustomize)
            z.close()
            exitcode = invoke_module(module, zipped_mod, ANSIBALLZ_PARAMS)
    finally:
        try:
            shutil.rmtree(temp_path)
        except OSError:
            pass
    sys.exit(exitcode)