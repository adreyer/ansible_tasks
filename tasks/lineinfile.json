{
  "input_method": "stdin", 
  "description": "This module will search a file for a line, and ensure that it is present or absent.", 
  "parameters": {
    "group": {
      "type": "Optional[String[0]]", 
      "description": "Name of the group that should own the file/directory, as would be fed to I(chown)."
    }, 
    "insertbefore": {
      "type": "Optional[Enum[\"BOF\", \"*regex*\"]]", 
      "description": "Used with C(state=present). If specified, the line will be inserted before the last match of specified regular expression. A value is available; C(BOF) for inserting the line at the beginning of the file. If specified regular expression has no matches, the line will be inserted at the end of the file.  May not be used with C(backrefs)."
    }, 
    "unsafe_writes": {
      "type": "Optional[String[0]]", 
      "description": "Normally this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, sometimes systems are configured or just broken in ways that prevent this. One example are docker mounted files, they cannot be updated atomically and can only be done in an unsafe manner."
    }, 
    "selevel": {
      "type": "Optional[String[0]]", 
      "description": "Level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). C(_default) feature works as for I(seuser)."
    }, 
    "create": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "Used with C(state=present). If specified, the file will be created if it does not already exist. By default it will fail if the file is missing."
    }, 
    "seuser": {
      "type": "Optional[String[0]]", 
      "description": "User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available."
    }, 
    "state": {
      "type": "Optional[Enum[\"present\", \"absent\"]]", 
      "description": "Whether the line should be there or not."
    }, 
    "backrefs": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "Used with C(state=present). If set, line can contain backreferences (both positional and named) that will get populated if the C(regexp) matches. This flag changes the operation of the module slightly; C(insertbefore) and C(insertafter) will be ignored, and if the C(regexp) doesn't match anywhere in the file, the file will be left unchanged. If the C(regexp) does match, the last matching line will be replaced by the expanded line parameter."
    }, 
    "insertafter": {
      "type": "Optional[Enum[\"EOF\", \"*regex*\"]]", 
      "description": "Used with C(state=present). If specified, the line will be inserted after the last match of specified regular expression. A special value is available; C(EOF) for inserting the line at the end of the file. If specified regular expression has no matches, EOF will be used instead. May not be used with C(backrefs)."
    }, 
    "serole": {
      "type": "Optional[String[0]]", 
      "description": "Role part of SELinux file context, C(_default) feature works as for I(seuser)."
    }, 
    "path": {
      "type": "String[0]", 
      "description": "The file to modify."
    }, 
    "mode": {
      "type": "Optional[String[0]]", 
      "description": "Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r))."
    }, 
    "others": {
      "type": "Optional[String[0]]", 
      "description": "All arguments accepted by the M(file) module also work here."
    }, 
    "owner": {
      "type": "Optional[String[0]]", 
      "description": "Name of the user that should own the file/directory, as would be fed to I(chown)."
    }, 
    "regexp": {
      "type": "Optional[String[0]]", 
      "description": "The regular expression to look for in every line of the file. For C(state=present), the pattern to replace if found; only the last line found will be replaced. For C(state=absent), the pattern of the line(s) to remove.  Uses Python regular expressions; see U(http://docs.python.org/2/library/re.html)."
    }, 
    "validate": {
      "type": "Optional[String[0]]", 
      "description": "The validation command to run before copying into place. The path to the file to validate is passed in via '%s' which must be present as in the example below. The command is passed securely so shell features like expansion and pipes won't work."
    }, 
    "attributes": {
      "type": "Optional[String[0]]", 
      "description": "Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr)."
    }, 
    "backup": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."
    }, 
    "line": {
      "type": "Optional[String[0]]", 
      "description": "Required for C(state=present). The line to insert/replace into the file. If C(backrefs) is set, may contain backreferences that will get expanded with the C(regexp) capture groups if the regexp matches."
    }, 
    "setype": {
      "type": "Optional[String[0]]", 
      "description": "Type part of SELinux file context, C(_default) feature works as for I(seuser)."
    }
  }
}