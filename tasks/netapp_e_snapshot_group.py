#!/usr/bin/python
# -*- coding: utf-8 -*-
ANSIBALLZ_WRAPPER = True # For test-module script to tell this is a ANSIBALLZ_WRAPPER
import os
import os.path
import sys
import __main__
scriptdir = None
try:
    scriptdir = os.path.dirname(os.path.abspath(__main__.__file__))
except (AttributeError, OSError):
    pass
if scriptdir is not None:
    sys.path = [p for p in sys.path if p != scriptdir]
import base64
import json
import shutil
import zipfile
import tempfile
import subprocess
if sys.version_info < (3,):
    bytes = str
    PY3 = False
else:
    unicode = str
    PY3 = True
try:
    from io import BytesIO as IOStream
except ImportError:
    from StringIO import StringIO as IOStream
ZIPDATA = """UEsDBBQAAAAAAOK7K0uPp/FSdwAAAHcAAAATAAAAYW5zaWJsZS9fX2luaXRfXy5weWZyb20gcGtndXRpbCBpbXBvcnQgZXh0ZW5kX3BhdGgKX19wYXRoX189ZXh0ZW5kX3BhdGgoX19wYXRoX18sX19uYW1lX18pCl9fdmVyc2lvbl9fPSIyLjQuMCIKX19hdXRob3JfXz0iQW5zaWJsZSwgSW5jLiIKUEsDBBQAAAAAAOK7K0udxfFrSAAAAEgAAAAgAAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvX19pbml0X18ucHlmcm9tIHBrZ3V0aWwgaW1wb3J0IGV4dGVuZF9wYXRoCl9fcGF0aF9fPWV4dGVuZF9wYXRoKF9fcGF0aF9fLF9fbmFtZV9fKQpQSwMEFAAAAAAA4rsrS93Low47OwAAOzsAACkAAABhbnNpYmxlX21vZHVsZV9uZXRhcHBfZV9zbmFwc2hvdF9ncm91cC5weSMhL3Vzci9iaW4vcHl0aG9uCgojIChjKSAyMDE2LCBOZXRBcHAsIEluYwojCiMgVGhpcyBmaWxlIGlzIHBhcnQgb2YgQW5zaWJsZQojCiMgQW5zaWJsZSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiMgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKIyB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcgojIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCiMKIyBBbnNpYmxlIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiMgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKIyBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCiMgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KIwojIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCiMgYWxvbmcgd2l0aCBBbnNpYmxlLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgojCkFOU0lCTEVfTUVUQURBVEEgPSB7J21ldGFkYXRhX3ZlcnNpb24nOiAnMS4wJywKICAgICAgICAgICAgICAgICAgICAnc3RhdHVzJzogWydwcmV2aWV3J10sCiAgICAgICAgICAgICAgICAgICAgJ3N1cHBvcnRlZF9ieSc6ICdjb21tdW5pdHknfQoKCkRPQ1VNRU5UQVRJT04gPSAiIiIKLS0tCm1vZHVsZTogbmV0YXBwX2Vfc25hcHNob3RfZ3JvdXAKc2hvcnRfZGVzY3JpcHRpb246IE1hbmFnZSBzbmFwc2hvdCBncm91cHMKZGVzY3JpcHRpb246CiAgICAtIENyZWF0ZSwgdXBkYXRlLCBkZWxldGUgc25hcHNob3QgZ3JvdXBzIGZvciBOZXRBcHAgRS1zZXJpZXMgc3RvcmFnZSBhcnJheXMKdmVyc2lvbl9hZGRlZDogJzIuMicKYXV0aG9yOiBLZXZpbiBIdWxxdWVzdCAoQGh1bHF1ZXN0KQpvcHRpb25zOgogICAgYXBpX3VzZXJuYW1lOgogICAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICAgICAgZGVzY3JpcHRpb246CiAgICAgICAgLSBUaGUgdXNlcm5hbWUgdG8gYXV0aGVudGljYXRlIHdpdGggdGhlIFNBTnRyaWNpdHkgV2ViU2VydmljZXMgUHJveHkgb3IgZW1iZWRkZWQgUkVTVCBBUEkuCiAgICBhcGlfcGFzc3dvcmQ6CiAgICAgICAgcmVxdWlyZWQ6IHRydWUKICAgICAgICBkZXNjcmlwdGlvbjoKICAgICAgICAtIFRoZSBwYXNzd29yZCB0byBhdXRoZW50aWNhdGUgd2l0aCB0aGUgU0FOdHJpY2l0eSBXZWJTZXJ2aWNlcyBQcm94eSBvciBlbWJlZGRlZCBSRVNUIEFQSS4KICAgIGFwaV91cmw6CiAgICAgICAgcmVxdWlyZWQ6IHRydWUKICAgICAgICBkZXNjcmlwdGlvbjoKICAgICAgICAtIFRoZSB1cmwgdG8gdGhlIFNBTnRyaWNpdHkgV2ViU2VydmljZXMgUHJveHkgb3IgZW1iZWRkZWQgUkVTVCBBUEkuCiAgICB2YWxpZGF0ZV9jZXJ0czoKICAgICAgICByZXF1aXJlZDogZmFsc2UKICAgICAgICBkZWZhdWx0OiB0cnVlCiAgICAgICAgZGVzY3JpcHRpb246CiAgICAgICAgLSBTaG91bGQgaHR0cHMgY2VydGlmaWNhdGVzIGJlIHZhbGlkYXRlZD8KICAgIHN0YXRlOgogICAgICAgIGRlc2NyaXB0aW9uOgogICAgICAgICAgICAtIFdoZXRoZXIgdG8gZW5zdXJlIHRoZSBncm91cCBpcyBwcmVzZW50IG9yIGFic2VudC4KICAgICAgICByZXF1aXJlZDogVHJ1ZQogICAgICAgIGNob2ljZXM6CiAgICAgICAgICAgIC0gcHJlc2VudAogICAgICAgICAgICAtIGFic2VudAogICAgbmFtZToKICAgICAgICBkZXNjcmlwdGlvbjoKICAgICAgICAgICAgLSBUaGUgbmFtZSB0byBnaXZlIHRoZSBzbmFwc2hvdCBncm91cAogICAgICAgIHJlcXVpcmVkOiBUcnVlCiAgICBiYXNlX3ZvbHVtZV9uYW1lOgogICAgICAgIGRlc2NyaXB0aW9uOgogICAgICAgICAgICAtIFRoZSBuYW1lIG9mIHRoZSBiYXNlIHZvbHVtZSBvciB0aGluIHZvbHVtZSB0byB1c2UgYXMgdGhlIGJhc2UgZm9yIHRoZSBuZXcgc25hcHNob3QgZ3JvdXAuCiAgICAgICAgICAgIC0gSWYgYSBzbmFwc2hvdCBncm91cCB3aXRoIGFuIGlkZW50aWNhbCBDKG5hbWUpIGFscmVhZHkgZXhpc3RzIGJ1dCB3aXRoIGEgZGlmZmVyZW50IGJhc2Ugdm9sdW1lCiAgICAgICAgICAgICAgYW4gZXJyb3Igd2lsbCBiZSByZXR1cm5lZC4KICAgICAgICByZXF1aXJlZDogVHJ1ZQogICAgcmVwb19wY3Q6CiAgICAgICAgZGVzY3JpcHRpb246CiAgICAgICAgICAgIC0gVGhlIHNpemUgb2YgdGhlIHJlcG9zaXRvcnkgaW4gcmVsYXRpb24gdG8gdGhlIHNpemUgb2YgdGhlIGJhc2Ugdm9sdW1lCiAgICAgICAgcmVxdWlyZWQ6IEZhbHNlCiAgICAgICAgZGVmYXVsdDogMjAKICAgIHdhcm5pbmdfdGhyZXNob2xkOgogICAgICAgIGRlc2NyaXB0aW9uOgogICAgICAgICAgICAtIFRoZSByZXBvc2l0b3J5IHV0aWxpemF0aW9uIHdhcm5pbmcgdGhyZXNob2xkLCBhcyBhIHBlcmNlbnRhZ2Ugb2YgdGhlIHJlcG9zaXRvcnkgdm9sdW1lIGNhcGFjaXR5LgogICAgICAgIHJlcXVpcmVkOiBGYWxzZQogICAgICAgIGRlZmF1bHQ6IDgwCiAgICBkZWxldGVfbGltaXQ6CiAgICAgICAgZGVzY3JpcHRpb246CiAgICAgICAgICAgIC0gVGhlIGF1dG9tYXRpYyBkZWxldGlvbiBpbmRpY2F0b3IuCiAgICAgICAgICAgIC0gSWYgbm9uLXplcm8sIHRoZSBvbGRlc3Qgc25hcHNob3QgaW1hZ2Ugd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGRlbGV0ZWQgd2hlbiBjcmVhdGluZyBhIG5ldyBzbmFwc2hvdCBpbWFnZSB0byBrZWVwIHRoZSB0b3RhbCBudW1iZXIgb2YKICAgICAgICAgICAgICBzbmFwc2hvdCBpbWFnZXMgbGltaXRlZCB0byB0aGUgbnVtYmVyIHNwZWNpZmllZC4KICAgICAgICAgICAgLSBUaGlzIHZhbHVlIGlzIG92ZXJyaWRkZW4gYnkgdGhlIGNvbnNpc3RlbmN5IGdyb3VwIHNldHRpbmcgaWYgdGhpcyBzbmFwc2hvdCBncm91cCBpcyBhc3NvY2lhdGVkIHdpdGggYSBjb25zaXN0ZW5jeSBncm91cC4KICAgICAgICByZXF1aXJlZDogRmFsc2UKICAgICAgICBkZWZhdWx0OiAzMAogICAgZnVsbF9wb2xpY3k6CiAgICAgICAgZGVzY3JpcHRpb246CiAgICAgICAgICAgIC0gVGhlIGJlaGF2aW9yIG9uIHdoZW4gdGhlIGRhdGEgcmVwb3NpdG9yeSBiZWNvbWVzIGZ1bGwuCiAgICAgICAgICAgIC0gVGhpcyB2YWx1ZSBpcyBvdmVycmlkZGVuIGJ5IGNvbnNpc3RlbmN5IGdyb3VwIHNldHRpbmcgaWYgdGhpcyBzbmFwc2hvdCBncm91cCBpcyBhc3NvY2lhdGVkIHdpdGggYSBjb25zaXN0ZW5jeSBncm91cAogICAgICAgIHJlcXVpcmVkOiBGYWxzZQogICAgICAgIGRlZmF1bHQ6IHB1cmdlcGl0CiAgICAgICAgY2hvaWNlczoKICAgICAgICAgICAgLSBwdXJnZXBpdAogICAgICAgICAgICAtIHVua25vd24KICAgICAgICAgICAgLSBmYWlsYmFzZXdyaXRlcwogICAgICAgICAgICAtIF9fVU5ERUZJTkVECiAgICBzdG9yYWdlX3Bvb2xfbmFtZToKICAgICAgICByZXF1aXJlZDogVHJ1ZQogICAgICAgIGRlc2NyaXB0aW9uOgogICAgICAgICAgICAtIFRoZSBuYW1lIG9mIHRoZSBzdG9yYWdlIHBvb2wgb24gd2hpY2ggdG8gYWxsb2NhdGUgdGhlIHJlcG9zaXRvcnkgdm9sdW1lLgogICAgcm9sbGJhY2tfcHJpb3JpdHk6CiAgICAgICAgcmVxdWlyZWQ6IEZhbHNlCiAgICAgICAgZGVzY3JpcHRpb246CiAgICAgICAgICAgIC0gVGhlIGltcG9ydGFuY2Ugb2YgdGhlIHJvbGxiYWNrIG9wZXJhdGlvbi4KICAgICAgICAgICAgLSBUaGlzIHZhbHVlIGlzIG92ZXJyaWRkZW4gYnkgY29uc2lzdGVuY3kgZ3JvdXAgc2V0dGluZyBpZiB0aGlzIHNuYXBzaG90IGdyb3VwIGlzIGFzc29jaWF0ZWQgd2l0aCBhIGNvbnNpc3RlbmN5IGdyb3VwCiAgICAgICAgY2hvaWNlczoKICAgICAgICAgICAgLSBoaWdoZXN0CiAgICAgICAgICAgIC0gaGlnaAogICAgICAgICAgICAtIG1lZGl1bQogICAgICAgICAgICAtIGxvdwogICAgICAgICAgICAtIGxvd2VzdAogICAgICAgICAgICAtIF9fVU5ERUZJTkVECiAgICAgICAgZGVmYXVsdDogbWVkaXVtCiIiIgoKRVhBTVBMRVMgPSAiIiIKICAgIC0gbmFtZTogQ29uZmlndXJlIFNuYXBzaG90IGdyb3VwCiAgICAgIG5ldGFwcF9lX3NuYXBzaG90X2dyb3VwOgogICAgICAgIHNzaWQ6ICJ7eyBzc2lkIH19IgogICAgICAgIGFwaV91cmw6ICJ7eyBuZXRhcHBfYXBpX3VybCB9fSIKICAgICAgICBhcGlfdXNlcm5hbWU6ICJ7eyBuZXRhcHBfYXBpX3VzZXJuYW1lIH19IgogICAgICAgIGFwaV9wYXNzd29yZDogInt7IG5ldGFwcF9hcGlfcGFzc3dvcmQgfX0iCiAgICAgICAgdmFsaWRhdGVfY2VydHM6ICJ7eyBuZXRhcHBfYXBpX3ZhbGlkYXRlX2NlcnRzIH19IgogICAgICAgIGJhc2Vfdm9sdW1lX25hbWU6IFNTR3JvdXBfdGVzdAogICAgICAgIG5hbWU9OiBPT1NTX0dyb3VwCiAgICAgICAgcmVwb19wY3Q6IDIwCiAgICAgICAgd2FybmluZ190aHJlc2hvbGQ6IDg1CiAgICAgICAgZGVsZXRlX2xpbWl0OiAzMAogICAgICAgIGZ1bGxfcG9saWN5OiBwdXJnZXBpdAogICAgICAgIHN0b3JhZ2VfcG9vbF9uYW1lOiBEaXNrX1Bvb2xfMQogICAgICAgIHJvbGxiYWNrX3ByaW9yaXR5OiBtZWRpdW0KIiIiClJFVFVSTiA9ICIiIgptc2c6CiAgICBkZXNjcmlwdGlvbjogU3VjY2VzcyBtZXNzYWdlCiAgICByZXR1cm5lZDogc3VjY2VzcwogICAgdHlwZTogc3RyaW5nCiAgICBzYW1wbGU6IGpzb24gZmFjdHMgZm9yIG5ld2x5IGNyZWF0ZWQgc25hcHNob3QgZ3JvdXAuCiIiIgpIRUFERVJTID0gewogICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICJBY2NlcHQiOiAiYXBwbGljYXRpb24vanNvbiIsCn0KaW1wb3J0IGpzb24KCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuYXBpIGltcG9ydCBiYXNpY19hdXRoX2FyZ3VtZW50X3NwZWMKZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5iYXNpYyBpbXBvcnQgQW5zaWJsZU1vZHVsZQoKZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5weWNvbXBhdDI0IGltcG9ydCBnZXRfZXhjZXB0aW9uCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMudXJscyBpbXBvcnQgb3Blbl91cmwKZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5zaXgubW92ZXMudXJsbGliLmVycm9yIGltcG9ydCBIVFRQRXJyb3IKCgpkZWYgcmVxdWVzdCh1cmwsIGRhdGE9Tm9uZSwgaGVhZGVycz1Ob25lLCBtZXRob2Q9J0dFVCcsIHVzZV9wcm94eT1UcnVlLAogICAgICAgICAgICBmb3JjZT1GYWxzZSwgbGFzdF9tb2RfdGltZT1Ob25lLCB0aW1lb3V0PTEwLCB2YWxpZGF0ZV9jZXJ0cz1UcnVlLAogICAgICAgICAgICB1cmxfdXNlcm5hbWU9Tm9uZSwgdXJsX3Bhc3N3b3JkPU5vbmUsIGh0dHBfYWdlbnQ9Tm9uZSwgZm9yY2VfYmFzaWNfYXV0aD1UcnVlLCBpZ25vcmVfZXJyb3JzPUZhbHNlKToKICAgIHRyeToKICAgICAgICByID0gb3Blbl91cmwodXJsPXVybCwgZGF0YT1kYXRhLCBoZWFkZXJzPWhlYWRlcnMsIG1ldGhvZD1tZXRob2QsIHVzZV9wcm94eT11c2VfcHJveHksCiAgICAgICAgICAgICAgICAgICAgIGZvcmNlPWZvcmNlLCBsYXN0X21vZF90aW1lPWxhc3RfbW9kX3RpbWUsIHRpbWVvdXQ9dGltZW91dCwgdmFsaWRhdGVfY2VydHM9dmFsaWRhdGVfY2VydHMsCiAgICAgICAgICAgICAgICAgICAgIHVybF91c2VybmFtZT11cmxfdXNlcm5hbWUsIHVybF9wYXNzd29yZD11cmxfcGFzc3dvcmQsIGh0dHBfYWdlbnQ9aHR0cF9hZ2VudCwKICAgICAgICAgICAgICAgICAgICAgZm9yY2VfYmFzaWNfYXV0aD1mb3JjZV9iYXNpY19hdXRoKQogICAgZXhjZXB0IEhUVFBFcnJvcjoKICAgICAgICBlcnIgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICByID0gZXJyLmZwCgogICAgdHJ5OgogICAgICAgIHJhd19kYXRhID0gci5yZWFkKCkKICAgICAgICBpZiByYXdfZGF0YToKICAgICAgICAgICAgZGF0YSA9IGpzb24ubG9hZHMocmF3X2RhdGEpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmF3X2RhdGEgPSBOb25lCiAgICBleGNlcHQ6CiAgICAgICAgaWYgaWdub3JlX2Vycm9yczoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbihyYXdfZGF0YSkKCiAgICByZXNwX2NvZGUgPSByLmdldGNvZGUoKQoKICAgIGlmIHJlc3BfY29kZSA+PSA0MDAgYW5kIG5vdCBpZ25vcmVfZXJyb3JzOgogICAgICAgIHJhaXNlIEV4Y2VwdGlvbihyZXNwX2NvZGUsIGRhdGEpCiAgICBlbHNlOgogICAgICAgIHJldHVybiByZXNwX2NvZGUsIGRhdGEKCgpjbGFzcyBTbmFwc2hvdEdyb3VwKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZik6CgogICAgICAgIGFyZ3VtZW50X3NwZWMgPSBiYXNpY19hdXRoX2FyZ3VtZW50X3NwZWMoKQogICAgICAgIGFyZ3VtZW50X3NwZWMudXBkYXRlKAogICAgICAgICAgICBhcGlfdXNlcm5hbWU9ZGljdCh0eXBlPSdzdHInLCByZXF1aXJlZD1UcnVlKSwKICAgICAgICAgICAgYXBpX3Bhc3N3b3JkPWRpY3QodHlwZT0nc3RyJywgcmVxdWlyZWQ9VHJ1ZSwgbm9fbG9nPVRydWUpLAogICAgICAgICAgICBhcGlfdXJsPWRpY3QodHlwZT0nc3RyJywgcmVxdWlyZWQ9VHJ1ZSksCiAgICAgICAgICAgIHN0YXRlPWRpY3QocmVxdWlyZWQ9VHJ1ZSwgY2hvaWNlcz1bJ3ByZXNlbnQnLCAnYWJzZW50J10pLAogICAgICAgICAgICBiYXNlX3ZvbHVtZV9uYW1lPWRpY3QocmVxdWlyZWQ9VHJ1ZSksCiAgICAgICAgICAgIG5hbWU9ZGljdChyZXF1aXJlZD1UcnVlKSwKICAgICAgICAgICAgcmVwb19wY3Q9ZGljdChkZWZhdWx0PTIwLCB0eXBlPSdpbnQnKSwKICAgICAgICAgICAgd2FybmluZ190aHJlc2hvbGQ9ZGljdChkZWZhdWx0PTgwLCB0eXBlPSdpbnQnKSwKICAgICAgICAgICAgZGVsZXRlX2xpbWl0PWRpY3QoZGVmYXVsdD0zMCwgdHlwZT0naW50JyksCiAgICAgICAgICAgIGZ1bGxfcG9saWN5PWRpY3QoZGVmYXVsdD0ncHVyZ2VwaXQnLCBjaG9pY2VzPVsndW5rbm93bicsICdmYWlsYmFzZXdyaXRlcycsICdwdXJnZXBpdCddKSwKICAgICAgICAgICAgcm9sbGJhY2tfcHJpb3JpdHk9ZGljdChkZWZhdWx0PSdtZWRpdW0nLCBjaG9pY2VzPVsnaGlnaGVzdCcsICdoaWdoJywgJ21lZGl1bScsICdsb3cnLCAnbG93ZXN0J10pLAogICAgICAgICAgICBzdG9yYWdlX3Bvb2xfbmFtZT1kaWN0KHR5cGU9J3N0cicpLAogICAgICAgICAgICBzc2lkPWRpY3QocmVxdWlyZWQ9VHJ1ZSksCiAgICAgICAgKQoKICAgICAgICBzZWxmLm1vZHVsZSA9IEFuc2libGVNb2R1bGUoYXJndW1lbnRfc3BlYz1hcmd1bWVudF9zcGVjKQoKICAgICAgICBzZWxmLnBvc3RfZGF0YSA9IGRpY3QoKQogICAgICAgIHNlbGYud2FybmluZ190aHJlc2hvbGQgPSBzZWxmLm1vZHVsZS5wYXJhbXNbJ3dhcm5pbmdfdGhyZXNob2xkJ10KICAgICAgICBzZWxmLmJhc2Vfdm9sdW1lX25hbWUgPSBzZWxmLm1vZHVsZS5wYXJhbXNbJ2Jhc2Vfdm9sdW1lX25hbWUnXQogICAgICAgIHNlbGYubmFtZSA9IHNlbGYubW9kdWxlLnBhcmFtc1snbmFtZSddCiAgICAgICAgc2VsZi5yZXBvX3BjdCA9IHNlbGYubW9kdWxlLnBhcmFtc1sncmVwb19wY3QnXQogICAgICAgIHNlbGYuZGVsZXRlX2xpbWl0ID0gc2VsZi5tb2R1bGUucGFyYW1zWydkZWxldGVfbGltaXQnXQogICAgICAgIHNlbGYuZnVsbF9wb2xpY3kgPSBzZWxmLm1vZHVsZS5wYXJhbXNbJ2Z1bGxfcG9saWN5J10KICAgICAgICBzZWxmLnJvbGxiYWNrX3ByaW9yaXR5ID0gc2VsZi5tb2R1bGUucGFyYW1zWydyb2xsYmFja19wcmlvcml0eSddCiAgICAgICAgc2VsZi5zdG9yYWdlX3Bvb2xfbmFtZSA9IHNlbGYubW9kdWxlLnBhcmFtc1snc3RvcmFnZV9wb29sX25hbWUnXQogICAgICAgIHNlbGYuc3RhdGUgPSBzZWxmLm1vZHVsZS5wYXJhbXNbJ3N0YXRlJ10KCiAgICAgICAgc2VsZi51cmwgPSBzZWxmLm1vZHVsZS5wYXJhbXNbJ2FwaV91cmwnXQogICAgICAgIHNlbGYudXNlciA9IHNlbGYubW9kdWxlLnBhcmFtc1snYXBpX3VzZXJuYW1lJ10KICAgICAgICBzZWxmLnB3ZCA9IHNlbGYubW9kdWxlLnBhcmFtc1snYXBpX3Bhc3N3b3JkJ10KICAgICAgICBzZWxmLmNlcnRzID0gc2VsZi5tb2R1bGUucGFyYW1zWyd2YWxpZGF0ZV9jZXJ0cyddCiAgICAgICAgc2VsZi5zc2lkID0gc2VsZi5tb2R1bGUucGFyYW1zWydzc2lkJ10KCiAgICAgICAgaWYgbm90IHNlbGYudXJsLmVuZHN3aXRoKCcvJyk6CiAgICAgICAgICAgIHNlbGYudXJsICs9ICcvJwoKICAgICAgICBzZWxmLmNoYW5nZWQgPSBGYWxzZQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIHBvb2xfaWQoc2VsZik6CiAgICAgICAgcG9vbHMgPSAnc3RvcmFnZS1zeXN0ZW1zLyVzL3N0b3JhZ2UtcG9vbHMnICUgc2VsZi5zc2lkCiAgICAgICAgdXJsID0gc2VsZi51cmwgKyBwb29scwogICAgICAgIHRyeToKICAgICAgICAgICAgKHJjLCBkYXRhKSA9IHJlcXVlc3QodXJsLCBoZWFkZXJzPUhFQURFUlMsIHVybF91c2VybmFtZT1zZWxmLnVzZXIsIHVybF9wYXNzd29yZD1zZWxmLnB3ZCkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIGVyciA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICBzZWxmLm1vZHVsZS5mYWlsX2pzb24obXNnPSJTbmFwc2hvdCBncm91cCBtb2R1bGUgLSBGYWlsZWQgdG8gZmV0Y2ggc3RvcmFnZSBwb29scy4gIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIklkIFslc10uIEVycm9yIFslc10uIiAlIChzZWxmLnNzaWQsIHN0cihlcnIpKSkKCiAgICAgICAgZm9yIHBvb2wgaW4gZGF0YToKICAgICAgICAgICAgaWYgcG9vbFsnbmFtZSddID09IHNlbGYuc3RvcmFnZV9wb29sX25hbWU6CiAgICAgICAgICAgICAgICBzZWxmLnBvb2xfZGF0YSA9IHBvb2wKICAgICAgICAgICAgICAgIHJldHVybiBwb29sWydpZCddCgogICAgICAgIHNlbGYubW9kdWxlLmZhaWxfanNvbihtc2c9Ik5vIHN0b3JhZ2UgcG9vbCB3aXRoIHRoZSBuYW1lOiAnJXMnIHdhcyBmb3VuZCIgJSBzZWxmLm5hbWUpCgogICAgQHByb3BlcnR5CiAgICBkZWYgdm9sdW1lX2lkKHNlbGYpOgogICAgICAgIHZvbHVtZXMgPSAnc3RvcmFnZS1zeXN0ZW1zLyVzL3ZvbHVtZXMnICUgc2VsZi5zc2lkCiAgICAgICAgdXJsID0gc2VsZi51cmwgKyB2b2x1bWVzCiAgICAgICAgdHJ5OgogICAgICAgICAgICByYywgZGF0YSA9IHJlcXVlc3QodXJsLCBoZWFkZXJzPUhFQURFUlMsIHVybF91c2VybmFtZT1zZWxmLnVzZXIsIHVybF9wYXNzd29yZD1zZWxmLnB3ZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlX2NlcnRzPXNlbGYuY2VydHMpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBlcnIgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgc2VsZi5tb2R1bGUuZmFpbF9qc29uKG1zZz0iU25hcHNob3QgZ3JvdXAgbW9kdWxlIC0gRmFpbGVkIHRvIGZldGNoIHZvbHVtZXMuICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJJZCBbJXNdLiBFcnJvciBbJXNdLiIgJSAoc2VsZi5zc2lkLCBzdHIoZXJyKSkpCiAgICAgICAgcXR5ID0gMAogICAgICAgIGZvciB2b2x1bWUgaW4gZGF0YToKICAgICAgICAgICAgaWYgdm9sdW1lWyduYW1lJ10gPT0gc2VsZi5iYXNlX3ZvbHVtZV9uYW1lOgogICAgICAgICAgICAgICAgcXR5ICs9IDEKCiAgICAgICAgICAgICAgICBpZiBxdHkgPiAxOgogICAgICAgICAgICAgICAgICAgIHNlbGYubW9kdWxlLmZhaWxfanNvbihtc2c9Ik1vcmUgdGhhbiBvbmUgdm9sdW1lIHdpdGggdGhlIG5hbWU6ICVzIHdhcyBmb3VuZCwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBsZWFzZSBlbnN1cmUgeW91ciB2b2x1bWUgaGFzIGEgdW5pcXVlIG5hbWUiICUgc2VsZi5iYXNlX3ZvbHVtZV9uYW1lKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBJZCA9IHZvbHVtZVsnaWQnXQogICAgICAgICAgICAgICAgICAgIHNlbGYudm9sdW1lID0gdm9sdW1lCgogICAgICAgIHRyeToKICAgICAgICAgICAgcmV0dXJuIElkCiAgICAgICAgZXhjZXB0IE5hbWVFcnJvcjoKICAgICAgICAgICAgc2VsZi5tb2R1bGUuZmFpbF9qc29uKG1zZz0iTm8gdm9sdW1lIHdpdGggdGhlIG5hbWU6ICVzLCB3YXMgZm91bmQiICUgc2VsZi5iYXNlX3ZvbHVtZV9uYW1lKQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIHNuYXBzaG90X2dyb3VwX2lkKHNlbGYpOgogICAgICAgIHVybCA9IHNlbGYudXJsICsgJ3N0b3JhZ2Utc3lzdGVtcy8lcy9zbmFwc2hvdC1ncm91cHMnICUgc2VsZi5zc2lkCiAgICAgICAgdHJ5OgogICAgICAgICAgICByYywgZGF0YSA9IHJlcXVlc3QodXJsLCBoZWFkZXJzPUhFQURFUlMsIHVybF91c2VybmFtZT1zZWxmLnVzZXIsIHVybF9wYXNzd29yZD1zZWxmLnB3ZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlX2NlcnRzPXNlbGYuY2VydHMpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBlcnIgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgc2VsZi5tb2R1bGUuZmFpbF9qc29uKG1zZz0iRmFpbGVkIHRvIGZldGNoIHNuYXBzaG90IGdyb3Vwcy4gIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIklkIFslc10uIEVycm9yIFslc10uIiAlIChzZWxmLnNzaWQsIHN0cihlcnIpKSkKICAgICAgICBmb3Igc3NnIGluIGRhdGE6CiAgICAgICAgICAgIGlmIHNzZ1snbmFtZSddID09IHNlbGYubmFtZToKICAgICAgICAgICAgICAgIHNlbGYuc3NnX2RhdGEgPSBzc2cKICAgICAgICAgICAgICAgIHJldHVybiBzc2dbJ2lkJ10KCiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICBAcHJvcGVydHkKICAgIGRlZiBzc2dfbmVlZHNfdXBkYXRlKHNlbGYpOgogICAgICAgIGlmIHNlbGYuc3NnX2RhdGFbJ2Z1bGxXYXJuVGhyZXNob2xkJ10gIT0gc2VsZi53YXJuaW5nX3RocmVzaG9sZCBvciBcCiAgICAgICAgICAgICAgICBzZWxmLnNzZ19kYXRhWydhdXRvRGVsZXRlTGltaXQnXSAhPSBzZWxmLmRlbGV0ZV9saW1pdCBvciBcCiAgICAgICAgICAgICAgICBzZWxmLnNzZ19kYXRhWydyZXBGdWxsUG9saWN5J10gIT0gc2VsZi5mdWxsX3BvbGljeSBvciBcCiAgICAgICAgICAgICAgICBzZWxmLnNzZ19kYXRhWydyb2xsYmFja1ByaW9yaXR5J10gIT0gc2VsZi5yb2xsYmFja19wcmlvcml0eToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgY3JlYXRlX3NuYXBzaG90X2dyb3VwKHNlbGYpOgogICAgICAgIHNlbGYucG9zdF9kYXRhID0gZGljdCgKICAgICAgICAgICAgYmFzZU1hcHBhYmxlT2JqZWN0SWQ9c2VsZi52b2x1bWVfaWQsCiAgICAgICAgICAgIG5hbWU9c2VsZi5uYW1lLAogICAgICAgICAgICByZXBvc2l0b3J5UGVyY2VudGFnZT1zZWxmLnJlcG9fcGN0LAogICAgICAgICAgICB3YXJuaW5nVGhyZXNob2xkPXNlbGYud2FybmluZ190aHJlc2hvbGQsCiAgICAgICAgICAgIGF1dG9EZWxldGVMaW1pdD1zZWxmLmRlbGV0ZV9saW1pdCwKICAgICAgICAgICAgZnVsbFBvbGljeT1zZWxmLmZ1bGxfcG9saWN5LAogICAgICAgICAgICBzdG9yYWdlUG9vbElkPXNlbGYucG9vbF9pZCwKICAgICAgICApCiAgICAgICAgc25hcHNob3QgPSAnc3RvcmFnZS1zeXN0ZW1zLyVzL3NuYXBzaG90LWdyb3VwcycgJSBzZWxmLnNzaWQKICAgICAgICB1cmwgPSBzZWxmLnVybCArIHNuYXBzaG90CiAgICAgICAgdHJ5OgogICAgICAgICAgICByYywgc2VsZi5zc2dfZGF0YSA9IHJlcXVlc3QodXJsLCBkYXRhPWpzb24uZHVtcHMoc2VsZi5wb3N0X2RhdGEpLCBtZXRob2Q9J1BPU1QnLCBoZWFkZXJzPUhFQURFUlMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmxfdXNlcm5hbWU9c2VsZi51c2VyLCB1cmxfcGFzc3dvcmQ9c2VsZi5wd2QsIHZhbGlkYXRlX2NlcnRzPXNlbGYuY2VydHMpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBlcnIgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgc2VsZi5tb2R1bGUuZmFpbF9qc29uKG1zZz0iRmFpbGVkIHRvIGNyZWF0ZSBzbmFwc2hvdCBncm91cC4gIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlNuYXBzaG90IGdyb3VwIFslc10uIElkIFslc10uIEVycm9yIFslc10uIiAlIChzZWxmLm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNzaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIoZXJyKSkpCgogICAgICAgIGlmIG5vdCBzZWxmLnNuYXBzaG90X2dyb3VwX2lkOgogICAgICAgICAgICBzZWxmLnNuYXBzaG90X2dyb3VwX2lkID0gc2VsZi5zc2dfZGF0YVsnaWQnXQoKICAgICAgICBpZiBzZWxmLnNzZ19uZWVkc191cGRhdGU6CiAgICAgICAgICAgIHNlbGYudXBkYXRlX3NzZygpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5tb2R1bGUuZXhpdF9qc29uKGNoYW5nZWQ9VHJ1ZSwgKipzZWxmLnNzZ19kYXRhKQoKICAgIGRlZiB1cGRhdGVfc3NnKHNlbGYpOgogICAgICAgIHNlbGYucG9zdF9kYXRhID0gZGljdCgKICAgICAgICAgICAgd2FybmluZ1RocmVzaG9sZD1zZWxmLndhcm5pbmdfdGhyZXNob2xkLAogICAgICAgICAgICBhdXRvRGVsZXRlTGltaXQ9c2VsZi5kZWxldGVfbGltaXQsCiAgICAgICAgICAgIGZ1bGxQb2xpY3k9c2VsZi5mdWxsX3BvbGljeSwKICAgICAgICAgICAgcm9sbGJhY2tQcmlvcml0eT1zZWxmLnJvbGxiYWNrX3ByaW9yaXR5CiAgICAgICAgKQoKICAgICAgICB1cmwgPSBzZWxmLnVybCArICJzdG9yYWdlLXN5c3RlbXMvJXMvc25hcHNob3QtZ3JvdXBzLyVzIiAlIChzZWxmLnNzaWQsIHNlbGYuc25hcHNob3RfZ3JvdXBfaWQpCiAgICAgICAgdHJ5OgogICAgICAgICAgICByYywgc2VsZi5zc2dfZGF0YSA9IHJlcXVlc3QodXJsLCBkYXRhPWpzb24uZHVtcHMoc2VsZi5wb3N0X2RhdGEpLCBtZXRob2Q9J1BPU1QnLCBoZWFkZXJzPUhFQURFUlMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmxfdXNlcm5hbWU9c2VsZi51c2VyLCB1cmxfcGFzc3dvcmQ9c2VsZi5wd2QsIHZhbGlkYXRlX2NlcnRzPXNlbGYuY2VydHMpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBlcnIgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgc2VsZi5tb2R1bGUuZmFpbF9qc29uKG1zZz0iRmFpbGVkIHRvIHVwZGF0ZSBzbmFwc2hvdCBncm91cC4gIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlNuYXBzaG90IGdyb3VwIFslc10uIElkIFslc10uIEVycm9yIFslc10uIiAlIChzZWxmLm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNzaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIoZXJyKSkpCgogICAgZGVmIGFwcGx5KHNlbGYpOgogICAgICAgIGlmIHNlbGYuc3RhdGUgPT0gJ2Fic2VudCc6CiAgICAgICAgICAgIGlmIHNlbGYuc25hcHNob3RfZ3JvdXBfaWQ6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgcmMsIHJlc3AgPSByZXF1ZXN0KAogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnVybCArICdzdG9yYWdlLXN5c3RlbXMvJXMvc25hcHNob3QtZ3JvdXBzLyVzJyAlIChzZWxmLnNzaWQsIHNlbGYuc25hcHNob3RfZ3JvdXBfaWQpLAogICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q9J0RFTEVURScsIGhlYWRlcnM9SEVBREVSUywgdXJsX3Bhc3N3b3JkPXNlbGYucHdkLCB1cmxfdXNlcm5hbWU9c2VsZi51c2VyLAogICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZV9jZXJ0cz1zZWxmLmNlcnRzKQogICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgIGVyciA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgICAgIHNlbGYubW9kdWxlLmZhaWxfanNvbihtc2c9IkZhaWxlZCB0byBkZWxldGUgc25hcHNob3QgZ3JvdXAuICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlNuYXBzaG90IGdyb3VwIFslc10uIElkIFslc10uIEVycm9yIFslc10uIiAlIChzZWxmLm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3NpZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyKGVycikpKQogICAgICAgICAgICAgICAgc2VsZi5tb2R1bGUuZXhpdF9qc29uKGNoYW5nZWQ9VHJ1ZSwgbXNnPSJTbmFwc2hvdCBncm91cCByZW1vdmVkIiwgKipzZWxmLnNzZ19kYXRhKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5tb2R1bGUuZXhpdF9qc29uKGNoYW5nZWQ9RmFsc2UsIG1zZz0iU25hcHNob3QgZ3JvdXAgYWJzZW50IikKCiAgICAgICAgZWxpZiBzZWxmLnNuYXBzaG90X2dyb3VwX2lkOgogICAgICAgICAgICBpZiBzZWxmLnNzZ19uZWVkc191cGRhdGU6CiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZV9zc2coKQogICAgICAgICAgICAgICAgc2VsZi5tb2R1bGUuZXhpdF9qc29uKGNoYW5nZWQ9VHJ1ZSwgKipzZWxmLnNzZ19kYXRhKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5tb2R1bGUuZXhpdF9qc29uKGNoYW5nZWQ9RmFsc2UsICoqc2VsZi5zc2dfZGF0YSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLmNyZWF0ZV9zbmFwc2hvdF9ncm91cCgpCgoKZGVmIG1haW4oKToKICAgIHZnID0gU25hcHNob3RHcm91cCgpCiAgICB2Zy5hcHBseSgpCgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIG1haW4oKQpQSwMEFAAAAAAA4rsrSzvfOZUwigEAMIoBAB0AAABhbnNpYmxlL21vZHVsZV91dGlscy9iYXNpYy5weSMgVGhpcyBjb2RlIGlzIHBhcnQgb2YgQW5zaWJsZSwgYnV0IGlzIGFuIGluZGVwZW5kZW50IGNvbXBvbmVudC4KIyBUaGlzIHBhcnRpY3VsYXIgZmlsZSBzbmlwcGV0LCBhbmQgdGhpcyBmaWxlIHNuaXBwZXQgb25seSwgaXMgQlNEIGxpY2Vuc2VkLgojIE1vZHVsZXMgeW91IHdyaXRlIHVzaW5nIHRoaXMgc25pcHBldCwgd2hpY2ggaXMgZW1iZWRkZWQgZHluYW1pY2FsbHkgYnkgQW5zaWJsZQojIHN0aWxsIGJlbG9uZyB0byB0aGUgYXV0aG9yIG9mIHRoZSBtb2R1bGUsIGFuZCBtYXkgYXNzaWduIHRoZWlyIG93biBsaWNlbnNlCiMgdG8gdGhlIGNvbXBsZXRlIHdvcmsuCiMKIyBDb3B5cmlnaHQgKGMpLCBNaWNoYWVsIERlSGFhbiA8bWljaGFlbC5kZWhhYW5AZ21haWwuY29tPiwgMjAxMi0yMDEzCiMgQ29weXJpZ2h0IChjKSwgVG9zaGlvIEt1cmF0b21pIDx0a3VyYXRvbWlAYW5zaWJsZS5jb20+IDIwMTYKIyBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwKIyBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6CiMKIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0CiMgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuCiMgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsCiMgICAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uCiMgICAgICBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KIwojIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTIElTIiBBTkQKIyBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRAojIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4KIyBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwKIyBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sCiMgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTCiMgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVAojIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRQojIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgojCgpCT09MRUFOU19UUlVFID0gWyd5JywgJ3llcycsICdvbicsICcxJywgJ3RydWUnLCAxLCBUcnVlXQpCT09MRUFOU19GQUxTRSA9IFsnbicsICdubycsICdvZmYnLCAnMCcsICdmYWxzZScsIDAsIEZhbHNlXQpCT09MRUFOUyA9IEJPT0xFQU5TX1RSVUUgKyBCT09MRUFOU19GQUxTRQoKU0laRV9SQU5HRVMgPSB7ICdZJzogMTw8ODAsICdaJzogMTw8NzAsICdFJzogMTw8NjAsICdQJzogMTw8NTAsICdUJzogMTw8NDAsICdHJzogMTw8MzAsICdNJzogMTw8MjAsICdLJzogMTw8MTAsICdCJzogMSB9CgpGSUxFX0FUVFJJQlVURVMgPSB7CiAgICAnQSc6ICdub2F0aW1lJywKICAgICdhJzogJ2FwcGVuZCcsCiAgICAnYyc6ICdjb21wcmVzc2VkJywKICAgICdDJzogJ25vY293JywKICAgICdkJzogJ25vZHVtcCcsCiAgICAnRCc6ICdkaXJzeW5jJywKICAgICdlJzogJ2V4dGVudHMnLAogICAgJ0UnOiAnZW5jcnlwdGVkJywKICAgICdoJzogJ2Jsb2Nrc2l6ZScsCiAgICAnaSc6ICdpbW11dGFibGUnLAogICAgJ0knOiAnaW5kZXhlZCcsCiAgICAnaic6ICdqb3VybmFsbGVkJywKICAgICdOJzogJ2lubGluZScsCiAgICAncyc6ICd6ZXJvJywKICAgICdTJzogJ3N5bmNocm9ub3VzJywKICAgICd0JzogJ25vdGFpbCcsCiAgICAnVCc6ICdibG9ja3Jvb3QnLAogICAgJ3UnOiAndW5kZWxldGUnLAogICAgJ1gnOiAnY29tcHJlc3NlZHJhdycsCiAgICAnWic6ICdjb21wcmVzc2VkZGlydHknLAp9CgojIGFuc2libGUgbW9kdWxlcyBjYW4gYmUgd3JpdHRlbiBpbiBhbnkgbGFuZ3VhZ2UuICBUbyBzaW1wbGlmeQojIGRldmVsb3BtZW50IG9mIFB5dGhvbiBtb2R1bGVzLCB0aGUgZnVuY3Rpb25zIGF2YWlsYWJsZSBoZXJlIGNhbgojIGJlIHVzZWQgdG8gZG8gbWFueSBjb21tb24gdGFza3MKCmltcG9ydCBsb2NhbGUKaW1wb3J0IG9zCmltcG9ydCByZQppbXBvcnQgc2hsZXgKaW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IHN5cwppbXBvcnQgdHlwZXMKaW1wb3J0IHRpbWUKaW1wb3J0IHNlbGVjdAppbXBvcnQgc2h1dGlsCmltcG9ydCBzdGF0CmltcG9ydCB0ZW1wZmlsZQppbXBvcnQgdHJhY2ViYWNrCmltcG9ydCBncnAKaW1wb3J0IHB3ZAppbXBvcnQgcGxhdGZvcm0KaW1wb3J0IGVycm5vCmltcG9ydCBkYXRldGltZQpmcm9tIGl0ZXJ0b29scyBpbXBvcnQgcmVwZWF0LCBjaGFpbgoKdHJ5OgogICAgaW1wb3J0IHN5c2xvZwogICAgSEFTX1NZU0xPRz1UcnVlCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIEhBU19TWVNMT0c9RmFsc2UKCnRyeToKICAgIGZyb20gc3lzdGVtZCBpbXBvcnQgam91cm5hbAogICAgaGFzX2pvdXJuYWwgPSBUcnVlCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIGhhc19qb3VybmFsID0gRmFsc2UKCkhBVkVfU0VMSU5VWD1GYWxzZQp0cnk6CiAgICBpbXBvcnQgc2VsaW51eAogICAgSEFWRV9TRUxJTlVYPVRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgcGFzcwoKIyBQeXRob24yICYgMyB3YXkgdG8gZ2V0IE5vbmVUeXBlCk5vbmVUeXBlID0gdHlwZShOb25lKQoKdHJ5OgogICAgZnJvbSBjb2xsZWN0aW9ucyBpbXBvcnQgU2VxdWVuY2UsIE1hcHBpbmcKZXhjZXB0IEltcG9ydEVycm9yOgogICAgIyBweXRob24yLjUKICAgIFNlcXVlbmNlID0gKGxpc3QsIHR1cGxlKQogICAgTWFwcGluZyA9IChkaWN0LCkKCiMgTm90ZTogV2hlbiBnZXR0aW5nIFNlcXVlbmNlIGZyb20gY29sbGVjdGlvbnMsIGl0IG1hdGNoZXMgd2l0aCBzdHJpbmdzLiAgSWYKIyB0aGlzIG1hdHRlcnMsIG1ha2Ugc3VyZSB0byBjaGVjayBmb3Igc3RyaW5ncyBiZWZvcmUgY2hlY2tpbmcgZm9yIHNlcXVlbmNldHlwZQp0cnk6CiAgICBmcm9tIGNvbGxlY3Rpb25zLmFiYyBpbXBvcnQgS2V5c1ZpZXcKICAgIFNFUVVFTkNFVFlQRSA9IChTZXF1ZW5jZSwgS2V5c1ZpZXcpCmV4Y2VwdDoKICAgIFNFUVVFTkNFVFlQRSA9IFNlcXVlbmNlCgp0cnk6CiAgICBpbXBvcnQganNvbgogICAgIyBEZXRlY3QgdGhlIHB5dGhvbi1qc29uIGxpYnJhcnkgd2hpY2ggaXMgaW5jb21wYXRpYmxlCiAgICAjIExvb2sgZm9yIHNpbXBsZWpzb24gaWYgdGhhdCdzIHRoZSBjYXNlCiAgICB0cnk6CiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoanNvbi5sb2FkcywgdHlwZXMuRnVuY3Rpb25UeXBlKSBvciBub3QgaXNpbnN0YW5jZShqc29uLmR1bXBzLCB0eXBlcy5GdW5jdGlvblR5cGUpOgogICAgICAgICAgICByYWlzZSBJbXBvcnRFcnJvcgogICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgIHJhaXNlIEltcG9ydEVycm9yCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIHRyeToKICAgICAgICBpbXBvcnQgc2ltcGxlanNvbiBhcyBqc29uCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgcHJpbnQoJ1xueyJtc2ciOiAiRXJyb3I6IGFuc2libGUgcmVxdWlyZXMgdGhlIHN0ZGxpYiBqc29uIG9yIHNpbXBsZWpzb24gbW9kdWxlLCBuZWl0aGVyIHdhcyBmb3VuZCEiLCAiZmFpbGVkIjogdHJ1ZX0nKQogICAgICAgIHN5cy5leGl0KDEpCiAgICBleGNlcHQgU3ludGF4RXJyb3I6CiAgICAgICAgcHJpbnQoJ1xueyJtc2ciOiAiU3ludGF4RXJyb3I6IHByb2JhYmx5IGR1ZSB0byBpbnN0YWxsZWQgc2ltcGxlanNvbiBiZWluZyBmb3IgYSBkaWZmZXJlbnQgcHl0aG9uIHZlcnNpb24iLCAiZmFpbGVkIjogdHJ1ZX0nKQogICAgICAgIHN5cy5leGl0KDEpCgpBVkFJTEFCTEVfSEFTSF9BTEdPUklUSE1TID0gZGljdCgpCnRyeToKICAgIGltcG9ydCBoYXNobGliCgogICAgIyBweXRob24gMi43LjkrIGFuZCAyLjcuMCsKICAgIGZvciBhdHRyaWJ1dGUgaW4gKCdhdmFpbGFibGVfYWxnb3JpdGhtcycsICdhbGdvcml0aG1zJyk6CiAgICAgICAgYWxnb3JpdGhtcyA9IGdldGF0dHIoaGFzaGxpYiwgYXR0cmlidXRlLCBOb25lKQogICAgICAgIGlmIGFsZ29yaXRobXM6CiAgICAgICAgICAgIGJyZWFrCiAgICBpZiBhbGdvcml0aG1zIGlzIE5vbmU6CiAgICAgICAgIyBweXRob24gMi41KwogICAgICAgIGFsZ29yaXRobXMgPSAoJ21kNScsICdzaGExJywgJ3NoYTIyNCcsICdzaGEyNTYnLCAnc2hhMzg0JywgJ3NoYTUxMicpCiAgICBmb3IgYWxnb3JpdGhtIGluIGFsZ29yaXRobXM6CiAgICAgICAgQVZBSUxBQkxFX0hBU0hfQUxHT1JJVEhNU1thbGdvcml0aG1dID0gZ2V0YXR0cihoYXNobGliLCBhbGdvcml0aG0pCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIGltcG9ydCBzaGEKICAgIEFWQUlMQUJMRV9IQVNIX0FMR09SSVRITVMgPSB7J3NoYTEnOiBzaGEuc2hhfQogICAgdHJ5OgogICAgICAgIGltcG9ydCBtZDUKICAgICAgICBBVkFJTEFCTEVfSEFTSF9BTEdPUklUSE1TWydtZDUnXSA9IG1kNS5tZDUKICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBwYXNzCgpmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLnB5Y29tcGF0MjQgaW1wb3J0IGdldF9leGNlcHRpb24sIGxpdGVyYWxfZXZhbApmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeCBpbXBvcnQgKFBZMiwgUFkzLCBiLCBiaW5hcnlfdHlwZSwgaW50ZWdlcl90eXBlcywKICAgICAgICBpdGVyaXRlbXMsIHRleHRfdHlwZSwgc3RyaW5nX3R5cGVzKQpmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeC5tb3ZlcyBpbXBvcnQgbWFwLCByZWR1Y2UsIHNobGV4X3F1b3RlCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuX3RleHQgaW1wb3J0IHRvX25hdGl2ZSwgdG9fYnl0ZXMsIHRvX3RleHQKClBBU1NXT1JEX01BVENIID0gcmUuY29tcGlsZShyJ14oPzouK1stX1xzXSk/cGFzcyg/OlstX1xzXT8oPzp3b3JkfHBocmFzZXx3cmR8d2QpPykoPzpbLV9cc10uKyk/JCcsIHJlLkkpCgpfTlVNQkVSVFlQRVMgPSB0dXBsZShsaXN0KGludGVnZXJfdHlwZXMpICsgW2Zsb2F0XSkKCiMgRGVwcmVjYXRlZCBjb21wYXQuICBPbmx5IGtlcHQgaW4gY2FzZSBhbm90aGVyIG1vZHVsZSB1c2VkIHRoZXNlIG5hbWVzICBVc2luZwojIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeCBpcyBwcmVmZXJyZWQKCk5VTUJFUlRZUEVTID0gX05VTUJFUlRZUEVTCgppbWFwID0gbWFwCgp0cnk6CiAgICAjIFB5dGhvbiAyCiAgICB1bmljb2RlCmV4Y2VwdCBOYW1lRXJyb3I6CiAgICAjIFB5dGhvbiAzCiAgICB1bmljb2RlID0gdGV4dF90eXBlCgp0cnk6CiAgICAjIFB5dGhvbiAyLjYrCiAgICBieXRlcwpleGNlcHQgTmFtZUVycm9yOgogICAgIyBQeXRob24gMi40CiAgICBieXRlcyA9IGJpbmFyeV90eXBlCgp0cnk6CiAgICAjIFB5dGhvbiAyCiAgICBiYXNlc3RyaW5nCmV4Y2VwdCBOYW1lRXJyb3I6CiAgICAjIFB5dGhvbiAzCiAgICBiYXNlc3RyaW5nID0gc3RyaW5nX3R5cGVzCgpfbGl0ZXJhbF9ldmFsID0gbGl0ZXJhbF9ldmFsCgojIEVuZCBvZiBkZXByZWNhdGVkIG5hbWVzCgojIEludGVybmFsIGdsb2JhbCBob2xkaW5nIHBhc3NlZCBpbiBwYXJhbXMuICBUaGlzIGlzIGNvbnN1bHRlZCBpbiBjYXNlCiMgbXVsdGlwbGUgQW5zaWJsZU1vZHVsZXMgYXJlIGNyZWF0ZWQuICBPdGhlcndpc2UgZWFjaCBBbnNpYmxlTW9kdWxlIHdvdWxkCiMgYXR0ZW1wdCB0byByZWFkIGZyb20gc3RkaW4uICBPdGhlciBjb2RlIHNob3VsZCBub3QgdXNlIHRoaXMgZGlyZWN0bHkgYXMgaXQKIyBpcyBhbiBpbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBkZXRhaWwKX0FOU0lCTEVfQVJHUyA9IE5vbmUKCkZJTEVfQ09NTU9OX0FSR1VNRU5UUz1kaWN0KAogICAgc3JjID0gZGljdCgpLAogICAgbW9kZSA9IGRpY3QodHlwZT0ncmF3JyksCiAgICBvd25lciA9IGRpY3QoKSwKICAgIGdyb3VwID0gZGljdCgpLAogICAgc2V1c2VyID0gZGljdCgpLAogICAgc2Vyb2xlID0gZGljdCgpLAogICAgc2VsZXZlbCA9IGRpY3QoKSwKICAgIHNldHlwZSA9IGRpY3QoKSwKICAgIGZvbGxvdyA9IGRpY3QodHlwZT0nYm9vbCcsIGRlZmF1bHQ9RmFsc2UpLAogICAgIyBub3QgdGFrZW4gYnkgdGhlIGZpbGUgbW9kdWxlLCBidXQgb3RoZXIgbW9kdWxlcyBjYWxsIGZpbGUgc28gaXQgbXVzdCBpZ25vcmUgdGhlbS4KICAgIGNvbnRlbnQgPSBkaWN0KG5vX2xvZz1UcnVlKSwKICAgIGJhY2t1cCA9IGRpY3QoKSwKICAgIGZvcmNlID0gZGljdCgpLAogICAgcmVtb3RlX3NyYyA9IGRpY3QoKSwgIyB1c2VkIGJ5IGFzc2VtYmxlCiAgICByZWdleHAgPSBkaWN0KCksICMgdXNlZCBieSBhc3NlbWJsZQogICAgZGVsaW1pdGVyID0gZGljdCgpLCAjIHVzZWQgYnkgYXNzZW1ibGUKICAgIGRpcmVjdG9yeV9tb2RlID0gZGljdCgpLCAjIHVzZWQgYnkgY29weQogICAgdW5zYWZlX3dyaXRlcyAgPSBkaWN0KHR5cGU9J2Jvb2wnKSwgIyBzaG91bGQgYmUgYXZhaWxhYmxlIHRvIGFueSBtb2R1bGUgdXNpbmcgYXRvbWljX21vdmUKICAgIGF0dHJpYnV0ZXMgPSBkaWN0KGFsaWFzZXM9WydhdHRyJ10pLAopCgpQQVNTV0RfQVJHX1JFID0gcmUuY29tcGlsZShyJ15bLV17MCwyfXBhc3NbLV0/KHdvcmR8d2QpPycpCgojIENhbid0IHVzZSAwNzc3NyBvbiBQeXRob24gMywgY2FuJ3QgdXNlIDBvNzc3NyBvbiBQeXRob24gMi40ClBFUk1fQklUUyA9IGludCgnMDc3NzcnLCA4KSAgICAgICMgZmlsZSBtb2RlIHBlcm1pc3Npb24gYml0cwpFWEVDX1BFUk1fQklUUyA9IGludCgnMDAxMTEnLCA4KSAjIGV4ZWN1dGUgcGVybWlzc2lvbiBiaXRzCkRFRkFVTFRfUEVSTSA9IGludCgnMDY2NicsIDgpICAgICMgZGVmYXVsdCBmaWxlIHBlcm1pc3Npb24gYml0cwoKCmRlZiBnZXRfcGxhdGZvcm0oKToKICAgICcnJyB3aGF0J3MgdGhlIHBsYXRmb3JtPyAgZXhhbXBsZTogTGludXggaXMgYSBwbGF0Zm9ybS4gJycnCiAgICByZXR1cm4gcGxhdGZvcm0uc3lzdGVtKCkKCmRlZiBnZXRfZGlzdHJpYnV0aW9uKCk6CiAgICAnJycgcmV0dXJuIHRoZSBkaXN0cmlidXRpb24gbmFtZSAnJycKICAgIGlmIHBsYXRmb3JtLnN5c3RlbSgpID09ICdMaW51eCc6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdXBwb3J0ZWRfZGlzdHMgPSBwbGF0Zm9ybS5fc3VwcG9ydGVkX2Rpc3RzICsgKCdhcmNoJywnYWxwaW5lJykKICAgICAgICAgICAgZGlzdHJpYnV0aW9uID0gcGxhdGZvcm0ubGludXhfZGlzdHJpYnV0aW9uKHN1cHBvcnRlZF9kaXN0cz1zdXBwb3J0ZWRfZGlzdHMpWzBdLmNhcGl0YWxpemUoKQogICAgICAgICAgICBpZiBub3QgZGlzdHJpYnV0aW9uIGFuZCBvcy5wYXRoLmlzZmlsZSgnL2V0Yy9zeXN0ZW0tcmVsZWFzZScpOgogICAgICAgICAgICAgICAgZGlzdHJpYnV0aW9uID0gcGxhdGZvcm0ubGludXhfZGlzdHJpYnV0aW9uKHN1cHBvcnRlZF9kaXN0cz1bJ3N5c3RlbSddKVswXS5jYXBpdGFsaXplKCkKICAgICAgICAgICAgICAgIGlmICdBbWF6b24nIGluIGRpc3RyaWJ1dGlvbjoKICAgICAgICAgICAgICAgICAgICBkaXN0cmlidXRpb24gPSAnQW1hem9uJwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBkaXN0cmlidXRpb24gPSAnT3RoZXJMaW51eCcKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICMgRklYTUU6IE1ldGhvZE1pc3NpbmcsIEkgYXNzdW1lPwogICAgICAgICAgICBkaXN0cmlidXRpb24gPSBwbGF0Zm9ybS5kaXN0KClbMF0uY2FwaXRhbGl6ZSgpCiAgICBlbHNlOgogICAgICAgIGRpc3RyaWJ1dGlvbiA9IE5vbmUKICAgIHJldHVybiBkaXN0cmlidXRpb24KCmRlZiBnZXRfZGlzdHJpYnV0aW9uX3ZlcnNpb24oKToKICAgICcnJyByZXR1cm4gdGhlIGRpc3RyaWJ1dGlvbiB2ZXJzaW9uICcnJwogICAgaWYgcGxhdGZvcm0uc3lzdGVtKCkgPT0gJ0xpbnV4JzoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGRpc3RyaWJ1dGlvbl92ZXJzaW9uID0gcGxhdGZvcm0ubGludXhfZGlzdHJpYnV0aW9uKClbMV0KICAgICAgICAgICAgaWYgbm90IGRpc3RyaWJ1dGlvbl92ZXJzaW9uIGFuZCBvcy5wYXRoLmlzZmlsZSgnL2V0Yy9zeXN0ZW0tcmVsZWFzZScpOgogICAgICAgICAgICAgICAgZGlzdHJpYnV0aW9uX3ZlcnNpb24gPSBwbGF0Zm9ybS5saW51eF9kaXN0cmlidXRpb24oc3VwcG9ydGVkX2Rpc3RzPVsnc3lzdGVtJ10pWzFdCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAjIEZJWE1FOiBNZXRob2RNaXNzaW5nLCBJIGFzc3VtZT8KICAgICAgICAgICAgZGlzdHJpYnV0aW9uX3ZlcnNpb24gPSBwbGF0Zm9ybS5kaXN0KClbMV0KICAgIGVsc2U6CiAgICAgICAgZGlzdHJpYnV0aW9uX3ZlcnNpb24gPSBOb25lCiAgICByZXR1cm4gZGlzdHJpYnV0aW9uX3ZlcnNpb24KCmRlZiBnZXRfYWxsX3N1YmNsYXNzZXMoY2xzKToKICAgICcnJwogICAgdXNlZCBieSBtb2R1bGVzIGxpa2UgSGFyZHdhcmUgb3IgTmV0d29yayBmYWN0IGNsYXNzZXMgdG8gcmV0cmlldmUgYWxsIHN1YmNsYXNzZXMgb2YgYSBnaXZlbiBjbGFzcy4KICAgIF9fc3ViY2xhc3Nlc19fIHJldHVybiBvbmx5IGRpcmVjdCBzdWIgY2xhc3Nlcy4gVGhpcyBvbmUgZ28gZG93biBpbnRvIHRoZSBjbGFzcyB0cmVlLgogICAgJycnCiAgICAjIFJldHJpZXZlIGRpcmVjdCBzdWJjbGFzc2VzCiAgICBzdWJjbGFzc2VzID0gY2xzLl9fc3ViY2xhc3Nlc19fKCkKICAgIHRvX3Zpc2l0ID0gbGlzdChzdWJjbGFzc2VzKQogICAgIyBUaGVuIHZpc2l0IGFsbCBzdWJjbGFzc2VzCiAgICB3aGlsZSB0b192aXNpdDoKICAgICAgICBmb3Igc2MgaW4gdG9fdmlzaXQ6CiAgICAgICAgICAgICMgVGhlIGN1cnJlbnQgY2xhc3MgaXMgbm93IHZpc2l0ZWQsIHNvIHJlbW92ZSBpdCBmcm9tIGxpc3QKICAgICAgICAgICAgdG9fdmlzaXQucmVtb3ZlKHNjKQogICAgICAgICAgICAjIEFwcGVuZGluZyBhbGwgc3ViY2xhc3NlcyB0byB2aXNpdCBhbmQga2VlcCBhIHJlZmVyZW5jZSBvZiBhdmFpbGFibGUgY2xhc3MKICAgICAgICAgICAgZm9yIHNzYyBpbiBzYy5fX3N1YmNsYXNzZXNfXygpOgogICAgICAgICAgICAgICAgc3ViY2xhc3Nlcy5hcHBlbmQoc3NjKQogICAgICAgICAgICAgICAgdG9fdmlzaXQuYXBwZW5kKHNzYykKICAgIHJldHVybiBzdWJjbGFzc2VzCgoKZGVmIGxvYWRfcGxhdGZvcm1fc3ViY2xhc3MoY2xzLCAqYXJncywgKiprd2FyZ3MpOgogICAgJycnCiAgICB1c2VkIGJ5IG1vZHVsZXMgbGlrZSBVc2VyIHRvIGhhdmUgZGlmZmVyZW50IGltcGxlbWVudGF0aW9ucyBiYXNlZCBvbiBkZXRlY3RlZCBwbGF0Zm9ybS4gIFNlZSBVc2VyCiAgICBtb2R1bGUgZm9yIGFuIGV4YW1wbGUuCiAgICAnJycKCiAgICB0aGlzX3BsYXRmb3JtID0gZ2V0X3BsYXRmb3JtKCkKICAgIGRpc3RyaWJ1dGlvbiA9IGdldF9kaXN0cmlidXRpb24oKQogICAgc3ViY2xhc3MgPSBOb25lCgogICAgIyBnZXQgdGhlIG1vc3Qgc3BlY2lmaWMgc3VwZXJjbGFzcyBmb3IgdGhpcyBwbGF0Zm9ybQogICAgaWYgZGlzdHJpYnV0aW9uIGlzIG5vdCBOb25lOgogICAgICAgIGZvciBzYyBpbiBnZXRfYWxsX3N1YmNsYXNzZXMoY2xzKToKICAgICAgICAgICAgaWYgc2MuZGlzdHJpYnV0aW9uIGlzIG5vdCBOb25lIGFuZCBzYy5kaXN0cmlidXRpb24gPT0gZGlzdHJpYnV0aW9uIGFuZCBzYy5wbGF0Zm9ybSA9PSB0aGlzX3BsYXRmb3JtOgogICAgICAgICAgICAgICAgc3ViY2xhc3MgPSBzYwogICAgaWYgc3ViY2xhc3MgaXMgTm9uZToKICAgICAgICBmb3Igc2MgaW4gZ2V0X2FsbF9zdWJjbGFzc2VzKGNscyk6CiAgICAgICAgICAgIGlmIHNjLnBsYXRmb3JtID09IHRoaXNfcGxhdGZvcm0gYW5kIHNjLmRpc3RyaWJ1dGlvbiBpcyBOb25lOgogICAgICAgICAgICAgICAgc3ViY2xhc3MgPSBzYwogICAgaWYgc3ViY2xhc3MgaXMgTm9uZToKICAgICAgICBzdWJjbGFzcyA9IGNscwoKICAgIHJldHVybiBzdXBlcihjbHMsIHN1YmNsYXNzKS5fX25ld19fKHN1YmNsYXNzKQoKCmRlZiBqc29uX2RpY3RfdW5pY29kZV90b19ieXRlcyhkLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKToKICAgICcnJyBSZWN1cnNpdmVseSBjb252ZXJ0IGRpY3Qga2V5cyBhbmQgdmFsdWVzIHRvIGJ5dGUgc3RyCgogICAgICAgIFNwZWNpYWxpemVkIGZvciBqc29uIHJldHVybiBiZWNhdXNlIHRoaXMgb25seSBoYW5kbGVzLCBsaXN0cywgdHVwbGVzLAogICAgICAgIGFuZCBkaWN0IGNvbnRhaW5lciB0eXBlcyAodGhlIGNvbnRhaW5lcnMgdGhhdCB0aGUganNvbiBtb2R1bGUgcmV0dXJucykKICAgICcnJwoKICAgIGlmIGlzaW5zdGFuY2UoZCwgdGV4dF90eXBlKToKICAgICAgICByZXR1cm4gdG9fYnl0ZXMoZCwgZW5jb2Rpbmc9ZW5jb2RpbmcsIGVycm9ycz1lcnJvcnMpCiAgICBlbGlmIGlzaW5zdGFuY2UoZCwgZGljdCk6CiAgICAgICAgcmV0dXJuIGRpY3QobWFwKGpzb25fZGljdF91bmljb2RlX3RvX2J5dGVzLCBpdGVyaXRlbXMoZCksIHJlcGVhdChlbmNvZGluZyksIHJlcGVhdChlcnJvcnMpKSkKICAgIGVsaWYgaXNpbnN0YW5jZShkLCBsaXN0KToKICAgICAgICByZXR1cm4gbGlzdChtYXAoanNvbl9kaWN0X3VuaWNvZGVfdG9fYnl0ZXMsIGQsIHJlcGVhdChlbmNvZGluZyksIHJlcGVhdChlcnJvcnMpKSkKICAgIGVsaWYgaXNpbnN0YW5jZShkLCB0dXBsZSk6CiAgICAgICAgcmV0dXJuIHR1cGxlKG1hcChqc29uX2RpY3RfdW5pY29kZV90b19ieXRlcywgZCwgcmVwZWF0KGVuY29kaW5nKSwgcmVwZWF0KGVycm9ycykpKQogICAgZWxzZToKICAgICAgICByZXR1cm4gZAoKZGVmIGpzb25fZGljdF9ieXRlc190b191bmljb2RlKGQsIGVuY29kaW5nPSd1dGYtOCcsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpOgogICAgJycnIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgZGljdCBrZXlzIGFuZCB2YWx1ZXMgdG8gYnl0ZSBzdHIKCiAgICAgICAgU3BlY2lhbGl6ZWQgZm9yIGpzb24gcmV0dXJuIGJlY2F1c2UgdGhpcyBvbmx5IGhhbmRsZXMsIGxpc3RzLCB0dXBsZXMsCiAgICAgICAgYW5kIGRpY3QgY29udGFpbmVyIHR5cGVzICh0aGUgY29udGFpbmVycyB0aGF0IHRoZSBqc29uIG1vZHVsZSByZXR1cm5zKQogICAgJycnCgogICAgaWYgaXNpbnN0YW5jZShkLCBiaW5hcnlfdHlwZSk6CiAgICAgICAgIyBXYXJuaW5nLCBjYW4gdHJhY2ViYWNrCiAgICAgICAgcmV0dXJuIHRvX3RleHQoZCwgZW5jb2Rpbmc9ZW5jb2RpbmcsIGVycm9ycz1lcnJvcnMpCiAgICBlbGlmIGlzaW5zdGFuY2UoZCwgZGljdCk6CiAgICAgICAgcmV0dXJuIGRpY3QobWFwKGpzb25fZGljdF9ieXRlc190b191bmljb2RlLCBpdGVyaXRlbXMoZCksIHJlcGVhdChlbmNvZGluZyksIHJlcGVhdChlcnJvcnMpKSkKICAgIGVsaWYgaXNpbnN0YW5jZShkLCBsaXN0KToKICAgICAgICByZXR1cm4gbGlzdChtYXAoanNvbl9kaWN0X2J5dGVzX3RvX3VuaWNvZGUsIGQsIHJlcGVhdChlbmNvZGluZyksIHJlcGVhdChlcnJvcnMpKSkKICAgIGVsaWYgaXNpbnN0YW5jZShkLCB0dXBsZSk6CiAgICAgICAgcmV0dXJuIHR1cGxlKG1hcChqc29uX2RpY3RfYnl0ZXNfdG9fdW5pY29kZSwgZCwgcmVwZWF0KGVuY29kaW5nKSwgcmVwZWF0KGVycm9ycykpKQogICAgZWxzZToKICAgICAgICByZXR1cm4gZAoKZGVmIHJldHVybl92YWx1ZXMob2JqKToKICAgICIiIiBSZXR1cm4gbmF0aXZlIHN0cmluZ2lmaWVkIHZhbHVlcyBmcm9tIGRhdGFzdHJ1Y3R1cmVzLgoKICAgIEZvciB1c2Ugd2l0aCByZW1vdmluZyBzZW5zaXRpdmUgdmFsdWVzIHByZS1qc29uaWZpY2F0aW9uLiIiIgogICAgaWYgaXNpbnN0YW5jZShvYmosICh0ZXh0X3R5cGUsIGJpbmFyeV90eXBlKSk6CiAgICAgICAgaWYgb2JqOgogICAgICAgICAgICB5aWVsZCB0b19uYXRpdmUob2JqLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQogICAgICAgIHJldHVybgogICAgZWxpZiBpc2luc3RhbmNlKG9iaiwgU0VRVUVOQ0VUWVBFKToKICAgICAgICBmb3IgZWxlbWVudCBpbiBvYmo6CiAgICAgICAgICAgIGZvciBzdWJlbGVtZW50IGluIHJldHVybl92YWx1ZXMoZWxlbWVudCk6CiAgICAgICAgICAgICAgICB5aWVsZCBzdWJlbGVtZW50CiAgICBlbGlmIGlzaW5zdGFuY2Uob2JqLCBNYXBwaW5nKToKICAgICAgICBmb3IgZWxlbWVudCBpbiBvYmouaXRlbXMoKToKICAgICAgICAgICAgZm9yIHN1YmVsZW1lbnQgaW4gcmV0dXJuX3ZhbHVlcyhlbGVtZW50WzFdKToKICAgICAgICAgICAgICAgIHlpZWxkIHN1YmVsZW1lbnQKICAgIGVsaWYgaXNpbnN0YW5jZShvYmosIChib29sLCBOb25lVHlwZSkpOgogICAgICAgICMgVGhpcyBtdXN0IGNvbWUgYmVmb3JlIGludCBiZWNhdXNlIGJvb2xzIGFyZSBhbHNvIGludHMKICAgICAgICByZXR1cm4KICAgIGVsaWYgaXNpbnN0YW5jZShvYmosIE5VTUJFUlRZUEVTKToKICAgICAgICB5aWVsZCB0b19uYXRpdmUob2JqLCBub25zdHJpbmc9J3NpbXBsZXJlcHInKQogICAgZWxzZToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ1Vua25vd24gcGFyYW1ldGVyIHR5cGU6ICVzLCAlcycgJSAodHlwZShvYmopLCBvYmopKQoKZGVmIHJlbW92ZV92YWx1ZXModmFsdWUsIG5vX2xvZ19zdHJpbmdzKToKICAgICIiIiBSZW1vdmUgc3RyaW5ncyBpbiBub19sb2dfc3RyaW5ncyBmcm9tIHZhbHVlLiAgSWYgdmFsdWUgaXMgYSBjb250YWluZXIKICAgIHR5cGUsIHRoZW4gcmVtb3ZlIGEgbG90IG1vcmUiIiIKICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsICh0ZXh0X3R5cGUsIGJpbmFyeV90eXBlKSk6CiAgICAgICAgIyBOZWVkIG5hdGl2ZSBzdHIgdHlwZQogICAgICAgIG5hdGl2ZV9zdHJfdmFsdWUgPSB2YWx1ZQogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIHRleHRfdHlwZSk6CiAgICAgICAgICAgIHZhbHVlX2lzX3RleHQgPSBUcnVlCiAgICAgICAgICAgIGlmIFBZMjoKICAgICAgICAgICAgICAgIG5hdGl2ZV9zdHJfdmFsdWUgPSB0b19ieXRlcyh2YWx1ZSwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKICAgICAgICBlbGlmIGlzaW5zdGFuY2UodmFsdWUsIGJpbmFyeV90eXBlKToKICAgICAgICAgICAgdmFsdWVfaXNfdGV4dCA9IEZhbHNlCiAgICAgICAgICAgIGlmIFBZMzoKICAgICAgICAgICAgICAgIG5hdGl2ZV9zdHJfdmFsdWUgPSB0b190ZXh0KHZhbHVlLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQoKICAgICAgICBpZiBuYXRpdmVfc3RyX3ZhbHVlIGluIG5vX2xvZ19zdHJpbmdzOgogICAgICAgICAgICByZXR1cm4gJ1ZBTFVFX1NQRUNJRklFRF9JTl9OT19MT0dfUEFSQU1FVEVSJwogICAgICAgIGZvciBvbWl0X21lIGluIG5vX2xvZ19zdHJpbmdzOgogICAgICAgICAgICBuYXRpdmVfc3RyX3ZhbHVlID0gbmF0aXZlX3N0cl92YWx1ZS5yZXBsYWNlKG9taXRfbWUsICcqJyAqIDgpCgogICAgICAgIGlmIHZhbHVlX2lzX3RleHQgYW5kIGlzaW5zdGFuY2UobmF0aXZlX3N0cl92YWx1ZSwgYmluYXJ5X3R5cGUpOgogICAgICAgICAgICB2YWx1ZSA9IHRvX3RleHQobmF0aXZlX3N0cl92YWx1ZSwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9yZXBsYWNlJykKICAgICAgICBlbGlmIG5vdCB2YWx1ZV9pc190ZXh0IGFuZCBpc2luc3RhbmNlKG5hdGl2ZV9zdHJfdmFsdWUsIHRleHRfdHlwZSk6CiAgICAgICAgICAgIHZhbHVlID0gdG9fYnl0ZXMobmF0aXZlX3N0cl92YWx1ZSwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9yZXBsYWNlJykKICAgICAgICBlbHNlOgogICAgICAgICAgICB2YWx1ZSA9IG5hdGl2ZV9zdHJfdmFsdWUKICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgU0VRVUVOQ0VUWVBFKToKICAgICAgICByZXR1cm4gW3JlbW92ZV92YWx1ZXMoZWxlbSwgbm9fbG9nX3N0cmluZ3MpIGZvciBlbGVtIGluIHZhbHVlXQogICAgZWxpZiBpc2luc3RhbmNlKHZhbHVlLCBNYXBwaW5nKToKICAgICAgICByZXR1cm4gZGljdCgoaywgcmVtb3ZlX3ZhbHVlcyh2LCBub19sb2dfc3RyaW5ncykpIGZvciBrLCB2IGluIHZhbHVlLml0ZW1zKCkpCiAgICBlbGlmIGlzaW5zdGFuY2UodmFsdWUsIHR1cGxlKGNoYWluKE5VTUJFUlRZUEVTLCAoYm9vbCwgTm9uZVR5cGUpKSkpOgogICAgICAgIHN0cmluZ3lfdmFsdWUgPSB0b19uYXRpdmUodmFsdWUsIGVuY29kaW5nPSd1dGYtOCcsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgaWYgc3RyaW5neV92YWx1ZSBpbiBub19sb2dfc3RyaW5nczoKICAgICAgICAgICAgcmV0dXJuICdWQUxVRV9TUEVDSUZJRURfSU5fTk9fTE9HX1BBUkFNRVRFUicKICAgICAgICBmb3Igb21pdF9tZSBpbiBub19sb2dfc3RyaW5nczoKICAgICAgICAgICAgaWYgb21pdF9tZSBpbiBzdHJpbmd5X3ZhbHVlOgogICAgICAgICAgICAgICAgcmV0dXJuICdWQUxVRV9TUEVDSUZJRURfSU5fTk9fTE9HX1BBUkFNRVRFUicKICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOgogICAgICAgIHZhbHVlID0gdmFsdWUuaXNvZm9ybWF0KCkKICAgIGVsc2U6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdWYWx1ZSBvZiB1bmtub3duIHR5cGU6ICVzLCAlcycgJSAodHlwZSh2YWx1ZSksIHZhbHVlKSkKICAgIHJldHVybiB2YWx1ZQoKCmRlZiBoZXVyaXN0aWNfbG9nX3Nhbml0aXplKGRhdGEsIG5vX2xvZ192YWx1ZXM9Tm9uZSk6CiAgICAnJycgUmVtb3ZlIHN0cmluZ3MgdGhhdCBsb29rIGxpa2UgcGFzc3dvcmRzIGZyb20gbG9nIG1lc3NhZ2VzICcnJwogICAgIyBDdXJyZW50bHkgZmlsdGVyczoKICAgICMgdXNlcjpwYXNzQGZvby93aGF0ZXZlciBhbmQgaHR0cDovL3VzZXJuYW1lOnBhc3NAd2hlcmV2ZXIvZm9vCiAgICAjIFRoaXMgY29kZSBoYXMgZmFsc2UgcG9zaXRpdmVzIGFuZCBjb25zdW1lcyBwYXJ0cyBvZiBsb2dzIHRoYXQgYXJlCiAgICAjIG5vdCBwYXNzd2RzCgogICAgIyBiZWdpbjogc3RhcnQgb2YgYSBwYXNzd2QgY29udGFpbmluZyBzdHJpbmcKICAgICMgZW5kOiBlbmQgb2YgYSBwYXNzd2QgY29udGFpbmluZyBzdHJpbmcKICAgICMgc2VwOiBjaGFyIGJldHdlZW4gdXNlciBhbmQgcGFzc3dkCiAgICAjIHByZXZfYmVnaW46IHdoZXJlIGluIHRoZSBvdmVyYWxsIHN0cmluZyB0byBzdGFydCBhIHNlYXJjaCBmb3IKICAgICMgICBhIHBhc3N3ZAogICAgIyBzZXBfc2VhcmNoX2VuZDogd2hlcmUgaW4gdGhlIHN0cmluZyB0byBlbmQgYSBzZWFyY2ggZm9yIHRoZSBzZXAKICAgIGRhdGEgPSB0b19uYXRpdmUoZGF0YSkKCiAgICBvdXRwdXQgPSBbXQogICAgYmVnaW4gPSBsZW4oZGF0YSkKICAgIHByZXZfYmVnaW4gPSBiZWdpbgogICAgc2VwID0gMQogICAgd2hpbGUgc2VwOgogICAgICAgICMgRmluZCB0aGUgcG90ZW50aWFsIGVuZCBvZiBhIHBhc3N3ZAogICAgICAgIHRyeToKICAgICAgICAgICAgZW5kID0gZGF0YS5yaW5kZXgoJ0AnLCAwLCBiZWdpbikKICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgIyBObyBwYXNzd2QgaW4gdGhlIHJlc3Qgb2YgdGhlIGRhdGEKICAgICAgICAgICAgb3V0cHV0Lmluc2VydCgwLCBkYXRhWzA6YmVnaW5dKQogICAgICAgICAgICBicmVhawoKICAgICAgICAjIFNlYXJjaCBmb3IgdGhlIGJlZ2lubmluZyBvZiBhIHBhc3N3ZAogICAgICAgIHNlcCA9IE5vbmUKICAgICAgICBzZXBfc2VhcmNoX2VuZCA9IGVuZAogICAgICAgIHdoaWxlIG5vdCBzZXA6CiAgICAgICAgICAgICMgVVJMLXN0eWxlIHVzZXJuYW1lK3Bhc3N3b3JkCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGJlZ2luID0gZGF0YS5yaW5kZXgoJzovLycsIDAsIHNlcF9zZWFyY2hfZW5kKQogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgICAgICMgTm8gdXJsIHN0eWxlIGluIHRoZSBkYXRhLCBjaGVjayBmb3Igc3NoIHN0eWxlIGluIHRoZQogICAgICAgICAgICAgICAgIyByZXN0IG9mIHRoZSBzdHJpbmcKICAgICAgICAgICAgICAgIGJlZ2luID0gMAogICAgICAgICAgICAjIFNlYXJjaCBmb3Igc2VwYXJhdG9yCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlcCA9IGRhdGEuaW5kZXgoJzonLCBiZWdpbiArIDMsIGVuZCkKICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgICAgICAjIE5vIHNlcGFyYXRvcjsgY2hvaWNlczoKICAgICAgICAgICAgICAgIGlmIGJlZ2luID09IDA6CiAgICAgICAgICAgICAgICAgICAgIyBTZWFyY2hlZCB0aGUgd2hvbGUgc3RyaW5nIHNvIHRoZXJlJ3Mgbm8gcGFzc3dvcmQKICAgICAgICAgICAgICAgICAgICAjIGhlcmUuICBSZXR1cm4gdGhlIHJlbWFpbmluZyBkYXRhCiAgICAgICAgICAgICAgICAgICAgb3V0cHV0Lmluc2VydCgwLCBkYXRhWzA6YmVnaW5dKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAjIFNlYXJjaCBmb3IgYSBkaWZmZXJlbnQgYmVnaW5uaW5nIG9mIHRoZSBwYXNzd29yZCBmaWVsZC4KICAgICAgICAgICAgICAgIHNlcF9zZWFyY2hfZW5kID0gYmVnaW4KICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgaWYgc2VwOgogICAgICAgICAgICAjIFBhc3N3b3JkIHdhcyBmb3VuZDsgcmVtb3ZlIGl0LgogICAgICAgICAgICBvdXRwdXQuaW5zZXJ0KDAsIGRhdGFbZW5kOnByZXZfYmVnaW5dKQogICAgICAgICAgICBvdXRwdXQuaW5zZXJ0KDAsICcqKioqKioqKicpCiAgICAgICAgICAgIG91dHB1dC5pbnNlcnQoMCwgZGF0YVtiZWdpbjpzZXAgKyAxXSkKICAgICAgICAgICAgcHJldl9iZWdpbiA9IGJlZ2luCgogICAgb3V0cHV0ID0gJycuam9pbihvdXRwdXQpCiAgICBpZiBub19sb2dfdmFsdWVzOgogICAgICAgIG91dHB1dCA9IHJlbW92ZV92YWx1ZXMob3V0cHV0LCBub19sb2dfdmFsdWVzKQogICAgcmV0dXJuIG91dHB1dAoKZGVmIGJ5dGVzX3RvX2h1bWFuKHNpemUsIGlzYml0cz1GYWxzZSwgdW5pdD1Ob25lKToKCiAgICBiYXNlID0gJ0J5dGVzJwogICAgaWYgaXNiaXRzOgogICAgICAgIGJhc2UgPSAnYml0cycKICAgIHN1ZmZpeCA9ICcnCgogICAgZm9yIHN1ZmZpeCwgbGltaXQgaW4gc29ydGVkKGl0ZXJpdGVtcyhTSVpFX1JBTkdFUyksIGtleT1sYW1iZGEgaXRlbTogLWl0ZW1bMV0pOgogICAgICAgIGlmICh1bml0IGlzIE5vbmUgYW5kIHNpemUgPj0gbGltaXQpIG9yIHVuaXQgaXMgbm90IE5vbmUgYW5kIHVuaXQudXBwZXIoKSA9PSBzdWZmaXhbMF06CiAgICAgICAgICAgIGJyZWFrCgogICAgaWYgbGltaXQgIT0gMToKICAgICAgICBzdWZmaXggKz0gYmFzZVswXQogICAgZWxzZToKICAgICAgICBzdWZmaXggPSBiYXNlCgogICAgcmV0dXJuICclLjJmICVzJyAlIChmbG9hdChzaXplKS8gbGltaXQsIHN1ZmZpeCkKCmRlZiBodW1hbl90b19ieXRlcyhudW1iZXIsIGRlZmF1bHRfdW5pdD1Ob25lLCBpc2JpdHM9RmFsc2UpOgoKICAgICcnJwogICAgQ29udmVydCBudW1iZXIgaW4gc3RyaW5nIGZvcm1hdCBpbnRvIGJ5dGVzIChleDogJzJLJyA9PiAyMDQ4KSBvciB1c2luZyB1bml0IGFyZ3VtZW50CiAgICBleDoKICAgICAgaHVtYW5fdG9fYnl0ZXMoJzEwTScpIDw9PiBodW1hbl90b19ieXRlcygxMCwgJ00nKQogICAgJycnCiAgICBtID0gcmUuc2VhcmNoKCdeXHMqKFxkKlwuP1xkKilccyooW0EtWmEtel0rKT8nLCBzdHIobnVtYmVyKSwgZmxhZ3M9cmUuSUdOT1JFQ0FTRSkKICAgIGlmIG0gaXMgTm9uZToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJodW1hbl90b19ieXRlcygpIGNhbid0IGludGVycHJldCBmb2xsb3dpbmcgc3RyaW5nOiAlcyIgJSBzdHIobnVtYmVyKSkKICAgIHRyeToKICAgICAgICBudW0gPSBmbG9hdChtLmdyb3VwKDEpKQogICAgZXhjZXB0OgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImh1bWFuX3RvX2J5dGVzKCkgY2FuJ3QgaW50ZXJwcmV0IGZvbGxvd2luZyBudW1iZXI6ICVzIChvcmlnaW5hbCBpbnB1dCBzdHJpbmc6ICVzKSIgJSAobS5ncm91cCgxKSwgbnVtYmVyKSkKCiAgICB1bml0ID0gbS5ncm91cCgyKQogICAgaWYgdW5pdCBpcyBOb25lOgogICAgICAgIHVuaXQgPSBkZWZhdWx0X3VuaXQKCiAgICBpZiB1bml0IGlzIE5vbmU6CiAgICAgICAgJycnIE5vIHVuaXQgZ2l2ZW4sIHJldHVybmluZyByYXcgbnVtYmVyICcnJwogICAgICAgIHJldHVybiBpbnQocm91bmQobnVtKSkKICAgIHJhbmdlX2tleSA9IHVuaXRbMF0udXBwZXIoKQogICAgdHJ5OgogICAgICAgIGxpbWl0ID0gU0laRV9SQU5HRVNbcmFuZ2Vfa2V5XQogICAgZXhjZXB0OgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImh1bWFuX3RvX2J5dGVzKCkgZmFpbGVkIHRvIGNvbnZlcnQgJXMgKHVuaXQgPSAlcykuIFRoZSBzdWZmaXggbXVzdCBiZSBvbmUgb2YgJXMiICUgKG51bWJlciwgdW5pdCwgIiwgIi5qb2luKFNJWkVfUkFOR0VTLmtleXMoKSkpKQoKICAgICMgZGVmYXVsdCB2YWx1ZQogICAgdW5pdF9jbGFzcyA9ICdCJwogICAgdW5pdF9jbGFzc19uYW1lID0gJ2J5dGUnCiAgICAjIGhhbmRsaW5nIGJpdHMgY2FzZQogICAgaWYgaXNiaXRzOgogICAgICAgIHVuaXRfY2xhc3MgPSAnYicKICAgICAgICB1bml0X2NsYXNzX25hbWUgPSAnYml0JwogICAgIyBjaGVjayB1bml0IHZhbHVlIGlmIG1vcmUgdGhhbiBvbmUgY2hhcmFjdGVyIChLQiwgTUIpCiAgICBpZiBsZW4odW5pdCkgPiAxOgogICAgICAgIGV4cGVjdF9tZXNzYWdlID0gJ2V4cGVjdCAlcyVzIG9yICVzJyAlIChyYW5nZV9rZXksIHVuaXRfY2xhc3MsIHJhbmdlX2tleSkKICAgICAgICBpZiByYW5nZV9rZXkgPT0gJ0InOgogICAgICAgICAgICBleHBlY3RfbWVzc2FnZSA9ICdleHBlY3QgJXMgb3IgJXMnICUgKHVuaXRfY2xhc3MsIHVuaXRfY2xhc3NfbmFtZSkKCiAgICAgICAgaWYgdW5pdF9jbGFzc19uYW1lIGluIHVuaXQubG93ZXIoKToKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsaWYgdW5pdFsxXSAhPSB1bml0X2NsYXNzOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJodW1hbl90b19ieXRlcygpIGZhaWxlZCB0byBjb252ZXJ0ICVzLiBWYWx1ZSBpcyBub3QgYSB2YWxpZCBzdHJpbmcgKCVzKSIgJSAobnVtYmVyLCBleHBlY3RfbWVzc2FnZSkpCgogICAgcmV0dXJuIGludChyb3VuZChudW0gKiBsaW1pdCkpCgpkZWYgaXNfZXhlY3V0YWJsZShwYXRoKToKICAgICcnJ2lzIHRoZSBnaXZlbiBwYXRoIGV4ZWN1dGFibGU/CgogICAgTGltaXRhdGlvbnM6CiAgICAqIERvZXMgbm90IGFjY291bnQgZm9yIEZTQUNMcy4KICAgICogTW9zdCB0aW1lcyB3ZSByZWFsbHkgd2FudCB0byBrbm93ICJDYW4gdGhlIGN1cnJlbnQgdXNlciBleGVjdXRlIHRoaXMKICAgICAgZmlsZSIgIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgdGVsbCB1cyB0aGF0LCBvbmx5IGlmIGFuIGV4ZWN1dGUgYml0IGlzIHNldC4KICAgICcnJwogICAgIyBUaGVzZSBhcmUgYWxsIGJpdGZpZWxkcyBzbyBmaXJzdCBiaXR3aXNlLW9yIGFsbCB0aGUgcGVybWlzc2lvbnMgd2UncmUKICAgICMgbG9va2luZyBmb3IsIHRoZW4gYml0d2lzZS1hbmQgd2l0aCB0aGUgZmlsZSdzIG1vZGUgdG8gZGV0ZXJtaW5lIGlmIGFueQogICAgIyBleGVjdXRlIGJpdHMgYXJlIHNldC4KICAgIHJldHVybiAoKHN0YXQuU19JWFVTUiB8IHN0YXQuU19JWEdSUCB8IHN0YXQuU19JWE9USCkgJiBvcy5zdGF0KHBhdGgpW3N0YXQuU1RfTU9ERV0pCgpkZWYgX2xvYWRfcGFyYW1zKCk6CiAgICAnJycgcmVhZCB0aGUgbW9kdWxlcyBwYXJhbWV0ZXJzIGFuZCBzdG9yZSB0aGVtIGdsb2JhbGx5LgoKICAgIFRoaXMgZnVuY3Rpb24gbWF5IGJlIG5lZWRlZCBmb3IgY2VydGFpbiB2ZXJ5IGR5bmFtaWMgY3VzdG9tIG1vZHVsZXMgd2hpY2gKICAgIHdhbnQgdG8gcHJvY2VzcyB0aGUgcGFyYW1ldGVycyB0aGF0IGFyZSBiZWluZyBoYW5kZWQgdGhlIG1vZHVsZS4gIFNpbmNlCiAgICB0aGlzIGlzIHNvIGNsb3NlbHkgdGllZCB0byB0aGUgaW1wbGVtZW50YXRpb24gb2YgbW9kdWxlcyB3ZSBjYW5ub3QKICAgIGd1YXJhbnRlZSBBUEkgc3RhYmlsaXR5IGZvciBpdCAoaXQgbWF5IGNoYW5nZSBiZXR3ZWVuIHZlcnNpb25zKSBob3dldmVyIHdlCiAgICB3aWxsIHRyeSBub3QgdG8gYnJlYWsgaXQgZ3JhdHVpdG91c2x5LiAgSXQgaXMgY2VydGFpbmx5IG1vcmUgZnV0dXJlLXByb29mCiAgICB0byBjYWxsIHRoaXMgZnVuY3Rpb24gYW5kIGNvbnN1bWUgaXRzIG91dHB1dHMgdGhhbiB0byBpbXBsZW1lbnQgdGhlIGxvZ2ljCiAgICBpbnNpZGUgaXQgYXMgYSBjb3B5IGluIHlvdXIgb3duIGNvZGUuCiAgICAnJycKICAgIGdsb2JhbCBfQU5TSUJMRV9BUkdTCiAgICBpZiBfQU5TSUJMRV9BUkdTIGlzIG5vdCBOb25lOgogICAgICAgIGJ1ZmZlciA9IF9BTlNJQkxFX0FSR1MKICAgIGVsc2U6CiAgICAgICAgIyBkZWJ1ZyBvdmVycmlkZXMgdG8gcmVhZCBhcmdzIGZyb20gZmlsZSBvciBjbWRsaW5lCgogICAgICAgICMgQXZvaWQgdHJhY2ViYWNrcyB3aGVuIGxvY2FsZSBpcyBub24tdXRmOAogICAgICAgICMgV2UgY29udHJvbCB0aGUgYXJncyBhbmQgd2UgcGFzcyB0aGVtIGFzIHV0ZjgKICAgICAgICBpZiBsZW4oc3lzLmFyZ3YpID4gMToKICAgICAgICAgICAgaWYgb3MucGF0aC5pc2ZpbGUoc3lzLmFyZ3ZbMV0pOgogICAgICAgICAgICAgICAgZmQgPSBvcGVuKHN5cy5hcmd2WzFdLCAncmInKQogICAgICAgICAgICAgICAgYnVmZmVyID0gZmQucmVhZCgpCiAgICAgICAgICAgICAgICBmZC5jbG9zZSgpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBidWZmZXIgPSBzeXMuYXJndlsxXQogICAgICAgICAgICAgICAgaWYgUFkzOgogICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5lbmNvZGUoJ3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVlc2NhcGUnKQogICAgICAgICMgZGVmYXVsdCBjYXNlLCByZWFkIGZyb20gc3RkaW4KICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBQWTI6CiAgICAgICAgICAgICAgICBidWZmZXIgPSBzeXMuc3RkaW4ucmVhZCgpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBidWZmZXIgPSBzeXMuc3RkaW4uYnVmZmVyLnJlYWQoKQogICAgICAgIF9BTlNJQkxFX0FSR1MgPSBidWZmZXIKCiAgICB0cnk6CiAgICAgICAgcGFyYW1zID0ganNvbi5sb2FkcyhidWZmZXIuZGVjb2RlKCd1dGYtOCcpKQogICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgIyBUaGlzIGhlbHBlciB1c2VkIHRvbyBlYXJseSBmb3IgZmFpbF9qc29uIHRvIHdvcmsuCiAgICAgICAgcHJpbnQoJ1xueyJtc2ciOiAiRXJyb3I6IE1vZHVsZSB1bmFibGUgdG8gZGVjb2RlIHZhbGlkIEpTT04gb24gc3RkaW4uICBVbmFibGUgdG8gZmlndXJlIG91dCB3aGF0IHBhcmFtZXRlcnMgd2VyZSBwYXNzZWQiLCAiZmFpbGVkIjogdHJ1ZX0nKQogICAgICAgIHN5cy5leGl0KDEpCgogICAgaWYgUFkyOgogICAgICAgIHBhcmFtcyA9IGpzb25fZGljdF91bmljb2RlX3RvX2J5dGVzKHBhcmFtcykKCiAgICB0cnk6CiAgICAgICAgcmV0dXJuIHBhcmFtc1snQU5TSUJMRV9NT0RVTEVfQVJHUyddCiAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgIyBUaGlzIGhlbHBlciBkb2VzIG5vdCBoYXZlIGFjY2VzcyB0byBmYWlsX2pzb24gc28gd2UgaGF2ZSB0byBwcmludAogICAgICAgICMganNvbiBvdXRwdXQgb24gb3VyIG93bi4KICAgICAgICBwcmludCgnXG57Im1zZyI6ICJFcnJvcjogTW9kdWxlIHVuYWJsZSB0byBsb2NhdGUgQU5TSUJMRV9NT0RVTEVfQVJHUyBpbiBqc29uIGRhdGEgZnJvbSBzdGRpbi4gIFVuYWJsZSB0byBmaWd1cmUgb3V0IHdoYXQgcGFyYW1ldGVycyB3ZXJlIHBhc3NlZCIsICcKICAgICAgICAgICAgICAnImZhaWxlZCI6IHRydWV9JykKICAgICAgICBzeXMuZXhpdCgxKQoKZGVmIGVudl9mYWxsYmFjaygqYXJncywgKiprd2FyZ3MpOgogICAgJycnIExvYWQgdmFsdWUgZnJvbSBlbnZpcm9ubWVudCAnJycKICAgIGZvciBhcmcgaW4gYXJnczoKICAgICAgICBpZiBhcmcgaW4gb3MuZW52aXJvbjoKICAgICAgICAgICAgcmV0dXJuIG9zLmVudmlyb25bYXJnXQogICAgZWxzZToKICAgICAgICByYWlzZSBBbnNpYmxlRmFsbGJhY2tOb3RGb3VuZAoKZGVmIF9sZW5pZW50X2xvd2VyY2FzZShsc3QpOgogICAgIiIiTG93ZXJjYXNlIGVsZW1lbnRzIG9mIGEgbGlzdC4KCiAgICBJZiBhbiBlbGVtZW50IGlzIG5vdCBhIHN0cmluZywgcGFzcyBpdCB0aHJvdWdoIHVudG91Y2hlZC4KICAgICIiIgogICAgbG93ZXJlZCA9IFtdCiAgICBmb3IgdmFsdWUgaW4gbHN0OgogICAgICAgIHRyeToKICAgICAgICAgICAgbG93ZXJlZC5hcHBlbmQodmFsdWUubG93ZXIoKSkKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIGxvd2VyZWQuYXBwZW5kKHZhbHVlKQogICAgcmV0dXJuIGxvd2VyZWQKCmRlZiBmb3JtYXRfYXR0cmlidXRlcyhhdHRyaWJ1dGVzKToKICAgIGF0dHJpYnV0ZV9saXN0ID0gW10KICAgIGZvciBhdHRyIGluIGF0dHJpYnV0ZXM6CiAgICAgICAgaWYgYXR0ciBpbiBGSUxFX0FUVFJJQlVURVM6CiAgICAgICAgICAgIGF0dHJpYnV0ZV9saXN0LmFwcGVuZChGSUxFX0FUVFJJQlVURVNbYXR0cl0pCiAgICByZXR1cm4gYXR0cmlidXRlX2xpc3QKCmRlZiBnZXRfZmxhZ3NfZnJvbV9hdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpOgogICAgZmxhZ3MgPSBbXQogICAgZm9yIGtleSxhdHRyIGluIEZJTEVfQVRUUklCVVRFUy5pdGVtcygpOgogICAgICAgIGlmIGF0dHIgaW4gYXR0cmlidXRlczoKICAgICAgICAgICAgZmxhZ3MuYXBwZW5kKGtleSkKICAgIHJldHVybiAnJy5qb2luKGZsYWdzKQoKY2xhc3MgQW5zaWJsZUZhbGxiYWNrTm90Rm91bmQoRXhjZXB0aW9uKToKICAgIHBhc3MKCgpjbGFzcyBBbnNpYmxlTW9kdWxlKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgYXJndW1lbnRfc3BlYywgYnlwYXNzX2NoZWNrcz1GYWxzZSwgbm9fbG9nPUZhbHNlLAogICAgICAgICAgICAgICAgIGNoZWNrX2ludmFsaWRfYXJndW1lbnRzPVRydWUsIG11dHVhbGx5X2V4Y2x1c2l2ZT1Ob25lLCByZXF1aXJlZF90b2dldGhlcj1Ob25lLAogICAgICAgICAgICAgICAgIHJlcXVpcmVkX29uZV9vZj1Ob25lLCBhZGRfZmlsZV9jb21tb25fYXJncz1GYWxzZSwgc3VwcG9ydHNfY2hlY2tfbW9kZT1GYWxzZSwKICAgICAgICAgICAgICAgICByZXF1aXJlZF9pZj1Ob25lKToKCiAgICAgICAgJycnCiAgICAgICAgY29tbW9uIGNvZGUgZm9yIHF1aWNrbHkgYnVpbGRpbmcgYW4gYW5zaWJsZSBtb2R1bGUgaW4gUHl0aG9uCiAgICAgICAgKGFsdGhvdWdoIHlvdSBjYW4gd3JpdGUgbW9kdWxlcyBpbiBhbnl0aGluZyB0aGF0IGNhbiByZXR1cm4gSlNPTikKICAgICAgICBzZWUgbGlicmFyeS8qIGZvciBleGFtcGxlcwogICAgICAgICcnJwoKICAgICAgICBzZWxmLl9uYW1lID0gb3MucGF0aC5iYXNlbmFtZShfX2ZpbGVfXykgI2luaXRpYWxpemUgbmFtZSB1bnRpbCB3ZSBjYW4gcGFyc2UgZnJvbSBvcHRpb25zCiAgICAgICAgc2VsZi5hcmd1bWVudF9zcGVjID0gYXJndW1lbnRfc3BlYwogICAgICAgIHNlbGYuc3VwcG9ydHNfY2hlY2tfbW9kZSA9IHN1cHBvcnRzX2NoZWNrX21vZGUKICAgICAgICBzZWxmLmNoZWNrX21vZGUgPSBGYWxzZQogICAgICAgIHNlbGYubm9fbG9nID0gbm9fbG9nCiAgICAgICAgc2VsZi5jbGVhbnVwX2ZpbGVzID0gW10KICAgICAgICBzZWxmLl9kZWJ1ZyA9IEZhbHNlCiAgICAgICAgc2VsZi5fZGlmZiA9IEZhbHNlCiAgICAgICAgc2VsZi5fc29ja2V0X3BhdGggPSBOb25lCiAgICAgICAgc2VsZi5fdmVyYm9zaXR5ID0gMAogICAgICAgICMgTWF5IGJlIHVzZWQgdG8gc2V0IG1vZGlmaWNhdGlvbnMgdG8gdGhlIGVudmlyb25tZW50IGZvciBhbnkKICAgICAgICAjIHJ1bl9jb21tYW5kIGludm9jYXRpb24KICAgICAgICBzZWxmLnJ1bl9jb21tYW5kX2Vudmlyb25fdXBkYXRlID0ge30KICAgICAgICBzZWxmLl93YXJuaW5ncyA9IFtdCiAgICAgICAgc2VsZi5fZGVwcmVjYXRpb25zID0gW10KCiAgICAgICAgc2VsZi5hbGlhc2VzID0ge30KICAgICAgICBzZWxmLl9sZWdhbF9pbnB1dHMgPSBbJ19hbnNpYmxlX2NoZWNrX21vZGUnLCAnX2Fuc2libGVfbm9fbG9nJywgJ19hbnNpYmxlX2RlYnVnJywgJ19hbnNpYmxlX2RpZmYnLCAnX2Fuc2libGVfdmVyYm9zaXR5JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ19hbnNpYmxlX3NlbGludXhfc3BlY2lhbF9mcycsICdfYW5zaWJsZV9tb2R1bGVfbmFtZScsICdfYW5zaWJsZV92ZXJzaW9uJywgJ19hbnNpYmxlX3N5c2xvZ19mYWNpbGl0eScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdfYW5zaWJsZV9zb2NrZXQnXQoKICAgICAgICBpZiBhZGRfZmlsZV9jb21tb25fYXJnczoKICAgICAgICAgICAgZm9yIGssIHYgaW4gRklMRV9DT01NT05fQVJHVU1FTlRTLml0ZW1zKCk6CiAgICAgICAgICAgICAgICBpZiBrIG5vdCBpbiBzZWxmLmFyZ3VtZW50X3NwZWM6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5hcmd1bWVudF9zcGVjW2tdID0gdgoKICAgICAgICBzZWxmLl9sb2FkX3BhcmFtcygpCiAgICAgICAgc2VsZi5fc2V0X2ZhbGxiYWNrcygpCgogICAgICAgICMgYXBwZW5kIHRvIGxlZ2FsX2lucHV0cyBhbmQgdGhlbiBwb3NzaWJseSBjaGVjayBhZ2FpbnN0IHRoZW0KICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYuYWxpYXNlcyA9IHNlbGYuX2hhbmRsZV9hbGlhc2VzKCkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICMgVXNlIGV4Y2VwdGlvbnMgaGVyZSBiZWNhdXNlIGl0IGlzbid0IHNhZmUgdG8gY2FsbCBmYWlsX2pzb24gdW50aWwgbm9fbG9nIGlzIHByb2Nlc3NlZAogICAgICAgICAgICBwcmludCgnXG57ImZhaWxlZCI6IHRydWUsICJtc2ciOiAiTW9kdWxlIGFsaWFzIGVycm9yOiAlcyJ9JyAlIHN0cihlKSkKICAgICAgICAgICAgc3lzLmV4aXQoMSkKCiAgICAgICAgIyBTYXZlIHBhcmFtZXRlciB2YWx1ZXMgdGhhdCBzaG91bGQgbmV2ZXIgYmUgbG9nZ2VkCiAgICAgICAgc2VsZi5ub19sb2dfdmFsdWVzID0gc2V0KCkKICAgICAgICAjIFVzZSB0aGUgYXJnc3BlYyB0byBkZXRlcm1pbmUgd2hpY2ggYXJncyBhcmUgbm9fbG9nCiAgICAgICAgZm9yIGFyZ19uYW1lLCBhcmdfb3B0cyBpbiBzZWxmLmFyZ3VtZW50X3NwZWMuaXRlbXMoKToKICAgICAgICAgICAgaWYgYXJnX29wdHMuZ2V0KCdub19sb2cnLCBGYWxzZSk6CiAgICAgICAgICAgICAgICAjIEZpbmQgdGhlIHZhbHVlIGZvciB0aGUgbm9fbG9nJ2QgcGFyYW0KICAgICAgICAgICAgICAgIG5vX2xvZ19vYmplY3QgPSBzZWxmLnBhcmFtcy5nZXQoYXJnX25hbWUsIE5vbmUpCiAgICAgICAgICAgICAgICBpZiBub19sb2dfb2JqZWN0OgogICAgICAgICAgICAgICAgICAgIHNlbGYubm9fbG9nX3ZhbHVlcy51cGRhdGUocmV0dXJuX3ZhbHVlcyhub19sb2dfb2JqZWN0KSkKCiAgICAgICAgICAgIGlmIGFyZ19vcHRzLmdldCgncmVtb3ZlZF9pbl92ZXJzaW9uJykgaXMgbm90IE5vbmUgYW5kIGFyZ19uYW1lIGluIHNlbGYucGFyYW1zOgogICAgICAgICAgICAgICAgc2VsZi5fZGVwcmVjYXRpb25zLmFwcGVuZCh7CiAgICAgICAgICAgICAgICAgICAgJ21zZyc6ICJQYXJhbSAnJXMnIGlzIGRlcHJlY2F0ZWQuIFNlZSB0aGUgbW9kdWxlIGRvY3MgZm9yIG1vcmUgaW5mb3JtYXRpb24iICUgYXJnX25hbWUsCiAgICAgICAgICAgICAgICAgICAgJ3ZlcnNpb24nOiBhcmdfb3B0cy5nZXQoJ3JlbW92ZWRfaW5fdmVyc2lvbicpCiAgICAgICAgICAgICAgICB9KQoKICAgICAgICAjIGNoZWNrIHRoZSBsb2NhbGUgYXMgc2V0IGJ5IHRoZSBjdXJyZW50IGVudmlyb25tZW50LCBhbmQgcmVzZXQgdG8KICAgICAgICAjIGEga25vd24gdmFsaWQgKExBTkc9QykgaWYgaXQncyBhbiBpbnZhbGlkL3VuYXZhaWxhYmxlIGxvY2FsZQogICAgICAgIHNlbGYuX2NoZWNrX2xvY2FsZSgpCgogICAgICAgIHNlbGYuX2NoZWNrX2FyZ3VtZW50cyhjaGVja19pbnZhbGlkX2FyZ3VtZW50cykKCiAgICAgICAgIyBjaGVjayBleGNsdXNpdmUgZWFybHkKICAgICAgICBpZiBub3QgYnlwYXNzX2NoZWNrczoKICAgICAgICAgICAgc2VsZi5fY2hlY2tfbXV0dWFsbHlfZXhjbHVzaXZlKG11dHVhbGx5X2V4Y2x1c2l2ZSkKCiAgICAgICAgc2VsZi5fc2V0X2RlZmF1bHRzKHByZT1UcnVlKQoKICAgICAgICBzZWxmLl9DSEVDS19BUkdVTUVOVF9UWVBFU19ESVNQQVRDSEVSID0gewogICAgICAgICAgICAnc3RyJzogc2VsZi5fY2hlY2tfdHlwZV9zdHIsCiAgICAgICAgICAgICdsaXN0Jzogc2VsZi5fY2hlY2tfdHlwZV9saXN0LAogICAgICAgICAgICAnZGljdCc6IHNlbGYuX2NoZWNrX3R5cGVfZGljdCwKICAgICAgICAgICAgJ2Jvb2wnOiBzZWxmLl9jaGVja190eXBlX2Jvb2wsCiAgICAgICAgICAgICdpbnQnOiBzZWxmLl9jaGVja190eXBlX2ludCwKICAgICAgICAgICAgJ2Zsb2F0Jzogc2VsZi5fY2hlY2tfdHlwZV9mbG9hdCwKICAgICAgICAgICAgJ3BhdGgnOiBzZWxmLl9jaGVja190eXBlX3BhdGgsCiAgICAgICAgICAgICdyYXcnOiBzZWxmLl9jaGVja190eXBlX3JhdywKICAgICAgICAgICAgJ2pzb25hcmcnOiBzZWxmLl9jaGVja190eXBlX2pzb25hcmcsCiAgICAgICAgICAgICdqc29uJzogc2VsZi5fY2hlY2tfdHlwZV9qc29uYXJnLAogICAgICAgICAgICAnYnl0ZXMnOiBzZWxmLl9jaGVja190eXBlX2J5dGVzLAogICAgICAgICAgICAnYml0cyc6IHNlbGYuX2NoZWNrX3R5cGVfYml0cywKICAgICAgICB9CiAgICAgICAgaWYgbm90IGJ5cGFzc19jaGVja3M6CiAgICAgICAgICAgIHNlbGYuX2NoZWNrX3JlcXVpcmVkX2FyZ3VtZW50cygpCiAgICAgICAgICAgIHNlbGYuX2NoZWNrX2FyZ3VtZW50X3R5cGVzKCkKICAgICAgICAgICAgc2VsZi5fY2hlY2tfYXJndW1lbnRfdmFsdWVzKCkKICAgICAgICAgICAgc2VsZi5fY2hlY2tfcmVxdWlyZWRfdG9nZXRoZXIocmVxdWlyZWRfdG9nZXRoZXIpCiAgICAgICAgICAgIHNlbGYuX2NoZWNrX3JlcXVpcmVkX29uZV9vZihyZXF1aXJlZF9vbmVfb2YpCiAgICAgICAgICAgIHNlbGYuX2NoZWNrX3JlcXVpcmVkX2lmKHJlcXVpcmVkX2lmKQoKICAgICAgICBzZWxmLl9zZXRfZGVmYXVsdHMocHJlPUZhbHNlKQoKICAgICAgICBpZiBub3Qgc2VsZi5ub19sb2c6CiAgICAgICAgICAgIHNlbGYuX2xvZ19pbnZvY2F0aW9uKCkKCiAgICAgICAgIyBmaW5hbGx5LCBtYWtlIHN1cmUgd2UncmUgaW4gYSBzYW5lIHdvcmtpbmcgZGlyCiAgICAgICAgc2VsZi5fc2V0X2N3ZCgpCgogICAgZGVmIHdhcm4oc2VsZiwgd2FybmluZyk6CgogICAgICAgIGlmIGlzaW5zdGFuY2Uod2FybmluZywgc3RyaW5nX3R5cGVzKToKICAgICAgICAgICAgc2VsZi5fd2FybmluZ3MuYXBwZW5kKHdhcm5pbmcpCiAgICAgICAgICAgIHNlbGYubG9nKCdbV0FSTklOR10gJXMnICUgd2FybmluZykKICAgICAgICBlbHNlOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoIndhcm4gcmVxdWlyZXMgYSBzdHJpbmcgbm90IGEgJXMiICUgdHlwZSh3YXJuaW5nKSkKCiAgICBkZWYgZGVwcmVjYXRlKHNlbGYsIG1zZywgdmVyc2lvbj1Ob25lKToKICAgICAgICBpZiBpc2luc3RhbmNlKG1zZywgc3RyaW5nX3R5cGVzKToKICAgICAgICAgICAgc2VsZi5fZGVwcmVjYXRpb25zLmFwcGVuZCh7CiAgICAgICAgICAgICAgICAnbXNnJzogbXNnLAogICAgICAgICAgICAgICAgJ3ZlcnNpb24nOiB2ZXJzaW9uCiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIHNlbGYubG9nKCdbREVQUkVDQVRJT04gV0FSTklOR10gJXMgJXMnICUgKG1zZywgdmVyc2lvbikpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJkZXByZWNhdGUgcmVxdWlyZXMgYSBzdHJpbmcgbm90IGEgJXMiICUgdHlwZShtc2cpKQoKICAgIGRlZiBsb2FkX2ZpbGVfY29tbW9uX2FyZ3VtZW50cyhzZWxmLCBwYXJhbXMpOgogICAgICAgICcnJwogICAgICAgIG1hbnkgbW9kdWxlcyBkZWFsIHdpdGggZmlsZXMsIHRoaXMgZW5jYXBzdWxhdGVzIGNvbW1vbgogICAgICAgIG9wdGlvbnMgdGhhdCB0aGUgZmlsZSBtb2R1bGUgYWNjZXB0cyBzdWNoIHRoYXQgaXQgaXMgZGlyZWN0bHkKICAgICAgICBhdmFpbGFibGUgdG8gYWxsIG1vZHVsZXMgYW5kIHRoZXkgY2FuIHNoYXJlIGNvZGUuCiAgICAgICAgJycnCgogICAgICAgIHBhdGggPSBwYXJhbXMuZ2V0KCdwYXRoJywgcGFyYW1zLmdldCgnZGVzdCcsIE5vbmUpKQogICAgICAgIGlmIHBhdGggaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIHt9CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcGF0aCA9IG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnMocGF0aCkpCgogICAgICAgIGJfcGF0aCA9IHRvX2J5dGVzKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgIyBpZiB0aGUgcGF0aCBpcyBhIHN5bWxpbmssIGFuZCB3ZSdyZSBmb2xsb3dpbmcgbGlua3MsIGdldAogICAgICAgICMgdGhlIHRhcmdldCBvZiB0aGUgbGluayBpbnN0ZWFkIGZvciB0ZXN0aW5nCiAgICAgICAgaWYgcGFyYW1zLmdldCgnZm9sbG93JywgRmFsc2UpIGFuZCBvcy5wYXRoLmlzbGluayhiX3BhdGgpOgogICAgICAgICAgICBiX3BhdGggPSBvcy5wYXRoLnJlYWxwYXRoKGJfcGF0aCkKICAgICAgICAgICAgcGF0aCA9IHRvX25hdGl2ZShiX3BhdGgpCgogICAgICAgIG1vZGUgICA9IHBhcmFtcy5nZXQoJ21vZGUnLCBOb25lKQogICAgICAgIG93bmVyICA9IHBhcmFtcy5nZXQoJ293bmVyJywgTm9uZSkKICAgICAgICBncm91cCAgPSBwYXJhbXMuZ2V0KCdncm91cCcsIE5vbmUpCgogICAgICAgICMgc2VsaW51eCByZWxhdGVkIG9wdGlvbnMKICAgICAgICBzZXVzZXIgICAgPSBwYXJhbXMuZ2V0KCdzZXVzZXInLCBOb25lKQogICAgICAgIHNlcm9sZSAgICA9IHBhcmFtcy5nZXQoJ3Nlcm9sZScsIE5vbmUpCiAgICAgICAgc2V0eXBlICAgID0gcGFyYW1zLmdldCgnc2V0eXBlJywgTm9uZSkKICAgICAgICBzZWxldmVsICAgPSBwYXJhbXMuZ2V0KCdzZWxldmVsJywgTm9uZSkKICAgICAgICBzZWNvbnRleHQgPSBbc2V1c2VyLCBzZXJvbGUsIHNldHlwZV0KCiAgICAgICAgaWYgc2VsZi5zZWxpbnV4X21sc19lbmFibGVkKCk6CiAgICAgICAgICAgIHNlY29udGV4dC5hcHBlbmQoc2VsZXZlbCkKCiAgICAgICAgZGVmYXVsdF9zZWNvbnRleHQgPSBzZWxmLnNlbGludXhfZGVmYXVsdF9jb250ZXh0KHBhdGgpCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKGRlZmF1bHRfc2Vjb250ZXh0KSk6CiAgICAgICAgICAgIGlmIGkgaXMgbm90IE5vbmUgYW5kIHNlY29udGV4dFtpXSA9PSAnX2RlZmF1bHQnOgogICAgICAgICAgICAgICAgc2Vjb250ZXh0W2ldID0gZGVmYXVsdF9zZWNvbnRleHRbaV0KCiAgICAgICAgYXR0cmlidXRlcyA9IHBhcmFtcy5nZXQoJ2F0dHJpYnV0ZXMnLCBOb25lKQogICAgICAgIHJldHVybiBkaWN0KAogICAgICAgICAgICBwYXRoPXBhdGgsIG1vZGU9bW9kZSwgb3duZXI9b3duZXIsIGdyb3VwPWdyb3VwLAogICAgICAgICAgICBzZXVzZXI9c2V1c2VyLCBzZXJvbGU9c2Vyb2xlLCBzZXR5cGU9c2V0eXBlLAogICAgICAgICAgICBzZWxldmVsPXNlbGV2ZWwsIHNlY29udGV4dD1zZWNvbnRleHQsIGF0dHJpYnV0ZXM9YXR0cmlidXRlcywKICAgICAgICApCgoKICAgICMgRGV0ZWN0IHdoZXRoZXIgdXNpbmcgc2VsaW51eCB0aGF0IGlzIE1MUy1hd2FyZS4KICAgICMgV2hpbGUgdGhpcyBtZWFucyB5b3UgY2FuIHNldCB0aGUgbGV2ZWwvcmFuZ2Ugd2l0aAogICAgIyBzZWxpbnV4LmxzZXRmaWxlY29uKCksIGl0IG1heSBvciBtYXkgbm90IG1lYW4gdGhhdCB5b3UKICAgICMgd2lsbCBnZXQgdGhlIHNlbGV2ZWwgYXMgcGFydCBvZiB0aGUgY29udGV4dCByZXR1cm5lZAogICAgIyBieSBzZWxpbnV4LmxnZXRmaWxlY29uKCkuCgogICAgZGVmIHNlbGludXhfbWxzX2VuYWJsZWQoc2VsZik6CiAgICAgICAgaWYgbm90IEhBVkVfU0VMSU5VWDoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgaWYgc2VsaW51eC5pc19zZWxpbnV4X21sc19lbmFibGVkKCkgPT0gMToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgc2VsaW51eF9lbmFibGVkKHNlbGYpOgogICAgICAgIGlmIG5vdCBIQVZFX1NFTElOVVg6CiAgICAgICAgICAgIHNlZW5hYmxlZCA9IHNlbGYuZ2V0X2Jpbl9wYXRoKCdzZWxpbnV4ZW5hYmxlZCcpCiAgICAgICAgICAgIGlmIHNlZW5hYmxlZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIChyYyxvdXQsZXJyKSA9IHNlbGYucnVuX2NvbW1hbmQoc2VlbmFibGVkKQogICAgICAgICAgICAgICAgaWYgcmMgPT0gMDoKICAgICAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9IkFib3J0aW5nLCB0YXJnZXQgdXNlcyBzZWxpbnV4IGJ1dCBweXRob24gYmluZGluZ3MgKGxpYnNlbGludXgtcHl0aG9uKSBhcmVuJ3QgaW5zdGFsbGVkISIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIGlmIHNlbGludXguaXNfc2VsaW51eF9lbmFibGVkKCkgPT0gMToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAjIERldGVybWluZSB3aGV0aGVyIHdlIG5lZWQgYSBwbGFjZWhvbGRlciBmb3Igc2VsZXZlbC9tbHMKICAgIGRlZiBzZWxpbnV4X2luaXRpYWxfY29udGV4dChzZWxmKToKICAgICAgICBjb250ZXh0ID0gW05vbmUsIE5vbmUsIE5vbmVdCiAgICAgICAgaWYgc2VsZi5zZWxpbnV4X21sc19lbmFibGVkKCk6CiAgICAgICAgICAgIGNvbnRleHQuYXBwZW5kKE5vbmUpCiAgICAgICAgcmV0dXJuIGNvbnRleHQKCiAgICAjIElmIHNlbGludXggZmFpbHMgdG8gZmluZCBhIGRlZmF1bHQsIHJldHVybiBhbiBhcnJheSBvZiBOb25lCiAgICBkZWYgc2VsaW51eF9kZWZhdWx0X2NvbnRleHQoc2VsZiwgcGF0aCwgbW9kZT0wKToKICAgICAgICBjb250ZXh0ID0gc2VsZi5zZWxpbnV4X2luaXRpYWxfY29udGV4dCgpCiAgICAgICAgaWYgbm90IEhBVkVfU0VMSU5VWCBvciBub3Qgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldCA9IHNlbGludXgubWF0Y2hwYXRoY29uKHRvX25hdGl2ZShwYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKSwgbW9kZSkKICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQKICAgICAgICBpZiByZXRbMF0gPT0gLTE6CiAgICAgICAgICAgIHJldHVybiBjb250ZXh0CiAgICAgICAgIyBMaW1pdCBzcGxpdCB0byA0IGJlY2F1c2UgdGhlIHNlbGV2ZWwsIHRoZSBsYXN0IGluIHRoZSBsaXN0LAogICAgICAgICMgbWF5IGNvbnRhaW4gJzonIGNoYXJhY3RlcnMKICAgICAgICBjb250ZXh0ID0gcmV0WzFdLnNwbGl0KCc6JywgMykKICAgICAgICByZXR1cm4gY29udGV4dAoKICAgIGRlZiBzZWxpbnV4X2NvbnRleHQoc2VsZiwgcGF0aCk6CiAgICAgICAgY29udGV4dCA9IHNlbGYuc2VsaW51eF9pbml0aWFsX2NvbnRleHQoKQogICAgICAgIGlmIG5vdCBIQVZFX1NFTElOVVggb3Igbm90IHNlbGYuc2VsaW51eF9lbmFibGVkKCk6CiAgICAgICAgICAgIHJldHVybiBjb250ZXh0CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXQgPSBzZWxpbnV4LmxnZXRmaWxlY29uX3Jhdyh0b19uYXRpdmUocGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykpCiAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgaWYgZS5lcnJubyA9PSBlcnJuby5FTk9FTlQ6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0ncGF0aCAlcyBkb2VzIG5vdCBleGlzdCcgJSBwYXRoKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocGF0aD1wYXRoLCBtc2c9J2ZhaWxlZCB0byByZXRyaWV2ZSBzZWxpbnV4IGNvbnRleHQnKQogICAgICAgIGlmIHJldFswXSA9PSAtMToKICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQKICAgICAgICAjIExpbWl0IHNwbGl0IHRvIDQgYmVjYXVzZSB0aGUgc2VsZXZlbCwgdGhlIGxhc3QgaW4gdGhlIGxpc3QsCiAgICAgICAgIyBtYXkgY29udGFpbiAnOicgY2hhcmFjdGVycwogICAgICAgIGNvbnRleHQgPSByZXRbMV0uc3BsaXQoJzonLCAzKQogICAgICAgIHJldHVybiBjb250ZXh0CgogICAgZGVmIHVzZXJfYW5kX2dyb3VwKHNlbGYsIHBhdGgsIGV4cGFuZD1UcnVlKToKICAgICAgICBiX3BhdGggPSB0b19ieXRlcyhwYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3N0cmljdCcpCiAgICAgICAgaWYgZXhwYW5kOgogICAgICAgICAgICBiX3BhdGggPSBvcy5wYXRoLmV4cGFuZHVzZXIob3MucGF0aC5leHBhbmR2YXJzKGJfcGF0aCkpCiAgICAgICAgc3QgPSBvcy5sc3RhdChiX3BhdGgpCiAgICAgICAgdWlkID0gc3Quc3RfdWlkCiAgICAgICAgZ2lkID0gc3Quc3RfZ2lkCiAgICAgICAgcmV0dXJuICh1aWQsIGdpZCkKCiAgICBkZWYgZmluZF9tb3VudF9wb2ludChzZWxmLCBwYXRoKToKICAgICAgICBwYXRoX2lzX2J5dGVzID0gRmFsc2UKICAgICAgICBpZiBpc2luc3RhbmNlKHBhdGgsIGJpbmFyeV90eXBlKToKICAgICAgICAgICAgcGF0aF9pc19ieXRlcyA9IFRydWUKCiAgICAgICAgYl9wYXRoID0gb3MucGF0aC5yZWFscGF0aCh0b19ieXRlcyhvcy5wYXRoLmV4cGFuZHVzZXIob3MucGF0aC5leHBhbmR2YXJzKHBhdGgpKSwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykpCiAgICAgICAgd2hpbGUgbm90IG9zLnBhdGguaXNtb3VudChiX3BhdGgpOgogICAgICAgICAgICBiX3BhdGggPSBvcy5wYXRoLmRpcm5hbWUoYl9wYXRoKQoKICAgICAgICBpZiBwYXRoX2lzX2J5dGVzOgogICAgICAgICAgICByZXR1cm4gYl9wYXRoCgogICAgICAgIHJldHVybiB0b190ZXh0KGJfcGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKCiAgICBkZWYgaXNfc3BlY2lhbF9zZWxpbnV4X3BhdGgoc2VsZiwgcGF0aCk6CiAgICAgICAgIiIiCiAgICAgICAgUmV0dXJucyBhIHR1cGxlIGNvbnRhaW5pbmcgKFRydWUsIHNlbGludXhfY29udGV4dCkgaWYgdGhlIGdpdmVuIHBhdGggaXMgb24gYQogICAgICAgIE5GUyBvciBvdGhlciAnc3BlY2lhbCcgZnMgIG1vdW50IHBvaW50LCBvdGhlcndpc2UgdGhlIHJldHVybiB3aWxsIGJlIChGYWxzZSwgTm9uZSkuCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBmID0gb3BlbignL3Byb2MvbW91bnRzJywgJ3InKQogICAgICAgICAgICBtb3VudF9kYXRhID0gZi5yZWFkbGluZXMoKQogICAgICAgICAgICBmLmNsb3NlKCkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHJldHVybiAoRmFsc2UsIE5vbmUpCiAgICAgICAgcGF0aF9tb3VudF9wb2ludCA9IHNlbGYuZmluZF9tb3VudF9wb2ludChwYXRoKQogICAgICAgIGZvciBsaW5lIGluIG1vdW50X2RhdGE6CiAgICAgICAgICAgIChkZXZpY2UsIG1vdW50X3BvaW50LCBmc3R5cGUsIG9wdGlvbnMsIHJlc3QpID0gbGluZS5zcGxpdCgnICcsIDQpCgogICAgICAgICAgICBpZiBwYXRoX21vdW50X3BvaW50ID09IG1vdW50X3BvaW50OgogICAgICAgICAgICAgICAgZm9yIGZzIGluIHNlbGYuX3NlbGludXhfc3BlY2lhbF9mczoKICAgICAgICAgICAgICAgICAgICBpZiBmcyBpbiBmc3R5cGU6CiAgICAgICAgICAgICAgICAgICAgICAgIHNwZWNpYWxfY29udGV4dCA9IHNlbGYuc2VsaW51eF9jb250ZXh0KHBhdGhfbW91bnRfcG9pbnQpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoVHJ1ZSwgc3BlY2lhbF9jb250ZXh0KQoKICAgICAgICByZXR1cm4gKEZhbHNlLCBOb25lKQoKICAgIGRlZiBzZXRfZGVmYXVsdF9zZWxpbnV4X2NvbnRleHQoc2VsZiwgcGF0aCwgY2hhbmdlZCk6CiAgICAgICAgaWYgbm90IEhBVkVfU0VMSU5VWCBvciBub3Qgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQKICAgICAgICBjb250ZXh0ID0gc2VsZi5zZWxpbnV4X2RlZmF1bHRfY29udGV4dChwYXRoKQogICAgICAgIHJldHVybiBzZWxmLnNldF9jb250ZXh0X2lmX2RpZmZlcmVudChwYXRoLCBjb250ZXh0LCBGYWxzZSkKCiAgICBkZWYgc2V0X2NvbnRleHRfaWZfZGlmZmVyZW50KHNlbGYsIHBhdGgsIGNvbnRleHQsIGNoYW5nZWQsIGRpZmY9Tm9uZSk6CgogICAgICAgIGlmIG5vdCBIQVZFX1NFTElOVVggb3Igbm90IHNlbGYuc2VsaW51eF9lbmFibGVkKCk6CiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VkCiAgICAgICAgY3VyX2NvbnRleHQgPSBzZWxmLnNlbGludXhfY29udGV4dChwYXRoKQogICAgICAgIG5ld19jb250ZXh0ID0gbGlzdChjdXJfY29udGV4dCkKICAgICAgICAjIEl0ZXJhdGUgb3ZlciB0aGUgY3VycmVudCBjb250ZXh0IGluc3RlYWQgb2YgdGhlCiAgICAgICAgIyBhcmd1bWVudCBjb250ZXh0LCB3aGljaCBtYXkgaGF2ZSBzZWxldmVsLgoKICAgICAgICAoaXNfc3BlY2lhbF9zZSwgc3BfY29udGV4dCkgPSBzZWxmLmlzX3NwZWNpYWxfc2VsaW51eF9wYXRoKHBhdGgpCiAgICAgICAgaWYgaXNfc3BlY2lhbF9zZToKICAgICAgICAgICAgbmV3X2NvbnRleHQgPSBzcF9jb250ZXh0CiAgICAgICAgZWxzZToKICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKGN1cl9jb250ZXh0KSk6CiAgICAgICAgICAgICAgICBpZiBsZW4oY29udGV4dCkgPiBpOgogICAgICAgICAgICAgICAgICAgIGlmIGNvbnRleHRbaV0gaXMgbm90IE5vbmUgYW5kIGNvbnRleHRbaV0gIT0gY3VyX2NvbnRleHRbaV06CiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19jb250ZXh0W2ldID0gY29udGV4dFtpXQogICAgICAgICAgICAgICAgICAgIGVsaWYgY29udGV4dFtpXSBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICBuZXdfY29udGV4dFtpXSA9IGN1cl9jb250ZXh0W2ldCgogICAgICAgIGlmIGN1cl9jb250ZXh0ICE9IG5ld19jb250ZXh0OgogICAgICAgICAgICBpZiBkaWZmIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgaWYgJ2JlZm9yZScgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ10gPSB7fQogICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ11bJ3NlY29udGV4dCddID0gY3VyX2NvbnRleHQKICAgICAgICAgICAgICAgIGlmICdhZnRlcicgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYWZ0ZXInXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddWydzZWNvbnRleHQnXSA9IG5ld19jb250ZXh0CgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiBzZWxmLmNoZWNrX21vZGU6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgIHJjID0gc2VsaW51eC5sc2V0ZmlsZWNvbih0b19uYXRpdmUocGF0aCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyKCc6Jy5qb2luKG5ld19jb250ZXh0KSkpCiAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocGF0aD1wYXRoLCBtc2c9J2ludmFsaWQgc2VsaW51eCBjb250ZXh0OiAlcycgJSBzdHIoZSksIG5ld19jb250ZXh0PW5ld19jb250ZXh0LCBjdXJfY29udGV4dD1jdXJfY29udGV4dCwgaW5wdXRfd2FzPWNvbnRleHQpCiAgICAgICAgICAgIGlmIHJjICE9IDA6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nc2V0IHNlbGludXggY29udGV4dCBmYWlsZWQnKQogICAgICAgICAgICBjaGFuZ2VkID0gVHJ1ZQogICAgICAgIHJldHVybiBjaGFuZ2VkCgogICAgZGVmIHNldF9vd25lcl9pZl9kaWZmZXJlbnQoc2VsZiwgcGF0aCwgb3duZXIsIGNoYW5nZWQsIGRpZmY9Tm9uZSwgZXhwYW5kPVRydWUpOgogICAgICAgIGJfcGF0aCA9IHRvX2J5dGVzKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBpZiBleHBhbmQ6CiAgICAgICAgICAgIGJfcGF0aCA9IG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnMoYl9wYXRoKSkKICAgICAgICBwYXRoID0gdG9fdGV4dChiX3BhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBpZiBvd25lciBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gY2hhbmdlZAogICAgICAgIG9yaWdfdWlkLCBvcmlnX2dpZCA9IHNlbGYudXNlcl9hbmRfZ3JvdXAocGF0aCwgZXhwYW5kKQogICAgICAgIHRyeToKICAgICAgICAgICAgdWlkID0gaW50KG93bmVyKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB1aWQgPSBwd2QuZ2V0cHduYW0ob3duZXIpLnB3X3VpZAogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nY2hvd24gZmFpbGVkOiBmYWlsZWQgdG8gbG9vayB1cCB1c2VyICVzJyAlIG93bmVyKQogICAgICAgIGlmIG9yaWdfdWlkICE9IHVpZDoKCiAgICAgICAgICAgIGlmIGRpZmYgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBpZiAnYmVmb3JlJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXVsnb3duZXInXSA9IG9yaWdfdWlkCiAgICAgICAgICAgICAgICBpZiAnYWZ0ZXInIG5vdCBpbiBkaWZmOgogICAgICAgICAgICAgICAgICAgIGRpZmZbJ2FmdGVyJ10gPSB7fQogICAgICAgICAgICAgICAgZGlmZlsnYWZ0ZXInXVsnb3duZXInXSA9IHVpZAoKICAgICAgICAgICAgaWYgc2VsZi5jaGVja19tb2RlOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgb3MubGNob3duKGJfcGF0aCwgdWlkLCAtMSkKICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nY2hvd24gZmFpbGVkJykKICAgICAgICAgICAgY2hhbmdlZCA9IFRydWUKICAgICAgICByZXR1cm4gY2hhbmdlZAoKICAgIGRlZiBzZXRfZ3JvdXBfaWZfZGlmZmVyZW50KHNlbGYsIHBhdGgsIGdyb3VwLCBjaGFuZ2VkLCBkaWZmPU5vbmUsIGV4cGFuZD1UcnVlKToKICAgICAgICBiX3BhdGggPSB0b19ieXRlcyhwYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3N0cmljdCcpCiAgICAgICAgaWYgZXhwYW5kOgogICAgICAgICAgICBiX3BhdGggPSBvcy5wYXRoLmV4cGFuZHVzZXIob3MucGF0aC5leHBhbmR2YXJzKGJfcGF0aCkpCiAgICAgICAgcGF0aCA9IHRvX3RleHQoYl9wYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3N0cmljdCcpCiAgICAgICAgaWYgZ3JvdXAgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQKICAgICAgICBvcmlnX3VpZCwgb3JpZ19naWQgPSBzZWxmLnVzZXJfYW5kX2dyb3VwKGJfcGF0aCwgZXhwYW5kKQogICAgICAgIHRyeToKICAgICAgICAgICAgZ2lkID0gaW50KGdyb3VwKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBnaWQgPSBncnAuZ2V0Z3JuYW0oZ3JvdXApLmdyX2dpZAogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nY2hncnAgZmFpbGVkOiBmYWlsZWQgdG8gbG9vayB1cCBncm91cCAlcycgJSBncm91cCkKICAgICAgICBpZiBvcmlnX2dpZCAhPSBnaWQ6CgogICAgICAgICAgICBpZiBkaWZmIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgaWYgJ2JlZm9yZScgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ10gPSB7fQogICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ11bJ2dyb3VwJ10gPSBvcmlnX2dpZAogICAgICAgICAgICAgICAgaWYgJ2FmdGVyJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddID0ge30KICAgICAgICAgICAgICAgIGRpZmZbJ2FmdGVyJ11bJ2dyb3VwJ10gPSBnaWQKCiAgICAgICAgICAgIGlmIHNlbGYuY2hlY2tfbW9kZToKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG9zLmxjaG93bihiX3BhdGgsIC0xLCBnaWQpCiAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocGF0aD1wYXRoLCBtc2c9J2NoZ3JwIGZhaWxlZCcpCiAgICAgICAgICAgIGNoYW5nZWQgPSBUcnVlCiAgICAgICAgcmV0dXJuIGNoYW5nZWQKCiAgICBkZWYgc2V0X21vZGVfaWZfZGlmZmVyZW50KHNlbGYsIHBhdGgsIG1vZGUsIGNoYW5nZWQsIGRpZmY9Tm9uZSwgZXhwYW5kPVRydWUpOgogICAgICAgIGJfcGF0aCA9IHRvX2J5dGVzKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBpZiBleHBhbmQ6CiAgICAgICAgICAgIGJfcGF0aCA9IG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnMoYl9wYXRoKSkKICAgICAgICBwYXRoID0gdG9fdGV4dChiX3BhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBwYXRoX3N0YXQgPSBvcy5sc3RhdChiX3BhdGgpCgogICAgICAgIGlmIG1vZGUgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQKCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UobW9kZSwgaW50KToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbW9kZSA9IGludChtb2RlLCA4KQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIG1vZGUgPSBzZWxmLl9zeW1ib2xpY19tb2RlX3RvX29jdGFsKHBhdGhfc3RhdCwgbW9kZSkKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2c9Im1vZGUgbXVzdCBiZSBpbiBvY3RhbCBvciBzeW1ib2xpYyBmb3JtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzPXN0cihlKSkKCiAgICAgICAgICAgICAgICBpZiBtb2RlICE9IHN0YXQuU19JTU9ERShtb2RlKToKICAgICAgICAgICAgICAgICAgICAjIHByZXZlbnQgbW9kZSBmcm9tIGhhdmluZyBleHRyYSBpbmZvIG9yYmVpbmcgaW52YWxpZCBsb25nIG51bWJlcgogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSJJbnZhbGlkIG1vZGUgc3VwcGxpZWQsIG9ubHkgcGVybWlzc2lvbiBpbmZvIGlzIGFsbG93ZWQiLCBkZXRhaWxzPW1vZGUpCgogICAgICAgIHByZXZfbW9kZSA9IHN0YXQuU19JTU9ERShwYXRoX3N0YXQuc3RfbW9kZSkKCiAgICAgICAgaWYgcHJldl9tb2RlICE9IG1vZGU6CgogICAgICAgICAgICBpZiBkaWZmIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgaWYgJ2JlZm9yZScgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ10gPSB7fQogICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ11bJ21vZGUnXSA9ICcwJTAzbycgJSBwcmV2X21vZGUKICAgICAgICAgICAgICAgIGlmICdhZnRlcicgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYWZ0ZXInXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddWydtb2RlJ10gPSAnMCUwM28nICUgbW9kZQoKICAgICAgICAgICAgaWYgc2VsZi5jaGVja19tb2RlOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgIyBGSVhNRTogY29tcGFyaXNvbiBhZ2FpbnN0IHN0cmluZyBhYm92ZSB3aWxsIGNhdXNlIHRoaXMgdG8gYmUgZXhlY3V0ZWQKICAgICAgICAgICAgIyBldmVyeSB0aW1lCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIGhhc2F0dHIob3MsICdsY2htb2QnKToKICAgICAgICAgICAgICAgICAgICBvcy5sY2htb2QoYl9wYXRoLCBtb2RlKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5pc2xpbmsoYl9wYXRoKToKICAgICAgICAgICAgICAgICAgICAgICAgb3MuY2htb2QoYl9wYXRoLCBtb2RlKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICMgQXR0ZW1wdCB0byBzZXQgdGhlIHBlcm1zIG9mIHRoZSBzeW1saW5rIGJ1dCBiZQogICAgICAgICAgICAgICAgICAgICAgICAjIGNhcmVmdWwgbm90IHRvIGNoYW5nZSB0aGUgcGVybXMgb2YgdGhlIHVuZGVybHlpbmcKICAgICAgICAgICAgICAgICAgICAgICAgIyBmaWxlIHdoaWxlIHRyeWluZwogICAgICAgICAgICAgICAgICAgICAgICB1bmRlcmx5aW5nX3N0YXQgPSBvcy5zdGF0KGJfcGF0aCkKICAgICAgICAgICAgICAgICAgICAgICAgb3MuY2htb2QoYl9wYXRoLCBtb2RlKQogICAgICAgICAgICAgICAgICAgICAgICBuZXdfdW5kZXJseWluZ19zdGF0ID0gb3Muc3RhdChiX3BhdGgpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVuZGVybHlpbmdfc3RhdC5zdF9tb2RlICE9IG5ld191bmRlcmx5aW5nX3N0YXQuc3RfbW9kZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zLmNobW9kKGJfcGF0aCwgc3RhdC5TX0lNT0RFKHVuZGVybHlpbmdfc3RhdC5zdF9tb2RlKSkKICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmlzbGluayhiX3BhdGgpIGFuZCBlLmVycm5vID09IGVycm5vLkVQRVJNOiAgIyBDYW4ndCBzZXQgbW9kZSBvbiBzeW1ib2xpYyBsaW5rcwogICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgICAgIGVsaWYgZS5lcnJubyBpbiAoZXJybm8uRU5PRU5ULCBlcnJuby5FTE9PUCk6ICMgQ2FuJ3Qgc2V0IG1vZGUgb24gYnJva2VuIHN5bWJvbGljIGxpbmtzCiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICByYWlzZSBlCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nY2htb2QgZmFpbGVkJywgZGV0YWlscz1zdHIoZSkpCgogICAgICAgICAgICBwYXRoX3N0YXQgPSBvcy5sc3RhdChiX3BhdGgpCiAgICAgICAgICAgIG5ld19tb2RlID0gc3RhdC5TX0lNT0RFKHBhdGhfc3RhdC5zdF9tb2RlKQoKICAgICAgICAgICAgaWYgbmV3X21vZGUgIT0gcHJldl9tb2RlOgogICAgICAgICAgICAgICAgY2hhbmdlZCA9IFRydWUKICAgICAgICByZXR1cm4gY2hhbmdlZAoKICAgIGRlZiBzZXRfYXR0cmlidXRlc19pZl9kaWZmZXJlbnQoc2VsZiwgcGF0aCwgYXR0cmlidXRlcywgY2hhbmdlZCwgZGlmZj1Ob25lLCBleHBhbmQ9VHJ1ZSk6CgogICAgICAgIGlmIGF0dHJpYnV0ZXMgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQKCiAgICAgICAgYl9wYXRoID0gdG9fYnl0ZXMocGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9zdHJpY3QnKQogICAgICAgIGlmIGV4cGFuZDoKICAgICAgICAgICAgYl9wYXRoID0gb3MucGF0aC5leHBhbmR1c2VyKG9zLnBhdGguZXhwYW5kdmFycyhiX3BhdGgpKQogICAgICAgIHBhdGggPSB0b190ZXh0KGJfcGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9zdHJpY3QnKQoKICAgICAgICBleGlzdGluZyA9IHNlbGYuZ2V0X2ZpbGVfYXR0cmlidXRlcyhiX3BhdGgpCgogICAgICAgIGlmIGV4aXN0aW5nLmdldCgnYXR0cl9mbGFncycsJycpICE9IGF0dHJpYnV0ZXM6CiAgICAgICAgICAgIGF0dHJjbWQgPSBzZWxmLmdldF9iaW5fcGF0aCgnY2hhdHRyJykKICAgICAgICAgICAgaWYgYXR0cmNtZDoKICAgICAgICAgICAgICAgIGF0dHJjbWQgPSBbYXR0cmNtZCwgJz0lcycgJSBhdHRyaWJ1dGVzLCBiX3BhdGhdCiAgICAgICAgICAgICAgICBjaGFuZ2VkID0gVHJ1ZQoKICAgICAgICAgICAgICAgIGlmIGRpZmYgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgaWYgJ2JlZm9yZScgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZbJ2JlZm9yZSddID0ge30KICAgICAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXVsnYXR0cmlidXRlcyddID0gZXhpc3RpbmcuZ2V0KCdhdHRyX2ZsYWdzJykKICAgICAgICAgICAgICAgICAgICBpZiAnYWZ0ZXInIG5vdCBpbiBkaWZmOgogICAgICAgICAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddID0ge30KICAgICAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddWydhdHRyaWJ1dGVzJ10gPSBhdHRyaWJ1dGVzCgogICAgICAgICAgICAgICAgaWYgbm90IHNlbGYuY2hlY2tfbW9kZToKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJjLCBvdXQsIGVyciA9IHNlbGYucnVuX2NvbW1hbmQoYXR0cmNtZCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgcmMgIT0gMCBvciBlcnI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oIkVycm9yIHdoaWxlIHNldHRpbmcgYXR0cmlidXRlczogJXMiICUgKG91dCArIGVycikpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSdjaGF0dHIgZmFpbGVkJywgZGV0YWlscz1zdHIoZSkpCiAgICAgICAgcmV0dXJuIGNoYW5nZWQKCiAgICBkZWYgZ2V0X2ZpbGVfYXR0cmlidXRlcyhzZWxmLCBwYXRoKToKICAgICAgICBvdXRwdXQgPSB7fQogICAgICAgIGF0dHJjbWQgPSBzZWxmLmdldF9iaW5fcGF0aCgnbHNhdHRyJywgRmFsc2UpCiAgICAgICAgaWYgYXR0cmNtZDoKICAgICAgICAgICAgYXR0cmNtZCA9IFthdHRyY21kLCAnLXZkJywgcGF0aF0KICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmMsIG91dCwgZXJyID0gc2VsZi5ydW5fY29tbWFuZChhdHRyY21kKQogICAgICAgICAgICAgICAgaWYgcmMgPT0gMDoKICAgICAgICAgICAgICAgICAgICByZXMgPSBvdXQuc3BsaXQoJyAnKVswOjJdCiAgICAgICAgICAgICAgICAgICAgb3V0cHV0WydhdHRyX2ZsYWdzJ10gPSAgcmVzWzFdLnJlcGxhY2UoJy0nLCcnKS5zdHJpcCgpCiAgICAgICAgICAgICAgICAgICAgb3V0cHV0Wyd2ZXJzaW9uJ10gPSByZXNbMF0uc3RyaXAoKQogICAgICAgICAgICAgICAgICAgIG91dHB1dFsnYXR0cmlidXRlcyddID0gZm9ybWF0X2F0dHJpYnV0ZXMob3V0cHV0WydhdHRyX2ZsYWdzJ10pCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICByZXR1cm4gb3V0cHV0CgoKICAgIGRlZiBfc3ltYm9saWNfbW9kZV90b19vY3RhbChzZWxmLCBwYXRoX3N0YXQsIHN5bWJvbGljX21vZGUpOgogICAgICAgIG5ld19tb2RlID0gc3RhdC5TX0lNT0RFKHBhdGhfc3RhdC5zdF9tb2RlKQoKICAgICAgICBtb2RlX3JlID0gcmUuY29tcGlsZShyJ14oP1A8dXNlcnM+W3Vnb2FdKykoP1A8b3BlcmF0b3I+Wy0rPV0pKD9QPHBlcm1zPltyd3hYc3QtXSp8W3Vnb10pJCcpCiAgICAgICAgZm9yIG1vZGUgaW4gc3ltYm9saWNfbW9kZS5zcGxpdCgnLCcpOgogICAgICAgICAgICBtYXRjaCA9IG1vZGVfcmUubWF0Y2gobW9kZSkKICAgICAgICAgICAgaWYgbWF0Y2g6CiAgICAgICAgICAgICAgICB1c2VycyA9IG1hdGNoLmdyb3VwKCd1c2VycycpCiAgICAgICAgICAgICAgICBvcGVyYXRvciA9IG1hdGNoLmdyb3VwKCdvcGVyYXRvcicpCiAgICAgICAgICAgICAgICBwZXJtcyA9IG1hdGNoLmdyb3VwKCdwZXJtcycpCgogICAgICAgICAgICAgICAgaWYgdXNlcnMgPT0gJ2EnOgogICAgICAgICAgICAgICAgICAgIHVzZXJzID0gJ3VnbycKCiAgICAgICAgICAgICAgICBmb3IgdXNlciBpbiB1c2VyczoKICAgICAgICAgICAgICAgICAgICBtb2RlX3RvX2FwcGx5ID0gc2VsZi5fZ2V0X29jdGFsX21vZGVfZnJvbV9zeW1ib2xpY19wZXJtcyhwYXRoX3N0YXQsIHVzZXIsIHBlcm1zKQogICAgICAgICAgICAgICAgICAgIG5ld19tb2RlID0gc2VsZi5fYXBwbHlfb3BlcmF0aW9uX3RvX21vZGUodXNlciwgb3BlcmF0b3IsIG1vZGVfdG9fYXBwbHksIG5ld19tb2RlKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiYmFkIHN5bWJvbGljIHBlcm1pc3Npb24gZm9yIG1vZGU6ICVzIiAlIG1vZGUpCiAgICAgICAgcmV0dXJuIG5ld19tb2RlCgogICAgZGVmIF9hcHBseV9vcGVyYXRpb25fdG9fbW9kZShzZWxmLCB1c2VyLCBvcGVyYXRvciwgbW9kZV90b19hcHBseSwgY3VycmVudF9tb2RlKToKICAgICAgICBpZiBvcGVyYXRvciAgPT0gICc9JzoKICAgICAgICAgICAgaWYgdXNlciA9PSAndSc6CiAgICAgICAgICAgICAgICBtYXNrID0gc3RhdC5TX0lSV1hVIHwgc3RhdC5TX0lTVUlECiAgICAgICAgICAgIGVsaWYgdXNlciA9PSAnZyc6CiAgICAgICAgICAgICAgICBtYXNrID0gc3RhdC5TX0lSV1hHIHwgc3RhdC5TX0lTR0lECiAgICAgICAgICAgIGVsaWYgdXNlciA9PSAnbyc6CiAgICAgICAgICAgICAgICBtYXNrID0gc3RhdC5TX0lSV1hPIHwgc3RhdC5TX0lTVlRYCgogICAgICAgICAgICAjIG1hc2sgb3V0IHUsIGcsIG9yIG8gcGVybWlzc2lvbnMgZnJvbSBjdXJyZW50X21vZGUgYW5kIGFwcGx5IG5ldyBwZXJtaXNzaW9ucwogICAgICAgICAgICBpbnZlcnNlX21hc2sgPSBtYXNrIF4gUEVSTV9CSVRTCiAgICAgICAgICAgIG5ld19tb2RlID0gKGN1cnJlbnRfbW9kZSAmIGludmVyc2VfbWFzaykgfCBtb2RlX3RvX2FwcGx5CiAgICAgICAgZWxpZiBvcGVyYXRvciA9PSAnKyc6CiAgICAgICAgICAgIG5ld19tb2RlID0gY3VycmVudF9tb2RlIHwgbW9kZV90b19hcHBseQogICAgICAgIGVsaWYgb3BlcmF0b3IgPT0gJy0nOgogICAgICAgICAgICBuZXdfbW9kZSA9IGN1cnJlbnRfbW9kZSAtIChjdXJyZW50X21vZGUgJiBtb2RlX3RvX2FwcGx5KQogICAgICAgIHJldHVybiBuZXdfbW9kZQoKICAgIGRlZiBfZ2V0X29jdGFsX21vZGVfZnJvbV9zeW1ib2xpY19wZXJtcyhzZWxmLCBwYXRoX3N0YXQsIHVzZXIsIHBlcm1zKToKICAgICAgICBwcmV2X21vZGUgPSBzdGF0LlNfSU1PREUocGF0aF9zdGF0LnN0X21vZGUpCgogICAgICAgIGlzX2RpcmVjdG9yeSA9IHN0YXQuU19JU0RJUihwYXRoX3N0YXQuc3RfbW9kZSkKICAgICAgICBoYXNfeF9wZXJtaXNzaW9ucyA9IChwcmV2X21vZGUgJiBFWEVDX1BFUk1fQklUUykgPiAwCiAgICAgICAgYXBwbHlfWF9wZXJtaXNzaW9uID0gaXNfZGlyZWN0b3J5IG9yIGhhc194X3Blcm1pc3Npb25zCgogICAgICAgICMgUGVybWlzc2lvbiBiaXRzIGNvbnN0YW50cyBkb2N1bWVudGVkIGF0OgogICAgICAgICMgaHR0cDovL2RvY3MucHl0aG9uLm9yZy8yL2xpYnJhcnkvc3RhdC5odG1sI3N0YXQuU19JU1VJRAogICAgICAgIGlmIGFwcGx5X1hfcGVybWlzc2lvbjoKICAgICAgICAgICAgWF9wZXJtcyA9IHsKICAgICAgICAgICAgICAgICd1JzogeydYJzogc3RhdC5TX0lYVVNSfSwKICAgICAgICAgICAgICAgICdnJzogeydYJzogc3RhdC5TX0lYR1JQfSwKICAgICAgICAgICAgICAgICdvJzogeydYJzogc3RhdC5TX0lYT1RIfQogICAgICAgICAgICB9CiAgICAgICAgZWxzZToKICAgICAgICAgICAgWF9wZXJtcyA9IHsKICAgICAgICAgICAgICAgICd1JzogeydYJzogMH0sCiAgICAgICAgICAgICAgICAnZyc6IHsnWCc6IDB9LAogICAgICAgICAgICAgICAgJ28nOiB7J1gnOiAwfQogICAgICAgICAgICB9CgogICAgICAgIHVzZXJfcGVybXNfdG9fbW9kZXMgPSB7CiAgICAgICAgICAgICd1JzogewogICAgICAgICAgICAgICAgJ3InOiBzdGF0LlNfSVJVU1IsCiAgICAgICAgICAgICAgICAndyc6IHN0YXQuU19JV1VTUiwKICAgICAgICAgICAgICAgICd4Jzogc3RhdC5TX0lYVVNSLAogICAgICAgICAgICAgICAgJ3MnOiBzdGF0LlNfSVNVSUQsCiAgICAgICAgICAgICAgICAndCc6IDAsCiAgICAgICAgICAgICAgICAndSc6IHByZXZfbW9kZSAmIHN0YXQuU19JUldYVSwKICAgICAgICAgICAgICAgICdnJzogKHByZXZfbW9kZSAmIHN0YXQuU19JUldYRykgPDwgMywKICAgICAgICAgICAgICAgICdvJzogKHByZXZfbW9kZSAmIHN0YXQuU19JUldYTykgPDwgNiB9LAogICAgICAgICAgICAnZyc6IHsKICAgICAgICAgICAgICAgICdyJzogc3RhdC5TX0lSR1JQLAogICAgICAgICAgICAgICAgJ3cnOiBzdGF0LlNfSVdHUlAsCiAgICAgICAgICAgICAgICAneCc6IHN0YXQuU19JWEdSUCwKICAgICAgICAgICAgICAgICdzJzogc3RhdC5TX0lTR0lELAogICAgICAgICAgICAgICAgJ3QnOiAwLAogICAgICAgICAgICAgICAgJ3UnOiAocHJldl9tb2RlICYgc3RhdC5TX0lSV1hVKSA+PiAzLAogICAgICAgICAgICAgICAgJ2cnOiBwcmV2X21vZGUgJiBzdGF0LlNfSVJXWEcsCiAgICAgICAgICAgICAgICAnbyc6IChwcmV2X21vZGUgJiBzdGF0LlNfSVJXWE8pIDw8IDMgfSwKICAgICAgICAgICAgJ28nOiB7CiAgICAgICAgICAgICAgICAncic6IHN0YXQuU19JUk9USCwKICAgICAgICAgICAgICAgICd3Jzogc3RhdC5TX0lXT1RILAogICAgICAgICAgICAgICAgJ3gnOiBzdGF0LlNfSVhPVEgsCiAgICAgICAgICAgICAgICAncyc6IDAsCiAgICAgICAgICAgICAgICAndCc6IHN0YXQuU19JU1ZUWCwKICAgICAgICAgICAgICAgICd1JzogKHByZXZfbW9kZSAmIHN0YXQuU19JUldYVSkgPj4gNiwKICAgICAgICAgICAgICAgICdnJzogKHByZXZfbW9kZSAmIHN0YXQuU19JUldYRykgPj4gMywKICAgICAgICAgICAgICAgICdvJzogcHJldl9tb2RlICYgc3RhdC5TX0lSV1hPIH0KICAgICAgICB9CgogICAgICAgICMgSW5zZXJ0IFhfcGVybXMgaW50byB1c2VyX3Blcm1zX3RvX21vZGVzCiAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gWF9wZXJtcy5pdGVtcygpOgogICAgICAgICAgICB1c2VyX3Blcm1zX3RvX21vZGVzW2tleV0udXBkYXRlKHZhbHVlKQoKICAgICAgICBvcl9yZWR1Y2UgPSBsYW1iZGEgbW9kZSwgcGVybTogbW9kZSB8IHVzZXJfcGVybXNfdG9fbW9kZXNbdXNlcl1bcGVybV0KICAgICAgICByZXR1cm4gcmVkdWNlKG9yX3JlZHVjZSwgcGVybXMsIDApCgogICAgZGVmIHNldF9mc19hdHRyaWJ1dGVzX2lmX2RpZmZlcmVudChzZWxmLCBmaWxlX2FyZ3MsIGNoYW5nZWQsIGRpZmY9Tm9uZSwgZXhwYW5kPVRydWUpOgogICAgICAgICMgc2V0IG1vZGVzIG93bmVycyBhbmQgY29udGV4dCBhcyBuZWVkZWQKICAgICAgICBjaGFuZ2VkID0gc2VsZi5zZXRfY29udGV4dF9pZl9kaWZmZXJlbnQoCiAgICAgICAgICAgIGZpbGVfYXJnc1sncGF0aCddLCBmaWxlX2FyZ3NbJ3NlY29udGV4dCddLCBjaGFuZ2VkLCBkaWZmCiAgICAgICAgKQogICAgICAgIGNoYW5nZWQgPSBzZWxmLnNldF9vd25lcl9pZl9kaWZmZXJlbnQoCiAgICAgICAgICAgIGZpbGVfYXJnc1sncGF0aCddLCBmaWxlX2FyZ3NbJ293bmVyJ10sIGNoYW5nZWQsIGRpZmYsIGV4cGFuZAogICAgICAgICkKICAgICAgICBjaGFuZ2VkID0gc2VsZi5zZXRfZ3JvdXBfaWZfZGlmZmVyZW50KAogICAgICAgICAgICBmaWxlX2FyZ3NbJ3BhdGgnXSwgZmlsZV9hcmdzWydncm91cCddLCBjaGFuZ2VkLCBkaWZmLCBleHBhbmQKICAgICAgICApCiAgICAgICAgY2hhbmdlZCA9IHNlbGYuc2V0X21vZGVfaWZfZGlmZmVyZW50KAogICAgICAgICAgICBmaWxlX2FyZ3NbJ3BhdGgnXSwgZmlsZV9hcmdzWydtb2RlJ10sIGNoYW5nZWQsIGRpZmYsIGV4cGFuZAogICAgICAgICkKICAgICAgICBjaGFuZ2VkID0gc2VsZi5zZXRfYXR0cmlidXRlc19pZl9kaWZmZXJlbnQoCiAgICAgICAgICAgIGZpbGVfYXJnc1sncGF0aCddLCBmaWxlX2FyZ3NbJ2F0dHJpYnV0ZXMnXSwgY2hhbmdlZCwgZGlmZiwgZXhwYW5kCiAgICAgICAgKQogICAgICAgIHJldHVybiBjaGFuZ2VkCgogICAgZGVmIHNldF9kaXJlY3RvcnlfYXR0cmlidXRlc19pZl9kaWZmZXJlbnQoc2VsZiwgZmlsZV9hcmdzLCBjaGFuZ2VkLCBkaWZmPU5vbmUsIGV4cGFuZD1UcnVlKToKICAgICAgICByZXR1cm4gc2VsZi5zZXRfZnNfYXR0cmlidXRlc19pZl9kaWZmZXJlbnQoZmlsZV9hcmdzLCBjaGFuZ2VkLCBkaWZmLCBleHBhbmQpCgogICAgZGVmIHNldF9maWxlX2F0dHJpYnV0ZXNfaWZfZGlmZmVyZW50KHNlbGYsIGZpbGVfYXJncywgY2hhbmdlZCwgZGlmZj1Ob25lLCBleHBhbmQ9VHJ1ZSk6CiAgICAgICAgcmV0dXJuIHNlbGYuc2V0X2ZzX2F0dHJpYnV0ZXNfaWZfZGlmZmVyZW50KGZpbGVfYXJncywgY2hhbmdlZCwgZGlmZiwgZXhwYW5kKQoKICAgIGRlZiBhZGRfcGF0aF9pbmZvKHNlbGYsIGt3YXJncyk6CiAgICAgICAgJycnCiAgICAgICAgZm9yIHJlc3VsdHMgdGhhdCBhcmUgZmlsZXMsIHN1cHBsZW1lbnQgdGhlIGluZm8gYWJvdXQgdGhlIGZpbGUKICAgICAgICBpbiB0aGUgcmV0dXJuIHBhdGggd2l0aCBzdGF0cyBhYm91dCB0aGUgZmlsZSBwYXRoLgogICAgICAgICcnJwoKICAgICAgICBwYXRoID0ga3dhcmdzLmdldCgncGF0aCcsIGt3YXJncy5nZXQoJ2Rlc3QnLCBOb25lKSkKICAgICAgICBpZiBwYXRoIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBrd2FyZ3MKICAgICAgICBiX3BhdGggPSB0b19ieXRlcyhwYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKGJfcGF0aCk6CiAgICAgICAgICAgICh1aWQsIGdpZCkgPSBzZWxmLnVzZXJfYW5kX2dyb3VwKHBhdGgpCiAgICAgICAgICAgIGt3YXJnc1sndWlkJ10gPSB1aWQKICAgICAgICAgICAga3dhcmdzWydnaWQnXSA9IGdpZAogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB1c2VyID0gcHdkLmdldHB3dWlkKHVpZClbMF0KICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICAgICAgdXNlciA9IHN0cih1aWQpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGdyb3VwID0gZ3JwLmdldGdyZ2lkKGdpZClbMF0KICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICAgICAgZ3JvdXAgPSBzdHIoZ2lkKQogICAgICAgICAgICBrd2FyZ3NbJ293bmVyJ10gPSB1c2VyCiAgICAgICAgICAgIGt3YXJnc1snZ3JvdXAnXSA9IGdyb3VwCiAgICAgICAgICAgIHN0ID0gb3MubHN0YXQoYl9wYXRoKQogICAgICAgICAgICBrd2FyZ3NbJ21vZGUnXSA9ICcwJTAzbycgJSBzdGF0LlNfSU1PREUoc3Rbc3RhdC5TVF9NT0RFXSkKICAgICAgICAgICAgIyBzZWNvbnRleHQgbm90IHlldCBzdXBwb3J0ZWQKICAgICAgICAgICAgaWYgb3MucGF0aC5pc2xpbmsoYl9wYXRoKToKICAgICAgICAgICAgICAgIGt3YXJnc1snc3RhdGUnXSA9ICdsaW5rJwogICAgICAgICAgICBlbGlmIG9zLnBhdGguaXNkaXIoYl9wYXRoKToKICAgICAgICAgICAgICAgIGt3YXJnc1snc3RhdGUnXSA9ICdkaXJlY3RvcnknCiAgICAgICAgICAgIGVsaWYgb3Muc3RhdChiX3BhdGgpLnN0X25saW5rID4gMToKICAgICAgICAgICAgICAgIGt3YXJnc1snc3RhdGUnXSA9ICdoYXJkJwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAga3dhcmdzWydzdGF0ZSddID0gJ2ZpbGUnCiAgICAgICAgICAgIGlmIEhBVkVfU0VMSU5VWCBhbmQgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgICAgIGt3YXJnc1snc2Vjb250ZXh0J10gPSAnOicuam9pbihzZWxmLnNlbGludXhfY29udGV4dChwYXRoKSkKICAgICAgICAgICAga3dhcmdzWydzaXplJ10gPSBzdFtzdGF0LlNUX1NJWkVdCiAgICAgICAgZWxzZToKICAgICAgICAgICAga3dhcmdzWydzdGF0ZSddID0gJ2Fic2VudCcKICAgICAgICByZXR1cm4ga3dhcmdzCgogICAgZGVmIF9jaGVja19sb2NhbGUoc2VsZik6CiAgICAgICAgJycnCiAgICAgICAgVXNlcyB0aGUgbG9jYWxlIG1vZHVsZSB0byB0ZXN0IHRoZSBjdXJyZW50bHkgc2V0IGxvY2FsZQogICAgICAgIChwZXIgdGhlIExBTkcgYW5kIExDX0NUWVBFIGVudmlyb25tZW50IHNldHRpbmdzKQogICAgICAgICcnJwogICAgICAgIHRyeToKICAgICAgICAgICAgIyBzZXR0aW5nIHRoZSBsb2NhbGUgdG8gJycgdXNlcyB0aGUgZGVmYXVsdCBsb2NhbGUKICAgICAgICAgICAgIyBhcyBpdCB3b3VsZCBiZSByZXR1cm5lZCBieSBsb2NhbGUuZ2V0ZGVmYXVsdGxvY2FsZSgpCiAgICAgICAgICAgIGxvY2FsZS5zZXRsb2NhbGUobG9jYWxlLkxDX0FMTCwgJycpCiAgICAgICAgZXhjZXB0IGxvY2FsZS5FcnJvcjoKICAgICAgICAgICAgIyBmYWxsYmFjayB0byB0aGUgJ0MnIGxvY2FsZSwgd2hpY2ggbWF5IGNhdXNlIHVuaWNvZGUKICAgICAgICAgICAgIyBpc3N1ZXMgYnV0IGlzIHByZWZlcmFibGUgdG8gc2ltcGx5IGZhaWxpbmcgYmVjYXVzZQogICAgICAgICAgICAjIG9mIGFuIHVua25vd24gbG9jYWxlCiAgICAgICAgICAgIGxvY2FsZS5zZXRsb2NhbGUobG9jYWxlLkxDX0FMTCwgJ0MnKQogICAgICAgICAgICBvcy5lbnZpcm9uWydMQU5HJ10gPSAnQycKICAgICAgICAgICAgb3MuZW52aXJvblsnTENfQUxMJ10gPSAnQycKICAgICAgICAgICAgb3MuZW52aXJvblsnTENfTUVTU0FHRVMnXSA9ICdDJwogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJBbiB1bmtub3duIGVycm9yIHdhcyBlbmNvdW50ZXJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIHZhbGlkYXRlIHRoZSBsb2NhbGU6ICVzIiAlIGUpCgogICAgZGVmIF9oYW5kbGVfYWxpYXNlcyhzZWxmLCBzcGVjPU5vbmUpOgogICAgICAgICMgdGhpcyB1c2VzIGV4Y2VwdGlvbnMgYXMgaXQgaGFwcGVucyBiZWZvcmUgd2UgY2FuIHNhZmVseSBjYWxsIGZhaWxfanNvbgogICAgICAgIGFsaWFzZXNfcmVzdWx0cyA9IHt9ICNhbGlhczpjYW5vbgogICAgICAgIGlmIHNwZWMgaXMgTm9uZToKICAgICAgICAgICAgc3BlYyA9IHNlbGYuYXJndW1lbnRfc3BlYwogICAgICAgIGZvciAoayx2KSBpbiBzcGVjLml0ZW1zKCk6CiAgICAgICAgICAgIHNlbGYuX2xlZ2FsX2lucHV0cy5hcHBlbmQoaykKICAgICAgICAgICAgYWxpYXNlcyA9IHYuZ2V0KCdhbGlhc2VzJywgTm9uZSkKICAgICAgICAgICAgZGVmYXVsdCA9IHYuZ2V0KCdkZWZhdWx0JywgTm9uZSkKICAgICAgICAgICAgcmVxdWlyZWQgPSB2LmdldCgncmVxdWlyZWQnLCBGYWxzZSkKICAgICAgICAgICAgaWYgZGVmYXVsdCBpcyBub3QgTm9uZSBhbmQgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAjIG5vdCBhbGlhcyBzcGVjaWZpYyBidXQgdGhpcyBpcyBhIGdvb2QgcGxhY2UgdG8gY2hlY2sgdGhpcwogICAgICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJpbnRlcm5hbCBlcnJvcjogcmVxdWlyZWQgYW5kIGRlZmF1bHQgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZSBmb3IgJXMiICUgaykKICAgICAgICAgICAgaWYgYWxpYXNlcyBpcyBOb25lOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoYWxpYXNlcywgU0VRVUVOQ0VUWVBFKSBvciBpc2luc3RhbmNlKGFsaWFzZXMsIChiaW5hcnlfdHlwZSwgdGV4dF90eXBlKSk6CiAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oJ2ludGVybmFsIGVycm9yOiBhbGlhc2VzIG11c3QgYmUgYSBsaXN0IG9yIHR1cGxlJykKICAgICAgICAgICAgZm9yIGFsaWFzIGluIGFsaWFzZXM6CiAgICAgICAgICAgICAgICBzZWxmLl9sZWdhbF9pbnB1dHMuYXBwZW5kKGFsaWFzKQogICAgICAgICAgICAgICAgYWxpYXNlc19yZXN1bHRzW2FsaWFzXSA9IGsKICAgICAgICAgICAgICAgIGlmIGFsaWFzIGluIHNlbGYucGFyYW1zOgogICAgICAgICAgICAgICAgICAgIHNlbGYucGFyYW1zW2tdID0gc2VsZi5wYXJhbXNbYWxpYXNdCgogICAgICAgIHJldHVybiBhbGlhc2VzX3Jlc3VsdHMKCiAgICBkZWYgX2NoZWNrX2FyZ3VtZW50cyhzZWxmLCBjaGVja19pbnZhbGlkX2FyZ3VtZW50cyk6CiAgICAgICAgc2VsZi5fc3lzbG9nX2ZhY2lsaXR5ID0gJ0xPR19VU0VSJwogICAgICAgIHVuc3VwcG9ydGVkX3BhcmFtZXRlcnMgPSBzZXQoKQogICAgICAgIGZvciAoayx2KSBpbiBsaXN0KHNlbGYucGFyYW1zLml0ZW1zKCkpOgoKICAgICAgICAgICAgaWYgayA9PSAnX2Fuc2libGVfY2hlY2tfbW9kZScgYW5kIHY6CiAgICAgICAgICAgICAgICBzZWxmLmNoZWNrX21vZGUgPSBUcnVlCgogICAgICAgICAgICBlbGlmIGsgPT0gJ19hbnNpYmxlX25vX2xvZyc6CiAgICAgICAgICAgICAgICBzZWxmLm5vX2xvZyA9IHNlbGYuYm9vbGVhbih2KQoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV9kZWJ1Zyc6CiAgICAgICAgICAgICAgICBzZWxmLl9kZWJ1ZyA9IHNlbGYuYm9vbGVhbih2KQoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV9kaWZmJzoKICAgICAgICAgICAgICAgIHNlbGYuX2RpZmYgPSBzZWxmLmJvb2xlYW4odikKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfdmVyYm9zaXR5JzoKICAgICAgICAgICAgICAgIHNlbGYuX3ZlcmJvc2l0eSA9IHYKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfc2VsaW51eF9zcGVjaWFsX2ZzJzoKICAgICAgICAgICAgICAgIHNlbGYuX3NlbGludXhfc3BlY2lhbF9mcyA9IHYKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfc3lzbG9nX2ZhY2lsaXR5JzoKICAgICAgICAgICAgICAgIHNlbGYuX3N5c2xvZ19mYWNpbGl0eSA9IHYKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfdmVyc2lvbic6CiAgICAgICAgICAgICAgICBzZWxmLmFuc2libGVfdmVyc2lvbiA9IHYKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfbW9kdWxlX25hbWUnOgogICAgICAgICAgICAgICAgc2VsZi5fbmFtZSA9IHYKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfc29ja2V0JzoKICAgICAgICAgICAgICAgIHNlbGYuX3NvY2tldF9wYXRoID0gdgoKICAgICAgICAgICAgZWxpZiBjaGVja19pbnZhbGlkX2FyZ3VtZW50cyBhbmQgayBub3QgaW4gc2VsZi5fbGVnYWxfaW5wdXRzOgogICAgICAgICAgICAgICAgdW5zdXBwb3J0ZWRfcGFyYW1ldGVycy5hZGQoaykKCiAgICAgICAgICAgICNjbGVhbiB1cCBpbnRlcm5hbCBwYXJhbXM6CiAgICAgICAgICAgIGlmIGsuc3RhcnRzd2l0aCgnX2Fuc2libGVfJyk6CiAgICAgICAgICAgICAgICBkZWwgc2VsZi5wYXJhbXNba10KCiAgICAgICAgaWYgdW5zdXBwb3J0ZWRfcGFyYW1ldGVyczoKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJVbnN1cHBvcnRlZCBwYXJhbWV0ZXJzIGZvciAoJXMpIG1vZHVsZTogJXMuIFN1cHBvcnRlZCBwYXJhbWV0ZXJzIGluY2x1ZGU6ICVzIiAlIChzZWxmLl9uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcsJy5qb2luKHNvcnRlZChsaXN0KHVuc3VwcG9ydGVkX3BhcmFtZXRlcnMpKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJywnLmpvaW4oc29ydGVkKHNlbGYuYXJndW1lbnRfc3BlYy5rZXlzKCkpKSkpCiAgICAgICAgaWYgc2VsZi5jaGVja19tb2RlIGFuZCBub3Qgc2VsZi5zdXBwb3J0c19jaGVja19tb2RlOgogICAgICAgICAgICBzZWxmLmV4aXRfanNvbihza2lwcGVkPVRydWUsIG1zZz0icmVtb3RlIG1vZHVsZSAoJXMpIGRvZXMgbm90IHN1cHBvcnQgY2hlY2sgbW9kZSIgJSBzZWxmLl9uYW1lKQoKICAgIGRlZiBfY291bnRfdGVybXMoc2VsZiwgY2hlY2spOgogICAgICAgIGNvdW50ID0gMAogICAgICAgIGZvciB0ZXJtIGluIGNoZWNrOgogICAgICAgICAgICBpZiB0ZXJtIGluIHNlbGYucGFyYW1zOgogICAgICAgICAgICAgICAgY291bnQgKz0gMQogICAgICAgIHJldHVybiBjb3VudAoKICAgIGRlZiBfY2hlY2tfbXV0dWFsbHlfZXhjbHVzaXZlKHNlbGYsIHNwZWMpOgogICAgICAgIGlmIHNwZWMgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZm9yIGNoZWNrIGluIHNwZWM6CiAgICAgICAgICAgIGNvdW50ID0gc2VsZi5fY291bnRfdGVybXMoY2hlY2spCiAgICAgICAgICAgIGlmIGNvdW50ID4gMToKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0icGFyYW1ldGVycyBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlOiAlcyIgJSAoY2hlY2ssKSkKCiAgICBkZWYgX2NoZWNrX3JlcXVpcmVkX29uZV9vZihzZWxmLCBzcGVjKToKICAgICAgICBpZiBzcGVjIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGZvciBjaGVjayBpbiBzcGVjOgogICAgICAgICAgICBjb3VudCA9IHNlbGYuX2NvdW50X3Rlcm1zKGNoZWNrKQogICAgICAgICAgICBpZiBjb3VudCA9PSAwOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyByZXF1aXJlZDogJXMiICUgJywnLmpvaW4oY2hlY2spKQoKICAgIGRlZiBfY2hlY2tfcmVxdWlyZWRfdG9nZXRoZXIoc2VsZiwgc3BlYyk6CiAgICAgICAgaWYgc3BlYyBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4KICAgICAgICBmb3IgY2hlY2sgaW4gc3BlYzoKICAgICAgICAgICAgY291bnRzID0gWyBzZWxmLl9jb3VudF90ZXJtcyhbZmllbGRdKSBmb3IgZmllbGQgaW4gY2hlY2sgXQogICAgICAgICAgICBub25femVybyA9IFsgYyBmb3IgYyBpbiBjb3VudHMgaWYgYyA+IDAgXQogICAgICAgICAgICBpZiBsZW4obm9uX3plcm8pID4gMDoKICAgICAgICAgICAgICAgIGlmIDAgaW4gY291bnRzOgogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0icGFyYW1ldGVycyBhcmUgcmVxdWlyZWQgdG9nZXRoZXI6ICVzIiAlIChjaGVjaywpKQoKICAgIGRlZiBfY2hlY2tfcmVxdWlyZWRfYXJndW1lbnRzKHNlbGYsIHNwZWM9Tm9uZSwgcGFyYW09Tm9uZSApOgogICAgICAgICcnJyBlbnN1cmUgYWxsIHJlcXVpcmVkIGFyZ3VtZW50cyBhcmUgcHJlc2VudCAnJycKICAgICAgICBtaXNzaW5nID0gW10KICAgICAgICBpZiBzcGVjIGlzIE5vbmU6CiAgICAgICAgICAgIHNwZWMgPSBzZWxmLmFyZ3VtZW50X3NwZWMKICAgICAgICBpZiBwYXJhbSBpcyBOb25lOgogICAgICAgICAgICBwYXJhbSA9IHNlbGYucGFyYW1zCiAgICAgICAgZm9yIChrLHYpIGluIHNwZWMuaXRlbXMoKToKICAgICAgICAgICAgcmVxdWlyZWQgPSB2LmdldCgncmVxdWlyZWQnLCBGYWxzZSkKICAgICAgICAgICAgaWYgcmVxdWlyZWQgYW5kIGsgbm90IGluIHBhcmFtOgogICAgICAgICAgICAgICAgbWlzc2luZy5hcHBlbmQoaykKICAgICAgICBpZiBsZW4obWlzc2luZykgPiAwOgogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9Im1pc3NpbmcgcmVxdWlyZWQgYXJndW1lbnRzOiAlcyIgJSAiLCIuam9pbihtaXNzaW5nKSkKCiAgICBkZWYgX2NoZWNrX3JlcXVpcmVkX2lmKHNlbGYsIHNwZWMpOgogICAgICAgICcnJyBlbnN1cmUgdGhhdCBwYXJhbWV0ZXJzIHdoaWNoIGNvbmRpdGlvbmFsbHkgcmVxdWlyZWQgYXJlIHByZXNlbnQgJycnCiAgICAgICAgaWYgc3BlYyBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4KICAgICAgICBmb3Igc3AgaW4gc3BlYzoKICAgICAgICAgICAgbWlzc2luZyA9IFtdCiAgICAgICAgICAgIG1heF9taXNzaW5nX2NvdW50ID0gMAogICAgICAgICAgICBpc19vbmVfb2YgPSBGYWxzZQogICAgICAgICAgICBpZiBsZW4oc3ApID09IDQ6CiAgICAgICAgICAgICAgICBrZXksIHZhbCwgcmVxdWlyZW1lbnRzLCBpc19vbmVfb2YgPSBzcAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAga2V5LCB2YWwsIHJlcXVpcmVtZW50cyA9IHNwCgogICAgICAgICAgICAjIGlzX29uZV9vZiBpcyBUcnVlIGF0IGxlYXN0IG9uZSByZXF1aXJlbWVudCBzaG91bGQgYmUKICAgICAgICAgICAgIyBwcmVzZW50LCBlbHNlIGFsbCByZXF1aXJlbWVudHMgc2hvdWxkIGJlIHByZXNlbnQuCiAgICAgICAgICAgIGlmIGlzX29uZV9vZjoKICAgICAgICAgICAgICAgIG1heF9taXNzaW5nX2NvdW50ID0gbGVuKHJlcXVpcmVtZW50cykKCiAgICAgICAgICAgIGlmIGtleSBpbiBzZWxmLnBhcmFtcyBhbmQgc2VsZi5wYXJhbXNba2V5XSA9PSB2YWw6CiAgICAgICAgICAgICAgICBmb3IgY2hlY2sgaW4gcmVxdWlyZW1lbnRzOgogICAgICAgICAgICAgICAgICAgIGNvdW50ID0gc2VsZi5fY291bnRfdGVybXMoKGNoZWNrLCkpCiAgICAgICAgICAgICAgICAgICAgaWYgY291bnQgPT0gMDoKICAgICAgICAgICAgICAgICAgICAgICAgbWlzc2luZy5hcHBlbmQoY2hlY2spCiAgICAgICAgICAgIGlmIGxlbihtaXNzaW5nKSBhbmQgbGVuKG1pc3NpbmcpID49IG1heF9taXNzaW5nX2NvdW50OgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSIlcyBpcyAlcyBidXQgdGhlIGZvbGxvd2luZyBhcmUgbWlzc2luZzogJXMiICUgKGtleSwgdmFsLCAnLCcuam9pbihtaXNzaW5nKSkpCgogICAgZGVmIF9jaGVja19hcmd1bWVudF92YWx1ZXMoc2VsZiwgc3BlYz1Ob25lLCBwYXJhbT1Ob25lKToKICAgICAgICAnJycgZW5zdXJlIGFsbCBhcmd1bWVudHMgaGF2ZSB0aGUgcmVxdWVzdGVkIHZhbHVlcywgYW5kIHRoZXJlIGFyZSBubyBzdHJheSBhcmd1bWVudHMgJycnCiAgICAgICAgaWYgc3BlYyBpcyBOb25lOgogICAgICAgICAgICBzcGVjID0gc2VsZi5hcmd1bWVudF9zcGVjCiAgICAgICAgaWYgcGFyYW0gaXMgTm9uZToKICAgICAgICAgICAgcGFyYW0gPSBzZWxmLnBhcmFtcwogICAgICAgIGZvciAoayx2KSBpbiBzcGVjLml0ZW1zKCk6CiAgICAgICAgICAgIGNob2ljZXMgPSB2LmdldCgnY2hvaWNlcycsTm9uZSkKICAgICAgICAgICAgaWYgY2hvaWNlcyBpcyBOb25lOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShjaG9pY2VzLCBTRVFVRU5DRVRZUEUpIGFuZCBub3QgaXNpbnN0YW5jZShjaG9pY2VzLCAoYmluYXJ5X3R5cGUsIHRleHRfdHlwZSkpOgogICAgICAgICAgICAgICAgaWYgayBpbiBwYXJhbToKICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbVtrXSBub3QgaW4gY2hvaWNlczoKICAgICAgICAgICAgICAgICAgICAgICAgIyBQeVlhbWwgY29udmVydHMgY2VydGFpbiBzdHJpbmdzIHRvIGJvb2xzLiAgSWYgd2UgY2FuIHVuYW1iaWd1b3VzbHkgY29udmVydCBiYWNrLCBkbyBzbyBiZWZvcmUgY2hlY2tpbmcKICAgICAgICAgICAgICAgICAgICAgICAgIyB0aGUgdmFsdWUuICBJZiB3ZSBjYW4ndCBmaWd1cmUgdGhpcyBvdXQsIG1vZHVsZSBhdXRob3IgaXMgcmVzcG9uc2libGUuCiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyZWRfY2hvaWNlcyA9IE5vbmUKICAgICAgICAgICAgICAgICAgICAgICAgaWYgcGFyYW1ba10gPT0gJ0ZhbHNlJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyZWRfY2hvaWNlcyA9IF9sZW5pZW50X2xvd2VyY2FzZShjaG9pY2VzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRkFMU0VZID0gZnJvemVuc2V0KEJPT0xFQU5TX0ZBTFNFKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmxhcCA9IEZBTFNFWS5pbnRlcnNlY3Rpb24oY2hvaWNlcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbihvdmVybGFwKSA9PSAxOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgRXh0cmFjdCBmcm9tIGEgc2V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBhcmFtW2tdLCkgPSBvdmVybGFwCgogICAgICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbVtrXSA9PSAnVHJ1ZSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBsb3dlcmVkX2Nob2ljZXMgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb3dlcmVkX2Nob2ljZXMgPSBfbGVuaWVudF9sb3dlcmNhc2UoY2hvaWNlcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRSVVRIWSA9IGZyb3plbnNldChCT09MRUFOU19UUlVFKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmxhcCA9IFRSVVRIWS5pbnRlcnNlY3Rpb24oY2hvaWNlcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbihvdmVybGFwKSA9PSAxOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwYXJhbVtrXSwpID0gb3ZlcmxhcAoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgcGFyYW1ba10gbm90IGluIGNob2ljZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaG9pY2VzX3N0cj0iLCIuam9pbihbdG9fbmF0aXZlKGMpIGZvciBjIGluIGNob2ljZXNdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnPSJ2YWx1ZSBvZiAlcyBtdXN0IGJlIG9uZSBvZjogJXMsIGdvdDogJXMiICUgKGssIGNob2ljZXNfc3RyLCBwYXJhbVtrXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz1tc2cpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9ImludGVybmFsIGVycm9yOiBjaG9pY2VzIGZvciBhcmd1bWVudCAlcyBhcmUgbm90IGl0ZXJhYmxlOiAlcyIgJSAoaywgY2hvaWNlcykpCgogICAgZGVmIHNhZmVfZXZhbChzZWxmLCB2YWx1ZSwgbG9jYWxzPU5vbmUsIGluY2x1ZGVfZXhjZXB0aW9ucz1GYWxzZSk6CgogICAgICAgICMgZG8gbm90IGFsbG93IG1ldGhvZCBjYWxscyB0byBtb2R1bGVzCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UodmFsdWUsIHN0cmluZ190eXBlcyk6CiAgICAgICAgICAgICMgYWxyZWFkeSB0ZW1wbGF0ZWQgdG8gYSBkYXRhdmFsdWVzdHJ1Y3R1cmUsIHBlcmhhcHM/CiAgICAgICAgICAgIGlmIGluY2x1ZGVfZXhjZXB0aW9uczoKICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWUsIE5vbmUpCiAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgIGlmIHJlLnNlYXJjaChyJ1x3XC5cdytcKCcsIHZhbHVlKToKICAgICAgICAgICAgaWYgaW5jbHVkZV9leGNlcHRpb25zOgogICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSwgTm9uZSkKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCiAgICAgICAgIyBkbyBub3QgYWxsb3cgaW1wb3J0cwogICAgICAgIGlmIHJlLnNlYXJjaChyJ2ltcG9ydCBcdysnLCB2YWx1ZSk6CiAgICAgICAgICAgIGlmIGluY2x1ZGVfZXhjZXB0aW9uczoKICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWUsIE5vbmUpCiAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzdWx0ID0gbGl0ZXJhbF9ldmFsKHZhbHVlKQogICAgICAgICAgICBpZiBpbmNsdWRlX2V4Y2VwdGlvbnM6CiAgICAgICAgICAgICAgICByZXR1cm4gKHJlc3VsdCwgTm9uZSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgIGlmIGluY2x1ZGVfZXhjZXB0aW9uczoKICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWUsIGUpCiAgICAgICAgICAgIHJldHVybiB2YWx1ZQoKICAgIGRlZiBfY2hlY2tfdHlwZV9zdHIoc2VsZiwgdmFsdWUpOgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIHN0cmluZ190eXBlcyk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgICMgTm90ZTogVGhpcyBjb3VsZCB0aHJvdyBhIHVuaWNvZGUgZXJyb3IgaWYgdmFsdWUncyBfX3N0cl9fKCkgbWV0aG9kCiAgICAgICAgIyByZXR1cm5zIG5vbi1hc2NpaS4gIEhhdmUgdG8gcG9ydCB1dGlscy50b19ieXRlcygpIGlmIHRoYXQgaGFwcGVucwogICAgICAgIHJldHVybiBzdHIodmFsdWUpCgogICAgZGVmIF9jaGVja190eXBlX2xpc3Qoc2VsZiwgdmFsdWUpOgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIGxpc3QpOgogICAgICAgICAgICByZXR1cm4gdmFsdWUKCiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgc3RyaW5nX3R5cGVzKToKICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNwbGl0KCIsIikKICAgICAgICBlbGlmIGlzaW5zdGFuY2UodmFsdWUsIGludCkgb3IgaXNpbnN0YW5jZSh2YWx1ZSwgZmxvYXQpOgogICAgICAgICAgICByZXR1cm4gWyBzdHIodmFsdWUpIF0KCiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCclcyBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgbGlzdCcgJSB0eXBlKHZhbHVlKSkKCiAgICBkZWYgX2NoZWNrX3R5cGVfZGljdChzZWxmLCB2YWx1ZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgZGljdCk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQoKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICBpZiB2YWx1ZS5zdGFydHN3aXRoKCJ7Iik6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGpzb24ubG9hZHModmFsdWUpCiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdCwgZXhjKSA9IHNlbGYuc2FmZV9ldmFsKHZhbHVlLCBkaWN0KCksIGluY2x1ZGVfZXhjZXB0aW9ucz1UcnVlKQogICAgICAgICAgICAgICAgICAgIGlmIGV4YyBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCd1bmFibGUgdG8gZXZhbHVhdGUgc3RyaW5nIGFzIGRpY3Rpb25hcnknKQogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQKICAgICAgICAgICAgZWxpZiAnPScgaW4gdmFsdWU6CiAgICAgICAgICAgICAgICBmaWVsZHMgPSBbXQogICAgICAgICAgICAgICAgZmllbGRfYnVmZmVyID0gW10KICAgICAgICAgICAgICAgIGluX3F1b3RlID0gRmFsc2UKICAgICAgICAgICAgICAgIGluX2VzY2FwZSA9IEZhbHNlCiAgICAgICAgICAgICAgICBmb3IgYyBpbiB2YWx1ZS5zdHJpcCgpOgogICAgICAgICAgICAgICAgICAgIGlmIGluX2VzY2FwZToKICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfYnVmZmVyLmFwcGVuZChjKQogICAgICAgICAgICAgICAgICAgICAgICBpbl9lc2NhcGUgPSBGYWxzZQogICAgICAgICAgICAgICAgICAgIGVsaWYgYyA9PSAnXFwnOgogICAgICAgICAgICAgICAgICAgICAgICBpbl9lc2NhcGUgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgZWxpZiBub3QgaW5fcXVvdGUgYW5kIGMgaW4gKCdcJycsICciJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIGluX3F1b3RlID0gYwogICAgICAgICAgICAgICAgICAgIGVsaWYgaW5fcXVvdGUgYW5kIGluX3F1b3RlID09IGM6CiAgICAgICAgICAgICAgICAgICAgICAgIGluX3F1b3RlID0gRmFsc2UKICAgICAgICAgICAgICAgICAgICBlbGlmIG5vdCBpbl9xdW90ZSBhbmQgYyBpbiAoJywnLCAnICcpOgogICAgICAgICAgICAgICAgICAgICAgICBmaWVsZCA9ICcnLmpvaW4oZmllbGRfYnVmZmVyKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBmaWVsZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkcy5hcHBlbmQoZmllbGQpCiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkX2J1ZmZlciA9IFtdCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfYnVmZmVyLmFwcGVuZChjKQoKICAgICAgICAgICAgICAgIGZpZWxkID0gJycuam9pbihmaWVsZF9idWZmZXIpCiAgICAgICAgICAgICAgICBpZiBmaWVsZDoKICAgICAgICAgICAgICAgICAgICBmaWVsZHMuYXBwZW5kKGZpZWxkKQogICAgICAgICAgICAgICAgcmV0dXJuIGRpY3QoeC5zcGxpdCgiPSIsIDEpIGZvciB4IGluIGZpZWxkcykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigiZGljdGlvbmFyeSByZXF1ZXN0ZWQsIGNvdWxkIG5vdCBwYXJzZSBKU09OIG9yIGtleT12YWx1ZSIpCgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignJXMgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIGRpY3QnICUgdHlwZSh2YWx1ZSkpCgogICAgZGVmIF9jaGVja190eXBlX2Jvb2woc2VsZiwgdmFsdWUpOgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIGJvb2wpOgogICAgICAgICAgICByZXR1cm4gdmFsdWUKCiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgc3RyaW5nX3R5cGVzKSBvciBpc2luc3RhbmNlKHZhbHVlLCBpbnQpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5ib29sZWFuKHZhbHVlKQoKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYSBib29sJyAlIHR5cGUodmFsdWUpKQoKICAgIGRlZiBfY2hlY2tfdHlwZV9pbnQoc2VsZiwgdmFsdWUpOgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIGludCk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQoKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICByZXR1cm4gaW50KHZhbHVlKQoKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYW4gaW50JyAlIHR5cGUodmFsdWUpKQoKICAgIGRlZiBfY2hlY2tfdHlwZV9mbG9hdChzZWxmLCB2YWx1ZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgZmxvYXQpOgogICAgICAgICAgICByZXR1cm4gdmFsdWUKCiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgKGJpbmFyeV90eXBlLCB0ZXh0X3R5cGUsIGludCkpOgogICAgICAgICAgICByZXR1cm4gZmxvYXQodmFsdWUpCgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignJXMgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIGZsb2F0JyAlIHR5cGUodmFsdWUpKQoKICAgIGRlZiBfY2hlY2tfdHlwZV9wYXRoKHNlbGYsIHZhbHVlKToKICAgICAgICB2YWx1ZSA9IHNlbGYuX2NoZWNrX3R5cGVfc3RyKHZhbHVlKQogICAgICAgIHJldHVybiBvcy5wYXRoLmV4cGFuZHVzZXIob3MucGF0aC5leHBhbmR2YXJzKHZhbHVlKSkKCiAgICBkZWYgX2NoZWNrX3R5cGVfanNvbmFyZyhzZWxmLCB2YWx1ZSk6CiAgICAgICAgIyBSZXR1cm4gYSBqc29uaWZpZWQgc3RyaW5nLiAgU29tZXRpbWVzIHRoZSBjb250cm9sbGVyIHR1cm5zIGEganNvbgogICAgICAgICMgc3RyaW5nIGludG8gYSBkaWN0L2xpc3Qgc28gdHJhbnNmb3JtIGl0IGJhY2sgaW50byBqc29uIGhlcmUKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCAodGV4dF90eXBlLCBiaW5hcnlfdHlwZSkpOgogICAgICAgICAgICByZXR1cm4gdmFsdWUuc3RyaXAoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIChsaXN0LCB0dXBsZSwgZGljdCkpOgogICAgICAgICAgICAgICAgcmV0dXJuIGpzb24uZHVtcHModmFsdWUpCiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCclcyBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEganNvbiBzdHJpbmcnICUgdHlwZSh2YWx1ZSkpCgogICAgZGVmIF9jaGVja190eXBlX3JhdyhzZWxmLCB2YWx1ZSk6CiAgICAgICAgcmV0dXJuIHZhbHVlCgoKICAgIGRlZiBfY2hlY2tfdHlwZV9ieXRlcyhzZWxmLCB2YWx1ZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLmh1bWFuX3RvX2J5dGVzKHZhbHVlKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYSBCeXRlIHZhbHVlJyAlIHR5cGUodmFsdWUpKQoKCiAgICBkZWYgX2NoZWNrX3R5cGVfYml0cyhzZWxmLCB2YWx1ZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLmh1bWFuX3RvX2J5dGVzKHZhbHVlLCBpc2JpdHM9VHJ1ZSkKICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCclcyBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgQml0IHZhbHVlJyAlIHR5cGUodmFsdWUpKQoKICAgIGRlZiBfY2hlY2tfYXJndW1lbnRfdHlwZXMoc2VsZiwgc3BlYz1Ob25lLCBwYXJhbT1Ob25lKToKICAgICAgICAnJycgZW5zdXJlIGFsbCBhcmd1bWVudHMgaGF2ZSB0aGUgcmVxdWVzdGVkIHR5cGUgJycnCgogICAgICAgIGlmIHNwZWMgaXMgTm9uZToKICAgICAgICAgICAgc3BlYyA9IHNlbGYuYXJndW1lbnRfc3BlYwogICAgICAgIGlmIHBhcmFtIGlzIE5vbmU6CiAgICAgICAgICAgIHBhcmFtID0gc2VsZi5wYXJhbXMKCiAgICAgICAgZm9yIChrLCB2KSBpbiBzcGVjLml0ZW1zKCk6CiAgICAgICAgICAgIHdhbnRlZCA9IHYuZ2V0KCd0eXBlJywgTm9uZSkKICAgICAgICAgICAgaWYgayBub3QgaW4gcGFyYW06CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBpZiB3YW50ZWQgaXMgTm9uZToKICAgICAgICAgICAgICAgICMgTW9zdGx5IHdlIHdhbnQgdG8gZGVmYXVsdCB0byBzdHIuCiAgICAgICAgICAgICAgICAjIEZvciB2YWx1ZXMgc2V0IHRvIE5vbmUgZXhwbGljaXRseSwgcmV0dXJuIE5vbmUgaW5zdGVhZCBhcwogICAgICAgICAgICAgICAgIyB0aGF0IGFsbG93cyBhIHVzZXIgdG8gdW5zZXQgYSBwYXJhbWV0ZXIKICAgICAgICAgICAgICAgIGlmIHBhcmFtW2tdIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIHdhbnRlZCA9ICdzdHInCgogICAgICAgICAgICB2YWx1ZSA9IHBhcmFtW2tdCiAgICAgICAgICAgIGlmIHZhbHVlIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBjb250aW51ZQoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdHlwZV9jaGVja2VyID0gc2VsZi5fQ0hFQ0tfQVJHVU1FTlRfVFlQRVNfRElTUEFUQ0hFUlt3YW50ZWRdCiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0iaW1wbGVtZW50YXRpb24gZXJyb3I6IHVua25vd24gdHlwZSAlcyByZXF1ZXN0ZWQgZm9yICVzIiAlICh3YW50ZWQsIGspKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBwYXJhbVtrXSA9IHR5cGVfY2hlY2tlcih2YWx1ZSkKICAgICAgICAgICAgZXhjZXB0IChUeXBlRXJyb3IsIFZhbHVlRXJyb3IpOgogICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJhcmd1bWVudCAlcyBpcyBvZiB0eXBlICVzIGFuZCB3ZSB3ZXJlIHVuYWJsZSB0byBjb252ZXJ0IHRvICVzOiAlcyIgJSAoaywgdHlwZSh2YWx1ZSksIHdhbnRlZCwgZSkpCgogICAgICAgICAgICAjIGRlYWwgd2l0aCBzdWIgb3B0aW9ucyB0byBjcmVhdGUgc3ViIHNwZWMKICAgICAgICAgICAgc3BlYyA9IE5vbmUKICAgICAgICAgICAgaWYgd2FudGVkID09ICdkaWN0JyBvciAod2FudGVkID09ICdsaXN0JyBhbmQgdi5nZXQoJ2VsZW1lbnRzJywgJycpID09ICdkaWN0Jyk6CiAgICAgICAgICAgICAgICBzcGVjID0gdi5nZXQoJ29wdGlvbnMnLCBOb25lKQogICAgICAgICAgICAgICAgaWYgc3BlYzoKICAgICAgICAgICAgICAgICAgICBzZWxmLl9jaGVja19yZXF1aXJlZF9hcmd1bWVudHMoc3BlYywgcGFyYW1ba10pCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fY2hlY2tfYXJndW1lbnRfdHlwZXMoc3BlYywgcGFyYW1ba10pCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fY2hlY2tfYXJndW1lbnRfdmFsdWVzKHNwZWMsIHBhcmFtW2tdKQoKICAgIGRlZiBfc2V0X2RlZmF1bHRzKHNlbGYsIHByZT1UcnVlKToKICAgICAgICBmb3IgKGssdikgaW4gc2VsZi5hcmd1bWVudF9zcGVjLml0ZW1zKCk6CiAgICAgICAgICAgIGRlZmF1bHQgPSB2LmdldCgnZGVmYXVsdCcsIE5vbmUpCiAgICAgICAgICAgIGlmIHByZSBpcyBUcnVlOgogICAgICAgICAgICAgICAgIyB0aGlzIHByZXZlbnRzIHNldHRpbmcgZGVmYXVsdHMgb24gcmVxdWlyZWQgaXRlbXMKICAgICAgICAgICAgICAgIGlmIGRlZmF1bHQgaXMgbm90IE5vbmUgYW5kIGsgbm90IGluIHNlbGYucGFyYW1zOgogICAgICAgICAgICAgICAgICAgIHNlbGYucGFyYW1zW2tdID0gZGVmYXVsdAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBtYWtlIHN1cmUgdGhpbmdzIHdpdGhvdXQgYSBkZWZhdWx0IHN0aWxsIGdldCBzZXQgTm9uZQogICAgICAgICAgICAgICAgaWYgayBub3QgaW4gc2VsZi5wYXJhbXM6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5wYXJhbXNba10gPSBkZWZhdWx0CgogICAgZGVmIF9zZXRfZmFsbGJhY2tzKHNlbGYpOgogICAgICAgIGZvciBrLHYgaW4gc2VsZi5hcmd1bWVudF9zcGVjLml0ZW1zKCk6CiAgICAgICAgICAgIGZhbGxiYWNrID0gdi5nZXQoJ2ZhbGxiYWNrJywgKE5vbmUsKSkKICAgICAgICAgICAgZmFsbGJhY2tfc3RyYXRlZ3kgPSBmYWxsYmFja1swXQogICAgICAgICAgICBmYWxsYmFja19hcmdzID0gW10KICAgICAgICAgICAgZmFsbGJhY2tfa3dhcmdzID0ge30KICAgICAgICAgICAgaWYgayBub3QgaW4gc2VsZi5wYXJhbXMgYW5kIGZhbGxiYWNrX3N0cmF0ZWd5IGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgZm9yIGl0ZW0gaW4gZmFsbGJhY2tbMTpdOgogICAgICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoaXRlbSwgZGljdCk6CiAgICAgICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrX2t3YXJncyA9IGl0ZW0KICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBmYWxsYmFja19hcmdzID0gaXRlbQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHNlbGYucGFyYW1zW2tdID0gZmFsbGJhY2tfc3RyYXRlZ3koKmZhbGxiYWNrX2FyZ3MsICoqZmFsbGJhY2tfa3dhcmdzKQogICAgICAgICAgICAgICAgZXhjZXB0IEFuc2libGVGYWxsYmFja05vdEZvdW5kOgogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgZGVmIF9sb2FkX3BhcmFtcyhzZWxmKToKICAgICAgICAnJycgcmVhZCB0aGUgaW5wdXQgYW5kIHNldCB0aGUgcGFyYW1zIGF0dHJpYnV0ZS4KCiAgICAgICAgVGhpcyBtZXRob2QgaXMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiAgVGhlIGd1dHMgb2YgdGhlIGZ1bmN0aW9uCiAgICAgICAgd2VyZSBtb3ZlZCBvdXQgaW4gMi4xIHNvIHRoYXQgY3VzdG9tIG1vZHVsZXMgY291bGQgcmVhZCB0aGUgcGFyYW1ldGVycy4KICAgICAgICAnJycKICAgICAgICAjIGRlYnVnIG92ZXJyaWRlcyB0byByZWFkIGFyZ3MgZnJvbSBmaWxlIG9yIGNtZGxpbmUKICAgICAgICBzZWxmLnBhcmFtcyA9IF9sb2FkX3BhcmFtcygpCgogICAgZGVmIF9sb2dfdG9fc3lzbG9nKHNlbGYsIG1zZyk6CiAgICAgICAgaWYgSEFTX1NZU0xPRzoKICAgICAgICAgICAgbW9kdWxlID0gJ2Fuc2libGUtJXMnICUgc2VsZi5fbmFtZQogICAgICAgICAgICBmYWNpbGl0eSA9IGdldGF0dHIoc3lzbG9nLCBzZWxmLl9zeXNsb2dfZmFjaWxpdHksIHN5c2xvZy5MT0dfVVNFUikKICAgICAgICAgICAgc3lzbG9nLm9wZW5sb2coc3RyKG1vZHVsZSksIDAsIGZhY2lsaXR5KQogICAgICAgICAgICBzeXNsb2cuc3lzbG9nKHN5c2xvZy5MT0dfSU5GTywgbXNnKQoKICAgIGRlZiBkZWJ1ZyhzZWxmLCBtc2cpOgogICAgICAgIGlmIHNlbGYuX2RlYnVnOgogICAgICAgICAgICBzZWxmLmxvZygnW2RlYnVnXSAlcycgJSBtc2cpCgogICAgZGVmIGxvZyhzZWxmLCBtc2csIGxvZ19hcmdzPU5vbmUpOgoKICAgICAgICBpZiBub3Qgc2VsZi5ub19sb2c6CgogICAgICAgICAgICBpZiBsb2dfYXJncyBpcyBOb25lOgogICAgICAgICAgICAgICAgbG9nX2FyZ3MgPSBkaWN0KCkKCiAgICAgICAgICAgIG1vZHVsZSA9ICdhbnNpYmxlLSVzJyAlIHNlbGYuX25hbWUKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShtb2R1bGUsIGJpbmFyeV90eXBlKToKICAgICAgICAgICAgICAgIG1vZHVsZSA9IG1vZHVsZS5kZWNvZGUoJ3V0Zi04JywgJ3JlcGxhY2UnKQoKICAgICAgICAgICAgIyA2NjU1IC0gYWxsb3cgZm9yIGFjY2VudGVkIGNoYXJhY3RlcnMKICAgICAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UobXNnLCAoYmluYXJ5X3R5cGUsIHRleHRfdHlwZSkpOgogICAgICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJtc2cgc2hvdWxkIGJlIGEgc3RyaW5nIChnb3QgJXMpIiAlIHR5cGUobXNnKSkKCiAgICAgICAgICAgICMgV2Ugd2FudCBqb3VybmFsIHRvIGFsd2F5cyB0YWtlIHRleHQgdHlwZQogICAgICAgICAgICAjIHN5c2xvZyB0YWtlcyBieXRlcyBvbiBweTIsIHRleHQgdHlwZSBvbiBweTMKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShtc2csIGJpbmFyeV90eXBlKToKICAgICAgICAgICAgICAgIGpvdXJuYWxfbXNnID0gcmVtb3ZlX3ZhbHVlcyhtc2cuZGVjb2RlKCd1dGYtOCcsICdyZXBsYWNlJyksIHNlbGYubm9fbG9nX3ZhbHVlcykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgVE9ETzogc3Vycm9nYXRlZXNjYXBlIGlzIGEgZGFuZ2VyIGhlcmUgb24gUHkzCiAgICAgICAgICAgICAgICBqb3VybmFsX21zZyA9IHJlbW92ZV92YWx1ZXMobXNnLCBzZWxmLm5vX2xvZ192YWx1ZXMpCgogICAgICAgICAgICBpZiBQWTM6CiAgICAgICAgICAgICAgICBzeXNsb2dfbXNnID0gam91cm5hbF9tc2cKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHN5c2xvZ19tc2cgPSBqb3VybmFsX21zZy5lbmNvZGUoJ3V0Zi04JywgJ3JlcGxhY2UnKQoKICAgICAgICAgICAgaWYgaGFzX2pvdXJuYWw6CiAgICAgICAgICAgICAgICBqb3VybmFsX2FyZ3MgPSBbKCJNT0RVTEUiLCBvcy5wYXRoLmJhc2VuYW1lKF9fZmlsZV9fKSldCiAgICAgICAgICAgICAgICBmb3IgYXJnIGluIGxvZ19hcmdzOgogICAgICAgICAgICAgICAgICAgIGpvdXJuYWxfYXJncy5hcHBlbmQoKGFyZy51cHBlcigpLCBzdHIobG9nX2FyZ3NbYXJnXSkpKQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGpvdXJuYWwuc2VuZCh1IiVzICVzIiAlIChtb2R1bGUsIGpvdXJuYWxfbXNnKSwgKipkaWN0KGpvdXJuYWxfYXJncykpCiAgICAgICAgICAgICAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICAgICAgICAgICAgICAjIGZhbGwgYmFjayB0byBzeXNsb2cgc2luY2UgbG9nZ2luZyB0byBqb3VybmFsIGZhaWxlZAogICAgICAgICAgICAgICAgICAgIHNlbGYuX2xvZ190b19zeXNsb2coc3lzbG9nX21zZykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYuX2xvZ190b19zeXNsb2coc3lzbG9nX21zZykKCiAgICBkZWYgX2xvZ19pbnZvY2F0aW9uKHNlbGYpOgogICAgICAgICcnJyBsb2cgdGhhdCBhbnNpYmxlIHJhbiB0aGUgbW9kdWxlICcnJwogICAgICAgICMgVE9ETzogZ2VuZXJhbGl6ZSBhIHNlcGFyYXRlIGxvZyBmdW5jdGlvbiBhbmQgbWFrZSBsb2dfaW52b2NhdGlvbiB1c2UgaXQKICAgICAgICAjIFNhbml0aXplIHBvc3NpYmxlIHBhc3N3b3JkIGFyZ3VtZW50IHdoZW4gbG9nZ2luZy4KICAgICAgICBsb2dfYXJncyA9IGRpY3QoKQoKICAgICAgICBmb3IgcGFyYW0gaW4gc2VsZi5wYXJhbXM6CiAgICAgICAgICAgIGNhbm9uICA9IHNlbGYuYWxpYXNlcy5nZXQocGFyYW0sIHBhcmFtKQogICAgICAgICAgICBhcmdfb3B0cyA9IHNlbGYuYXJndW1lbnRfc3BlYy5nZXQoY2Fub24sIHt9KQogICAgICAgICAgICBub19sb2cgPSBhcmdfb3B0cy5nZXQoJ25vX2xvZycsIEZhbHNlKQoKICAgICAgICAgICAgaWYgc2VsZi5ib29sZWFuKG5vX2xvZyk6CiAgICAgICAgICAgICAgICBsb2dfYXJnc1twYXJhbV0gPSAnTk9UX0xPR0dJTkdfUEFSQU1FVEVSJwogICAgICAgICAgICAjIHRyeSB0byBjYXB0dXJlIGFsbCBwYXNzd29yZHMvcGFzc3BocmFzZSBuYW1lZCBmaWVsZHMgbWlzc2VkIGJ5IG5vX2xvZwogICAgICAgICAgICBlbGlmIFBBU1NXT1JEX01BVENILnNlYXJjaChwYXJhbSkgYW5kIFwKICAgICAgICAgICAgICBhcmdfb3B0cy5nZXQoJ3R5cGUnLCAnc3RyJykgIT0gJ2Jvb2wnIGFuZCBcCiAgICAgICAgICAgICAgbm90IGFyZ19vcHRzLmdldCgnY2hvaWNlcycsIEZhbHNlKToKICAgICAgICAgICAgICAgICMgc2tpcCBib29sZWFuIGFuZCBlbnVtcyBhcyB0aGV5IGFyZSBhYm91dCAncGFzc3dvcmQnIHN0YXRlCiAgICAgICAgICAgICAgICBsb2dfYXJnc1twYXJhbV0gPSAnTk9UX0xPR0dJTkdfUEFTU1dPUkQnCiAgICAgICAgICAgICAgICBzZWxmLndhcm4oJ01vZHVsZSBkaWQgbm90IHNldCBub19sb2cgZm9yICVzJyAlIHBhcmFtKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcGFyYW1fdmFsID0gc2VsZi5wYXJhbXNbcGFyYW1dCiAgICAgICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShwYXJhbV92YWwsICh0ZXh0X3R5cGUsIGJpbmFyeV90eXBlKSk6CiAgICAgICAgICAgICAgICAgICAgcGFyYW1fdmFsID0gc3RyKHBhcmFtX3ZhbCkKICAgICAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZShwYXJhbV92YWwsIHRleHRfdHlwZSk6CiAgICAgICAgICAgICAgICAgICAgcGFyYW1fdmFsID0gcGFyYW1fdmFsLmVuY29kZSgndXRmLTgnKQogICAgICAgICAgICAgICAgbG9nX2FyZ3NbcGFyYW1dID0gaGV1cmlzdGljX2xvZ19zYW5pdGl6ZShwYXJhbV92YWwsIHNlbGYubm9fbG9nX3ZhbHVlcykKCiAgICAgICAgbXNnID0gWyclcz0lcycgJSAodG9fbmF0aXZlKGFyZyksIHRvX25hdGl2ZSh2YWwpKSBmb3IgYXJnLCB2YWwgaW4gbG9nX2FyZ3MuaXRlbXMoKV0KICAgICAgICBpZiBtc2c6CiAgICAgICAgICAgIG1zZyA9ICdJbnZva2VkIHdpdGggJXMnICUgJyAnLmpvaW4obXNnKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG1zZyA9ICdJbnZva2VkJwoKICAgICAgICBzZWxmLmxvZyhtc2csIGxvZ19hcmdzPWxvZ19hcmdzKQoKCiAgICBkZWYgX3NldF9jd2Qoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBjd2QgPSBvcy5nZXRjd2QoKQogICAgICAgICAgICBpZiBub3Qgb3MuYWNjZXNzKGN3ZCwgb3MuRl9PS3xvcy5SX09LKToKICAgICAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbigpCiAgICAgICAgICAgIHJldHVybiBjd2QKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICMgd2UgZG9uJ3QgaGF2ZSBhY2Nlc3MgdG8gdGhlIGN3ZCwgcHJvYmFibHkgYmVjYXVzZSBvZiBzdWRvLgogICAgICAgICAgICAjIFRyeSBhbmQgbW92ZSB0byBhIG5ldXRyYWwgbG9jYXRpb24gdG8gcHJldmVudCBlcnJvcnMKICAgICAgICAgICAgZm9yIGN3ZCBpbiBbb3MucGF0aC5leHBhbmR2YXJzKCckSE9NRScpLCB0ZW1wZmlsZS5nZXR0ZW1wZGlyKCldOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGlmIG9zLmFjY2Vzcyhjd2QsIG9zLkZfT0t8b3MuUl9PSyk6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLmNoZGlyKGN3ZCkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN3ZAogICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAjIHdlIHdvbid0IGVycm9yIGhlcmUsIGFzIGl0IG1heSAqbm90KiBiZSBhIHByb2JsZW0sCiAgICAgICAgIyBhbmQgd2UgZG9uJ3Qgd2FudCB0byBicmVhayBtb2R1bGVzIHVubmVjZXNzYXJpbHkKICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiBnZXRfYmluX3BhdGgoc2VsZiwgYXJnLCByZXF1aXJlZD1GYWxzZSwgb3B0X2RpcnM9W10pOgogICAgICAgICcnJwogICAgICAgIGZpbmQgc3lzdGVtIGV4ZWN1dGFibGUgaW4gUEFUSC4KICAgICAgICBPcHRpb25hbCBhcmd1bWVudHM6CiAgICAgICAgICAgLSByZXF1aXJlZDogIGlmIGV4ZWN1dGFibGUgaXMgbm90IGZvdW5kIGFuZCByZXF1aXJlZCBpcyB0cnVlLCBmYWlsX2pzb24KICAgICAgICAgICAtIG9wdF9kaXJzOiAgb3B0aW9uYWwgbGlzdCBvZiBkaXJlY3RvcmllcyB0byBzZWFyY2ggaW4gYWRkaXRpb24gdG8gUEFUSAogICAgICAgIGlmIGZvdW5kIHJldHVybiBmdWxsIHBhdGg7IG90aGVyd2lzZSByZXR1cm4gTm9uZQogICAgICAgICcnJwogICAgICAgIHNiaW5fcGF0aHMgPSBbJy9zYmluJywgJy91c3Ivc2JpbicsICcvdXNyL2xvY2FsL3NiaW4nXQogICAgICAgIHBhdGhzID0gW10KICAgICAgICBmb3IgZCBpbiBvcHRfZGlyczoKICAgICAgICAgICAgaWYgZCBpcyBub3QgTm9uZSBhbmQgb3MucGF0aC5leGlzdHMoZCk6CiAgICAgICAgICAgICAgICBwYXRocy5hcHBlbmQoZCkKICAgICAgICBwYXRocyArPSBvcy5lbnZpcm9uLmdldCgnUEFUSCcsICcnKS5zcGxpdChvcy5wYXRoc2VwKQogICAgICAgIGJpbl9wYXRoID0gTm9uZQogICAgICAgICMgbWFuZ2xlIFBBVEggdG8gaW5jbHVkZSAvc2JpbiBkaXJzCiAgICAgICAgZm9yIHAgaW4gc2Jpbl9wYXRoczoKICAgICAgICAgICAgaWYgcCBub3QgaW4gcGF0aHMgYW5kIG9zLnBhdGguZXhpc3RzKHApOgogICAgICAgICAgICAgICAgcGF0aHMuYXBwZW5kKHApCiAgICAgICAgZm9yIGQgaW4gcGF0aHM6CiAgICAgICAgICAgIGlmIG5vdCBkOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgcGF0aCA9IG9zLnBhdGguam9pbihkLCBhcmcpCiAgICAgICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKHBhdGgpIGFuZCBub3Qgb3MucGF0aC5pc2RpcihwYXRoKSBhbmQgaXNfZXhlY3V0YWJsZShwYXRoKToKICAgICAgICAgICAgICAgIGJpbl9wYXRoID0gcGF0aAogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICBpZiByZXF1aXJlZCBhbmQgYmluX3BhdGggaXMgTm9uZToKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdGYWlsZWQgdG8gZmluZCByZXF1aXJlZCBleGVjdXRhYmxlICVzIGluIHBhdGhzOiAlcycgJSAoYXJnLCBvcy5wYXRoc2VwLmpvaW4ocGF0aHMpKSkKICAgICAgICByZXR1cm4gYmluX3BhdGgKCiAgICBkZWYgYm9vbGVhbihzZWxmLCBhcmcpOgogICAgICAgICcnJyByZXR1cm4gYSBib29sIGZvciB0aGUgYXJnICcnJwogICAgICAgIGlmIGFyZyBpcyBOb25lIG9yIGlzaW5zdGFuY2UoYXJnLCBib29sKToKICAgICAgICAgICAgcmV0dXJuIGFyZwogICAgICAgIGlmIGlzaW5zdGFuY2UoYXJnLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICBhcmcgPSBhcmcubG93ZXIoKQogICAgICAgIGlmIGFyZyBpbiBCT09MRUFOU19UUlVFOgogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGVsaWYgYXJnIGluIEJPT0xFQU5TX0ZBTFNFOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9JyVzIGlzIG5vdCBhIHZhbGlkIGJvb2xlYW4uIFZhbGlkIGJvb2xlYW5zIGluY2x1ZGU6ICVzJyAlICh0b190ZXh0KGFyZyksICcsJy5qb2luKFsnJXMnICUgeCBmb3IgeCBpbiBCT09MRUFOU10pKSkKCiAgICBkZWYganNvbmlmeShzZWxmLCBkYXRhKToKICAgICAgICBmb3IgZW5jb2RpbmcgaW4gKCJ1dGYtOCIsICJsYXRpbi0xIik6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHJldHVybiBqc29uLmR1bXBzKGRhdGEsIGVuY29kaW5nPWVuY29kaW5nKQogICAgICAgICAgICAjIE9sZCBzeXN0ZW1zIHVzaW5nIG9sZCBzaW1wbGVqc29uIG1vZHVsZSBkb2VzIG5vdCBzdXBwb3J0IGVuY29kaW5nIGtleXdvcmQuCiAgICAgICAgICAgIGV4Y2VwdCBUeXBlRXJyb3I6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgbmV3X2RhdGEgPSBqc29uX2RpY3RfYnl0ZXNfdG9fdW5pY29kZShkYXRhLCBlbmNvZGluZz1lbmNvZGluZykKICAgICAgICAgICAgICAgIGV4Y2VwdCBVbmljb2RlRGVjb2RlRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIHJldHVybiBqc29uLmR1bXBzKG5ld19kYXRhKQogICAgICAgICAgICBleGNlcHQgVW5pY29kZURlY29kZUVycm9yOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9J0ludmFsaWQgdW5pY29kZSBlbmNvZGluZyBlbmNvdW50ZXJlZCcpCgogICAgZGVmIGZyb21fanNvbihzZWxmLCBkYXRhKToKICAgICAgICByZXR1cm4ganNvbi5sb2FkcyhkYXRhKQoKICAgIGRlZiBhZGRfY2xlYW51cF9maWxlKHNlbGYsIHBhdGgpOgogICAgICAgIGlmIHBhdGggbm90IGluIHNlbGYuY2xlYW51cF9maWxlczoKICAgICAgICAgICAgc2VsZi5jbGVhbnVwX2ZpbGVzLmFwcGVuZChwYXRoKQoKICAgIGRlZiBkb19jbGVhbnVwX2ZpbGVzKHNlbGYpOgogICAgICAgIGZvciBwYXRoIGluIHNlbGYuY2xlYW51cF9maWxlczoKICAgICAgICAgICAgc2VsZi5jbGVhbnVwKHBhdGgpCgogICAgZGVmIF9yZXR1cm5fZm9ybWF0dGVkKHNlbGYsIGt3YXJncyk6CgogICAgICAgIHNlbGYuYWRkX3BhdGhfaW5mbyhrd2FyZ3MpCgogICAgICAgIGlmICdpbnZvY2F0aW9uJyBub3QgaW4ga3dhcmdzOgogICAgICAgICAgICBrd2FyZ3NbJ2ludm9jYXRpb24nXSA9IHsnbW9kdWxlX2FyZ3MnOiBzZWxmLnBhcmFtc30KCiAgICAgICAgaWYgJ3dhcm5pbmdzJyBpbiBrd2FyZ3M6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoa3dhcmdzWyd3YXJuaW5ncyddLCBsaXN0KToKICAgICAgICAgICAgICAgIGZvciB3IGluIGt3YXJnc1snd2FybmluZ3MnXToKICAgICAgICAgICAgICAgICAgICBzZWxmLndhcm4odykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYud2Fybihrd2FyZ3NbJ3dhcm5pbmdzJ10pCgogICAgICAgIGlmIHNlbGYuX3dhcm5pbmdzOgogICAgICAgICAgICBrd2FyZ3NbJ3dhcm5pbmdzJ10gPSBzZWxmLl93YXJuaW5ncwoKICAgICAgICBpZiAnZGVwcmVjYXRpb25zJyBpbiBrd2FyZ3M6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoa3dhcmdzWydkZXByZWNhdGlvbnMnXSwgbGlzdCk6CiAgICAgICAgICAgICAgICBmb3IgZCBpbiBrd2FyZ3NbJ2RlcHJlY2F0aW9ucyddOgogICAgICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoZCwgU0VRVUVOQ0VUWVBFKSBhbmQgbGVuKGQpID09IDI6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGVwcmVjYXRlKGRbMF0sIHZlcnNpb249ZFsxXSkKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRlcHJlY2F0ZShkKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5kZXByZWNhdGUoa3dhcmdzWydkZXByZWNhdGlvbnMnXSkKCiAgICAgICAgaWYgc2VsZi5fZGVwcmVjYXRpb25zOgogICAgICAgICAgICBrd2FyZ3NbJ2RlcHJlY2F0aW9ucyddID0gc2VsZi5fZGVwcmVjYXRpb25zCgogICAgICAgIGt3YXJncyA9IHJlbW92ZV92YWx1ZXMoa3dhcmdzLCBzZWxmLm5vX2xvZ192YWx1ZXMpCiAgICAgICAgcHJpbnQoJ1xuJXMnICUgc2VsZi5qc29uaWZ5KGt3YXJncykpCgogICAgZGVmIGV4aXRfanNvbihzZWxmLCAqKmt3YXJncyk6CiAgICAgICAgJycnIHJldHVybiBmcm9tIHRoZSBtb2R1bGUsIHdpdGhvdXQgZXJyb3IgJycnCgogICAgICAgIGlmIG5vdCAnY2hhbmdlZCcgaW4ga3dhcmdzOgogICAgICAgICAgICBrd2FyZ3NbJ2NoYW5nZWQnXSA9IEZhbHNlCgogICAgICAgIHNlbGYuZG9fY2xlYW51cF9maWxlcygpCiAgICAgICAgc2VsZi5fcmV0dXJuX2Zvcm1hdHRlZChrd2FyZ3MpCiAgICAgICAgc3lzLmV4aXQoMCkKCiAgICBkZWYgZmFpbF9qc29uKHNlbGYsICoqa3dhcmdzKToKICAgICAgICAnJycgcmV0dXJuIGZyb20gdGhlIG1vZHVsZSwgd2l0aCBhbiBlcnJvciBtZXNzYWdlICcnJwoKICAgICAgICBhc3NlcnQgJ21zZycgaW4ga3dhcmdzLCAiaW1wbGVtZW50YXRpb24gZXJyb3IgLS0gbXNnIHRvIGV4cGxhaW4gdGhlIGVycm9yIGlzIHJlcXVpcmVkIgogICAgICAgIGt3YXJnc1snZmFpbGVkJ10gPSBUcnVlCgogICAgICAgIGlmIG5vdCAnY2hhbmdlZCcgaW4ga3dhcmdzOgogICAgICAgICAgICBrd2FyZ3NbJ2NoYW5nZWQnXSA9IEZhbHNlCgogICAgICAgIHNlbGYuZG9fY2xlYW51cF9maWxlcygpCiAgICAgICAgc2VsZi5fcmV0dXJuX2Zvcm1hdHRlZChrd2FyZ3MpCiAgICAgICAgc3lzLmV4aXQoMSkKCiAgICBkZWYgZmFpbF9vbl9taXNzaW5nX3BhcmFtcyhzZWxmLCByZXF1aXJlZF9wYXJhbXM9Tm9uZSk6CiAgICAgICAgJycnIFRoaXMgaXMgZm9yIGNoZWNraW5nIGZvciByZXF1aXJlZCBwYXJhbXMgd2hlbiB3ZSBjYW4gbm90IGNoZWNrIHZpYSBhcmdzcGVjIGJlY2F1c2Ugd2UKICAgICAgICBuZWVkIG1vcmUgaW5mb3JtYXRpb24gdGhhbiBpcyBzaW1wbHkgZ2l2ZW4gaW4gdGhlIGFyZ3NwZWMuCiAgICAgICAgJycnCiAgICAgICAgaWYgbm90IHJlcXVpcmVkX3BhcmFtczoKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgbWlzc2luZ19wYXJhbXMgPSBbXQogICAgICAgIGZvciByZXF1aXJlZF9wYXJhbSBpbiByZXF1aXJlZF9wYXJhbXM6CiAgICAgICAgICAgIGlmIG5vdCBzZWxmLnBhcmFtcy5nZXQocmVxdWlyZWRfcGFyYW0pOgogICAgICAgICAgICAgICAgbWlzc2luZ19wYXJhbXMuYXBwZW5kKHJlcXVpcmVkX3BhcmFtKQogICAgICAgIGlmIG1pc3NpbmdfcGFyYW1zOgogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9Im1pc3NpbmcgcmVxdWlyZWQgYXJndW1lbnRzOiAlcyIgJSAnLCcuam9pbihtaXNzaW5nX3BhcmFtcykpCgogICAgZGVmIGRpZ2VzdF9mcm9tX2ZpbGUoc2VsZiwgZmlsZW5hbWUsIGFsZ29yaXRobSk6CiAgICAgICAgJycnIFJldHVybiBoZXggZGlnZXN0IG9mIGxvY2FsIGZpbGUgZm9yIGEgZGlnZXN0X21ldGhvZCBzcGVjaWZpZWQgYnkgbmFtZSwgb3IgTm9uZSBpZiBmaWxlIGlzIG5vdCBwcmVzZW50LiAnJycKICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoZmlsZW5hbWUpOgogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIGlmIG9zLnBhdGguaXNkaXIoZmlsZW5hbWUpOgogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9ImF0dGVtcHRlZCB0byB0YWtlIGNoZWNrc3VtIG9mIGRpcmVjdG9yeTogJXMiICUgZmlsZW5hbWUpCgogICAgICAgICMgcHJlc2VydmUgb2xkIGJlaGF2aW91ciB3aGVyZSB0aGUgdGhpcmQgcGFyYW1ldGVyIHdhcyBhIGhhc2ggYWxnb3JpdGhtIG9iamVjdAogICAgICAgIGlmIGhhc2F0dHIoYWxnb3JpdGhtLCAnaGV4ZGlnZXN0Jyk6CiAgICAgICAgICAgIGRpZ2VzdF9tZXRob2QgPSBhbGdvcml0aG0KICAgICAgICBlbHNlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBkaWdlc3RfbWV0aG9kID0gQVZBSUxBQkxFX0hBU0hfQUxHT1JJVEhNU1thbGdvcml0aG1dKCkKICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJDb3VsZCBub3QgaGFzaCBmaWxlICclcycgd2l0aCBhbGdvcml0aG0gJyVzJy4gQXZhaWxhYmxlIGFsZ29yaXRobXM6ICVzIiAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZpbGVuYW1lLCBhbGdvcml0aG0sICcsICcuam9pbihBVkFJTEFCTEVfSEFTSF9BTEdPUklUSE1TKSkpCgogICAgICAgIGJsb2Nrc2l6ZSA9IDY0ICogMTAyNAogICAgICAgIGluZmlsZSA9IG9wZW4ob3MucGF0aC5yZWFscGF0aChmaWxlbmFtZSksICdyYicpCiAgICAgICAgYmxvY2sgPSBpbmZpbGUucmVhZChibG9ja3NpemUpCiAgICAgICAgd2hpbGUgYmxvY2s6CiAgICAgICAgICAgIGRpZ2VzdF9tZXRob2QudXBkYXRlKGJsb2NrKQogICAgICAgICAgICBibG9jayA9IGluZmlsZS5yZWFkKGJsb2Nrc2l6ZSkKICAgICAgICBpbmZpbGUuY2xvc2UoKQogICAgICAgIHJldHVybiBkaWdlc3RfbWV0aG9kLmhleGRpZ2VzdCgpCgogICAgZGVmIG1kNShzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgJycnIFJldHVybiBNRDUgaGV4IGRpZ2VzdCBvZiBsb2NhbCBmaWxlIHVzaW5nIGRpZ2VzdF9mcm9tX2ZpbGUoKS4KCiAgICAgICAgRG8gbm90IHVzZSB0aGlzIGZ1bmN0aW9uIHVubGVzcyB5b3UgaGF2ZSBubyBvdGhlciBjaG9pY2UgZm9yOgogICAgICAgICAgICAxKSBPcHRpb25hbCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQogICAgICAgICAgICAyKSBDb21wYXRpYmlsaXR5IHdpdGggYSB0aGlyZCBwYXJ0eSBwcm90b2NvbAoKICAgICAgICBUaGlzIGZ1bmN0aW9uIHdpbGwgbm90IHdvcmsgb24gc3lzdGVtcyBjb21wbHlpbmcgd2l0aCBGSVBTLTE0MC0yLgoKICAgICAgICBNb3N0IHVzZXMgb2YgdGhpcyBmdW5jdGlvbiBjYW4gdXNlIHRoZSBtb2R1bGUuc2hhMSBmdW5jdGlvbiBpbnN0ZWFkLgogICAgICAgICcnJwogICAgICAgIGlmICdtZDUnIG5vdCBpbiBBVkFJTEFCTEVfSEFTSF9BTEdPUklUSE1TOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdNRDUgbm90IGF2YWlsYWJsZS4gIFBvc3NpYmx5IHJ1bm5pbmcgaW4gRklQUyBtb2RlJykKICAgICAgICByZXR1cm4gc2VsZi5kaWdlc3RfZnJvbV9maWxlKGZpbGVuYW1lLCAnbWQ1JykKCiAgICBkZWYgc2hhMShzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgJycnIFJldHVybiBTSEExIGhleCBkaWdlc3Qgb2YgbG9jYWwgZmlsZSB1c2luZyBkaWdlc3RfZnJvbV9maWxlKCkuICcnJwogICAgICAgIHJldHVybiBzZWxmLmRpZ2VzdF9mcm9tX2ZpbGUoZmlsZW5hbWUsICdzaGExJykKCiAgICBkZWYgc2hhMjU2KHNlbGYsIGZpbGVuYW1lKToKICAgICAgICAnJycgUmV0dXJuIFNIQS0yNTYgaGV4IGRpZ2VzdCBvZiBsb2NhbCBmaWxlIHVzaW5nIGRpZ2VzdF9mcm9tX2ZpbGUoKS4gJycnCiAgICAgICAgcmV0dXJuIHNlbGYuZGlnZXN0X2Zyb21fZmlsZShmaWxlbmFtZSwgJ3NoYTI1NicpCgogICAgZGVmIGJhY2t1cF9sb2NhbChzZWxmLCBmbik6CiAgICAgICAgJycnbWFrZSBhIGRhdGUtbWFya2VkIGJhY2t1cCBvZiB0aGUgc3BlY2lmaWVkIGZpbGUsIHJldHVybiBUcnVlIG9yIEZhbHNlIG9uIHN1Y2Nlc3Mgb3IgZmFpbHVyZScnJwoKICAgICAgICBiYWNrdXBkZXN0ID0gJycKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhmbik6CiAgICAgICAgICAgICMgYmFja3VwcyBuYW1lZCBiYXNlbmFtZS5QSUQuWVlZWS1NTS1EREBISDpNTTpTU34KICAgICAgICAgICAgZXh0ID0gdGltZS5zdHJmdGltZSgiJVktJW0tJWRAJUg6JU06JVN+IiwgdGltZS5sb2NhbHRpbWUodGltZS50aW1lKCkpKQogICAgICAgICAgICBiYWNrdXBkZXN0ID0gJyVzLiVzLiVzJyAlIChmbiwgb3MuZ2V0cGlkKCksIGV4dCkKCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNodXRpbC5jb3B5MihmbiwgYmFja3VwZGVzdCkKICAgICAgICAgICAgZXhjZXB0IChzaHV0aWwuRXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdDb3VsZCBub3QgbWFrZSBiYWNrdXAgb2YgJXMgdG8gJXM6ICVzJyAlIChmbiwgYmFja3VwZGVzdCwgZSkpCgogICAgICAgIHJldHVybiBiYWNrdXBkZXN0CgogICAgZGVmIGNsZWFudXAoc2VsZiwgdG1wZmlsZSk6CiAgICAgICAgaWYgb3MucGF0aC5leGlzdHModG1wZmlsZSk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG9zLnVubGluayh0bXBmaWxlKQogICAgICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgIHN5cy5zdGRlcnIud3JpdGUoImNvdWxkIG5vdCBjbGVhbnVwICVzOiAlcyIgJSAodG1wZmlsZSwgZSkpCgogICAgZGVmIGF0b21pY19tb3ZlKHNlbGYsIHNyYywgZGVzdCwgdW5zYWZlX3dyaXRlcz1GYWxzZSk6CiAgICAgICAgJycnYXRvbWljYWxseSBtb3ZlIHNyYyB0byBkZXN0LCBjb3B5aW5nIGF0dHJpYnV0ZXMgZnJvbSBkZXN0LCByZXR1cm5zIHRydWUgb24gc3VjY2VzcwogICAgICAgIGl0IHVzZXMgb3MucmVuYW1lIHRvIGVuc3VyZSB0aGlzIGFzIGl0IGlzIGFuIGF0b21pYyBvcGVyYXRpb24sIHJlc3Qgb2YgdGhlIGZ1bmN0aW9uIGlzCiAgICAgICAgdG8gd29yayBhcm91bmQgbGltaXRhdGlvbnMsIGNvcm5lciBjYXNlcyBhbmQgZW5zdXJlIHNlbGludXggY29udGV4dCBpcyBzYXZlZCBpZiBwb3NzaWJsZScnJwogICAgICAgIGNvbnRleHQgPSBOb25lCiAgICAgICAgZGVzdF9zdGF0ID0gTm9uZQogICAgICAgIGJfc3JjID0gdG9fYnl0ZXMoc3JjLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQogICAgICAgIGJfZGVzdCA9IHRvX2J5dGVzKGRlc3QsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMoYl9kZXN0KToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZGVzdF9zdGF0ID0gb3Muc3RhdChiX2Rlc3QpCgogICAgICAgICAgICAgICAgIyBjb3B5IG1vZGUgYW5kIG93bmVyc2hpcAogICAgICAgICAgICAgICAgb3MuY2htb2QoYl9zcmMsIGRlc3Rfc3RhdC5zdF9tb2RlICYgUEVSTV9CSVRTKQogICAgICAgICAgICAgICAgb3MuY2hvd24oYl9zcmMsIGRlc3Rfc3RhdC5zdF91aWQsIGRlc3Rfc3RhdC5zdF9naWQpCgogICAgICAgICAgICAgICAgIyB0cnkgdG8gY29weSBmbGFncyBpZiBwb3NzaWJsZQogICAgICAgICAgICAgICAgaWYgaGFzYXR0cihvcywgJ2NoZmxhZ3MnKSBhbmQgaGFzYXR0cihkZXN0X3N0YXQsICdzdF9mbGFncycpOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgb3MuY2hmbGFncyhiX3NyYywgZGVzdF9zdGF0LnN0X2ZsYWdzKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBlcnIgaW4gJ0VPUE5PVFNVUFAnLCAnRU5PVFNVUCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBoYXNhdHRyKGVycm5vLCBlcnIpIGFuZCBlLmVycm5vID09IGdldGF0dHIoZXJybm8sIGVycik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgaWYgZS5lcnJubyAhPSBlcnJuby5FUEVSTToKICAgICAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICBpZiBzZWxmLnNlbGludXhfZW5hYmxlZCgpOgogICAgICAgICAgICAgICAgY29udGV4dCA9IHNlbGYuc2VsaW51eF9jb250ZXh0KGRlc3QpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgICAgIGNvbnRleHQgPSBzZWxmLnNlbGludXhfZGVmYXVsdF9jb250ZXh0KGRlc3QpCgogICAgICAgIGNyZWF0aW5nID0gbm90IG9zLnBhdGguZXhpc3RzKGJfZGVzdCkKCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIE9wdGltaXN0aWNhbGx5IHRyeSBhIHJlbmFtZSwgc29sdmVzIHNvbWUgY29ybmVyIGNhc2VzIGFuZCBjYW4gYXZvaWQgdXNlbGVzcyB3b3JrLCB0aHJvd3MgZXhjZXB0aW9uIGlmIG5vdCBhdG9taWMuCiAgICAgICAgICAgIG9zLnJlbmFtZShiX3NyYywgYl9kZXN0KQogICAgICAgIGV4Y2VwdCAoSU9FcnJvciwgT1NFcnJvcik6CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgaWYgZS5lcnJubyBub3QgaW4gW2Vycm5vLkVQRVJNLCBlcnJuby5FWERFViwgZXJybm8uRUFDQ0VTLCBlcnJuby5FVFhUQlNZLCBlcnJuby5FQlVTWV06CiAgICAgICAgICAgICAgICAjIG9ubHkgdHJ5IHdvcmthcm91bmRzIGZvciBlcnJubyAxOCAoY3Jvc3MgZGV2aWNlKSwgMSAobm90IHBlcm1pdHRlZCksICAxMyAocGVybWlzc2lvbiBkZW5pZWQpCiAgICAgICAgICAgICAgICAjIGFuZCAyNiAodGV4dCBmaWxlIGJ1c3kpIHdoaWNoIGhhcHBlbnMgb24gdmFncmFudCBzeW5jZWQgZm9sZGVycyBhbmQgb3RoZXIgJ2V4b3RpYycgbm9uIHBvc2l4IGZpbGUgc3lzdGVtcwogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdDb3VsZCBub3QgcmVwbGFjZSBmaWxlOiAlcyB0byAlczogJXMnICUgKHNyYywgZGVzdCwgZSksIGV4Y2VwdGlvbj10cmFjZWJhY2suZm9ybWF0X2V4YygpKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgYl9kZXN0X2RpciA9IG9zLnBhdGguZGlybmFtZShiX2Rlc3QpCiAgICAgICAgICAgICAgICAjIFVzZSBieXRlcyBoZXJlLiAgSW4gdGhlIHNoaXBwYWJsZSBDSSwgdGhpcyBmYWlscyB3aXRoCiAgICAgICAgICAgICAgICAjIGEgVW5pY29kZUVycm9yIHdpdGggc3Vycm9nYXRlZXNjYXBlJ2Qgc3RyaW5ncyBmb3IgYW4gdW5rbm93bgogICAgICAgICAgICAgICAgIyByZWFzb24gKGRvZXNuJ3QgaGFwcGVuIGluIGEgbG9jYWwgVWJ1bnR1MTYuMDQgVk0pCiAgICAgICAgICAgICAgICBuYXRpdmVfZGVzdF9kaXIgPSBiX2Rlc3RfZGlyCiAgICAgICAgICAgICAgICBuYXRpdmVfc3VmZml4ID0gb3MucGF0aC5iYXNlbmFtZShiX2Rlc3QpCiAgICAgICAgICAgICAgICBuYXRpdmVfcHJlZml4ID0gYignLmFuc2libGVfdG1wJykKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICB0bXBfZGVzdF9mZCwgdG1wX2Rlc3RfbmFtZSA9IHRlbXBmaWxlLm1rc3RlbXAoIHByZWZpeD1uYXRpdmVfcHJlZml4LCBkaXI9bmF0aXZlX2Rlc3RfZGlyLCBzdWZmaXg9bmF0aXZlX3N1ZmZpeCkKICAgICAgICAgICAgICAgIGV4Y2VwdCAoT1NFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0nVGhlIGRlc3RpbmF0aW9uIGRpcmVjdG9yeSAoJXMpIGlzIG5vdCB3cml0YWJsZSBieSB0aGUgY3VycmVudCB1c2VyLiBFcnJvciB3YXM6ICVzJyAlIChvcy5wYXRoLmRpcm5hbWUoZGVzdCksIGUpKQogICAgICAgICAgICAgICAgZXhjZXB0IFR5cGVFcnJvcjoKICAgICAgICAgICAgICAgICAgICAjIFdlIGV4cGVjdCB0aGF0IHRoaXMgaXMgaGFwcGVuaW5nIGJlY2F1c2UgcHl0aG9uMy40LnggYW5kCiAgICAgICAgICAgICAgICAgICAgIyBiZWxvdyBjYW4ndCBoYW5kbGUgYnl0ZSBzdHJpbmdzIGluIG1rc3RlbXAoKS4gIFRyYWNlYmFjawogICAgICAgICAgICAgICAgICAgICMgd291bGQgZW5kIGluIHNvbWV0aGluZyBsaWtlOgogICAgICAgICAgICAgICAgICAgICMgICAgIGZpbGUgPSBfb3MucGF0aC5qb2luKGRpciwgcHJlICsgbmFtZSArIHN1ZikKICAgICAgICAgICAgICAgICAgICAjIFR5cGVFcnJvcjogY2FuJ3QgY29uY2F0IGJ5dGVzIHRvIHN0cgogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0nRmFpbGVkIGNyZWF0aW5nIHRlbXAgZmlsZSBmb3IgYXRvbWljIG1vdmUuICBUaGlzIHVzdWFsbHkgaGFwcGVucyB3aGVuIHVzaW5nIFB5dGhvbjMgbGVzcyB0aGFuIFB5dGhvbjMuNS4gJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUGxlYXNlIHVzZSBQeXRob24yLnggb3IgUHl0aG9uMy41IG9yIGdyZWF0ZXIuJywgZXhjZXB0aW9uPXRyYWNlYmFjay5mb3JtYXRfZXhjKCkpCgogICAgICAgICAgICAgICAgYl90bXBfZGVzdF9uYW1lID0gdG9fYnl0ZXModG1wX2Rlc3RfbmFtZSwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAjIGNsb3NlIHRtcCBmaWxlIGhhbmRsZSBiZWZvcmUgZmlsZSBvcGVyYXRpb25zIHRvIHByZXZlbnQgdGV4dCBmaWxlIGJ1c3kgZXJyb3JzIG9uIHZib3hmcyBzeW5jZWQgZm9sZGVycyAod2luZG93cyBob3N0KQogICAgICAgICAgICAgICAgICAgICAgICBvcy5jbG9zZSh0bXBfZGVzdF9mZCkKICAgICAgICAgICAgICAgICAgICAgICAgIyBsZWF2ZXMgdG1wIGZpbGUgYmVoaW5kIHdoZW4gc3VkbyBhbmQgbm90IHJvb3QKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2h1dGlsLm1vdmUoYl9zcmMsIGJfdG1wX2Rlc3RfbmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGNsZWFudXAgd2lsbCBoYXBwZW4gYnkgJ3JtJyBvZiB0ZW1wZGlyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGNvcHkyIHdpbGwgcHJlc2VydmUgc29tZSBtZXRhZGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2h1dGlsLmNvcHkyKGJfc3JjLCBiX3RtcF9kZXN0X25hbWUpCgogICAgICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLnNlbGludXhfZW5hYmxlZCgpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRfY29udGV4dF9pZl9kaWZmZXJlbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYl90bXBfZGVzdF9uYW1lLCBjb250ZXh0LCBGYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wX3N0YXQgPSBvcy5zdGF0KGJfdG1wX2Rlc3RfbmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGRlc3Rfc3RhdCBhbmQgKHRtcF9zdGF0LnN0X3VpZCAhPSBkZXN0X3N0YXQuc3RfdWlkIG9yIHRtcF9zdGF0LnN0X2dpZCAhPSBkZXN0X3N0YXQuc3RfZ2lkKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy5jaG93bihiX3RtcF9kZXN0X25hbWUsIGRlc3Rfc3RhdC5zdF91aWQsIGRlc3Rfc3RhdC5zdF9naWQpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgZS5lcnJubyAhPSBlcnJuby5FUEVSTToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy5yZW5hbWUoYl90bXBfZGVzdF9uYW1lLCBiX2Rlc3QpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCAoc2h1dGlsLkVycm9yLCBPU0Vycm9yLCBJT0Vycm9yKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVuc2FmZV93cml0ZXMgYW5kIGUuZXJybm8gPT0gZXJybm8uRUJVU1k6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fdW5zYWZlX3dyaXRlcyhiX3RtcF9kZXN0X25hbWUsIGJfZGVzdCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdVbmFibGUgdG8gcmVuYW1lIGZpbGU6ICVzIHRvICVzOiAlcycgJSAoc3JjLCBkZXN0LCBlKSwgZXhjZXB0aW9uPXRyYWNlYmFjay5mb3JtYXRfZXhjKCkpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IChzaHV0aWwuRXJyb3IsIE9TRXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0nRmFpbGVkIHRvIHJlcGxhY2UgZmlsZTogJXMgdG8gJXM6ICVzJyAlIChzcmMsIGRlc3QsIGUpLCBleGNlcHRpb249dHJhY2ViYWNrLmZvcm1hdF9leGMoKSkKICAgICAgICAgICAgICAgIGZpbmFsbHk6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5jbGVhbnVwKGJfdG1wX2Rlc3RfbmFtZSkKCiAgICAgICAgaWYgY3JlYXRpbmc6CiAgICAgICAgICAgICMgbWFrZSBzdXJlIHRoZSBmaWxlIGhhcyB0aGUgY29ycmVjdCBwZXJtaXNzaW9ucwogICAgICAgICAgICAjIGJhc2VkIG9uIHRoZSBjdXJyZW50IHZhbHVlIG9mIHVtYXNrCiAgICAgICAgICAgIHVtYXNrID0gb3MudW1hc2soMCkKICAgICAgICAgICAgb3MudW1hc2sodW1hc2spCiAgICAgICAgICAgIG9zLmNobW9kKGJfZGVzdCwgREVGQVVMVF9QRVJNICYgfnVtYXNrKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBvcy5jaG93bihiX2Rlc3QsIG9zLmdldGV1aWQoKSwgb3MuZ2V0ZWdpZCgpKQogICAgICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgICAgICMgV2UncmUgb2theSB3aXRoIHRyeWluZyBvdXIgYmVzdCBoZXJlLiAgSWYgdGhlIHVzZXIgaXMgbm90CiAgICAgICAgICAgICAgICAjIHJvb3QgKG9yIG9sZCBVbmljZXMpIHRoZXkgd29uJ3QgYmUgYWJsZSB0byBjaG93bi4KICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgaWYgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgIyByZW5hbWUgbWlnaHQgbm90IHByZXNlcnZlIGNvbnRleHQKICAgICAgICAgICAgc2VsZi5zZXRfY29udGV4dF9pZl9kaWZmZXJlbnQoZGVzdCwgY29udGV4dCwgRmFsc2UpCgogICAgZGVmIF91bnNhZmVfd3JpdGVzKHNlbGYsIHNyYywgZGVzdCk6CiAgICAgICAgIyBzYWRseSB0aGVyZSBhcmUgc29tZSBzaXR1YXRpb25zIHdoZXJlIHdlIGNhbm5vdCBlbnN1cmUgYXRvbWljaXR5LCBidXQgb25seSBpZgogICAgICAgICMgdGhlIHVzZXIgaW5zaXN0cyBhbmQgd2UgZ2V0IHRoZSBhcHByb3ByaWF0ZSBlcnJvciB3ZSB1cGRhdGUgdGhlIGZpbGUgdW5zYWZlbHkKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG91dF9kZXN0ID0gb3BlbihkZXN0LCAnd2InKQogICAgICAgICAgICAgICAgaW5fc3JjID0gb3BlbihzcmMsICdyYicpCiAgICAgICAgICAgICAgICBzaHV0aWwuY29weWZpbGVvYmooaW5fc3JjLCBvdXRfZGVzdCkKICAgICAgICAgICAgZmluYWxseTogICMgYXNzdXJpbmcgY2xvc2VkIGZpbGVzIGluIDIuNCBjb21wYXRpYmxlIHdheQogICAgICAgICAgICAgICAgaWYgb3V0X2Rlc3Q6CiAgICAgICAgICAgICAgICAgICAgb3V0X2Rlc3QuY2xvc2UoKQogICAgICAgICAgICAgICAgaWYgaW5fc3JjOgogICAgICAgICAgICAgICAgICAgIGluX3NyYy5jbG9zZSgpCiAgICAgICAgZXhjZXB0IChzaHV0aWwuRXJyb3IsIE9TRXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0nQ291bGQgbm90IHdyaXRlIGRhdGEgdG8gZmlsZSAoJXMpIGZyb20gKCVzKTogJXMnICUgKGRlc3QsIHNyYywgZSksIGV4Y2VwdGlvbj10cmFjZWJhY2suZm9ybWF0X2V4YygpKQoKCiAgICBkZWYgX3JlYWRfZnJvbV9waXBlcyhzZWxmLCBycGlwZXMsIHJmZHMsIGZpbGVfZGVzY3JpcHRvcik6CiAgICAgICAgZGF0YSA9IGIoJycpCiAgICAgICAgaWYgZmlsZV9kZXNjcmlwdG9yIGluIHJmZHM6CiAgICAgICAgICAgIGRhdGEgPSBvcy5yZWFkKGZpbGVfZGVzY3JpcHRvci5maWxlbm8oKSwgOTAwMCkKICAgICAgICAgICAgaWYgZGF0YSA9PSBiKCcnKToKICAgICAgICAgICAgICAgIHJwaXBlcy5yZW1vdmUoZmlsZV9kZXNjcmlwdG9yKQoKICAgICAgICByZXR1cm4gZGF0YQoKICAgIGRlZiBydW5fY29tbWFuZChzZWxmLCBhcmdzLCBjaGVja19yYz1GYWxzZSwgY2xvc2VfZmRzPVRydWUsIGV4ZWN1dGFibGU9Tm9uZSwgZGF0YT1Ob25lLCBiaW5hcnlfZGF0YT1GYWxzZSwgcGF0aF9wcmVmaXg9Tm9uZSwgY3dkPU5vbmUsCiAgICAgICAgICAgICAgICAgICAgdXNlX3Vuc2FmZV9zaGVsbD1GYWxzZSwgcHJvbXB0X3JlZ2V4PU5vbmUsIGVudmlyb25fdXBkYXRlPU5vbmUsIHVtYXNrPU5vbmUsIGVuY29kaW5nPSd1dGYtOCcsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpOgogICAgICAgICcnJwogICAgICAgIEV4ZWN1dGUgYSBjb21tYW5kLCByZXR1cm5zIHJjLCBzdGRvdXQsIGFuZCBzdGRlcnIuCgogICAgICAgIDphcmcgYXJnczogaXMgdGhlIGNvbW1hbmQgdG8gcnVuCiAgICAgICAgICAgICogSWYgYXJncyBpcyBhIGxpc3QsIHRoZSBjb21tYW5kIHdpbGwgYmUgcnVuIHdpdGggc2hlbGw9RmFsc2UuCiAgICAgICAgICAgICogSWYgYXJncyBpcyBhIHN0cmluZyBhbmQgdXNlX3Vuc2FmZV9zaGVsbD1GYWxzZSBpdCB3aWxsIHNwbGl0IGFyZ3MgdG8gYSBsaXN0IGFuZCBydW4gd2l0aCBzaGVsbD1GYWxzZQogICAgICAgICAgICAqIElmIGFyZ3MgaXMgYSBzdHJpbmcgYW5kIHVzZV91bnNhZmVfc2hlbGw9VHJ1ZSBpdCBydW5zIHdpdGggc2hlbGw9VHJ1ZS4KICAgICAgICA6a3cgY2hlY2tfcmM6IFdoZXRoZXIgdG8gY2FsbCBmYWlsX2pzb24gaW4gY2FzZSBvZiBub24gemVybyBSQy4KICAgICAgICAgICAgRGVmYXVsdCBGYWxzZQogICAgICAgIDprdyBjbG9zZV9mZHM6IFNlZSBkb2N1bWVudGF0aW9uIGZvciBzdWJwcm9jZXNzLlBvcGVuKCkuIERlZmF1bHQgVHJ1ZQogICAgICAgIDprdyBleGVjdXRhYmxlOiBTZWUgZG9jdW1lbnRhdGlvbiBmb3Igc3VicHJvY2Vzcy5Qb3BlbigpLiBEZWZhdWx0IE5vbmUKICAgICAgICA6a3cgZGF0YTogSWYgZ2l2ZW4sIGluZm9ybWF0aW9uIHRvIHdyaXRlIHRvIHRoZSBzdGRpbiBvZiB0aGUgY29tbWFuZAogICAgICAgIDprdyBiaW5hcnlfZGF0YTogSWYgRmFsc2UsIGFwcGVuZCBhIG5ld2xpbmUgdG8gdGhlIGRhdGEuICBEZWZhdWx0IEZhbHNlCiAgICAgICAgOmt3IHBhdGhfcHJlZml4OiBJZiBnaXZlbiwgYWRkaXRpb25hbCBwYXRoIHRvIGZpbmQgdGhlIGNvbW1hbmQgaW4uCiAgICAgICAgICAgIFRoaXMgYWRkcyB0byB0aGUgUEFUSCBlbnZpcm9ubWVudCB2YWlyYWJsZSBzbyBoZWxwZXIgY29tbWFuZHMgaW4KICAgICAgICAgICAgdGhlIHNhbWUgZGlyZWN0b3J5IGNhbiBhbHNvIGJlIGZvdW5kCiAgICAgICAgOmt3IGN3ZDogSWYgZ2l2ZW4sIHdvcmtpbmcgZGlyZWN0b3J5IHRvIHJ1biB0aGUgY29tbWFuZCBpbnNpZGUKICAgICAgICA6a3cgdXNlX3Vuc2FmZV9zaGVsbDogU2VlIGBhcmdzYCBwYXJhbWV0ZXIuICBEZWZhdWx0IEZhbHNlCiAgICAgICAgOmt3IHByb21wdF9yZWdleDogUmVnZXggc3RyaW5nIChub3QgYSBjb21waWxlZCByZWdleCkgd2hpY2ggY2FuIGJlCiAgICAgICAgICAgIHVzZWQgdG8gZGV0ZWN0IHByb21wdHMgaW4gdGhlIHN0ZG91dCB3aGljaCB3b3VsZCBvdGhlcndpc2UgY2F1c2UKICAgICAgICAgICAgdGhlIGV4ZWN1dGlvbiB0byBoYW5nIChlc3BlY2lhbGx5IGlmIG5vIGlucHV0IGRhdGEgaXMgc3BlY2lmaWVkKQogICAgICAgIDprdyBlbnZpcm9uX3VwZGF0ZTogZGljdGlvbmFyeSB0byAqdXBkYXRlKiBvcy5lbnZpcm9uIHdpdGgKICAgICAgICA6a3cgdW1hc2s6IFVtYXNrIHRvIGJlIHVzZWQgd2hlbiBydW5uaW5nIHRoZSBjb21tYW5kLiBEZWZhdWx0IE5vbmUKICAgICAgICA6a3cgZW5jb2Rpbmc6IFNpbmNlIHdlIHJldHVybiBuYXRpdmUgc3RyaW5ncywgb24gcHl0aG9uMyB3ZSBuZWVkIHRvCiAgICAgICAgICAgIGtub3cgdGhlIGVuY29kaW5nIHRvIHVzZSB0byB0cmFuc2Zvcm0gZnJvbSBieXRlcyB0byB0ZXh0LiAgSWYgeW91CiAgICAgICAgICAgIHdhbnQgdG8gYWx3YXlzIGdldCBieXRlcyBiYWNrLCB1c2UgZW5jb2Rpbmc9Tm9uZS4gIFRoZSBkZWZhdWx0IGlzCiAgICAgICAgICAgICJ1dGYtOCIuICBUaGlzIGRvZXMgbm90IGFmZmVjdCB0cmFuc2Zvcm1hdGlvbiBvZiBzdHJpbmdzIGdpdmVuIGFzCiAgICAgICAgICAgIGFyZ3MuCiAgICAgICAgOmt3IGVycm9yczogU2luY2Ugd2UgcmV0dXJuIG5hdGl2ZSBzdHJpbmdzLCBvbiBweXRob24zIHdlIG5lZWQgdG8KICAgICAgICAgICAgdHJhbnNmb3JtIHN0ZG91dCBhbmQgc3RkZXJyIGZyb20gYnl0ZXMgdG8gdGV4dC4gIElmIHRoZSBieXRlcyBhcmUKICAgICAgICAgICAgdW5kZWNvZGFibGUgaW4gdGhlIGBgZW5jb2RpbmdgYCBzcGVjaWZpZWQsIHRoZW4gdXNlIHRoaXMgZXJyb3IKICAgICAgICAgICAgaGFuZGxlciB0byBkZWFsIHdpdGggdGhlbS4gIFRoZSBkZWZhdWx0IGlzIGBgc3Vycm9nYXRlX29yX3N0cmljdGBgCiAgICAgICAgICAgIHdoaWNoIG1lYW5zIHRoYXQgdGhlIGJ5dGVzIHdpbGwgYmUgZGVjb2RlZCB1c2luZyB0aGUKICAgICAgICAgICAgc3Vycm9nYXRlZXNjYXBlIGVycm9yIGhhbmRsZXIgaWYgYXZhaWxhYmxlIChhdmFpbGFibGUgb24gYWxsCiAgICAgICAgICAgIHB5dGhvbjMgdmVyc2lvbnMgd2Ugc3VwcG9ydCkgb3RoZXJ3aXNlIGEgVW5pY29kZUVycm9yIHRyYWNlYmFjawogICAgICAgICAgICB3aWxsIGJlIHJhaXNlZC4gIFRoaXMgZG9lcyBub3QgYWZmZWN0IHRyYW5zZm9ybWF0aW9ucyBvZiBzdHJpbmdzCiAgICAgICAgICAgIGdpdmVuIGFzIGFyZ3MuCiAgICAgICAgOnJldHVybnM6IEEgMy10dXBsZSBvZiByZXR1cm4gY29kZSAoaW50ZWdlciksIHN0ZG91dCAobmF0aXZlIHN0cmluZyksCiAgICAgICAgICAgIGFuZCBzdGRlcnIgKG5hdGl2ZSBzdHJpbmcpLiAgT24gcHl0aG9uMiwgc3Rkb3V0IGFuZCBzdGRlcnIgYXJlIGJvdGgKICAgICAgICAgICAgYnl0ZSBzdHJpbmdzLiAgT24gcHl0aG9uMywgc3Rkb3V0IGFuZCBzdGRlcnIgYXJlIHRleHQgc3RyaW5ncyBjb252ZXJ0ZWQKICAgICAgICAgICAgYWNjb3JkaW5nIHRvIHRoZSBlbmNvZGluZyBhbmQgZXJyb3JzIHBhcmFtZXRlcnMuICBJZiB5b3Ugd2FudCBieXRlCiAgICAgICAgICAgIHN0cmluZ3Mgb24gcHl0aG9uMywgdXNlIGVuY29kaW5nPU5vbmUgdG8gdHVybiBkZWNvZGluZyB0byB0ZXh0IG9mZi4KICAgICAgICAnJycKCiAgICAgICAgaWYgaXNpbnN0YW5jZShhcmdzLCBsaXN0KToKICAgICAgICAgICAgaWYgdXNlX3Vuc2FmZV9zaGVsbDoKICAgICAgICAgICAgICAgIGFyZ3MgPSAiICIuam9pbihbc2hsZXhfcXVvdGUoeCkgZm9yIHggaW4gYXJnc10pCiAgICAgICAgICAgICAgICBzaGVsbCA9IFRydWUKICAgICAgICBlbGlmIGlzaW5zdGFuY2UoYXJncywgKGJpbmFyeV90eXBlLCB0ZXh0X3R5cGUpKSBhbmQgdXNlX3Vuc2FmZV9zaGVsbDoKICAgICAgICAgICAgc2hlbGwgPSBUcnVlCiAgICAgICAgZWxpZiBpc2luc3RhbmNlKGFyZ3MsIChiaW5hcnlfdHlwZSwgdGV4dF90eXBlKSk6CiAgICAgICAgICAgIGlmIG5vdCB1c2VfdW5zYWZlX3NoZWxsOgogICAgICAgICAgICAgICAgIyBPbiBweXRob24yLjYgYW5kIGJlbG93LCBzaGxleCBoYXMgcHJvYmxlbXMgd2l0aCB0ZXh0IHR5cGUKICAgICAgICAgICAgICAgICMgT24gcHl0aG9uMywgc2hsZXggbmVlZHMgYSB0ZXh0IHR5cGUuCiAgICAgICAgICAgICAgICBpZiBQWTI6CiAgICAgICAgICAgICAgICAgICAgYXJncyA9IHRvX2J5dGVzKGFyZ3MsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgICAgICAgICBlbGlmIFBZMzoKICAgICAgICAgICAgICAgICAgICBhcmdzID0gdG9fdGV4dChhcmdzLCBlcnJvcnM9J3N1cnJvZ2F0ZWVzY2FwZScpCiAgICAgICAgICAgICAgICBhcmdzID0gc2hsZXguc3BsaXQoYXJncykKICAgICAgICBlbHNlOgogICAgICAgICAgICBtc2cgPSAiQXJndW1lbnQgJ2FyZ3MnIHRvIHJ1bl9jb21tYW5kIG11c3QgYmUgbGlzdCBvciBzdHJpbmciCiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHJjPTI1NywgY21kPWFyZ3MsIG1zZz1tc2cpCgogICAgICAgIHNoZWxsID0gRmFsc2UKICAgICAgICBpZiB1c2VfdW5zYWZlX3NoZWxsOgogICAgICAgICAgICBpZiBleGVjdXRhYmxlIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBleGVjdXRhYmxlID0gb3MuZW52aXJvbi5nZXQoJ1NIRUxMJykKICAgICAgICAgICAgaWYgZXhlY3V0YWJsZToKICAgICAgICAgICAgICAgIGFyZ3MgPSBbZXhlY3V0YWJsZSwgJy1jJywgYXJnc10KICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNoZWxsID0gVHJ1ZQoKICAgICAgICBwcm9tcHRfcmUgPSBOb25lCiAgICAgICAgaWYgcHJvbXB0X3JlZ2V4OgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHByb21wdF9yZWdleCwgdGV4dF90eXBlKToKICAgICAgICAgICAgICAgIGlmIFBZMzoKICAgICAgICAgICAgICAgICAgICBwcm9tcHRfcmVnZXggPSB0b19ieXRlcyhwcm9tcHRfcmVnZXgsIGVycm9ycz0nc3Vycm9nYXRlZXNjYXBlJykKICAgICAgICAgICAgICAgIGVsaWYgUFkyOgogICAgICAgICAgICAgICAgICAgIHByb21wdF9yZWdleCA9IHRvX2J5dGVzKHByb21wdF9yZWdleCwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcHJvbXB0X3JlID0gcmUuY29tcGlsZShwcm9tcHRfcmVnZXgsIHJlLk1VTFRJTElORSkKICAgICAgICAgICAgZXhjZXB0IHJlLmVycm9yOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJpbnZhbGlkIHByb21wdCByZWd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gdG8gcnVuX2NvbW1hbmQiKQoKICAgICAgICAjIGV4cGFuZCB0aGluZ3MgbGlrZSAkSE9NRSBhbmQgfgogICAgICAgIGlmIG5vdCBzaGVsbDoKICAgICAgICAgICAgYXJncyA9IFsgb3MucGF0aC5leHBhbmR1c2VyKG9zLnBhdGguZXhwYW5kdmFycyh4KSkgZm9yIHggaW4gYXJncyBpZiB4IGlzIG5vdCBOb25lIF0KCiAgICAgICAgcmMgPSAwCiAgICAgICAgbXNnID0gTm9uZQogICAgICAgIHN0X2luID0gTm9uZQoKICAgICAgICAjIE1hbmlwdWxhdGUgdGhlIGVudmlyb24gd2UnbGwgc2VuZCB0byB0aGUgbmV3IHByb2Nlc3MKICAgICAgICBvbGRfZW52X3ZhbHMgPSB7fQogICAgICAgICMgV2UgY2FuIHNldCB0aGlzIGZyb20gYm90aCBhbiBhdHRyaWJ1dGUgYW5kIHBlciBjYWxsCiAgICAgICAgZm9yIGtleSwgdmFsIGluIHNlbGYucnVuX2NvbW1hbmRfZW52aXJvbl91cGRhdGUuaXRlbXMoKToKICAgICAgICAgICAgb2xkX2Vudl92YWxzW2tleV0gPSBvcy5lbnZpcm9uLmdldChrZXksIE5vbmUpCiAgICAgICAgICAgIG9zLmVudmlyb25ba2V5XSA9IHZhbAogICAgICAgIGlmIGVudmlyb25fdXBkYXRlOgogICAgICAgICAgICBmb3Iga2V5LCB2YWwgaW4gZW52aXJvbl91cGRhdGUuaXRlbXMoKToKICAgICAgICAgICAgICAgIG9sZF9lbnZfdmFsc1trZXldID0gb3MuZW52aXJvbi5nZXQoa2V5LCBOb25lKQogICAgICAgICAgICAgICAgb3MuZW52aXJvbltrZXldID0gdmFsCiAgICAgICAgaWYgcGF0aF9wcmVmaXg6CiAgICAgICAgICAgIG9sZF9lbnZfdmFsc1snUEFUSCddID0gb3MuZW52aXJvblsnUEFUSCddCiAgICAgICAgICAgIG9zLmVudmlyb25bJ1BBVEgnXSA9ICIlczolcyIgJSAocGF0aF9wcmVmaXgsIG9zLmVudmlyb25bJ1BBVEgnXSkKCiAgICAgICAgIyBJZiB1c2luZyB0ZXN0LW1vZHVsZSBhbmQgZXhwbG9kZSwgdGhlIHJlbW90ZSBsaWIgcGF0aCB3aWxsIHJlc2VtYmxlIC4uLgogICAgICAgICMgICAvdG1wL3Rlc3RfbW9kdWxlX3NjcmF0Y2gvZGVidWdfZGlyL2Fuc2libGUvbW9kdWxlX3V0aWxzL2Jhc2ljLnB5CiAgICAgICAgIyBJZiB1c2luZyBhbnNpYmxlIG9yIGFuc2libGUtcGxheWJvb2sgd2l0aCBhIHJlbW90ZSBzeXN0ZW0gLi4uCiAgICAgICAgIyAgIC90bXAvYW5zaWJsZV92bXdlTFEvYW5zaWJsZV9tb2RsaWIuemlwL2Fuc2libGUvbW9kdWxlX3V0aWxzL2Jhc2ljLnB5CgogICAgICAgICMgQ2xlYW4gb3V0IHB5dGhvbiBwYXRocyBzZXQgYnkgYW5zaWJhbGx6CiAgICAgICAgaWYgJ1BZVEhPTlBBVEgnIGluIG9zLmVudmlyb246CiAgICAgICAgICAgIHB5cGF0aHMgPSBvcy5lbnZpcm9uWydQWVRIT05QQVRIJ10uc3BsaXQoJzonKQogICAgICAgICAgICBweXBhdGhzID0gW3ggZm9yIHggaW4gcHlwYXRocyBcCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCB4LmVuZHN3aXRoKCcvYW5zaWJsZV9tb2RsaWIuemlwJykgXAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgbm90IHguZW5kc3dpdGgoJy9kZWJ1Z19kaXInKV0KICAgICAgICAgICAgb3MuZW52aXJvblsnUFlUSE9OUEFUSCddID0gJzonLmpvaW4ocHlwYXRocykKICAgICAgICAgICAgaWYgbm90IG9zLmVudmlyb25bJ1BZVEhPTlBBVEgnXToKICAgICAgICAgICAgICAgIGRlbCBvcy5lbnZpcm9uWydQWVRIT05QQVRIJ10KCiAgICAgICAgIyBjcmVhdGUgYSBwcmludGFibGUgdmVyc2lvbiBvZiB0aGUgY29tbWFuZCBmb3IgdXNlCiAgICAgICAgIyBpbiByZXBvcnRpbmcgbGF0ZXIsIHdoaWNoIHN0cmlwcyBvdXQgdGhpbmdzIGxpa2UKICAgICAgICAjIHBhc3N3b3JkcyBmcm9tIHRoZSBhcmdzIGxpc3QKICAgICAgICB0b19jbGVhbl9hcmdzID0gYXJncwogICAgICAgIGlmIFBZMjoKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShhcmdzLCB0ZXh0X3R5cGUpOgogICAgICAgICAgICAgICAgdG9fY2xlYW5fYXJncyA9IHRvX2J5dGVzKGFyZ3MpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShhcmdzLCBiaW5hcnlfdHlwZSk6CiAgICAgICAgICAgICAgICB0b19jbGVhbl9hcmdzID0gdG9fdGV4dChhcmdzKQogICAgICAgIGlmIGlzaW5zdGFuY2UoYXJncywgKHRleHRfdHlwZSwgYmluYXJ5X3R5cGUpKToKICAgICAgICAgICAgdG9fY2xlYW5fYXJncyA9IHNobGV4LnNwbGl0KHRvX2NsZWFuX2FyZ3MpCgogICAgICAgIGNsZWFuX2FyZ3MgPSBbXQogICAgICAgIGlzX3Bhc3N3ZCA9IEZhbHNlCiAgICAgICAgZm9yIGFyZyBpbiB0b19jbGVhbl9hcmdzOgogICAgICAgICAgICBpZiBpc19wYXNzd2Q6CiAgICAgICAgICAgICAgICBpc19wYXNzd2QgPSBGYWxzZQogICAgICAgICAgICAgICAgY2xlYW5fYXJncy5hcHBlbmQoJyoqKioqKioqJykKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGlmIFBBU1NXRF9BUkdfUkUubWF0Y2goYXJnKToKICAgICAgICAgICAgICAgIHNlcF9pZHggPSBhcmcuZmluZCgnPScpCiAgICAgICAgICAgICAgICBpZiBzZXBfaWR4ID4gLTE6CiAgICAgICAgICAgICAgICAgICAgY2xlYW5fYXJncy5hcHBlbmQoJyVzPSoqKioqKioqJyAlIGFyZ1s6c2VwX2lkeF0pCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgaXNfcGFzc3dkID0gVHJ1ZQogICAgICAgICAgICBhcmcgPSBoZXVyaXN0aWNfbG9nX3Nhbml0aXplKGFyZywgc2VsZi5ub19sb2dfdmFsdWVzKQogICAgICAgICAgICBjbGVhbl9hcmdzLmFwcGVuZChhcmcpCiAgICAgICAgY2xlYW5fYXJncyA9ICcgJy5qb2luKHNobGV4X3F1b3RlKGFyZykgZm9yIGFyZyBpbiBjbGVhbl9hcmdzKQoKICAgICAgICBpZiBkYXRhOgogICAgICAgICAgICBzdF9pbiA9IHN1YnByb2Nlc3MuUElQRQoKICAgICAgICBrd2FyZ3MgPSBkaWN0KAogICAgICAgICAgICBleGVjdXRhYmxlPWV4ZWN1dGFibGUsCiAgICAgICAgICAgIHNoZWxsPXNoZWxsLAogICAgICAgICAgICBjbG9zZV9mZHM9Y2xvc2VfZmRzLAogICAgICAgICAgICBzdGRpbj1zdF9pbiwKICAgICAgICAgICAgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwKICAgICAgICAgICAgc3RkZXJyPXN1YnByb2Nlc3MuUElQRSwKICAgICAgICApCgogICAgICAgICMgc3RvcmUgdGhlIHB3ZAogICAgICAgIHByZXZfZGlyID0gb3MuZ2V0Y3dkKCkKCiAgICAgICAgIyBtYWtlIHN1cmUgd2UncmUgaW4gdGhlIHJpZ2h0IHdvcmtpbmcgZGlyZWN0b3J5CiAgICAgICAgaWYgY3dkIGFuZCBvcy5wYXRoLmlzZGlyKGN3ZCk6CiAgICAgICAgICAgIGN3ZCA9IG9zLnBhdGguYWJzcGF0aChvcy5wYXRoLmV4cGFuZHVzZXIoY3dkKSkKICAgICAgICAgICAga3dhcmdzWydjd2QnXSA9IGN3ZAogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBvcy5jaGRpcihjd2QpCiAgICAgICAgICAgIGV4Y2VwdCAoT1NFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihyYz1lLmVycm5vLCBtc2c9IkNvdWxkIG5vdCBvcGVuICVzLCAlcyIgJSAoY3dkLCBzdHIoZSkpKQoKICAgICAgICBvbGRfdW1hc2sgPSBOb25lCiAgICAgICAgaWYgdW1hc2s6CiAgICAgICAgICAgIG9sZF91bWFzayA9IG9zLnVtYXNrKHVtYXNrKQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIHNlbGYuX2RlYnVnOgogICAgICAgICAgICAgICAgc2VsZi5sb2coJ0V4ZWN1dGluZzogJyArIGNsZWFuX2FyZ3MpCiAgICAgICAgICAgIGNtZCA9IHN1YnByb2Nlc3MuUG9wZW4oYXJncywgKiprd2FyZ3MpCgogICAgICAgICAgICAjIHRoZSBjb21tdW5pY2F0aW9uIGxvZ2ljIGhlcmUgaXMgZXNzZW50aWFsbHkgdGFrZW4gZnJvbSB0aGF0CiAgICAgICAgICAgICMgb2YgdGhlIF9jb21tdW5pY2F0ZSgpIGZ1bmN0aW9uIGluIHNzaC5weQoKICAgICAgICAgICAgc3Rkb3V0ID0gYignJykKICAgICAgICAgICAgc3RkZXJyID0gYignJykKICAgICAgICAgICAgcnBpcGVzID0gW2NtZC5zdGRvdXQsIGNtZC5zdGRlcnJdCgogICAgICAgICAgICBpZiBkYXRhOgogICAgICAgICAgICAgICAgaWYgbm90IGJpbmFyeV9kYXRhOgogICAgICAgICAgICAgICAgICAgIGRhdGEgKz0gJ1xuJwogICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShkYXRhLCB0ZXh0X3R5cGUpOgogICAgICAgICAgICAgICAgICAgIGRhdGEgPSB0b19ieXRlcyhkYXRhKQogICAgICAgICAgICAgICAgY21kLnN0ZGluLndyaXRlKGRhdGEpCiAgICAgICAgICAgICAgICBjbWQuc3RkaW4uY2xvc2UoKQoKICAgICAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgICAgIHJmZHMsIHdmZHMsIGVmZHMgPSBzZWxlY3Quc2VsZWN0KHJwaXBlcywgW10sIHJwaXBlcywgMSkKICAgICAgICAgICAgICAgIHN0ZG91dCArPSBzZWxmLl9yZWFkX2Zyb21fcGlwZXMocnBpcGVzLCByZmRzLCBjbWQuc3Rkb3V0KQogICAgICAgICAgICAgICAgc3RkZXJyICs9IHNlbGYuX3JlYWRfZnJvbV9waXBlcyhycGlwZXMsIHJmZHMsIGNtZC5zdGRlcnIpCiAgICAgICAgICAgICAgICAjIGlmIHdlJ3JlIGNoZWNraW5nIGZvciBwcm9tcHRzLCBkbyBpdCBub3cKICAgICAgICAgICAgICAgIGlmIHByb21wdF9yZToKICAgICAgICAgICAgICAgICAgICBpZiBwcm9tcHRfcmUuc2VhcmNoKHN0ZG91dCkgYW5kIG5vdCBkYXRhOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBlbmNvZGluZzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZG91dCA9IHRvX25hdGl2ZShzdGRvdXQsIGVuY29kaW5nPWVuY29kaW5nLCBlcnJvcnM9ZXJyb3JzKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Rkb3V0ID0gc3Rkb3V0CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoMjU3LCBzdGRvdXQsICJBIHByb21wdCB3YXMgZW5jb3VudGVyZWQgd2hpbGUgcnVubmluZyBhIGNvbW1hbmQsIGJ1dCBubyBpbnB1dCBkYXRhIHdhcyBzcGVjaWZpZWQiKQogICAgICAgICAgICAgICAgIyBvbmx5IGJyZWFrIG91dCBpZiBubyBwaXBlcyBhcmUgbGVmdCB0byByZWFkIG9yCiAgICAgICAgICAgICAgICAjIHRoZSBwaXBlcyBhcmUgY29tcGxldGVseSByZWFkIGFuZAogICAgICAgICAgICAgICAgIyB0aGUgcHJvY2VzcyBpcyB0ZXJtaW5hdGVkCiAgICAgICAgICAgICAgICBpZiAobm90IHJwaXBlcyBvciBub3QgcmZkcykgYW5kIGNtZC5wb2xsKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICMgTm8gcGlwZXMgYXJlIGxlZnQgdG8gcmVhZCBidXQgcHJvY2VzcyBpcyBub3QgeWV0IHRlcm1pbmF0ZWQKICAgICAgICAgICAgICAgICMgT25seSB0aGVuIGl0IGlzIHNhZmUgdG8gd2FpdCBmb3IgdGhlIHByb2Nlc3MgdG8gYmUgZmluaXNoZWQKICAgICAgICAgICAgICAgICMgTk9URTogQWN0dWFsbHkgY21kLnBvbGwoKSBpcyBhbHdheXMgTm9uZSBoZXJlIGlmIHJwaXBlcyBpcyBlbXB0eQogICAgICAgICAgICAgICAgZWxpZiBub3QgcnBpcGVzIGFuZCBjbWQucG9sbCgpIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgY21kLndhaXQoKQogICAgICAgICAgICAgICAgICAgICMgVGhlIHByb2Nlc3MgaXMgdGVybWluYXRlZC4gU2luY2Ugbm8gcGlwZXMgdG8gcmVhZCBmcm9tIGFyZQogICAgICAgICAgICAgICAgICAgICMgbGVmdCwgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIHNlbGVjdCgpIGFnYWluLgogICAgICAgICAgICAgICAgICAgIGJyZWFrCgogICAgICAgICAgICBjbWQuc3Rkb3V0LmNsb3NlKCkKICAgICAgICAgICAgY21kLnN0ZGVyci5jbG9zZSgpCgogICAgICAgICAgICByYyA9IGNtZC5yZXR1cm5jb2RlCiAgICAgICAgZXhjZXB0IChPU0Vycm9yLCBJT0Vycm9yKToKICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICBzZWxmLmxvZygiRXJyb3IgRXhlY3V0aW5nIENNRDolcyBFeGNlcHRpb246JXMiICUgKGNsZWFuX2FyZ3MsIHRvX25hdGl2ZShlKSkpCiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHJjPWUuZXJybm8sIG1zZz10b19uYXRpdmUoZSksIGNtZD1jbGVhbl9hcmdzKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgc2VsZi5sb2coIkVycm9yIEV4ZWN1dGluZyBDTUQ6JXMgRXhjZXB0aW9uOiVzIiAlIChjbGVhbl9hcmdzLHRvX25hdGl2ZSh0cmFjZWJhY2suZm9ybWF0X2V4YygpKSkpCiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHJjPTI1NywgbXNnPXRvX25hdGl2ZShlKSwgZXhjZXB0aW9uPXRyYWNlYmFjay5mb3JtYXRfZXhjKCksIGNtZD1jbGVhbl9hcmdzKQoKICAgICAgICAjIFJlc3RvcmUgZW52IHNldHRpbmdzCiAgICAgICAgZm9yIGtleSwgdmFsIGluIG9sZF9lbnZfdmFscy5pdGVtcygpOgogICAgICAgICAgICBpZiB2YWwgaXMgTm9uZToKICAgICAgICAgICAgICAgIGRlbCBvcy5lbnZpcm9uW2tleV0KICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG9zLmVudmlyb25ba2V5XSA9IHZhbAoKICAgICAgICBpZiBvbGRfdW1hc2s6CiAgICAgICAgICAgIG9zLnVtYXNrKG9sZF91bWFzaykKCiAgICAgICAgaWYgcmMgIT0gMCBhbmQgY2hlY2tfcmM6CiAgICAgICAgICAgIG1zZyA9IGhldXJpc3RpY19sb2dfc2FuaXRpemUoc3RkZXJyLnJzdHJpcCgpLCBzZWxmLm5vX2xvZ192YWx1ZXMpCiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKGNtZD1jbGVhbl9hcmdzLCByYz1yYywgc3Rkb3V0PXN0ZG91dCwgc3RkZXJyPXN0ZGVyciwgbXNnPW1zZykKCiAgICAgICAgIyByZXNldCB0aGUgcHdkCiAgICAgICAgb3MuY2hkaXIocHJldl9kaXIpCgogICAgICAgIGlmIGVuY29kaW5nIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXR1cm4gKHJjLCB0b19uYXRpdmUoc3Rkb3V0LCBlbmNvZGluZz1lbmNvZGluZywgZXJyb3JzPWVycm9ycyksCiAgICAgICAgICAgICAgICAgICAgdG9fbmF0aXZlKHN0ZGVyciwgZW5jb2Rpbmc9ZW5jb2RpbmcsIGVycm9ycz1lcnJvcnMpKQogICAgICAgIHJldHVybiAocmMsIHN0ZG91dCwgc3RkZXJyKQoKICAgIGRlZiBhcHBlbmRfdG9fZmlsZShzZWxmLCBmaWxlbmFtZSwgc3RyKToKICAgICAgICBmaWxlbmFtZSA9IG9zLnBhdGguZXhwYW5kdmFycyhvcy5wYXRoLmV4cGFuZHVzZXIoZmlsZW5hbWUpKQogICAgICAgIGZoID0gb3BlbihmaWxlbmFtZSwgJ2EnKQogICAgICAgIGZoLndyaXRlKHN0cikKICAgICAgICBmaC5jbG9zZSgpCgogICAgZGVmIGJ5dGVzX3RvX2h1bWFuKHNlbGYsIHNpemUpOgogICAgICAgIHJldHVybiBieXRlc190b19odW1hbihzaXplKQoKICAgICMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5CiAgICBwcmV0dHlfYnl0ZXMgPSBieXRlc190b19odW1hbgoKICAgIGRlZiBodW1hbl90b19ieXRlcyhzZWxmLCBudW1iZXIsIGlzYml0cz1GYWxzZSk6CiAgICAgICAgcmV0dXJuIGh1bWFuX3RvX2J5dGVzKG51bWJlciwgaXNiaXRzKQoKICAgICMKICAgICMgQmFja3dhcmRzIGNvbXBhdAogICAgIwoKICAgICMgSW4gMi4wLCBtb3ZlZCBmcm9tIGluc2lkZSB0aGUgbW9kdWxlIHRvIHRoZSB0b3BsZXZlbAogICAgaXNfZXhlY3V0YWJsZSA9IGlzX2V4ZWN1dGFibGUKCgpkZWYgZ2V0X21vZHVsZV9wYXRoKCk6CiAgICByZXR1cm4gb3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKQpQSwMEFAAAAAAA4rsrSwT1jovoDQAA6A0AABsAAABhbnNpYmxlL21vZHVsZV91dGlscy9hcGkucHkjCiMgKGMpIDIwMTUgQnJpYW4gQ2NvYSwgPGJjb2NhQGFuc2libGUuY29tPgojCiMgVGhpcyBmaWxlIGlzIHBhcnQgb2YgQW5zaWJsZQojCiMgQW5zaWJsZSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiMgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKIyB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcgojIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCiMKIyBBbnNpYmxlIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiMgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKIyBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCiMgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KIwojIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCiMgYWxvbmcgd2l0aCBBbnNpYmxlLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgojCiIiIgpUaGlzIG1vZHVsZSBhZGRzIHNoYXJlZCBzdXBwb3J0IGZvciBnZW5lcmljIGFwaSBtb2R1bGVzCgpJbiBvcmRlciB0byB1c2UgdGhpcyBtb2R1bGUsIGluY2x1ZGUgaXQgYXMgcGFydCBvZiBhIGN1c3RvbQptb2R1bGUgYXMgc2hvd24gYmVsb3cuCgoqKiBOb3RlOiBUaGUgb3JkZXIgb2YgdGhlIGltcG9ydCBzdGF0ZW1lbnRzIGRvZXMgbWF0dGVyLiAqKgoKZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5iYXNpYyBpbXBvcnQgKgpmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLmFwaSBpbXBvcnQgKgoKVGhlICdhcGknIG1vZHVsZSBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGNvbW1vbiBhcmd1bWVudCBzcGVjczoKCiAgICAqIHJhdGUgbGltaXQgc3BlYwogICAgICAgIC0gcmF0ZTogbnVtYmVyIG9mIHJlcXVlc3RzIHBlciB0aW1lIHVuaXQgKGludCkKICAgICAgICAtIHJhdGVfbGltaXQ6IHRpbWUgd2luZG93IGluIHdoaWNoIHRoZSBsaW1pdCBpcyBhcHBsaWVkIGluIHNlY29uZHMKCiAgICAqIHJldHJ5IHNwZWMKICAgICAgICAtIHJldHJpZXM6IG51bWJlciBvZiBhdHRlbXB0cwogICAgICAgIC0gcmV0cnlfcGF1c2U6IGRlbGF5IGJldHdlZW4gYXR0ZW1wdHMgaW4gc2Vjb25kcwoKIiIiCmltcG9ydCB0aW1lCgpkZWYgcmF0ZV9saW1pdF9hcmd1bWVudF9zcGVjKHNwZWM9Tm9uZSk6CiAgICAiIiJDcmVhdGVzIGFuIGFyZ3VtZW50IHNwZWMgZm9yIHdvcmtpbmcgd2l0aCByYXRlIGxpbWl0aW5nIiIiCiAgICBhcmdfc3BlYyA9IChkaWN0KAogICAgICAgIHJhdGU9ZGljdCh0eXBlPSdpbnQnKSwKICAgICAgICByYXRlX2xpbWl0PWRpY3QodHlwZT0naW50JyksCiAgICApKQogICAgaWYgc3BlYzoKICAgICAgICBhcmdfc3BlYy51cGRhdGUoc3BlYykKICAgIHJldHVybiBhcmdfc3BlYwoKZGVmIHJldHJ5X2FyZ3VtZW50X3NwZWMoc3BlYz1Ob25lKToKICAgICIiIkNyZWF0ZXMgYW4gYXJndW1lbnQgc3BlYyBmb3Igd29ya2luZyB3aXRoIHJldHJ5aW5nIiIiCiAgICBhcmdfc3BlYyA9IChkaWN0KAogICAgICAgIHJldHJpZXM9ZGljdCh0eXBlPSdpbnQnKSwKICAgICAgICByZXRyeV9wYXVzZT1kaWN0KHR5cGU9J2Zsb2F0JywgZGVmYXVsdD0xKSwKICAgICkpCiAgICBpZiBzcGVjOgogICAgICAgIGFyZ19zcGVjLnVwZGF0ZShzcGVjKQogICAgcmV0dXJuIGFyZ19zcGVjCgpkZWYgYmFzaWNfYXV0aF9hcmd1bWVudF9zcGVjKHNwZWM9Tm9uZSk6CiAgICBhcmdfc3BlYyA9IChkaWN0KAogICAgICAgIGFwaV91c2VybmFtZT1kaWN0KHR5cGU9J3N0cicsIHJlcXVpcmVkPUZhbHNlKSwKICAgICAgICBhcGlfcGFzc3dvcmQ9ZGljdCh0eXBlPSdzdHInLCByZXF1aXJlZD1GYWxzZSwgbm9fbG9nPVRydWUpLAogICAgICAgIGFwaV91cmw9ZGljdCh0eXBlPSdzdHInLCByZXF1aXJlZD1GYWxzZSksCiAgICAgICAgdmFsaWRhdGVfY2VydHM9ZGljdCh0eXBlPSdib29sJywgZGVmYXVsdD1UcnVlKQogICAgKSkKICAgIGlmIHNwZWM6CiAgICAgICAgYXJnX3NwZWMudXBkYXRlKHNwZWMpCiAgICByZXR1cm4gYXJnX3NwZWMKCmRlZiByYXRlX2xpbWl0KHJhdGU9Tm9uZSwgcmF0ZV9saW1pdD1Ob25lKToKICAgICIiInJhdGUgbGltaXRpbmcgZGVjb3JhdG9yIiIiCiAgICBtaW5yYXRlID0gTm9uZQogICAgaWYgcmF0ZSBpcyBub3QgTm9uZSBhbmQgcmF0ZV9saW1pdCBpcyBub3QgTm9uZToKICAgICAgICBtaW5yYXRlID0gZmxvYXQocmF0ZV9saW1pdCkgLyBmbG9hdChyYXRlKQogICAgZGVmIHdyYXBwZXIoZik6CiAgICAgICAgbGFzdCA9IFswLjBdCiAgICAgICAgZGVmIHJhdGVsaW1pdGVkKCphcmdzLCoqa3dhcmdzKToKICAgICAgICAgICAgaWYgbWlucmF0ZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIGVsYXBzZWQgPSB0aW1lLmNsb2NrKCkgLSBsYXN0WzBdCiAgICAgICAgICAgICAgICBsZWZ0ID0gbWlucmF0ZSAtIGVsYXBzZWQKICAgICAgICAgICAgICAgIGlmIGxlZnQgPiAwOgogICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAobGVmdCkKICAgICAgICAgICAgICAgIGxhc3RbMF0gPSB0aW1lLmNsb2NrKCkKICAgICAgICAgICAgcmV0ID0gZigqYXJncywqKmt3YXJncykKICAgICAgICAgICAgcmV0dXJuIHJldAogICAgICAgIHJldHVybiByYXRlbGltaXRlZAogICAgcmV0dXJuIHdyYXBwZXIKCmRlZiByZXRyeShyZXRyaWVzPU5vbmUsIHJldHJ5X3BhdXNlPTEpOgogICAgIiIiUmV0cnkgZGVjb3JhdG9yIiIiCiAgICBkZWYgd3JhcHBlcihmKToKICAgICAgICByZXRyeV9jb3VudCA9IDAKICAgICAgICBkZWYgcmV0cmllZCgqYXJncywqKmt3YXJncyk6CiAgICAgICAgICAgIGlmIHJldHJpZXMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICByZXQgPSBOb25lCiAgICAgICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgICAgIHJldHJ5X2NvdW50ICs9IDEKICAgICAgICAgICAgICAgICAgICBpZiByZXRyeV9jb3VudCA+PSByZXRyaWVzOgogICAgICAgICAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oIlJldHJ5IGxpbWl0IGV4Y2VlZGVkOiAlZCIgJSByZXRyaWVzKQogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gZigqYXJncywqKmt3YXJncykKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgICAgICAgICBpZiByZXQ6CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcChyZXRyeV9wYXVzZSkKICAgICAgICAgICAgICAgIHJldHVybiByZXQKICAgICAgICByZXR1cm4gcmV0cmllZAogICAgcmV0dXJuIHdyYXBwZXIKClBLAwQUAAAAAADiuytLJdy0fhMQAAATEAAAIgAAAGFuc2libGUvbW9kdWxlX3V0aWxzL3B5Y29tcGF0MjQucHkjIFRoaXMgY29kZSBpcyBwYXJ0IG9mIEFuc2libGUsIGJ1dCBpcyBhbiBpbmRlcGVuZGVudCBjb21wb25lbnQuCiMgVGhpcyBwYXJ0aWN1bGFyIGZpbGUgc25pcHBldCwgYW5kIHRoaXMgZmlsZSBzbmlwcGV0IG9ubHksIGlzIEJTRCBsaWNlbnNlZC4KIyBNb2R1bGVzIHlvdSB3cml0ZSB1c2luZyB0aGlzIHNuaXBwZXQsIHdoaWNoIGlzIGVtYmVkZGVkIGR5bmFtaWNhbGx5IGJ5IEFuc2libGUKIyBzdGlsbCBiZWxvbmcgdG8gdGhlIGF1dGhvciBvZiB0aGUgbW9kdWxlLCBhbmQgbWF5IGFzc2lnbiB0aGVpciBvd24gbGljZW5zZQojIHRvIHRoZSBjb21wbGV0ZSB3b3JrLgojCiMgQ29weXJpZ2h0IChjKSAyMDE2LCBUb3NoaW8gS3VyYXRvbWkgPHRrdXJhdG9taUBhbnNpYmxlLmNvbT4KIyBDb3B5cmlnaHQgKGMpIDIwMTUsIE1hcml1cyBHZWRtaW5hcwojCiMgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwKIyBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6CiMKIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0CiMgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuCiMgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsCiMgICAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uCiMgICAgICBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KIwojIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTIElTIiBBTkQKIyBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRAojIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4KIyBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwKIyBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sCiMgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTCiMgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVAojIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRQojIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgojCgppbXBvcnQgc3lzCgpkZWYgZ2V0X2V4Y2VwdGlvbigpOgogICAgIiIiR2V0IHRoZSBjdXJyZW50IGV4Y2VwdGlvbi4KCiAgICBUaGlzIGNvZGUgbmVlZHMgdG8gd29yayBvbiBQeXRob24gMi40IHRocm91Z2ggMy54LCBzbyB3ZSBjYW5ub3QgdXNlCiAgICAiZXhjZXB0IEV4Y2VwdGlvbiwgZToiIChTeW50YXhFcnJvciBvbiBQeXRob24gMy54KSBub3IKICAgICJleGNlcHQgRXhjZXB0aW9uIGFzIGU6IiAoU3ludGF4RXJyb3Igb24gUHl0aG9uIDIuNC0yLjUpLgogICAgSW5zdGVhZCB3ZSBtdXN0IHVzZSA6OgoKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCgogICAgIiIiCiAgICByZXR1cm4gc3lzLmV4Y19pbmZvKClbMV0KCnRyeToKICAgICMgUHl0aG9uIDIuNisKICAgIGZyb20gYXN0IGltcG9ydCBsaXRlcmFsX2V2YWwKZXhjZXB0IEltcG9ydEVycm9yOgogICAgIyBhIHJlcGxhY2VtZW50IGZvciBsaXRlcmFsX2V2YWwgdGhhdCB3b3JrcyB3aXRoIHB5dGhvbiAyLjQuIGZyb206CiAgICAjIGh0dHBzOi8vbWFpbC5weXRob24ub3JnL3BpcGVybWFpbC9weXRob24tbGlzdC8yMDA5LVNlcHRlbWJlci81NTE4ODAuaHRtbAogICAgIyB3aGljaCBpcyBlc3NlbnRpYWxseSBhIGN1dC9wYXN0ZSBmcm9tIGFuIGVhcmxpZXIgKDIuNikgdmVyc2lvbiBvZiBweXRob24ncwogICAgIyBhc3QucHkKICAgIGZyb20gY29tcGlsZXIgaW1wb3J0IGFzdCwgcGFyc2UKICAgIGZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4IGltcG9ydCBiaW5hcnlfdHlwZSwgc3RyaW5nX3R5cGVzLCB0ZXh0X3R5cGUKCiAgICBkZWYgbGl0ZXJhbF9ldmFsKG5vZGVfb3Jfc3RyaW5nKToKICAgICAgICAiIiIKICAgICAgICBTYWZlbHkgZXZhbHVhdGUgYW4gZXhwcmVzc2lvbiBub2RlIG9yIGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBQeXRob24KICAgICAgICBleHByZXNzaW9uLiAgVGhlIHN0cmluZyBvciBub2RlIHByb3ZpZGVkIG1heSBvbmx5IGNvbnNpc3Qgb2YgdGhlICBmb2xsb3dpbmcKICAgICAgICBQeXRob24gbGl0ZXJhbCBzdHJ1Y3R1cmVzOiBzdHJpbmdzLCBudW1iZXJzLCB0dXBsZXMsIGxpc3RzLCBkaWN0cywgIGJvb2xlYW5zLAogICAgICAgIGFuZCBOb25lLgogICAgICAgICIiIgogICAgICAgIF9zYWZlX25hbWVzID0geydOb25lJzogTm9uZSwgJ1RydWUnOiBUcnVlLCAnRmFsc2UnOiBGYWxzZX0KICAgICAgICBpZiBpc2luc3RhbmNlKG5vZGVfb3Jfc3RyaW5nLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICBub2RlX29yX3N0cmluZyA9IHBhcnNlKG5vZGVfb3Jfc3RyaW5nLCBtb2RlPSdldmFsJykKICAgICAgICBpZiBpc2luc3RhbmNlKG5vZGVfb3Jfc3RyaW5nLCBhc3QuRXhwcmVzc2lvbik6CiAgICAgICAgICAgIG5vZGVfb3Jfc3RyaW5nID0gbm9kZV9vcl9zdHJpbmcubm9kZQoKICAgICAgICBkZWYgX2NvbnZlcnQobm9kZSk6CiAgICAgICAgICAgICMgT2theSB0byB1c2UgbG9uZyBoZXJlIGJlY2F1c2UgdGhpcyBpcyBvbmx5IGZvciBweXRob24gMi40IGFuZCAyLjUKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShub2RlLCBhc3QuQ29uc3QpIGFuZCBpc2luc3RhbmNlKG5vZGUudmFsdWUsICh0ZXh0X3R5cGUsIGJpbmFyeV90eXBlLCBpbnQsIGZsb2F0LCBsb25nLCBjb21wbGV4KSk6CiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS52YWx1ZQogICAgICAgICAgICBlbGlmIGlzaW5zdGFuY2Uobm9kZSwgYXN0LlR1cGxlKToKICAgICAgICAgICAgICAgIHJldHVybiB0dXBsZShtYXAoX2NvbnZlcnQsIG5vZGUubm9kZXMpKQogICAgICAgICAgICBlbGlmIGlzaW5zdGFuY2Uobm9kZSwgYXN0Lkxpc3QpOgogICAgICAgICAgICAgICAgcmV0dXJuIGxpc3QobWFwKF9jb252ZXJ0LCBub2RlLm5vZGVzKSkKICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKG5vZGUsIGFzdC5EaWN0KToKICAgICAgICAgICAgICAgIHJldHVybiBkaWN0KChfY29udmVydChrKSwgX2NvbnZlcnQodikpIGZvciBrLCB2IGluIG5vZGUuaXRlbXMoKSkKICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKG5vZGUsIGFzdC5OYW1lKToKICAgICAgICAgICAgICAgIGlmIG5vZGUubmFtZSBpbiBfc2FmZV9uYW1lczoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3NhZmVfbmFtZXNbbm9kZS5uYW1lXQogICAgICAgICAgICBlbGlmIGlzaW5zdGFuY2Uobm9kZSwgYXN0LlVuYXJ5U3ViKToKICAgICAgICAgICAgICAgIHJldHVybiAtX2NvbnZlcnQobm9kZS5leHByKQogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdtYWxmb3JtZWQgc3RyaW5nJykKICAgICAgICByZXR1cm4gX2NvbnZlcnQobm9kZV9vcl9zdHJpbmcpCgpfX2FsbF9fID0gKCdnZXRfZXhjZXB0aW9uJywgJ2xpdGVyYWxfZXZhbCcpClBLAwQUAAAAAADiuytLXYa1bzutAAA7rQAAHAAAAGFuc2libGUvbW9kdWxlX3V0aWxzL3VybHMucHkjIFRoaXMgY29kZSBpcyBwYXJ0IG9mIEFuc2libGUsIGJ1dCBpcyBhbiBpbmRlcGVuZGVudCBjb21wb25lbnQuCiMgVGhpcyBwYXJ0aWN1bGFyIGZpbGUgc25pcHBldCwgYW5kIHRoaXMgZmlsZSBzbmlwcGV0IG9ubHksIGlzIEJTRCBsaWNlbnNlZC4KIyBNb2R1bGVzIHlvdSB3cml0ZSB1c2luZyB0aGlzIHNuaXBwZXQsIHdoaWNoIGlzIGVtYmVkZGVkIGR5bmFtaWNhbGx5IGJ5IEFuc2libGUKIyBzdGlsbCBiZWxvbmcgdG8gdGhlIGF1dGhvciBvZiB0aGUgbW9kdWxlLCBhbmQgbWF5IGFzc2lnbiB0aGVpciBvd24gbGljZW5zZQojIHRvIHRoZSBjb21wbGV0ZSB3b3JrLgojCiMgQ29weXJpZ2h0IChjKSwgTWljaGFlbCBEZUhhYW4gPG1pY2hhZWwuZGVoYWFuQGdtYWlsLmNvbT4sIDIwMTItMjAxMwojIENvcHlyaWdodCAoYyksIFRvc2hpbyBLdXJhdG9taSA8dGt1cmF0b21pQGFuc2libGUuY29tPiwgMjAxNQojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLAojIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDoKIwojICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQKIyAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwKIyAgICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24KIyAgICAgIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgojCiMgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyAiQVMgSVMiIEFORAojIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVECiMgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELgojIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULAojIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywKIyBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MKIyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUCiMgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFCiMgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCiMKIyBUaGUgbWF0Y2hfaG9zdG5hbWUgZnVuY3Rpb24gYW5kIHN1cHBvcnRpbmcgY29kZSBpcyB1bmRlciB0aGUgdGVybXMgYW5kCiMgY29uZGl0aW9ucyBvZiB0aGUgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24gTGljZW5zZS4gIFRoZXkgd2VyZSB0YWtlbiBmcm9tCiMgdGhlIFB5dGhvbjMgc3RhbmRhcmQgbGlicmFyeSBhbmQgYWRhcHRlZCBmb3IgdXNlIGluIFB5dGhvbjIuICBTZWUgY29tbWVudHMgaW4gdGhlCiMgc291cmNlIGZvciB3aGljaCBjb2RlIHByZWNpc2VseSBpcyB1bmRlciB0aGlzIExpY2Vuc2UuICBQU0YgTGljZW5zZSB0ZXh0CiMgZm9sbG93czoKIwojIFBZVEhPTiBTT0ZUV0FSRSBGT1VOREFUSU9OIExJQ0VOU0UgVkVSU0lPTiAyCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIwojIDEuIFRoaXMgTElDRU5TRSBBR1JFRU1FTlQgaXMgYmV0d2VlbiB0aGUgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24KIyAoIlBTRiIpLCBhbmQgdGhlIEluZGl2aWR1YWwgb3IgT3JnYW5pemF0aW9uICgiTGljZW5zZWUiKSBhY2Nlc3NpbmcgYW5kCiMgb3RoZXJ3aXNlIHVzaW5nIHRoaXMgc29mdHdhcmUgKCJQeXRob24iKSBpbiBzb3VyY2Ugb3IgYmluYXJ5IGZvcm0gYW5kCiMgaXRzIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbi4KIwojIDIuIFN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQsIFBTRiBoZXJlYnkKIyBncmFudHMgTGljZW5zZWUgYSBub25leGNsdXNpdmUsIHJveWFsdHktZnJlZSwgd29ybGQtd2lkZSBsaWNlbnNlIHRvIHJlcHJvZHVjZSwKIyBhbmFseXplLCB0ZXN0LCBwZXJmb3JtIGFuZC9vciBkaXNwbGF5IHB1YmxpY2x5LCBwcmVwYXJlIGRlcml2YXRpdmUgd29ya3MsCiMgZGlzdHJpYnV0ZSwgYW5kIG90aGVyd2lzZSB1c2UgUHl0aG9uIGFsb25lIG9yIGluIGFueSBkZXJpdmF0aXZlIHZlcnNpb24sCiMgcHJvdmlkZWQsIGhvd2V2ZXIsIHRoYXQgUFNGJ3MgTGljZW5zZSBBZ3JlZW1lbnQgYW5kIFBTRidzIG5vdGljZSBvZiBjb3B5cmlnaHQsCiMgaS5lLiwgIkNvcHlyaWdodCAoYykgMjAwMSwgMjAwMiwgMjAwMywgMjAwNCwgMjAwNSwgMjAwNiwgMjAwNywgMjAwOCwgMjAwOSwgMjAxMCwKIyAyMDExLCAyMDEyLCAyMDEzLCAyMDE0IFB5dGhvbiBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBBbGwgUmlnaHRzIFJlc2VydmVkIiBhcmUKIyByZXRhaW5lZCBpbiBQeXRob24gYWxvbmUgb3IgaW4gYW55IGRlcml2YXRpdmUgdmVyc2lvbiBwcmVwYXJlZCBieSBMaWNlbnNlZS4KIwojIDMuIEluIHRoZSBldmVudCBMaWNlbnNlZSBwcmVwYXJlcyBhIGRlcml2YXRpdmUgd29yayB0aGF0IGlzIGJhc2VkIG9uCiMgb3IgaW5jb3Jwb3JhdGVzIFB5dGhvbiBvciBhbnkgcGFydCB0aGVyZW9mLCBhbmQgd2FudHMgdG8gbWFrZQojIHRoZSBkZXJpdmF0aXZlIHdvcmsgYXZhaWxhYmxlIHRvIG90aGVycyBhcyBwcm92aWRlZCBoZXJlaW4sIHRoZW4KIyBMaWNlbnNlZSBoZXJlYnkgYWdyZWVzIHRvIGluY2x1ZGUgaW4gYW55IHN1Y2ggd29yayBhIGJyaWVmIHN1bW1hcnkgb2YKIyB0aGUgY2hhbmdlcyBtYWRlIHRvIFB5dGhvbi4KIwojIDQuIFBTRiBpcyBtYWtpbmcgUHl0aG9uIGF2YWlsYWJsZSB0byBMaWNlbnNlZSBvbiBhbiAiQVMgSVMiCiMgYmFzaXMuICBQU0YgTUFLRVMgTk8gUkVQUkVTRU5UQVRJT05TIE9SIFdBUlJBTlRJRVMsIEVYUFJFU1MgT1IKIyBJTVBMSUVELiAgQlkgV0FZIE9GIEVYQU1QTEUsIEJVVCBOT1QgTElNSVRBVElPTiwgUFNGIE1BS0VTIE5PIEFORAojIERJU0NMQUlNUyBBTlkgUkVQUkVTRU5UQVRJT04gT1IgV0FSUkFOVFkgT0YgTUVSQ0hBTlRBQklMSVRZIE9SIEZJVE5FU1MKIyBGT1IgQU5ZIFBBUlRJQ1VMQVIgUFVSUE9TRSBPUiBUSEFUIFRIRSBVU0UgT0YgUFlUSE9OIFdJTEwgTk9UCiMgSU5GUklOR0UgQU5ZIFRISVJEIFBBUlRZIFJJR0hUUy4KIwojIDUuIFBTRiBTSEFMTCBOT1QgQkUgTElBQkxFIFRPIExJQ0VOU0VFIE9SIEFOWSBPVEhFUiBVU0VSUyBPRiBQWVRIT04KIyBGT1IgQU5ZIElOQ0lERU5UQUwsIFNQRUNJQUwsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBMT1NTIEFTCiMgQSBSRVNVTFQgT0YgTU9ESUZZSU5HLCBESVNUUklCVVRJTkcsIE9SIE9USEVSV0lTRSBVU0lORyBQWVRIT04sCiMgT1IgQU5ZIERFUklWQVRJVkUgVEhFUkVPRiwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBUSEVSRU9GLgojCiMgNi4gVGhpcyBMaWNlbnNlIEFncmVlbWVudCB3aWxsIGF1dG9tYXRpY2FsbHkgdGVybWluYXRlIHVwb24gYSBtYXRlcmlhbAojIGJyZWFjaCBvZiBpdHMgdGVybXMgYW5kIGNvbmRpdGlvbnMuCiMKIyA3LiBOb3RoaW5nIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgc2hhbGwgYmUgZGVlbWVkIHRvIGNyZWF0ZSBhbnkKIyByZWxhdGlvbnNoaXAgb2YgYWdlbmN5LCBwYXJ0bmVyc2hpcCwgb3Igam9pbnQgdmVudHVyZSBiZXR3ZWVuIFBTRiBhbmQKIyBMaWNlbnNlZS4gIFRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgZG9lcyBub3QgZ3JhbnQgcGVybWlzc2lvbiB0byB1c2UgUFNGCiMgdHJhZGVtYXJrcyBvciB0cmFkZSBuYW1lIGluIGEgdHJhZGVtYXJrIHNlbnNlIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZQojIHByb2R1Y3RzIG9yIHNlcnZpY2VzIG9mIExpY2Vuc2VlLCBvciBhbnkgdGhpcmQgcGFydHkuCiMKIyA4LiBCeSBjb3B5aW5nLCBpbnN0YWxsaW5nIG9yIG90aGVyd2lzZSB1c2luZyBQeXRob24sIExpY2Vuc2VlCiMgYWdyZWVzIHRvIGJlIGJvdW5kIGJ5IHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGlzIExpY2Vuc2UKIyBBZ3JlZW1lbnQuCgonJycKVGhlICoqdXJscyoqIHV0aWxzIG1vZHVsZSBvZmZlcnMgYSByZXBsYWNlbWVudCBmb3IgdGhlIHVybGxpYjIgcHl0aG9uIGxpYnJhcnkuCgp1cmxsaWIyIGlzIHRoZSBweXRob24gc3RkbGliIHdheSB0byByZXRyaWV2ZSBmaWxlcyBmcm9tIHRoZSBJbnRlcm5ldCBidXQgaXQKbGFja3Mgc29tZSBzZWN1cml0eSBmZWF0dXJlcyAoYXJvdW5kIHZlcmlmeWluZyBTU0wgY2VydGlmaWNhdGVzKSB0aGF0IHVzZXJzCnNob3VsZCBjYXJlIGFib3V0IGluIG1vc3Qgc2l0dWF0aW9ucy4gVXNpbmcgdGhlIGZ1bmN0aW9ucyBpbiB0aGlzIG1vZHVsZSBjb3JyZWN0cwpkZWZpY2llbmNpZXMgaW4gdGhlIHVybGxpYjIgbW9kdWxlIHdoZXJldmVyIHBvc3NpYmxlLgoKVGhlcmUgYXJlIGFsc28gdGhpcmQtcGFydHkgbGlicmFyaWVzIChmb3IgaW5zdGFuY2UsIHJlcXVlc3RzKSB3aGljaCBjYW4gYmUgdXNlZAp0byByZXBsYWNlIHVybGxpYjIgd2l0aCBhIG1vcmUgc2VjdXJlIGxpYnJhcnkuIEhvd2V2ZXIsIGFsbCB0aGlyZCBwYXJ0eSBsaWJyYXJpZXMKcmVxdWlyZSB0aGF0IHRoZSBsaWJyYXJ5IGJlIGluc3RhbGxlZCBvbiB0aGUgbWFuYWdlZCBtYWNoaW5lLiBUaGF0IGlzIGFuIGV4dHJhIHN0ZXAKZm9yIHVzZXJzIG1ha2luZyB1c2Ugb2YgYSBtb2R1bGUuIElmIHBvc3NpYmxlLCBhdm9pZCB0aGlyZCBwYXJ0eSBsaWJyYXJpZXMgYnkgdXNpbmcKdGhpcyBjb2RlIGluc3RlYWQuCicnJwoKaW1wb3J0IG5ldHJjCmltcG9ydCBvcwppbXBvcnQgcmUKaW1wb3J0IHN5cwppbXBvcnQgc29ja2V0CmltcG9ydCBwbGF0Zm9ybQppbXBvcnQgdGVtcGZpbGUKaW1wb3J0IGJhc2U2NAoKdHJ5OgogICAgaW1wb3J0IGh0dHBsaWIKZXhjZXB0IEltcG9ydEVycm9yOgogICAgIyBQeXRob24gMwogICAgaW1wb3J0IGh0dHAuY2xpZW50IGFzIGh0dHBsaWIKCmltcG9ydCBhbnNpYmxlLm1vZHVsZV91dGlscy5zaXgubW92ZXMudXJsbGliLnJlcXVlc3QgYXMgdXJsbGliX3JlcXVlc3QKaW1wb3J0IGFuc2libGUubW9kdWxlX3V0aWxzLnNpeC5tb3Zlcy51cmxsaWIuZXJyb3IgYXMgdXJsbGliX2Vycm9yCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuYmFzaWMgaW1wb3J0IGdldF9kaXN0cmlidXRpb24sIGdldF9leGNlcHRpb24KZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5zaXggaW1wb3J0IGIKZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5fdGV4dCBpbXBvcnQgdG9fYnl0ZXMsIHRvX25hdGl2ZSwgdG9fdGV4dAoKdHJ5OgogICAgIyBweXRob24zCiAgICBpbXBvcnQgdXJsbGliLnJlcXVlc3QgYXMgdXJsbGliX3JlcXVlc3QKICAgIGZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IEFic3RyYWN0SFRUUEhhbmRsZXIKZXhjZXB0IEltcG9ydEVycm9yOgogICAgIyBweXRob24yCiAgICBpbXBvcnQgdXJsbGliMiBhcyB1cmxsaWJfcmVxdWVzdAogICAgZnJvbSB1cmxsaWIyIGltcG9ydCBBYnN0cmFjdEhUVFBIYW5kbGVyCgp0cnk6CiAgICBmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeC5tb3Zlcy51cmxsaWIucGFyc2UgaW1wb3J0IHVybHBhcnNlLCB1cmx1bnBhcnNlCiAgICBIQVNfVVJMUEFSU0UgPSBUcnVlCmV4Y2VwdDoKICAgIEhBU19VUkxQQVJTRSA9IEZhbHNlCgp0cnk6CiAgICBpbXBvcnQgc3NsCiAgICBIQVNfU1NMID0gVHJ1ZQpleGNlcHQ6CiAgICBIQVNfU1NMID0gRmFsc2UKCnRyeToKICAgICMgU05JIEhhbmRsaW5nIG5lZWRzIHB5dGhvbjIuNy45J3MgU1NMQ29udGV4dAogICAgZnJvbSBzc2wgaW1wb3J0IGNyZWF0ZV9kZWZhdWx0X2NvbnRleHQsIFNTTENvbnRleHQKICAgIEhBU19TU0xDT05URVhUID0gVHJ1ZQpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBIQVNfU1NMQ09OVEVYVCA9IEZhbHNlCgojIFNOSSBIYW5kbGluZyBmb3IgcHl0aG9uIDwgMi43Ljkgd2l0aCB1cmxsaWIzIHN1cHBvcnQKdHJ5OgogICAgIyB1cmxsaWIzPj0xLjE1CiAgICBIQVNfVVJMTElCM19TU0xfV1JBUF9TT0NLRVQgPSBGYWxzZQogICAgdHJ5OgogICAgICAgIGZyb20gdXJsbGliMy5jb250cmliLnB5b3BlbnNzbCBpbXBvcnQgUHlPcGVuU1NMQ29udGV4dAogICAgZXhjZXB0IEltcG9ydEVycm9yOgogICAgICAgIGZyb20gcmVxdWVzdHMucGFja2FnZXMudXJsbGliMy5jb250cmliLnB5b3BlbnNzbCBpbXBvcnQgUHlPcGVuU1NMQ29udGV4dAogICAgSEFTX1VSTExJQjNfUFlPUEVOU1NMQ09OVEVYVCA9IFRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgIyB1cmxsaWIzPDEuMTUsPj0xLjYKICAgIEhBU19VUkxMSUIzX1BZT1BFTlNTTENPTlRFWFQgPSBGYWxzZQogICAgdHJ5OgogICAgICAgIHRyeToKICAgICAgICAgICAgZnJvbSB1cmxsaWIzLmNvbnRyaWIucHlvcGVuc3NsIGltcG9ydCBzc2xfd3JhcF9zb2NrZXQKICAgICAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgICAgIGZyb20gcmVxdWVzdHMucGFja2FnZXMudXJsbGliMy5jb250cmliLnB5b3BlbnNzbCBpbXBvcnQgc3NsX3dyYXBfc29ja2V0CiAgICAgICAgSEFTX1VSTExJQjNfU1NMX1dSQVBfU09DS0VUID0gVHJ1ZQogICAgZXhjZXB0IEltcG9ydEVycm9yOgogICAgICAgIHBhc3MKCiMgU2VsZWN0IGEgcHJvdG9jb2wgdGhhdCBpbmNsdWRlcyBhbGwgc2VjdXJlIHRscyBwcm90b2NvbHMKIyBFeGNsdWRlIGluc2VjdXJlIHNzbCBwcm90b2NvbHMgaWYgcG9zc2libGUKCmlmIEhBU19TU0w6CiAgICAjIElmIHdlIGNhbid0IGZpbmQgZXh0cmEgdGxzIG1ldGhvZHMsIHNzbC5QUk9UT0NPTF9UTFN2MSBpcyBzdWZmaWNpZW50CiAgICBQUk9UT0NPTCA9IHNzbC5QUk9UT0NPTF9UTFN2MQppZiBub3QgSEFTX1NTTENPTlRFWFQgYW5kIEhBU19TU0w6CiAgICB0cnk6CiAgICAgICAgaW1wb3J0IGN0eXBlcwogICAgICAgIGltcG9ydCBjdHlwZXMudXRpbAogICAgZXhjZXB0IEltcG9ydEVycm9yOgogICAgICAgICMgcHl0aG9uIDIuNCAobGlrZWx5IHJoZWw1IHdoaWNoIGRvZXNuJ3QgaGF2ZSB0bHMxLjEgc3VwcG9ydCBpbiBpdHMgb3BlbnNzbCkKICAgICAgICBwYXNzCiAgICBlbHNlOgogICAgICAgIGxpYnNzbF9uYW1lID0gY3R5cGVzLnV0aWwuZmluZF9saWJyYXJ5KCdzc2wnKQogICAgICAgIGxpYnNzbCA9IGN0eXBlcy5DRExMKGxpYnNzbF9uYW1lKQogICAgICAgIGZvciBtZXRob2QgaW4gKCdUTFN2MV8xX21ldGhvZCcsICdUTFN2MV8yX21ldGhvZCcpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBsaWJzc2xbbWV0aG9kXQogICAgICAgICAgICAgICAgIyBGb3VuZCBzb21ldGhpbmcgLSB3ZSdsbCBsZXQgb3BlbnNzbCBhdXRvbmVnb3RpYXRlIGFuZCBob3BlCiAgICAgICAgICAgICAgICAjIHRoZSBzZXJ2ZXIgaGFzIGRpc2FibGVkIHNzbHYyIGFuZCAzLiAgYmVzdCB3ZSBjYW4gZG8uCiAgICAgICAgICAgICAgICBQUk9UT0NPTCA9IHNzbC5QUk9UT0NPTF9TU0x2MjMKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICBkZWwgbGlic3NsCgoKTE9BREVEX1ZFUklGWV9MT0NBVElPTlMgPSBzZXQoKQoKSEFTX01BVENIX0hPU1ROQU1FID0gVHJ1ZQp0cnk6CiAgICBmcm9tIHNzbCBpbXBvcnQgbWF0Y2hfaG9zdG5hbWUsIENlcnRpZmljYXRlRXJyb3IKZXhjZXB0IEltcG9ydEVycm9yOgogICAgdHJ5OgogICAgICAgIGZyb20gYmFja3BvcnRzLnNzbF9tYXRjaF9ob3N0bmFtZSBpbXBvcnQgbWF0Y2hfaG9zdG5hbWUsIENlcnRpZmljYXRlRXJyb3IKICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBIQVNfTUFUQ0hfSE9TVE5BTUUgPSBGYWxzZQoKaWYgbm90IEhBU19NQVRDSF9IT1NUTkFNRToKICAgICMjIwogICAgIyMjIFRoZSBmb2xsb3dpbmcgYmxvY2sgb2YgY29kZSBpcyB1bmRlciB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhlCiAgICAjIyMgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24gTGljZW5zZQogICAgIyMjCgogICAgIiIiVGhlIG1hdGNoX2hvc3RuYW1lKCkgZnVuY3Rpb24gZnJvbSBQeXRob24gMy40LCBlc3NlbnRpYWwgd2hlbiB1c2luZyBTU0wuIiIiCgogICAgY2xhc3MgQ2VydGlmaWNhdGVFcnJvcihWYWx1ZUVycm9yKToKICAgICAgICBwYXNzCgoKICAgIGRlZiBfZG5zbmFtZV9tYXRjaChkbiwgaG9zdG5hbWUsIG1heF93aWxkY2FyZHM9MSk6CiAgICAgICAgIiIiTWF0Y2hpbmcgYWNjb3JkaW5nIHRvIFJGQyA2MTI1LCBzZWN0aW9uIDYuNC4zCgogICAgICAgIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzYxMjUjc2VjdGlvbi02LjQuMwogICAgICAgICIiIgogICAgICAgIHBhdHMgPSBbXQogICAgICAgIGlmIG5vdCBkbjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgICMgUG9ydGVkIGZyb20gcHl0aG9uMy1zeW50YXg6CiAgICAgICAgIyBsZWZ0bW9zdCwgKnJlbWFpbmRlciA9IGRuLnNwbGl0KHInLicpCiAgICAgICAgcGFydHMgPSBkbi5zcGxpdChyJy4nKQogICAgICAgIGxlZnRtb3N0ID0gcGFydHNbMF0KICAgICAgICByZW1haW5kZXIgPSBwYXJ0c1sxOl0KCiAgICAgICAgd2lsZGNhcmRzID0gbGVmdG1vc3QuY291bnQoJyonKQogICAgICAgIGlmIHdpbGRjYXJkcyA+IG1heF93aWxkY2FyZHM6CiAgICAgICAgICAgICMgSXNzdWUgIzE3OTgwOiBhdm9pZCBkZW5pYWxzIG9mIHNlcnZpY2UgYnkgcmVmdXNpbmcgbW9yZQogICAgICAgICAgICAjIHRoYW4gb25lIHdpbGRjYXJkIHBlciBmcmFnbWVudC4gIEEgc3VydmV5IG9mIGVzdGFibGlzaGVkCiAgICAgICAgICAgICMgcG9saWN5IGFtb25nIFNTTCBpbXBsZW1lbnRhdGlvbnMgc2hvd2VkIGl0IHRvIGJlIGEKICAgICAgICAgICAgIyByZWFzb25hYmxlIGNob2ljZS4KICAgICAgICAgICAgcmFpc2UgQ2VydGlmaWNhdGVFcnJvcigKICAgICAgICAgICAgICAgICJ0b28gbWFueSB3aWxkY2FyZHMgaW4gY2VydGlmaWNhdGUgRE5TIG5hbWU6ICIgKyByZXByKGRuKSkKCiAgICAgICAgIyBzcGVlZCB1cCBjb21tb24gY2FzZSB3L28gd2lsZGNhcmRzCiAgICAgICAgaWYgbm90IHdpbGRjYXJkczoKICAgICAgICAgICAgcmV0dXJuIGRuLmxvd2VyKCkgPT0gaG9zdG5hbWUubG93ZXIoKQoKICAgICAgICAjIFJGQyA2MTI1LCBzZWN0aW9uIDYuNC4zLCBzdWJpdGVtIDEuCiAgICAgICAgIyBUaGUgY2xpZW50IFNIT1VMRCBOT1QgYXR0ZW1wdCB0byBtYXRjaCBhIHByZXNlbnRlZCBpZGVudGlmaWVyIGluIHdoaWNoCiAgICAgICAgIyB0aGUgd2lsZGNhcmQgY2hhcmFjdGVyIGNvbXByaXNlcyBhIGxhYmVsIG90aGVyIHRoYW4gdGhlIGxlZnQtbW9zdCBsYWJlbC4KICAgICAgICBpZiBsZWZ0bW9zdCA9PSAnKic6CiAgICAgICAgICAgICMgV2hlbiAnKicgaXMgYSBmcmFnbWVudCBieSBpdHNlbGYsIGl0IG1hdGNoZXMgYSBub24tZW1wdHkgZG90bGVzcwogICAgICAgICAgICAjIGZyYWdtZW50LgogICAgICAgICAgICBwYXRzLmFwcGVuZCgnW14uXSsnKQogICAgICAgIGVsaWYgbGVmdG1vc3Quc3RhcnRzd2l0aCgneG4tLScpIG9yIGhvc3RuYW1lLnN0YXJ0c3dpdGgoJ3huLS0nKToKICAgICAgICAgICAgIyBSRkMgNjEyNSwgc2VjdGlvbiA2LjQuMywgc3ViaXRlbSAzLgogICAgICAgICAgICAjIFRoZSBjbGllbnQgU0hPVUxEIE5PVCBhdHRlbXB0IHRvIG1hdGNoIGEgcHJlc2VudGVkIGlkZW50aWZpZXIKICAgICAgICAgICAgIyB3aGVyZSB0aGUgd2lsZGNhcmQgY2hhcmFjdGVyIGlzIGVtYmVkZGVkIHdpdGhpbiBhbiBBLWxhYmVsIG9yCiAgICAgICAgICAgICMgVS1sYWJlbCBvZiBhbiBpbnRlcm5hdGlvbmFsaXplZCBkb21haW4gbmFtZS4KICAgICAgICAgICAgcGF0cy5hcHBlbmQocmUuZXNjYXBlKGxlZnRtb3N0KSkKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIE90aGVyd2lzZSwgJyonIG1hdGNoZXMgYW55IGRvdGxlc3Mgc3RyaW5nLCBlLmcuIHd3dyoKICAgICAgICAgICAgcGF0cy5hcHBlbmQocmUuZXNjYXBlKGxlZnRtb3N0KS5yZXBsYWNlKHInXConLCAnW14uXSonKSkKCiAgICAgICAgIyBhZGQgdGhlIHJlbWFpbmluZyBmcmFnbWVudHMsIGlnbm9yZSBhbnkgd2lsZGNhcmRzCiAgICAgICAgZm9yIGZyYWcgaW4gcmVtYWluZGVyOgogICAgICAgICAgICBwYXRzLmFwcGVuZChyZS5lc2NhcGUoZnJhZykpCgogICAgICAgIHBhdCA9IHJlLmNvbXBpbGUocidcQScgKyByJ1wuJy5qb2luKHBhdHMpICsgcidcWicsIHJlLklHTk9SRUNBU0UpCiAgICAgICAgcmV0dXJuIHBhdC5tYXRjaChob3N0bmFtZSkKCgogICAgZGVmIG1hdGNoX2hvc3RuYW1lKGNlcnQsIGhvc3RuYW1lKToKICAgICAgICAiIiJWZXJpZnkgdGhhdCAqY2VydCogKGluIGRlY29kZWQgZm9ybWF0IGFzIHJldHVybmVkIGJ5CiAgICAgICAgU1NMU29ja2V0LmdldHBlZXJjZXJ0KCkpIG1hdGNoZXMgdGhlICpob3N0bmFtZSouICBSRkMgMjgxOCBhbmQgUkZDIDYxMjUKICAgICAgICBydWxlcyBhcmUgZm9sbG93ZWQsIGJ1dCBJUCBhZGRyZXNzZXMgYXJlIG5vdCBhY2NlcHRlZCBmb3IgKmhvc3RuYW1lKi4KCiAgICAgICAgQ2VydGlmaWNhdGVFcnJvciBpcyByYWlzZWQgb24gZmFpbHVyZS4gT24gc3VjY2VzcywgdGhlIGZ1bmN0aW9uCiAgICAgICAgcmV0dXJucyBub3RoaW5nLgogICAgICAgICIiIgogICAgICAgIGlmIG5vdCBjZXJ0OgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJlbXB0eSBvciBubyBjZXJ0aWZpY2F0ZSIpCiAgICAgICAgZG5zbmFtZXMgPSBbXQogICAgICAgIHNhbiA9IGNlcnQuZ2V0KCdzdWJqZWN0QWx0TmFtZScsICgpKQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIHNhbjoKICAgICAgICAgICAgaWYga2V5ID09ICdETlMnOgogICAgICAgICAgICAgICAgaWYgX2Ruc25hbWVfbWF0Y2godmFsdWUsIGhvc3RuYW1lKToKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgIGRuc25hbWVzLmFwcGVuZCh2YWx1ZSkKICAgICAgICBpZiBub3QgZG5zbmFtZXM6CiAgICAgICAgICAgICMgVGhlIHN1YmplY3QgaXMgb25seSBjaGVja2VkIHdoZW4gdGhlcmUgaXMgbm8gZE5TTmFtZSBlbnRyeQogICAgICAgICAgICAjIGluIHN1YmplY3RBbHROYW1lCiAgICAgICAgICAgIGZvciBzdWIgaW4gY2VydC5nZXQoJ3N1YmplY3QnLCAoKSk6CiAgICAgICAgICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBzdWI6CiAgICAgICAgICAgICAgICAgICAgIyBYWFggYWNjb3JkaW5nIHRvIFJGQyAyODE4LCB0aGUgbW9zdCBzcGVjaWZpYyBDb21tb24gTmFtZQogICAgICAgICAgICAgICAgICAgICMgbXVzdCBiZSB1c2VkLgogICAgICAgICAgICAgICAgICAgIGlmIGtleSA9PSAnY29tbW9uTmFtZSc6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIF9kbnNuYW1lX21hdGNoKHZhbHVlLCBob3N0bmFtZSk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICAgICAgZG5zbmFtZXMuYXBwZW5kKHZhbHVlKQogICAgICAgIGlmIGxlbihkbnNuYW1lcykgPiAxOgogICAgICAgICAgICByYWlzZSBDZXJ0aWZpY2F0ZUVycm9yKCJob3N0bmFtZSAlciAiCiAgICAgICAgICAgICAgICAiZG9lc24ndCBtYXRjaCBlaXRoZXIgb2YgJXMiCiAgICAgICAgICAgICAgICAlIChob3N0bmFtZSwgJywgJy5qb2luKG1hcChyZXByLCBkbnNuYW1lcykpKSkKICAgICAgICBlbGlmIGxlbihkbnNuYW1lcykgPT0gMToKICAgICAgICAgICAgcmFpc2UgQ2VydGlmaWNhdGVFcnJvcigiaG9zdG5hbWUgJXIgIgogICAgICAgICAgICAgICAgImRvZXNuJ3QgbWF0Y2ggJXIiCiAgICAgICAgICAgICAgICAlIChob3N0bmFtZSwgZG5zbmFtZXNbMF0pKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJhaXNlIENlcnRpZmljYXRlRXJyb3IoIm5vIGFwcHJvcHJpYXRlIGNvbW1vbk5hbWUgb3IgIgogICAgICAgICAgICAgICAgInN1YmplY3RBbHROYW1lIGZpZWxkcyB3ZXJlIGZvdW5kIikKCiAgICAjIyMKICAgICMjIyBFbmQgb2YgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24gTGljZW5zZWQgY29kZQogICAgIyMjCgogICAgSEFTX01BVENIX0hPU1ROQU1FID0gVHJ1ZQoKCiMgVGhpcyBpcyBhIGR1bW15IGNhY2VydCBwcm92aWRlZCBmb3IgTWFjIE9TIHNpbmNlIHlvdSBuZWVkIGF0IGxlYXN0IDEKIyBjYSBjZXJ0LCByZWdhcmRsZXNzIG9mIHZhbGlkaXR5LCBmb3IgUHl0aG9uIG9uIE1hYyBPUyB0byB1c2UgdGhlCiMga2V5Y2hhaW4gZnVuY3Rpb25hbGl0eSBpbiBPcGVuU1NMIGZvciB2YWxpZGF0aW5nIFNTTCBjZXJ0aWZpY2F0ZXMuCiMgU2VlOiBodHRwOi8vbWVyY3VyaWFsLnNlbGVuaWMuY29tL3dpa2kvQ0FDZXJ0aWZpY2F0ZXMjTWFjX09TX1hfMTAuNl9hbmRfaGlnaGVyCmJfRFVNTVlfQ0FfQ0VSVCA9IGIoIiIiLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN2RENDQWlXZ0F3SUJBZ0lKQU84RTEyUzcvcUVwTUEwR0NTcUdTSWIzRFFFQkJRVUFNRWt4Q3pBSkJnTlYKQkFZVEFsVlRNUmN3RlFZRFZRUUlFdzVPYjNKMGFDQkRZWEp2YkdsdVlURVBNQTBHQTFVRUJ4TUdSSFZ5YUdGdApNUkF3RGdZRFZRUUtFd2RCYm5OcFlteGxNQjRYRFRFME1ETXhPREl5TURBeU1sb1hEVEkwTURNeE5USXlNREF5Ck1sb3dTVEVMTUFrR0ExVUVCaE1DVlZNeEZ6QVZCZ05WQkFnVERrNXZjblJvSUVOaGNtOXNhVzVoTVE4d0RRWUQKVlFRSEV3WkVkWEpvWVcweEVEQU9CZ05WQkFvVEIwRnVjMmxpYkdVd2daOHdEUVlKS29aSWh2Y05BUUVCQlFBRApnWTBBTUlHSkFvR0JBTnR2cFBxM0lsTmxSYkNIaFpBY1A2V0N6aGM1UmJzRHF5aDF6cmttTGkwR3djUTN6L3I5CmdhV2ZRQlloSHBvYksyVGlxMTFUZnJhSGVOQjMvVmZOSW1qWmNHcE44RmwzTVd3dTdMZlZrSnkzZ05ObnhrQTEKNEdvMC9MbUl2UkZIaGJ6Z2Z1bzlORmdqUG1tYWI5ZXFYSmNlcVpJbHoyQzh4QTdFZUc3a3UwK3ZBZ01CQUFHagpnYXN3Z2Fnd0hRWURWUjBPQkJZRUZQbk4xblBScU5EWEdsQ3FDdmRaY2hSTmkvRmFNSGtHQTFVZEl3UnlNSENBCkZQbk4xblBScU5EWEdsQ3FDdmRaY2hSTmkvRmFvVTJrU3pCSk1Rc3dDUVlEVlFRR0V3SlZVekVYTUJVR0ExVUUKQ0JNT1RtOXlkR2dnUTJGeWIyeHBibUV4RHpBTkJnTlZCQWNUQmtSMWNtaGhiVEVRTUE0R0ExVUVDaE1IUVc1egphV0pzWllJSkFPOEUxMlM3L3FFcE1Bd0dBMVVkRXdRRk1BTUJBZjh3RFFZSktvWklodmNOQVFFRkJRQURnWUVBCk1VQjgwSVI2a25xOUsvdFkraHZQc1plcjZlRk16TzNKR2tSRkJoMmtuNkpkTURuaFlHWDdBWFZIR2ZscndOUUgKcUZ5K2FlbldYc0MwWnZyaWtGeGJRblg4R1Z0REFEdFZ6bnhPaTdYekZ3N0pPeGRzVnJwWGdTTjBlaDBhTXp2Vgp6S1Bac1oybWlWR2NsaWNKSHptNXEwODBiMXAvc1p0dUtJRVprNnZacUVnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCiIiIikKCiMKIyBFeGNlcHRpb25zCiMKCgpjbGFzcyBDb25uZWN0aW9uRXJyb3IoRXhjZXB0aW9uKToKICAgICIiIkZhaWxlZCB0byBjb25uZWN0IHRvIHRoZSBzZXJ2ZXIiIiIKICAgIHBhc3MKCgpjbGFzcyBQcm94eUVycm9yKENvbm5lY3Rpb25FcnJvcik6CiAgICAiIiJGYWlsdXJlIHRvIGNvbm5lY3QgYmVjYXVzZSBvZiBhIHByb3h5IiIiCiAgICBwYXNzCgoKY2xhc3MgU1NMVmFsaWRhdGlvbkVycm9yKENvbm5lY3Rpb25FcnJvcik6CiAgICAiIiJGYWlsdXJlIHRvIGNvbm5lY3QgZHVlIHRvIFNTTCB2YWxpZGF0aW9uIGZhaWxpbmciIiIKICAgIHBhc3MKCgpjbGFzcyBOb1NTTEVycm9yKFNTTFZhbGlkYXRpb25FcnJvcik6CiAgICAiIiJOZWVkZWQgdG8gY29ubmVjdCB0byBhbiBIVFRQUyB1cmwgYnV0IG5vIHNzbCBsaWJyYXJ5IGF2YWlsYWJsZSB0byB2ZXJpZnkgdGhlIGNlcnRpZmljYXRlIiIiCiAgICBwYXNzCgojIFNvbWUgZW52aXJvbm1lbnRzIChHb29nbGUgQ29tcHV0ZSBFbmdpbmUncyBDb3JlT1MgZGVwbG95cykgZG8gbm90IGNvbXBpbGUKIyBhZ2FpbnN0IG9wZW5zc2wgYW5kIHRodXMgZG8gbm90IGhhdmUgYW55IEhUVFBTIHN1cHBvcnQuCkN1c3RvbUhUVFBTQ29ubmVjdGlvbiA9IEN1c3RvbUhUVFBTSGFuZGxlciA9IE5vbmUKaWYgaGFzYXR0cihodHRwbGliLCAnSFRUUFNDb25uZWN0aW9uJykgYW5kIGhhc2F0dHIodXJsbGliX3JlcXVlc3QsICdIVFRQU0hhbmRsZXInKToKICAgIGNsYXNzIEN1c3RvbUhUVFBTQ29ubmVjdGlvbihodHRwbGliLkhUVFBTQ29ubmVjdGlvbik6CiAgICAgICAgZGVmIF9faW5pdF9fKHNlbGYsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgICAgIGh0dHBsaWIuSFRUUFNDb25uZWN0aW9uLl9faW5pdF9fKHNlbGYsICphcmdzLCAqKmt3YXJncykKICAgICAgICAgICAgc2VsZi5jb250ZXh0ID0gTm9uZQogICAgICAgICAgICBpZiBIQVNfU1NMQ09OVEVYVDoKICAgICAgICAgICAgICAgIHNlbGYuY29udGV4dCA9IGNyZWF0ZV9kZWZhdWx0X2NvbnRleHQoKQogICAgICAgICAgICBlbGlmIEhBU19VUkxMSUIzX1BZT1BFTlNTTENPTlRFWFQ6CiAgICAgICAgICAgICAgICBzZWxmLmNvbnRleHQgPSBQeU9wZW5TU0xDb250ZXh0KFBST1RPQ09MKQogICAgICAgICAgICBpZiBzZWxmLmNvbnRleHQgYW5kIHNlbGYuY2VydF9maWxlOgogICAgICAgICAgICAgICAgc2VsZi5jb250ZXh0LmxvYWRfY2VydF9jaGFpbihzZWxmLmNlcnRfZmlsZSwgc2VsZi5rZXlfZmlsZSkKCiAgICAgICAgZGVmIGNvbm5lY3Qoc2VsZik6CiAgICAgICAgICAgICJDb25uZWN0IHRvIGEgaG9zdCBvbiBhIGdpdmVuIChTU0wpIHBvcnQuIgoKICAgICAgICAgICAgaWYgaGFzYXR0cihzZWxmLCAnc291cmNlX2FkZHJlc3MnKToKICAgICAgICAgICAgICAgIHNvY2sgPSBzb2NrZXQuY3JlYXRlX2Nvbm5lY3Rpb24oKHNlbGYuaG9zdCwgc2VsZi5wb3J0KSwgc2VsZi50aW1lb3V0LCBzZWxmLnNvdXJjZV9hZGRyZXNzKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc29jayA9IHNvY2tldC5jcmVhdGVfY29ubmVjdGlvbigoc2VsZi5ob3N0LCBzZWxmLnBvcnQpLCBzZWxmLnRpbWVvdXQpCgogICAgICAgICAgICBzZXJ2ZXJfaG9zdG5hbWUgPSBzZWxmLmhvc3QKICAgICAgICAgICAgIyBOb3RlOiBzZWxmLl90dW5uZWxfaG9zdCBpcyBub3QgYXZhaWxhYmxlIG9uIHB5IDwgMi42IGJ1dCB0aGlzIGNvZGUKICAgICAgICAgICAgIyBpc24ndCB1c2VkIG9uIHB5IDwgMi42IChsYWNrIG9mIGNyZWF0ZV9jb25uZWN0aW9uKQogICAgICAgICAgICBpZiBzZWxmLl90dW5uZWxfaG9zdDoKICAgICAgICAgICAgICAgIHNlbGYuc29jayA9IHNvY2sKICAgICAgICAgICAgICAgIHNlbGYuX3R1bm5lbCgpCiAgICAgICAgICAgICAgICBzZXJ2ZXJfaG9zdG5hbWUgPSBzZWxmLl90dW5uZWxfaG9zdAoKICAgICAgICAgICAgaWYgSEFTX1NTTENPTlRFWFQgb3IgSEFTX1VSTExJQjNfUFlPUEVOU1NMQ09OVEVYVDoKICAgICAgICAgICAgICAgIHNlbGYuc29jayA9IHNlbGYuY29udGV4dC53cmFwX3NvY2tldChzb2NrLCBzZXJ2ZXJfaG9zdG5hbWU9c2VydmVyX2hvc3RuYW1lKQogICAgICAgICAgICBlbGlmIEhBU19VUkxMSUIzX1NTTF9XUkFQX1NPQ0tFVDoKICAgICAgICAgICAgICAgIHNlbGYuc29jayA9IHNzbF93cmFwX3NvY2tldChzb2NrLCBrZXlmaWxlPXNlbGYua2V5X2ZpbGUsIGNlcnRfcmVxcz1zc2wuQ0VSVF9OT05FLCBjZXJ0ZmlsZT1zZWxmLmNlcnRfZmlsZSwgc3NsX3ZlcnNpb249UFJPVE9DT0wsCiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlcl9ob3N0bmFtZT1zZXJ2ZXJfaG9zdG5hbWUpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLnNvY2sgPSBzc2wud3JhcF9zb2NrZXQoc29jaywga2V5ZmlsZT1zZWxmLmtleV9maWxlLCBjZXJ0ZmlsZT1zZWxmLmNlcnRfZmlsZSwgc3NsX3ZlcnNpb249UFJPVE9DT0wpCgogICAgY2xhc3MgQ3VzdG9tSFRUUFNIYW5kbGVyKHVybGxpYl9yZXF1ZXN0LkhUVFBTSGFuZGxlcik6CgogICAgICAgIGRlZiBodHRwc19vcGVuKHNlbGYsIHJlcSk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLmRvX29wZW4oQ3VzdG9tSFRUUFNDb25uZWN0aW9uLCByZXEpCgogICAgICAgIGh0dHBzX3JlcXVlc3QgPSBBYnN0cmFjdEhUVFBIYW5kbGVyLmRvX3JlcXVlc3RfCgoKY2xhc3MgSFRUUFNDbGllbnRBdXRoSGFuZGxlcih1cmxsaWJfcmVxdWVzdC5IVFRQU0hhbmRsZXIpOgogICAgJycnSGFuZGxlcyBjbGllbnQgYXV0aGVudGljYXRpb24gdmlhIGNlcnQva2V5CgogICAgVGhpcyBpcyBhIGZhaXJseSBsaWdodHdlaWdodCBleHRlbnNpb24gb24gSFRUUFNIYW5kbGVyLCBhbmQgY2FuIGJlIHVzZWQKICAgIGluIHBsYWNlIG9mIEhUVFBTSGFuZGxlcgogICAgJycnCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGNsaWVudF9jZXJ0PU5vbmUsIGNsaWVudF9rZXk9Tm9uZSwgKiprd2FyZ3MpOgogICAgICAgIHVybGxpYl9yZXF1ZXN0LkhUVFBTSGFuZGxlci5fX2luaXRfXyhzZWxmLCAqKmt3YXJncykKICAgICAgICBzZWxmLmNsaWVudF9jZXJ0ID0gY2xpZW50X2NlcnQKICAgICAgICBzZWxmLmNsaWVudF9rZXkgPSBjbGllbnRfa2V5CgogICAgZGVmIGh0dHBzX29wZW4oc2VsZiwgcmVxKToKICAgICAgICByZXR1cm4gc2VsZi5kb19vcGVuKHNlbGYuX2J1aWxkX2h0dHBzX2Nvbm5lY3Rpb24sIHJlcSkKCiAgICBkZWYgX2J1aWxkX2h0dHBzX2Nvbm5lY3Rpb24oc2VsZiwgaG9zdCwgKiprd2FyZ3MpOgogICAgICAgIGt3YXJncy51cGRhdGUoewogICAgICAgICAgICAnY2VydF9maWxlJzogc2VsZi5jbGllbnRfY2VydCwKICAgICAgICAgICAgJ2tleV9maWxlJzogc2VsZi5jbGllbnRfa2V5LAogICAgICAgIH0pCiAgICAgICAgdHJ5OgogICAgICAgICAgICBrd2FyZ3NbJ2NvbnRleHQnXSA9IHNlbGYuX2NvbnRleHQKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICByZXR1cm4gaHR0cGxpYi5IVFRQU0Nvbm5lY3Rpb24oaG9zdCwgKiprd2FyZ3MpCgoKZGVmIGdlbmVyaWNfdXJscGFyc2UocGFydHMpOgogICAgJycnCiAgICBSZXR1cm5zIGEgZGljdGlvbmFyeSBvZiB1cmwgcGFydHMgYXMgcGFyc2VkIGJ5IHVybHBhcnNlLAogICAgYnV0IGFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IG9sZGVyIHZlcnNpb25zIG9mIHRoYXQKICAgIGxpYnJhcnkgZG8gbm90IHN1cHBvcnQgbmFtZWQgYXR0cmlidXRlcyAoaWUuIC5uZXRsb2MpCiAgICAnJycKICAgIGdlbmVyaWNfcGFydHMgPSBkaWN0KCkKICAgIGlmIGhhc2F0dHIocGFydHMsICduZXRsb2MnKToKICAgICAgICAjIHVybHBhcnNlIGlzIG5ld2VyLCBqdXN0IHJlYWQgdGhlIGZpZWxkcyBzdHJhaWdodAogICAgICAgICMgZnJvbSB0aGUgcGFydHMgb2JqZWN0CiAgICAgICAgZ2VuZXJpY19wYXJ0c1snc2NoZW1lJ10gICA9IHBhcnRzLnNjaGVtZQogICAgICAgIGdlbmVyaWNfcGFydHNbJ25ldGxvYyddICAgPSBwYXJ0cy5uZXRsb2MKICAgICAgICBnZW5lcmljX3BhcnRzWydwYXRoJ10gICAgID0gcGFydHMucGF0aAogICAgICAgIGdlbmVyaWNfcGFydHNbJ3BhcmFtcyddICAgPSBwYXJ0cy5wYXJhbXMKICAgICAgICBnZW5lcmljX3BhcnRzWydxdWVyeSddICAgID0gcGFydHMucXVlcnkKICAgICAgICBnZW5lcmljX3BhcnRzWydmcmFnbWVudCddID0gcGFydHMuZnJhZ21lbnQKICAgICAgICBnZW5lcmljX3BhcnRzWyd1c2VybmFtZSddID0gcGFydHMudXNlcm5hbWUKICAgICAgICBnZW5lcmljX3BhcnRzWydwYXNzd29yZCddID0gcGFydHMucGFzc3dvcmQKICAgICAgICBnZW5lcmljX3BhcnRzWydob3N0bmFtZSddID0gcGFydHMuaG9zdG5hbWUKICAgICAgICBnZW5lcmljX3BhcnRzWydwb3J0J10gICAgID0gcGFydHMucG9ydAogICAgZWxzZToKICAgICAgICAjIHdlIGhhdmUgdG8gdXNlIGluZGV4ZXMsIGFuZCB0aGVuIHBhcnNlIG91dAogICAgICAgICMgdGhlIG90aGVyIHBhcnRzIG5vdCBzdXBwb3J0ZWQgYnkgaW5kZXhpbmcKICAgICAgICBnZW5lcmljX3BhcnRzWydzY2hlbWUnXSAgID0gcGFydHNbMF0KICAgICAgICBnZW5lcmljX3BhcnRzWyduZXRsb2MnXSAgID0gcGFydHNbMV0KICAgICAgICBnZW5lcmljX3BhcnRzWydwYXRoJ10gICAgID0gcGFydHNbMl0KICAgICAgICBnZW5lcmljX3BhcnRzWydwYXJhbXMnXSAgID0gcGFydHNbM10KICAgICAgICBnZW5lcmljX3BhcnRzWydxdWVyeSddICAgID0gcGFydHNbNF0KICAgICAgICBnZW5lcmljX3BhcnRzWydmcmFnbWVudCddID0gcGFydHNbNV0KICAgICAgICAjIGdldCB0aGUgdXNlcm5hbWUsIHBhc3N3b3JkLCBldGMuCiAgICAgICAgdHJ5OgogICAgICAgICAgICBuZXRsb2NfcmUgPSByZS5jb21waWxlKHInXigoPzpcdykrKD86Oig/Olx3KSspP0ApPyhbQS1aYS16MC05Li1dKykoOlxkKyk/JCcpCiAgICAgICAgICAgIG1hdGNoID0gbmV0bG9jX3JlLm1hdGNoKHBhcnRzWzFdKQogICAgICAgICAgICBhdXRoID0gbWF0Y2guZ3JvdXAoMSkKICAgICAgICAgICAgaG9zdG5hbWUgPSBtYXRjaC5ncm91cCgyKQogICAgICAgICAgICBwb3J0ID0gbWF0Y2guZ3JvdXAoMykKICAgICAgICAgICAgaWYgcG9ydDoKICAgICAgICAgICAgICAgICMgdGhlIGNhcHR1cmUgZ3JvdXAgZm9yIHRoZSBwb3J0IHdpbGwgaW5jbHVkZSB0aGUgJzonLAogICAgICAgICAgICAgICAgIyBzbyByZW1vdmUgaXQgYW5kIGNvbnZlcnQgdGhlIHBvcnQgdG8gYW4gaW50ZWdlcgogICAgICAgICAgICAgICAgcG9ydCA9IGludChwb3J0WzE6XSkKICAgICAgICAgICAgaWYgYXV0aDoKICAgICAgICAgICAgICAgICMgdGhlIGNhcHR1cmUgZ3JvdXAgYWJvdmUgaW5jbHVlcyB0aGUgQCwgc28gcmVtb3ZlIGl0CiAgICAgICAgICAgICAgICAjIGFuZCB0aGVuIHNwbGl0IGl0IHVwIGJhc2VkIG9uIHRoZSBmaXJzdCAnOicgZm91bmQKICAgICAgICAgICAgICAgIGF1dGggPSBhdXRoWzotMV0KICAgICAgICAgICAgICAgIHVzZXJuYW1lLCBwYXNzd29yZCA9IGF1dGguc3BsaXQoJzonLCAxKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBwYXNzd29yZCA9IE5vbmUKICAgICAgICAgICAgZ2VuZXJpY19wYXJ0c1sndXNlcm5hbWUnXSA9IHVzZXJuYW1lCiAgICAgICAgICAgIGdlbmVyaWNfcGFydHNbJ3Bhc3N3b3JkJ10gPSBwYXNzd29yZAogICAgICAgICAgICBnZW5lcmljX3BhcnRzWydob3N0bmFtZSddID0gaG9zdG5hbWUKICAgICAgICAgICAgZ2VuZXJpY19wYXJ0c1sncG9ydCddICAgICA9IHBvcnQKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIGdlbmVyaWNfcGFydHNbJ3VzZXJuYW1lJ10gPSBOb25lCiAgICAgICAgICAgIGdlbmVyaWNfcGFydHNbJ3Bhc3N3b3JkJ10gPSBOb25lCiAgICAgICAgICAgIGdlbmVyaWNfcGFydHNbJ2hvc3RuYW1lJ10gPSBwYXJ0c1sxXQogICAgICAgICAgICBnZW5lcmljX3BhcnRzWydwb3J0J10gICAgID0gTm9uZQogICAgcmV0dXJuIGdlbmVyaWNfcGFydHMKCgpjbGFzcyBSZXF1ZXN0V2l0aE1ldGhvZCh1cmxsaWJfcmVxdWVzdC5SZXF1ZXN0KToKICAgICcnJwogICAgV29ya2Fyb3VuZCBmb3IgdXNpbmcgREVMRVRFL1BVVC9ldGMgd2l0aCB1cmxsaWIyCiAgICBPcmlnaW5hbGx5IGNvbnRhaW5lZCBpbiBsaWJyYXJ5L25ldF9pbmZyYXN0cnVjdHVyZS9kbnNtYWRlZWFzeQogICAgJycnCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHVybCwgbWV0aG9kLCBkYXRhPU5vbmUsIGhlYWRlcnM9Tm9uZSk6CiAgICAgICAgaWYgaGVhZGVycyBpcyBOb25lOgogICAgICAgICAgICBoZWFkZXJzID0ge30KICAgICAgICBzZWxmLl9tZXRob2QgPSBtZXRob2QudXBwZXIoKQogICAgICAgIHVybGxpYl9yZXF1ZXN0LlJlcXVlc3QuX19pbml0X18oc2VsZiwgdXJsLCBkYXRhLCBoZWFkZXJzKQoKICAgIGRlZiBnZXRfbWV0aG9kKHNlbGYpOgogICAgICAgIGlmIHNlbGYuX21ldGhvZDoKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX21ldGhvZAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiB1cmxsaWJfcmVxdWVzdC5SZXF1ZXN0LmdldF9tZXRob2Qoc2VsZikKCgpkZWYgUmVkaXJlY3RIYW5kbGVyRmFjdG9yeShmb2xsb3dfcmVkaXJlY3RzPU5vbmUsIHZhbGlkYXRlX2NlcnRzPVRydWUpOgogICAgIiIiVGhpcyBpcyBhIGNsYXNzIGZhY3RvcnkgdGhhdCBjbG9zZXMgb3ZlciB0aGUgdmFsdWUgb2YKICAgIGBgZm9sbG93X3JlZGlyZWN0c2BgIHNvIHRoYXQgdGhlIFJlZGlyZWN0SGFuZGxlciBjbGFzcyBoYXMgYWNjZXNzIHRvCiAgICB0aGF0IHZhbHVlIHdpdGhvdXQgaGF2aW5nIHRvIHVzZSBnbG9iYWxzLCBhbmQgcG90ZW50aWFsbHkgY2F1c2UgcHJvYmxlbXMKICAgIHdoZXJlIGBgb3Blbl91cmxgYCBvciBgYGZldGNoX3VybGBgIGFyZSB1c2VkIG11bHRpcGxlIHRpbWVzIGluIGEgbW9kdWxlLgogICAgIiIiCgogICAgY2xhc3MgUmVkaXJlY3RIYW5kbGVyKHVybGxpYl9yZXF1ZXN0LkhUVFBSZWRpcmVjdEhhbmRsZXIpOgogICAgICAgICIiIlRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYSBSZWRpcmVjdEhhbmRsZXIgdG8gbWF0Y2ggdGhlCiAgICAgICAgZnVuY3Rpb25hbGl0eSBwcm92aWRlZCBieSBodHRwbGliMi4gSXQgd2lsbCB1dGlsaXplIHRoZSB2YWx1ZSBvZgogICAgICAgIGBgZm9sbG93X3JlZGlyZWN0c2BgIHRoYXQgaXMgcGFzc2VkIGludG8gYGBSZWRpcmVjdEhhbmRsZXJGYWN0b3J5YGAKICAgICAgICB0byBkZXRlcm1pbmUgaG93IHJlZGlyZWN0cyBzaG91bGQgYmUgaGFuZGxlZCBpbiB1cmxsaWIyLgogICAgICAgICIiIgoKICAgICAgICBkZWYgcmVkaXJlY3RfcmVxdWVzdChzZWxmLCByZXEsIGZwLCBjb2RlLCBtc2csIGhkcnMsIG5ld3VybCk6CiAgICAgICAgICAgIGhhbmRsZXIgPSBtYXliZV9hZGRfc3NsX2hhbmRsZXIobmV3dXJsLCB2YWxpZGF0ZV9jZXJ0cykKICAgICAgICAgICAgaWYgaGFuZGxlcjoKICAgICAgICAgICAgICAgIHVybGxpYl9yZXF1ZXN0Ll9vcGVuZXIuYWRkX2hhbmRsZXIoaGFuZGxlcikKCiAgICAgICAgICAgIGlmIGZvbGxvd19yZWRpcmVjdHMgPT0gJ3VybGxpYjInOgogICAgICAgICAgICAgICAgcmV0dXJuIHVybGxpYl9yZXF1ZXN0LkhUVFBSZWRpcmVjdEhhbmRsZXIucmVkaXJlY3RfcmVxdWVzdChzZWxmLCByZXEsIGZwLCBjb2RlLCBtc2csIGhkcnMsIG5ld3VybCkKICAgICAgICAgICAgZWxpZiBmb2xsb3dfcmVkaXJlY3RzIGluIFsnbm8nLCAnbm9uZScsIEZhbHNlXToKICAgICAgICAgICAgICAgIHJhaXNlIHVybGxpYl9lcnJvci5IVFRQRXJyb3IobmV3dXJsLCBjb2RlLCBtc2csIGhkcnMsIGZwKQoKICAgICAgICAgICAgZG9fcmVkaXJlY3QgPSBGYWxzZQogICAgICAgICAgICBpZiBmb2xsb3dfcmVkaXJlY3RzIGluIFsnYWxsJywgJ3llcycsIFRydWVdOgogICAgICAgICAgICAgICAgZG9fcmVkaXJlY3QgPSAoY29kZSA+PSAzMDAgYW5kIGNvZGUgPCA0MDApCgogICAgICAgICAgICBlbGlmIGZvbGxvd19yZWRpcmVjdHMgPT0gJ3NhZmUnOgogICAgICAgICAgICAgICAgbSA9IHJlcS5nZXRfbWV0aG9kKCkKICAgICAgICAgICAgICAgIGRvX3JlZGlyZWN0ID0gKGNvZGUgPj0gMzAwIGFuZCBjb2RlIDwgNDAwIGFuZCBtIGluICgnR0VUJywgJ0hFQUQnKSkKCiAgICAgICAgICAgIGlmIGRvX3JlZGlyZWN0OgogICAgICAgICAgICAgICAgIyBiZSBjb25jaWxpYW50IHdpdGggVVJJcyBjb250YWluaW5nIGEgc3BhY2UKICAgICAgICAgICAgICAgIG5ld3VybCA9IG5ld3VybC5yZXBsYWNlKCcgJywgJyUyMCcpCiAgICAgICAgICAgICAgICBuZXdoZWFkZXJzID0gZGljdCgoayx2KSBmb3Igayx2IGluIHJlcS5oZWFkZXJzLml0ZW1zKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGsubG93ZXIoKSBub3QgaW4gKCJjb250ZW50LWxlbmd0aCIsICJjb250ZW50LXR5cGUiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgIyBQeXRob24gMi0zLjMKICAgICAgICAgICAgICAgICAgICBvcmlnaW5fcmVxX2hvc3QgPSByZXEuZ2V0X29yaWdpbl9yZXFfaG9zdCgpCiAgICAgICAgICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgIyBQeXRob24gMy40KwogICAgICAgICAgICAgICAgICAgIG9yaWdpbl9yZXFfaG9zdCA9IHJlcS5vcmlnaW5fcmVxX2hvc3QKICAgICAgICAgICAgICAgIHJldHVybiB1cmxsaWJfcmVxdWVzdC5SZXF1ZXN0KG5ld3VybCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9bmV3aGVhZGVycywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbl9yZXFfaG9zdD1vcmlnaW5fcmVxX2hvc3QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnZlcmlmaWFibGU9VHJ1ZSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJhaXNlIHVybGxpYl9lcnJvci5IVFRQRXJyb3IocmVxLmdldF9mdWxsX3VybCgpLCBjb2RlLCBtc2csIGhkcnMsIGZwKQoKICAgIHJldHVybiBSZWRpcmVjdEhhbmRsZXIKCgpkZWYgYnVpbGRfc3NsX3ZhbGlkYXRpb25fZXJyb3IoaG9zdG5hbWUsIHBvcnQsIHBhdGhzLCBleGM9Tm9uZSk6CiAgICAnJydJbnRlbGlnZW50bHkgYnVpbGQgb3V0IHRoZSBTU0xWYWxpZGF0aW9uRXJyb3IgYmFzZWQgb24gd2hhdCBzdXBwb3J0CiAgICB5b3UgaGF2ZSBpbnN0YWxsZWQKICAgICcnJwoKICAgIG1zZyA9IFsKICAgICAgICAoJ0ZhaWxlZCB0byB2YWxpZGF0ZSB0aGUgU1NMIGNlcnRpZmljYXRlIGZvciAlczolcy4nCiAgICAgICAgICcgTWFrZSBzdXJlIHlvdXIgbWFuYWdlZCBzeXN0ZW1zIGhhdmUgYSB2YWxpZCBDQScKICAgICAgICAgJyBjZXJ0aWZpY2F0ZSBpbnN0YWxsZWQuJykKICAgIF0KICAgIGlmIG5vdCBIQVNfU1NMQ09OVEVYVDoKICAgICAgICBtc2cuYXBwZW5kKCdJZiB0aGUgd2Vic2l0ZSBzZXJ2aW5nIHRoZSB1cmwgdXNlcyBTTkkgeW91IG5lZWQnCiAgICAgICAgICAgICAgICAgICAnIHB5dGhvbiA+PSAyLjcuOSBvbiB5b3VyIG1hbmFnZWQgbWFjaGluZScpCiAgICAgICAgaWYgbm90IEhBU19VUkxMSUIzX1BZT1BFTlNTTENPTlRFWFQgb3Igbm90IEhBU19VUkxMSUIzX1NTTF9XUkFQX1NPQ0tFVDoKICAgICAgICAgICAgbXNnLmFwcGVuZCgnb3IgeW91IGNhbiBpbnN0YWxsIHRoZSBgdXJsbGliM2AsIGBweU9wZW5TU0xgLCcKICAgICAgICAgICAgICAgICAgICAgICAnIGBuZGctaHR0cHNjbGllbnRgLCBhbmQgYHB5YXNuMWAgcHl0aG9uIG1vZHVsZXMnKQoKICAgICAgICBtc2cuYXBwZW5kKCd0byBwZXJmb3JtIFNOSSB2ZXJpZmljYXRpb24gaW4gcHl0aG9uID49IDIuNi4nKQoKICAgIG1zZy5hcHBlbmQoJ1lvdSBjYW4gdXNlIHZhbGlkYXRlX2NlcnRzPUZhbHNlIGlmIHlvdSBkbycKICAgICAgICAgICAgICAgJyBub3QgbmVlZCB0byBjb25maXJtIHRoZSBzZXJ2ZXJzIGlkZW50aXR5IGJ1dCB0aGlzIGlzJwogICAgICAgICAgICAgICAnIHVuc2FmZSBhbmQgbm90IHJlY29tbWVuZGVkLicKICAgICAgICAgICAgICAgJyBQYXRocyBjaGVja2VkIGZvciB0aGlzIHBsYXRmb3JtOiAlcy4nKQoKICAgIGlmIGV4YzoKICAgICAgICBtc2cuYXBwZW5kKCdUaGUgZXhjZXB0aW9uIG1zZyB3YXM6ICVzLicgJSB0b19uYXRpdmUoZXhjKSkKCiAgICByYWlzZSBTU0xWYWxpZGF0aW9uRXJyb3IoJyAnLmpvaW4obXNnKSAlIChob3N0bmFtZSwgcG9ydCwgIiwgIi5qb2luKHBhdGhzKSkpCgoKY2xhc3MgU1NMVmFsaWRhdGlvbkhhbmRsZXIodXJsbGliX3JlcXVlc3QuQmFzZUhhbmRsZXIpOgogICAgJycnCiAgICBBIGN1c3RvbSBoYW5kbGVyIGNsYXNzIGZvciBTU0wgdmFsaWRhdGlvbi4KCiAgICBCYXNlZCBvbjoKICAgIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA4NzIyNy92YWxpZGF0ZS1zc2wtY2VydGlmaWNhdGVzLXdpdGgtcHl0aG9uCiAgICBodHRwOi8vdGVjaGtuYWNrLm5ldC9weXRob24tdXJsbGliMi1oYW5kbGVycy8KICAgICcnJwogICAgQ09OTkVDVF9DT01NQU5EID0gIkNPTk5FQ1QgJXM6JXMgSFRUUC8xLjBcclxuQ29ubmVjdGlvbjogY2xvc2VcclxuIgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBob3N0bmFtZSwgcG9ydCk6CiAgICAgICAgc2VsZi5ob3N0bmFtZSA9IGhvc3RuYW1lCiAgICAgICAgc2VsZi5wb3J0ID0gcG9ydAoKICAgIGRlZiBnZXRfY2FfY2VydHMoc2VsZik6CiAgICAgICAgIyB0cmllcyB0byBmaW5kIGEgdmFsaWQgQ0EgY2VydCBpbiBvbmUgb2YgdGhlCiAgICAgICAgIyBzdGFuZGFyZCBsb2NhdGlvbnMgZm9yIHRoZSBjdXJyZW50IGRpc3RyaWJ1dGlvbgoKICAgICAgICBjYV9jZXJ0cyA9IFtdCiAgICAgICAgcGF0aHNfY2hlY2tlZCA9IFtdCgogICAgICAgIHN5c3RlbSA9IHRvX3RleHQocGxhdGZvcm0uc3lzdGVtKCksIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgIyBidWlsZCBhIGxpc3Qgb2YgcGF0aHMgdG8gY2hlY2sgZm9yIC5jcnQvLnBlbSBmaWxlcwogICAgICAgICMgYmFzZWQgb24gdGhlIHBsYXRmb3JtIHR5cGUKICAgICAgICBwYXRoc19jaGVja2VkLmFwcGVuZCgnL2V0Yy9zc2wvY2VydHMnKQogICAgICAgIGlmIHN5c3RlbSA9PSB1J0xpbnV4JzoKICAgICAgICAgICAgcGF0aHNfY2hlY2tlZC5hcHBlbmQoJy9ldGMvcGtpL2NhLXRydXN0L2V4dHJhY3RlZC9wZW0nKQogICAgICAgICAgICBwYXRoc19jaGVja2VkLmFwcGVuZCgnL2V0Yy9wa2kvdGxzL2NlcnRzJykKICAgICAgICAgICAgcGF0aHNfY2hlY2tlZC5hcHBlbmQoJy91c3Ivc2hhcmUvY2EtY2VydGlmaWNhdGVzL2NhY2VydC5vcmcnKQogICAgICAgIGVsaWYgc3lzdGVtID09IHUnRnJlZUJTRCc6CiAgICAgICAgICAgIHBhdGhzX2NoZWNrZWQuYXBwZW5kKCcvdXNyL2xvY2FsL3NoYXJlL2NlcnRzJykKICAgICAgICBlbGlmIHN5c3RlbSA9PSB1J09wZW5CU0QnOgogICAgICAgICAgICBwYXRoc19jaGVja2VkLmFwcGVuZCgnL2V0Yy9zc2wnKQogICAgICAgIGVsaWYgc3lzdGVtID09IHUnTmV0QlNEJzoKICAgICAgICAgICAgY2FfY2VydHMuYXBwZW5kKCcvZXRjL29wZW5zc2wvY2VydHMnKQogICAgICAgIGVsaWYgc3lzdGVtID09IHUnU3VuT1MnOgogICAgICAgICAgICBwYXRoc19jaGVja2VkLmFwcGVuZCgnL29wdC9sb2NhbC9ldGMvb3BlbnNzbC9jZXJ0cycpCgogICAgICAgICMgZmFsbCBiYWNrIHRvIGEgdXNlci1kZXBsb3llZCBjZXJ0IGluIGEgc3RhbmRhcmQKICAgICAgICAjIGxvY2F0aW9uIGlmIHRoZSBPUyBwbGF0Zm9ybSBvbmUgaXMgbm90IGF2YWlsYWJsZQogICAgICAgIHBhdGhzX2NoZWNrZWQuYXBwZW5kKCcvZXRjL2Fuc2libGUnKQoKICAgICAgICB0bXBfZmQsIHRtcF9wYXRoID0gdGVtcGZpbGUubWtzdGVtcCgpCiAgICAgICAgdG9fYWRkX2ZkLCB0b19hZGRfcGF0aCA9IHRlbXBmaWxlLm1rc3RlbXAoKQogICAgICAgIHRvX2FkZCA9IEZhbHNlCgogICAgICAgICMgV3JpdGUgdGhlIGR1bW15IGNhIGNlcnQgaWYgd2UgYXJlIHJ1bm5pbmcgb24gTWFjIE9TIFgKICAgICAgICBpZiBzeXN0ZW0gPT0gdSdEYXJ3aW4nOgogICAgICAgICAgICBvcy53cml0ZSh0bXBfZmQsIGJfRFVNTVlfQ0FfQ0VSVCkKICAgICAgICAgICAgIyBEZWZhdWx0IEhvbWVicmV3IHBhdGggZm9yIE9wZW5TU0wgY2VydHMKICAgICAgICAgICAgcGF0aHNfY2hlY2tlZC5hcHBlbmQoJy91c3IvbG9jYWwvZXRjL29wZW5zc2wnKQoKICAgICAgICAjIGZvciBhbGwgb2YgdGhlIHBhdGhzLCBmaW5kIGFueSAgLmNydCBvciAucGVtIGZpbGVzCiAgICAgICAgIyBhbmQgY29tcGlsZSB0aGVtIGludG8gc2luZ2xlIHRlbXAgZmlsZSBmb3IgdXNlCiAgICAgICAgIyBpbiB0aGUgc3NsIGNoZWNrIHRvIHNwZWVkIHVwIHRoZSB0ZXN0CiAgICAgICAgZm9yIHBhdGggaW4gcGF0aHNfY2hlY2tlZDoKICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMocGF0aCkgYW5kIG9zLnBhdGguaXNkaXIocGF0aCk6CiAgICAgICAgICAgICAgICBkaXJfY29udGVudHMgPSBvcy5saXN0ZGlyKHBhdGgpCiAgICAgICAgICAgICAgICBmb3IgZiBpbiBkaXJfY29udGVudHM6CiAgICAgICAgICAgICAgICAgICAgZnVsbF9wYXRoID0gb3MucGF0aC5qb2luKHBhdGgsIGYpCiAgICAgICAgICAgICAgICAgICAgaWYgb3MucGF0aC5pc2ZpbGUoZnVsbF9wYXRoKSBhbmQgb3MucGF0aC5zcGxpdGV4dChmKVsxXSBpbiAoJy5jcnQnLCcucGVtJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlcnRfZmlsZSA9IG9wZW4oZnVsbF9wYXRoLCAncmInKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VydCA9IGNlcnRfZmlsZS5yZWFkKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlcnRfZmlsZS5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy53cml0ZSh0bXBfZmQsIGNlcnQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy53cml0ZSh0bXBfZmQsIGIoJ1xuJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBmdWxsX3BhdGggbm90IGluIExPQURFRF9WRVJJRllfTE9DQVRJT05TOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvX2FkZCA9IFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy53cml0ZSh0b19hZGRfZmQsIGNlcnQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Mud3JpdGUodG9fYWRkX2ZkLCBiKCdcbicpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExPQURFRF9WRVJJRllfTE9DQVRJT05TLmFkZChmdWxsX3BhdGgpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCAoT1NFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzCgogICAgICAgIGlmIG5vdCB0b19hZGQ6CiAgICAgICAgICAgIHRvX2FkZF9wYXRoID0gTm9uZQogICAgICAgIHJldHVybiAodG1wX3BhdGgsIHRvX2FkZF9wYXRoLCBwYXRoc19jaGVja2VkKQoKICAgIGRlZiB2YWxpZGF0ZV9wcm94eV9yZXNwb25zZShzZWxmLCByZXNwb25zZSwgdmFsaWRfY29kZXM9WzIwMF0pOgogICAgICAgICcnJwogICAgICAgIG1ha2Ugc3VyZSB3ZSBnZXQgYmFjayBhIHZhbGlkIGNvZGUgZnJvbSB0aGUgcHJveHkKICAgICAgICAnJycKICAgICAgICB0cnk6CiAgICAgICAgICAgIChodHRwX3ZlcnNpb24sIHJlc3BfY29kZSwgbXNnKSA9IHJlLm1hdGNoKHInKEhUVFAvXGRcLlxkKSAoXGRcZFxkKSAoLiopJywgcmVzcG9uc2UpLmdyb3VwcygpCiAgICAgICAgICAgIGlmIGludChyZXNwX2NvZGUpIG5vdCBpbiB2YWxpZF9jb2RlczoKICAgICAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbgogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcmFpc2UgUHJveHlFcnJvcignQ29ubmVjdGlvbiB0byBwcm94eSBmYWlsZWQnKQoKICAgIGRlZiBkZXRlY3Rfbm9fcHJveHkoc2VsZiwgdXJsKToKICAgICAgICAnJycKICAgICAgICBEZXRlY3QgaWYgdGhlICdub19wcm94eScgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgc2V0IGFuZCBob25vciB0aG9zZSBsb2NhdGlvbnMuCiAgICAgICAgJycnCiAgICAgICAgZW52X25vX3Byb3h5ID0gb3MuZW52aXJvbi5nZXQoJ25vX3Byb3h5JykKICAgICAgICBpZiBlbnZfbm9fcHJveHk6CiAgICAgICAgICAgIGVudl9ub19wcm94eSA9IGVudl9ub19wcm94eS5zcGxpdCgnLCcpCiAgICAgICAgICAgIG5ldGxvYyA9IHVybHBhcnNlKHVybCkubmV0bG9jCgogICAgICAgICAgICBmb3IgaG9zdCBpbiBlbnZfbm9fcHJveHk6CiAgICAgICAgICAgICAgICBpZiBuZXRsb2MuZW5kc3dpdGgoaG9zdCkgb3IgbmV0bG9jLnNwbGl0KCc6JylbMF0uZW5kc3dpdGgoaG9zdCk6CiAgICAgICAgICAgICAgICAgICAgIyBPdXIgcmVxdWVzdGVkIFVSTCBtYXRjaGVzIHNvbWV0aGluZyBpbiBub19wcm94eSwgc28gZG9uJ3QKICAgICAgICAgICAgICAgICAgICAjIHVzZSB0aGUgcHJveHkgZm9yIHRoaXMKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBfbWFrZV9jb250ZXh0KHNlbGYsIHRvX2FkZF9jYV9jZXJ0X3BhdGgpOgogICAgICAgIGlmIEhBU19VUkxMSUIzX1BZT1BFTlNTTENPTlRFWFQ6CiAgICAgICAgICAgIGNvbnRleHQgPSBQeU9wZW5TU0xDb250ZXh0KFBST1RPQ09MKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGNvbnRleHQgPSBjcmVhdGVfZGVmYXVsdF9jb250ZXh0KCkKICAgICAgICBpZiB0b19hZGRfY2FfY2VydF9wYXRoOgogICAgICAgICAgICBjb250ZXh0LmxvYWRfdmVyaWZ5X2xvY2F0aW9ucyh0b19hZGRfY2FfY2VydF9wYXRoKQogICAgICAgIHJldHVybiBjb250ZXh0CgogICAgZGVmIGh0dHBfcmVxdWVzdChzZWxmLCByZXEpOgogICAgICAgIHRtcF9jYV9jZXJ0X3BhdGgsIHRvX2FkZF9jYV9jZXJ0X3BhdGgsIHBhdGhzX2NoZWNrZWQgPSBzZWxmLmdldF9jYV9jZXJ0cygpCiAgICAgICAgaHR0cHNfcHJveHkgPSBvcy5lbnZpcm9uLmdldCgnaHR0cHNfcHJveHknKQogICAgICAgIGNvbnRleHQgPSBOb25lCiAgICAgICAgaWYgSEFTX1NTTENPTlRFWFQgb3IgSEFTX1VSTExJQjNfUFlPUEVOU1NMQ09OVEVYVDoKICAgICAgICAgICAgY29udGV4dCA9IHNlbGYuX21ha2VfY29udGV4dCh0b19hZGRfY2FfY2VydF9wYXRoKQoKICAgICAgICAjIERldGVjdCBpZiAnbm9fcHJveHknIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIHNldCBhbmQgaWYgb3VyIFVSTCBpcyBpbmNsdWRlZAogICAgICAgIHVzZV9wcm94eSA9IHNlbGYuZGV0ZWN0X25vX3Byb3h5KHJlcS5nZXRfZnVsbF91cmwoKSkKCiAgICAgICAgaWYgbm90IHVzZV9wcm94eToKICAgICAgICAgICAgIyBpZ25vcmUgcHJveHkgc2V0dGluZ3MgZm9yIHRoaXMgaG9zdCByZXF1ZXN0CiAgICAgICAgICAgIHJldHVybiByZXEKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzID0gc29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCwgc29ja2V0LlNPQ0tfU1RSRUFNKQogICAgICAgICAgICBpZiBodHRwc19wcm94eToKICAgICAgICAgICAgICAgIHByb3h5X3BhcnRzID0gZ2VuZXJpY191cmxwYXJzZSh1cmxwYXJzZShodHRwc19wcm94eSkpCiAgICAgICAgICAgICAgICBwb3J0ID0gcHJveHlfcGFydHMuZ2V0KCdwb3J0Jykgb3IgNDQzCiAgICAgICAgICAgICAgICBzLmNvbm5lY3QoKHByb3h5X3BhcnRzLmdldCgnaG9zdG5hbWUnKSwgcG9ydCkpCiAgICAgICAgICAgICAgICBpZiBwcm94eV9wYXJ0cy5nZXQoJ3NjaGVtZScpID09ICdodHRwJzoKICAgICAgICAgICAgICAgICAgICBzLnNlbmRhbGwoc2VsZi5DT05ORUNUX0NPTU1BTkQgJSAoc2VsZi5ob3N0bmFtZSwgc2VsZi5wb3J0KSkKICAgICAgICAgICAgICAgICAgICBpZiBwcm94eV9wYXJ0cy5nZXQoJ3VzZXJuYW1lJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzID0gIiVzOiVzIiAlIChwcm94eV9wYXJ0cy5nZXQoJ3VzZXJuYW1lJywnJyksIHByb3h5X3BhcnRzLmdldCgncGFzc3dvcmQnLCcnKSkKICAgICAgICAgICAgICAgICAgICAgICAgcy5zZW5kYWxsKGIoJ1Byb3h5LUF1dGhvcml6YXRpb246IEJhc2ljICVzXHJcbicpICUgYmFzZTY0LmI2NGVuY29kZSh0b19ieXRlcyhjcmVkZW50aWFscywgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykpLnN0cmlwKCkpCiAgICAgICAgICAgICAgICAgICAgcy5zZW5kYWxsKGIoJ1xyXG4nKSkKICAgICAgICAgICAgICAgICAgICBjb25uZWN0X3Jlc3VsdCA9IGIoIiIpCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgY29ubmVjdF9yZXN1bHQuZmluZChiKCJcclxuXHJcbiIpKSA8PSAwOgogICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0X3Jlc3VsdCArPSBzLnJlY3YoNDA5NikKICAgICAgICAgICAgICAgICAgICAgICAgIyAxMjgga2lsb2J5dGVzIG9mIGhlYWRlcnMgc2hvdWxkIGJlIGVub3VnaCBmb3IgZXZlcnlvbmUuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbihjb25uZWN0X3Jlc3VsdCkgPiAxMzEwNzI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZSBQcm94eUVycm9yKCdQcm94eSBzZW50IHRvbyB2ZXJib3NlIGhlYWRlcnMuIE9ubHkgMTI4S2lCIGFsbG93ZWQuJykKICAgICAgICAgICAgICAgICAgICBzZWxmLnZhbGlkYXRlX3Byb3h5X3Jlc3BvbnNlKGNvbm5lY3RfcmVzdWx0KQogICAgICAgICAgICAgICAgICAgIGlmIGNvbnRleHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHNzbF9zID0gY29udGV4dC53cmFwX3NvY2tldChzLCBzZXJ2ZXJfaG9zdG5hbWU9c2VsZi5ob3N0bmFtZSkKICAgICAgICAgICAgICAgICAgICBlbGlmIEhBU19VUkxMSUIzX1NTTF9XUkFQX1NPQ0tFVDoKICAgICAgICAgICAgICAgICAgICAgICAgc3NsX3MgPSBzc2xfd3JhcF9zb2NrZXQocywgY2FfY2VydHM9dG1wX2NhX2NlcnRfcGF0aCwgY2VydF9yZXFzPXNzbC5DRVJUX1JFUVVJUkVELCBzc2xfdmVyc2lvbj1QUk9UT0NPTCwgc2VydmVyX2hvc3RuYW1lPXNlbGYuaG9zdG5hbWUpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgc3NsX3MgPSBzc2wud3JhcF9zb2NrZXQocywgY2FfY2VydHM9dG1wX2NhX2NlcnRfcGF0aCwgY2VydF9yZXFzPXNzbC5DRVJUX1JFUVVJUkVELCBzc2xfdmVyc2lvbj1QUk9UT0NPTCkKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hfaG9zdG5hbWUoc3NsX3MuZ2V0cGVlcmNlcnQoKSwgc2VsZi5ob3N0bmFtZSkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcmFpc2UgUHJveHlFcnJvcignVW5zdXBwb3J0ZWQgcHJveHkgc2NoZW1lOiAlcy4gQ3VycmVudGx5IGFuc2libGUgb25seSBzdXBwb3J0cyBIVFRQIHByb3hpZXMuJyAlIHByb3h5X3BhcnRzLmdldCgnc2NoZW1lJykpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzLmNvbm5lY3QoKHNlbGYuaG9zdG5hbWUsIHNlbGYucG9ydCkpCiAgICAgICAgICAgICAgICBpZiBjb250ZXh0OgogICAgICAgICAgICAgICAgICAgIHNzbF9zID0gY29udGV4dC53cmFwX3NvY2tldChzLCBzZXJ2ZXJfaG9zdG5hbWU9c2VsZi5ob3N0bmFtZSkKICAgICAgICAgICAgICAgIGVsaWYgSEFTX1VSTExJQjNfU1NMX1dSQVBfU09DS0VUOgogICAgICAgICAgICAgICAgICAgIHNzbF9zID0gc3NsX3dyYXBfc29ja2V0KHMsIGNhX2NlcnRzPXRtcF9jYV9jZXJ0X3BhdGgsIGNlcnRfcmVxcz1zc2wuQ0VSVF9SRVFVSVJFRCwgc3NsX3ZlcnNpb249UFJPVE9DT0wsIHNlcnZlcl9ob3N0bmFtZT1zZWxmLmhvc3RuYW1lKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBzc2xfcyA9IHNzbC53cmFwX3NvY2tldChzLCBjYV9jZXJ0cz10bXBfY2FfY2VydF9wYXRoLCBjZXJ0X3JlcXM9c3NsLkNFUlRfUkVRVUlSRUQsIHNzbF92ZXJzaW9uPVBST1RPQ09MKQogICAgICAgICAgICAgICAgICAgIG1hdGNoX2hvc3RuYW1lKHNzbF9zLmdldHBlZXJjZXJ0KCksIHNlbGYuaG9zdG5hbWUpCiAgICAgICAgICAgICMgY2xvc2UgdGhlIHNzbCBjb25uZWN0aW9uCiAgICAgICAgICAgICNzc2xfcy51bndyYXAoKQogICAgICAgICAgICBzLmNsb3NlKCkKICAgICAgICBleGNlcHQgKHNzbC5TU0xFcnJvciwgQ2VydGlmaWNhdGVFcnJvcik6CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgYnVpbGRfc3NsX3ZhbGlkYXRpb25fZXJyb3Ioc2VsZi5ob3N0bmFtZSwgc2VsZi5wb3J0LCBwYXRoc19jaGVja2VkLCBlKQogICAgICAgIGV4Y2VwdCBzb2NrZXQuZXJyb3I6CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgcmFpc2UgQ29ubmVjdGlvbkVycm9yKCdGYWlsZWQgdG8gY29ubmVjdCB0byAlcyBhdCBwb3J0ICVzOiAlcycgJSAoc2VsZi5ob3N0bmFtZSwgc2VsZi5wb3J0LCB0b19uYXRpdmUoZSkpKQoKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgY2xlYW51cCB0aGUgdGVtcCBmaWxlIGNyZWF0ZWQsIGRvbid0IHdvcnJ5CiAgICAgICAgICAgICMgaWYgaXQgZmFpbHMgZm9yIHNvbWUgcmVhc29uCiAgICAgICAgICAgIG9zLnJlbW92ZSh0bXBfY2FfY2VydF9wYXRoKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcGFzcwoKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgY2xlYW51cCB0aGUgdGVtcCBmaWxlIGNyZWF0ZWQsIGRvbid0IHdvcnJ5CiAgICAgICAgICAgICMgaWYgaXQgZmFpbHMgZm9yIHNvbWUgcmVhc29uCiAgICAgICAgICAgIGlmIHRvX2FkZF9jYV9jZXJ0X3BhdGg6CiAgICAgICAgICAgICAgICBvcy5yZW1vdmUodG9fYWRkX2NhX2NlcnRfcGF0aCkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHBhc3MKCiAgICAgICAgcmV0dXJuIHJlcQoKICAgIGh0dHBzX3JlcXVlc3QgPSBodHRwX3JlcXVlc3QKCgpkZWYgbWF5YmVfYWRkX3NzbF9oYW5kbGVyKHVybCwgdmFsaWRhdGVfY2VydHMpOgogICAgIyBGSVhNRTogY2hhbmdlIHRoZSBmb2xsb3dpbmcgdG8gdXNlIHRoZSBnZW5lcmljX3VybHBhcnNlIGZ1bmN0aW9uCiAgICAjICAgICAgICB0byByZW1vdmUgdGhlIGluZGV4ZWQgcmVmZXJlbmNlcyBmb3IgJ3BhcnNlZCcKICAgIHBhcnNlZCA9IHVybHBhcnNlKHVybCkKICAgIGlmIHBhcnNlZFswXSA9PSAnaHR0cHMnIGFuZCB2YWxpZGF0ZV9jZXJ0czoKICAgICAgICBpZiBub3QgSEFTX1NTTDoKICAgICAgICAgICAgcmFpc2UgTm9TU0xFcnJvcignU1NMIHZhbGlkYXRpb24gaXMgbm90IGF2YWlsYWJsZSBpbiB5b3VyIHZlcnNpb24gb2YgcHl0aG9uLiBZb3UgY2FuIHVzZSB2YWxpZGF0ZV9jZXJ0cz1GYWxzZSwnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBob3dldmVyIHRoaXMgaXMgdW5zYWZlIGFuZCBub3QgcmVjb21tZW5kZWQnKQoKICAgICAgICAjIGRvIHRoZSBjZXJ0IHZhbGlkYXRpb24KICAgICAgICBuZXRsb2MgPSBwYXJzZWRbMV0KICAgICAgICBpZiAnQCcgaW4gbmV0bG9jOgogICAgICAgICAgICBuZXRsb2MgPSBuZXRsb2Muc3BsaXQoJ0AnLCAxKVsxXQogICAgICAgIGlmICc6JyBpbiBuZXRsb2M6CiAgICAgICAgICAgIGhvc3RuYW1lLCBwb3J0ID0gbmV0bG9jLnNwbGl0KCc6JywgMSkKICAgICAgICAgICAgcG9ydCA9IGludChwb3J0KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGhvc3RuYW1lID0gbmV0bG9jCiAgICAgICAgICAgIHBvcnQgPSA0NDMKICAgICAgICAjIGNyZWF0ZSB0aGUgU1NMIHZhbGlkYXRpb24gaGFuZGxlciBhbmQKICAgICAgICAjIGFkZCBpdCB0byB0aGUgbGlzdCBvZiBoYW5kbGVycwogICAgICAgIHJldHVybiBTU0xWYWxpZGF0aW9uSGFuZGxlcihob3N0bmFtZSwgcG9ydCkKCgpkZWYgb3Blbl91cmwodXJsLCBkYXRhPU5vbmUsIGhlYWRlcnM9Tm9uZSwgbWV0aG9kPU5vbmUsIHVzZV9wcm94eT1UcnVlLAogICAgICAgICAgICAgZm9yY2U9RmFsc2UsIGxhc3RfbW9kX3RpbWU9Tm9uZSwgdGltZW91dD0xMCwgdmFsaWRhdGVfY2VydHM9VHJ1ZSwKICAgICAgICAgICAgIHVybF91c2VybmFtZT1Ob25lLCB1cmxfcGFzc3dvcmQ9Tm9uZSwgaHR0cF9hZ2VudD1Ob25lLAogICAgICAgICAgICAgZm9yY2VfYmFzaWNfYXV0aD1GYWxzZSwgZm9sbG93X3JlZGlyZWN0cz0ndXJsbGliMicsCiAgICAgICAgICAgICBjbGllbnRfY2VydD1Ob25lLCBjbGllbnRfa2V5PU5vbmUpOgogICAgJycnCiAgICBTZW5kcyBhIHJlcXVlc3QgdmlhIEhUVFAoUykgb3IgRlRQIHVzaW5nIHVybGxpYjIgKFB5dGhvbjIpIG9yIHVybGxpYiAoUHl0aG9uMykKCiAgICBEb2VzIG5vdCByZXF1aXJlIHRoZSBtb2R1bGUgZW52aXJvbm1lbnQKICAgICcnJwogICAgaGFuZGxlcnMgPSBbXQogICAgc3NsX2hhbmRsZXIgPSBtYXliZV9hZGRfc3NsX2hhbmRsZXIodXJsLCB2YWxpZGF0ZV9jZXJ0cykKICAgIGlmIHNzbF9oYW5kbGVyOgogICAgICAgIGhhbmRsZXJzLmFwcGVuZChzc2xfaGFuZGxlcikKCiAgICAjIEZJWE1FOiBjaGFuZ2UgdGhlIGZvbGxvd2luZyB0byB1c2UgdGhlIGdlbmVyaWNfdXJscGFyc2UgZnVuY3Rpb24KICAgICMgICAgICAgIHRvIHJlbW92ZSB0aGUgaW5kZXhlZCByZWZlcmVuY2VzIGZvciAncGFyc2VkJwogICAgcGFyc2VkID0gdXJscGFyc2UodXJsKQogICAgaWYgcGFyc2VkWzBdICE9ICdmdHAnOgogICAgICAgIHVzZXJuYW1lID0gdXJsX3VzZXJuYW1lCgogICAgICAgIGlmIGhlYWRlcnMgaXMgTm9uZToKICAgICAgICAgICAgaGVhZGVycyA9IHt9CgogICAgICAgIGlmIHVzZXJuYW1lOgogICAgICAgICAgICBwYXNzd29yZCA9IHVybF9wYXNzd29yZAogICAgICAgICAgICBuZXRsb2MgPSBwYXJzZWRbMV0KICAgICAgICBlbGlmICdAJyBpbiBwYXJzZWRbMV06CiAgICAgICAgICAgIGNyZWRlbnRpYWxzLCBuZXRsb2MgPSBwYXJzZWRbMV0uc3BsaXQoJ0AnLCAxKQogICAgICAgICAgICBpZiAnOicgaW4gY3JlZGVudGlhbHM6CiAgICAgICAgICAgICAgICB1c2VybmFtZSwgcGFzc3dvcmQgPSBjcmVkZW50aWFscy5zcGxpdCgnOicsIDEpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGNyZWRlbnRpYWxzCiAgICAgICAgICAgICAgICBwYXNzd29yZCA9ICcnCgogICAgICAgICAgICBwYXJzZWQgPSBsaXN0KHBhcnNlZCkKICAgICAgICAgICAgcGFyc2VkWzFdID0gbmV0bG9jCgogICAgICAgICAgICAjIHJlY29uc3RydWN0IHVybCB3aXRob3V0IGNyZWRlbnRpYWxzCiAgICAgICAgICAgIHVybCA9IHVybHVucGFyc2UocGFyc2VkKQoKICAgICAgICBpZiB1c2VybmFtZSBhbmQgbm90IGZvcmNlX2Jhc2ljX2F1dGg6CiAgICAgICAgICAgIHBhc3NtYW4gPSB1cmxsaWJfcmVxdWVzdC5IVFRQUGFzc3dvcmRNZ3JXaXRoRGVmYXVsdFJlYWxtKCkKCiAgICAgICAgICAgICMgdGhpcyBjcmVhdGVzIGEgcGFzc3dvcmQgbWFuYWdlcgogICAgICAgICAgICBwYXNzbWFuLmFkZF9wYXNzd29yZChOb25lLCBuZXRsb2MsIHVzZXJuYW1lLCBwYXNzd29yZCkKCiAgICAgICAgICAgICMgYmVjYXVzZSB3ZSBoYXZlIHB1dCBOb25lIGF0IHRoZSBzdGFydCBpdCB3aWxsIGFsd2F5cwogICAgICAgICAgICAjIHVzZSB0aGlzIHVzZXJuYW1lL3Bhc3N3b3JkIGNvbWJpbmF0aW9uIGZvciAgdXJscwogICAgICAgICAgICAjIGZvciB3aGljaCBgdGhldXJsYCBpcyBhIHN1cGVyLXVybAogICAgICAgICAgICBhdXRoaGFuZGxlciA9IHVybGxpYl9yZXF1ZXN0LkhUVFBCYXNpY0F1dGhIYW5kbGVyKHBhc3NtYW4pCiAgICAgICAgICAgIGRpZ2VzdF9hdXRoaGFuZGxlciA9IHVybGxpYl9yZXF1ZXN0LkhUVFBEaWdlc3RBdXRoSGFuZGxlcihwYXNzbWFuKQoKICAgICAgICAgICAgIyBjcmVhdGUgdGhlIEF1dGhIYW5kbGVyCiAgICAgICAgICAgIGhhbmRsZXJzLmFwcGVuZChhdXRoaGFuZGxlcikKICAgICAgICAgICAgaGFuZGxlcnMuYXBwZW5kKGRpZ2VzdF9hdXRoaGFuZGxlcikKCiAgICAgICAgZWxpZiB1c2VybmFtZSBhbmQgZm9yY2VfYmFzaWNfYXV0aDoKICAgICAgICAgICAgaGVhZGVyc1siQXV0aG9yaXphdGlvbiJdID0gYmFzaWNfYXV0aF9oZWFkZXIodXNlcm5hbWUsIHBhc3N3b3JkKQoKICAgICAgICBlbHNlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByYyA9IG5ldHJjLm5ldHJjKG9zLmVudmlyb24uZ2V0KCdORVRSQycpKQogICAgICAgICAgICAgICAgbG9naW4gPSByYy5hdXRoZW50aWNhdG9ycyhwYXJzZWRbMV0pCiAgICAgICAgICAgIGV4Y2VwdCBJT0Vycm9yOgogICAgICAgICAgICAgICAgbG9naW4gPSBOb25lCgogICAgICAgICAgICBpZiBsb2dpbjoKICAgICAgICAgICAgICAgIHVzZXJuYW1lLCBfLCBwYXNzd29yZCA9IGxvZ2luCiAgICAgICAgICAgICAgICBpZiB1c2VybmFtZSBhbmQgcGFzc3dvcmQ6CiAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1siQXV0aG9yaXphdGlvbiJdID0gYmFzaWNfYXV0aF9oZWFkZXIodXNlcm5hbWUsIHBhc3N3b3JkKQoKICAgIGlmIG5vdCB1c2VfcHJveHk6CiAgICAgICAgcHJveHloYW5kbGVyID0gdXJsbGliX3JlcXVlc3QuUHJveHlIYW5kbGVyKHt9KQogICAgICAgIGhhbmRsZXJzLmFwcGVuZChwcm94eWhhbmRsZXIpCgogICAgaWYgSEFTX1NTTENPTlRFWFQgYW5kIG5vdCB2YWxpZGF0ZV9jZXJ0czoKICAgICAgICAjIEluIDIuNy45LCB0aGUgZGVmYXVsdCBjb250ZXh0IHZhbGlkYXRlcyBjZXJ0aWZpY2F0ZXMKICAgICAgICBjb250ZXh0ID0gU1NMQ29udGV4dChzc2wuUFJPVE9DT0xfU1NMdjIzKQogICAgICAgIGNvbnRleHQub3B0aW9ucyB8PSBzc2wuT1BfTk9fU1NMdjIKICAgICAgICBjb250ZXh0Lm9wdGlvbnMgfD0gc3NsLk9QX05PX1NTTHYzCiAgICAgICAgY29udGV4dC52ZXJpZnlfbW9kZSA9IHNzbC5DRVJUX05PTkUKICAgICAgICBjb250ZXh0LmNoZWNrX2hvc3RuYW1lID0gRmFsc2UKICAgICAgICBoYW5kbGVycy5hcHBlbmQoSFRUUFNDbGllbnRBdXRoSGFuZGxlcihjbGllbnRfY2VydD1jbGllbnRfY2VydCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRfa2V5PWNsaWVudF9rZXksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dD1jb250ZXh0KSkKICAgIGVsaWYgY2xpZW50X2NlcnQ6CiAgICAgICAgaGFuZGxlcnMuYXBwZW5kKEhUVFBTQ2xpZW50QXV0aEhhbmRsZXIoY2xpZW50X2NlcnQ9Y2xpZW50X2NlcnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50X2tleT1jbGllbnRfa2V5KSkKCiAgICAjIHByZS0yLjYgdmVyc2lvbnMgb2YgcHl0aG9uIGNhbm5vdCB1c2UgdGhlIGN1c3RvbSBodHRwcwogICAgIyBoYW5kbGVyLCBzaW5jZSB0aGUgc29ja2V0IGNsYXNzIGlzIGxhY2tpbmcgY3JlYXRlX2Nvbm5lY3Rpb24uCiAgICAjIFNvbWUgcHl0aG9uIGJ1aWxkcyBsYWNrIEhUVFBTIHN1cHBvcnQuCiAgICBpZiBoYXNhdHRyKHNvY2tldCwgJ2NyZWF0ZV9jb25uZWN0aW9uJykgYW5kIEN1c3RvbUhUVFBTSGFuZGxlcjoKICAgICAgICBoYW5kbGVycy5hcHBlbmQoQ3VzdG9tSFRUUFNIYW5kbGVyKQoKICAgIGhhbmRsZXJzLmFwcGVuZChSZWRpcmVjdEhhbmRsZXJGYWN0b3J5KGZvbGxvd19yZWRpcmVjdHMsIHZhbGlkYXRlX2NlcnRzKSkKCiAgICBvcGVuZXIgPSB1cmxsaWJfcmVxdWVzdC5idWlsZF9vcGVuZXIoKmhhbmRsZXJzKQogICAgdXJsbGliX3JlcXVlc3QuaW5zdGFsbF9vcGVuZXIob3BlbmVyKQoKICAgIGRhdGEgPSB0b19ieXRlcyhkYXRhLCBub25zdHJpbmc9J3Bhc3N0aHJ1JykKICAgIGlmIG1ldGhvZDoKICAgICAgICBpZiBtZXRob2QudXBwZXIoKSBub3QgaW4gKCdPUFRJT05TJywnR0VUJywnSEVBRCcsJ1BPU1QnLCdQVVQnLCdERUxFVEUnLCdUUkFDRScsJ0NPTk5FQ1QnLCdQQVRDSCcpOgogICAgICAgICAgICByYWlzZSBDb25uZWN0aW9uRXJyb3IoJ2ludmFsaWQgSFRUUCByZXF1ZXN0IG1ldGhvZDsgJXMnICUgbWV0aG9kLnVwcGVyKCkpCiAgICAgICAgcmVxdWVzdCA9IFJlcXVlc3RXaXRoTWV0aG9kKHVybCwgbWV0aG9kLnVwcGVyKCksIGRhdGEpCiAgICBlbHNlOgogICAgICAgIHJlcXVlc3QgPSB1cmxsaWJfcmVxdWVzdC5SZXF1ZXN0KHVybCwgZGF0YSkKCiAgICAjIGFkZCB0aGUgY3VzdG9tIGFnZW50IGhlYWRlciwgdG8gaGVscCBwcmV2ZW50IGlzc3VlcwogICAgIyB3aXRoIHNpdGVzIHRoYXQgYmxvY2sgdGhlIGRlZmF1bHQgdXJsbGliIGFnZW50IHN0cmluZwogICAgaWYgaHR0cF9hZ2VudDoKICAgICAgICByZXF1ZXN0LmFkZF9oZWFkZXIoJ1VzZXItYWdlbnQnLCBodHRwX2FnZW50KQoKICAgICMgQ2FjaGUgY29udHJvbAogICAgIyBFaXRoZXIgd2UgZGlyZWN0bHkgZm9yY2UgYSBjYWNoZSByZWZyZXNoCiAgICBpZiBmb3JjZToKICAgICAgICByZXF1ZXN0LmFkZF9oZWFkZXIoJ2NhY2hlLWNvbnRyb2wnLCAnbm8tY2FjaGUnKQogICAgIyBvciB3ZSBkbyBpdCBpZiB0aGUgb3JpZ2luYWwgaXMgbW9yZSByZWNlbnQgdGhhbiBvdXIgY29weQogICAgZWxpZiBsYXN0X21vZF90aW1lOgogICAgICAgIHRzdGFtcCA9IGxhc3RfbW9kX3RpbWUuc3RyZnRpbWUoJyVhLCAlZCAlYiAlWSAlSDolTTolUyArMDAwMCcpCiAgICAgICAgcmVxdWVzdC5hZGRfaGVhZGVyKCdJZi1Nb2RpZmllZC1TaW5jZScsIHRzdGFtcCkKCiAgICAjIHVzZXIgZGVmaW5lZCBoZWFkZXJzIG5vdywgd2hpY2ggbWF5IG92ZXJyaWRlIHRoaW5ncyB3ZSd2ZSBzZXQgYWJvdmUKICAgIGlmIGhlYWRlcnM6CiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoaGVhZGVycywgZGljdCk6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImhlYWRlcnMgcHJvdmlkZWQgdG8gZmV0Y2hfdXJsKCkgbXVzdCBiZSBhIGRpY3QiKQogICAgICAgIGZvciBoZWFkZXIgaW4gaGVhZGVyczoKICAgICAgICAgICAgcmVxdWVzdC5hZGRfaGVhZGVyKGhlYWRlciwgaGVhZGVyc1toZWFkZXJdKQoKICAgIHVybG9wZW5fYXJncyA9IFtyZXF1ZXN0LCBOb25lXQogICAgaWYgc3lzLnZlcnNpb25faW5mbyA+PSAoMiw2LDApOgogICAgICAgICMgdXJsb3BlbiBpbiBweXRob24gcHJpb3IgdG8gMi42LjAgZGlkIG5vdAogICAgICAgICMgaGF2ZSBhIHRpbWVvdXQgcGFyYW1ldGVyCiAgICAgICAgdXJsb3Blbl9hcmdzLmFwcGVuZCh0aW1lb3V0KQoKICAgIHIgPSB1cmxsaWJfcmVxdWVzdC51cmxvcGVuKCp1cmxvcGVuX2FyZ3MpCiAgICByZXR1cm4gcgoKIwojIE1vZHVsZS1yZWxhdGVkIGZ1bmN0aW9ucwojCgoKZGVmIGJhc2ljX2F1dGhfaGVhZGVyKHVzZXJuYW1lLCBwYXNzd29yZCk6CiAgICAiIiJUYWtlcyBhIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBhbmQgcmV0dXJucyBhIGJ5dGUgc3RyaW5nIHN1aXRhYmxlIGZvcgogICAgdXNpbmcgYXMgdmFsdWUgb2YgYW4gQXV0aG9yaXphdGlvbiBoZWFkZXIgdG8gZG8gYmFzaWMgYXV0aC4KICAgICIiIgogICAgcmV0dXJuIGIoIkJhc2ljICVzIikgJSBiYXNlNjQuYjY0ZW5jb2RlKHRvX2J5dGVzKCIlczolcyIgJSAodXNlcm5hbWUsIHBhc3N3b3JkKSwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykpCgoKZGVmIHVybF9hcmd1bWVudF9zcGVjKCk6CiAgICAnJycKICAgIENyZWF0ZXMgYW4gYXJndW1lbnQgc3BlYyB0aGF0IGNhbiBiZSB1c2VkIHdpdGggYW55IG1vZHVsZQogICAgdGhhdCB3aWxsIGJlIHJlcXVlc3RpbmcgY29udGVudCB2aWEgdXJsbGliL3VybGxpYjIKICAgICcnJwogICAgcmV0dXJuIGRpY3QoCiAgICAgICAgdXJsPWRpY3QoKSwKICAgICAgICBmb3JjZT1kaWN0KGRlZmF1bHQ9J25vJywgYWxpYXNlcz1bJ3RoaXJzdHknXSwgdHlwZT0nYm9vbCcpLAogICAgICAgIGh0dHBfYWdlbnQ9ZGljdChkZWZhdWx0PSdhbnNpYmxlLWh0dHBnZXQnKSwKICAgICAgICB1c2VfcHJveHk9ZGljdChkZWZhdWx0PSd5ZXMnLCB0eXBlPSdib29sJyksCiAgICAgICAgdmFsaWRhdGVfY2VydHM9ZGljdChkZWZhdWx0PSd5ZXMnLCB0eXBlPSdib29sJyksCiAgICAgICAgdXJsX3VzZXJuYW1lPWRpY3QocmVxdWlyZWQ9RmFsc2UpLAogICAgICAgIHVybF9wYXNzd29yZD1kaWN0KHJlcXVpcmVkPUZhbHNlLCBub19sb2c9VHJ1ZSksCiAgICAgICAgZm9yY2VfYmFzaWNfYXV0aD1kaWN0KHJlcXVpcmVkPUZhbHNlLCB0eXBlPSdib29sJywgZGVmYXVsdD0nbm8nKSwKICAgICAgICBjbGllbnRfY2VydD1kaWN0KHJlcXVpcmVkPUZhbHNlLCB0eXBlPSdwYXRoJywgZGVmYXVsdD1Ob25lKSwKICAgICAgICBjbGllbnRfa2V5PWRpY3QocmVxdWlyZWQ9RmFsc2UsIHR5cGU9J3BhdGgnLCBkZWZhdWx0PU5vbmUpLAogICAgKQoKCmRlZiBmZXRjaF91cmwobW9kdWxlLCB1cmwsIGRhdGE9Tm9uZSwgaGVhZGVycz1Ob25lLCBtZXRob2Q9Tm9uZSwKICAgICAgICAgICAgICB1c2VfcHJveHk9VHJ1ZSwgZm9yY2U9RmFsc2UsIGxhc3RfbW9kX3RpbWU9Tm9uZSwgdGltZW91dD0xMCk6CiAgICAiIiJTZW5kcyBhIHJlcXVlc3QgdmlhIEhUVFAoUykgb3IgRlRQIChuZWVkcyB0aGUgbW9kdWxlIGFzIHBhcmFtZXRlcikKCiAgICA6YXJnIG1vZHVsZTogVGhlIEFuc2libGVNb2R1bGUgKHVzZWQgdG8gZ2V0IHVzZXJuYW1lLCBwYXNzd29yZCBldGMuIChzLmIuKS4KICAgIDphcmcgdXJsOiAgICAgICAgICAgICBUaGUgdXJsIHRvIHVzZS4KCiAgICA6a3dhcmcgZGF0YTogICAgICAgICAgVGhlIGRhdGEgdG8gYmUgc2VudCAoaW4gY2FzZSBvZiBQT1NUL1BVVCkuCiAgICA6a3dhcmcgaGVhZGVyczogICAgICAgQSBkaWN0IHdpdGggdGhlIHJlcXVlc3QgaGVhZGVycy4KICAgIDprd2FyZyBtZXRob2Q6ICAgICAgICAiUE9TVCIsICJQVVQiLCBldGMuCiAgICA6a3dhcmcgYm9vbGVhbiB1c2VfcHJveHk6ICAgICBEZWZhdWx0OiBUcnVlCiAgICA6a3dhcmcgYm9vbGVhbiBmb3JjZTogSWYgVHJ1ZTogRG8gbm90IGdldCBhIGNhY2hlZCBjb3B5IChEZWZhdWx0OiBGYWxzZSkKICAgIDprd2FyZyBsYXN0X21vZF90aW1lOiBEZWZhdWx0OiBOb25lCiAgICA6a3dhcmcgaW50IHRpbWVvdXQ6ICAgRGVmYXVsdDogMTAKCiAgICA6cmV0dXJuczogQSB0dXBsZSBvZiAoKipyZXNwb25zZSoqLCAqKmluZm8qKikuIFVzZSBgYHJlc3BvbnNlLmJvZHkoKWBgIHRvIHJlYWQgdGhlIGRhdGEuCiAgICAgICAgVGhlICoqaW5mbyoqIGNvbnRhaW5zIHRoZSAnc3RhdHVzJyBhbmQgb3RoZXIgbWV0YSBkYXRhLiBXaGVuIGEgSHR0cEVycm9yIChzdGF0dXMgPiA0MDApCiAgICAgICAgb2NjdXJyZWQgdGhlbiBgYGluZm9bJ2JvZHknXWBgIGNvbnRhaW5zIHRoZSBlcnJvciByZXNwb25zZSBkYXRhOjoKCiAgICBFeGFtcGxlOjoKCiAgICAgICAgZGF0YT17Li4ufQogICAgICAgIHJlc3AsIGluZm8gPSBmZXRjaF91cmwobW9kdWxlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHA6Ly9leGFtcGxlLmNvbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhPW1vZHVsZS5qc29uaWZ5KGRhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXI9e0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q9IlBPU1QiKQogICAgICAgIHN0YXR1c19jb2RlID0gaW5mb1sic3RhdHVzIl0KICAgICAgICBib2R5ID0gcmVzcC5yZWFkKCkKICAgICAgICBpZiBzdGF0dXNfY29kZSA+PSA0MDAgOgogICAgICAgICAgICBib2R5ID0gaW5mb1snYm9keSddCiAgICAiIiIKCiAgICBpZiBub3QgSEFTX1VSTFBBUlNFOgogICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSd1cmxwYXJzZSBpcyBub3QgaW5zdGFsbGVkJykKCiAgICAjIEdldCB2YWxpZGF0ZV9jZXJ0cyBmcm9tIHRoZSBtb2R1bGUgcGFyYW1zCiAgICB2YWxpZGF0ZV9jZXJ0cyA9IG1vZHVsZS5wYXJhbXMuZ2V0KCd2YWxpZGF0ZV9jZXJ0cycsIFRydWUpCgogICAgdXNlcm5hbWUgPSBtb2R1bGUucGFyYW1zLmdldCgndXJsX3VzZXJuYW1lJywgJycpCiAgICBwYXNzd29yZCA9IG1vZHVsZS5wYXJhbXMuZ2V0KCd1cmxfcGFzc3dvcmQnLCAnJykKICAgIGh0dHBfYWdlbnQgPSBtb2R1bGUucGFyYW1zLmdldCgnaHR0cF9hZ2VudCcsIE5vbmUpCiAgICBmb3JjZV9iYXNpY19hdXRoID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2ZvcmNlX2Jhc2ljX2F1dGgnLCAnJykKCiAgICBmb2xsb3dfcmVkaXJlY3RzID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2ZvbGxvd19yZWRpcmVjdHMnLCAndXJsbGliMicpCgogICAgY2xpZW50X2NlcnQgPSBtb2R1bGUucGFyYW1zLmdldCgnY2xpZW50X2NlcnQnKQogICAgY2xpZW50X2tleSA9IG1vZHVsZS5wYXJhbXMuZ2V0KCdjbGllbnRfa2V5JykKCiAgICByID0gTm9uZQogICAgaW5mbyA9IGRpY3QodXJsPXVybCkKICAgIHRyeToKICAgICAgICByID0gb3Blbl91cmwodXJsLCBkYXRhPWRhdGEsIGhlYWRlcnM9aGVhZGVycywgbWV0aG9kPW1ldGhvZCwKICAgICAgICAgICAgICAgICAgICAgdXNlX3Byb3h5PXVzZV9wcm94eSwgZm9yY2U9Zm9yY2UsIGxhc3RfbW9kX3RpbWU9bGFzdF9tb2RfdGltZSwgdGltZW91dD10aW1lb3V0LAogICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZV9jZXJ0cz12YWxpZGF0ZV9jZXJ0cywgdXJsX3VzZXJuYW1lPXVzZXJuYW1lLAogICAgICAgICAgICAgICAgICAgICB1cmxfcGFzc3dvcmQ9cGFzc3dvcmQsIGh0dHBfYWdlbnQ9aHR0cF9hZ2VudCwgZm9yY2VfYmFzaWNfYXV0aD1mb3JjZV9iYXNpY19hdXRoLAogICAgICAgICAgICAgICAgICAgICBmb2xsb3dfcmVkaXJlY3RzPWZvbGxvd19yZWRpcmVjdHMsIGNsaWVudF9jZXJ0PWNsaWVudF9jZXJ0LAogICAgICAgICAgICAgICAgICAgICBjbGllbnRfa2V5PWNsaWVudF9rZXkpCiAgICAgICAgaW5mby51cGRhdGUoci5pbmZvKCkpCiAgICAgICAgaW5mby51cGRhdGUoZGljdChtc2c9Ik9LICglcyBieXRlcykiICUgci5oZWFkZXJzLmdldCgnQ29udGVudC1MZW5ndGgnLCAndW5rbm93bicpLCB1cmw9ci5nZXR1cmwoKSwgc3RhdHVzPXIuY29kZSkpCiAgICBleGNlcHQgTm9TU0xFcnJvcjoKICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgZGlzdHJpYnV0aW9uID0gZ2V0X2Rpc3RyaWJ1dGlvbigpCiAgICAgICAgaWYgZGlzdHJpYnV0aW9uIGlzIG5vdCBOb25lIGFuZCBkaXN0cmlidXRpb24ubG93ZXIoKSA9PSAncmVkaGF0JzoKICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9JyVzLiBZb3UgY2FuIGFsc28gaW5zdGFsbCBweXRob24tc3NsIGZyb20gRVBFTCcgJSBzdHIoZSkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9JyVzJyAlIHN0cihlKSkKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yLCBWYWx1ZUVycm9yKToKICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9c3RyKGUpKQogICAgZXhjZXB0IHVybGxpYl9lcnJvci5IVFRQRXJyb3I6CiAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgIHRyeToKICAgICAgICAgICAgYm9keSA9IGUucmVhZCgpCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICBib2R5ID0gJycKCiAgICAgICAgIyBUcnkgdG8gYWRkIGV4Y2VwdGlvbiBpbmZvIHRvIHRoZSBvdXRwdXQgYnV0IGRvbid0IGZhaWwgaWYgd2UgY2FuJ3QKICAgICAgICBleGNfaW5mbyA9IGUuaW5mbygpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpbmZvLnVwZGF0ZShkaWN0KCoqZS5pbmZvKCkpKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcGFzcwoKICAgICAgICBpbmZvLnVwZGF0ZSh7J21zZyc6IHN0cihlKSwgJ2JvZHknOiBib2R5LCAnc3RhdHVzJzogZS5jb2RlfSkKCiAgICBleGNlcHQgdXJsbGliX2Vycm9yLlVSTEVycm9yOgogICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICBjb2RlID0gaW50KGdldGF0dHIoZSwgJ2NvZGUnLCAtMSkpCiAgICAgICAgaW5mby51cGRhdGUoZGljdChtc2c9IlJlcXVlc3QgZmFpbGVkOiAlcyIgJSBzdHIoZSksIHN0YXR1cz1jb2RlKSkKICAgIGV4Y2VwdCBzb2NrZXQuZXJyb3I6CiAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgIGluZm8udXBkYXRlKGRpY3QobXNnPSJDb25uZWN0aW9uIGZhaWx1cmU6ICVzIiAlIHN0cihlKSwgc3RhdHVzPS0xKSkKICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgIGluZm8udXBkYXRlKGRpY3QobXNnPSJBbiB1bmtub3duIGVycm9yIG9jY3VycmVkOiAlcyIgJSBzdHIoZSksIHN0YXR1cz0tMSkpCgogICAgcmV0dXJuIHIsIGluZm8KUEsDBBQAAAAAAOK7K0sYF3L1AREAAAERAAAkAAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvc2l4L19faW5pdF9fLnB5IyBUaGlzIGNvZGUgaXMgcGFydCBvZiBBbnNpYmxlLCBidXQgaXMgYW4gaW5kZXBlbmRlbnQgY29tcG9uZW50LgojIFRoaXMgcGFydGljdWxhciBmaWxlIHNuaXBwZXQsIGFuZCB0aGlzIGZpbGUgc25pcHBldCBvbmx5LCBpcyBCU0QgbGljZW5zZWQuCiMgTW9kdWxlcyB5b3Ugd3JpdGUgdXNpbmcgdGhpcyBzbmlwcGV0LCB3aGljaCBpcyBlbWJlZGRlZCBkeW5hbWljYWxseSBieSBBbnNpYmxlCiMgc3RpbGwgYmVsb25nIHRvIHRoZSBhdXRob3Igb2YgdGhlIG1vZHVsZSwgYW5kIG1heSBhc3NpZ24gdGhlaXIgb3duIGxpY2Vuc2UKIyB0byB0aGUgY29tcGxldGUgd29yay4KIwojIENvcHlyaWdodCAoYykgMjAxNywgVG9zaGlvIEt1cmF0b21pIDx0a3VyYXRvbWlAYW5zaWJsZS5jb20+CiMKIyBUaGlzIGNvZGUgaXMgYmFzZWQgb24gY29kZSBmcm9tIEFzdHJvcHkgYW5kIHJldGFpbnMgdGhlaXIgMy1jbGF1c2UgQlNEIGxpY2Vuc2UKIyByZXByb2R1Y2VkIGJlbG93OgojCiMgQ29weXJpZ2h0IChjKSAyMDExLTIwMTYsIEFzdHJvcHkgRGV2ZWxvcGVycwojCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dAojIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OgojCiMgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMKIyAgIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLgojICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLAojICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbgojICAgYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uCiMgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBBc3Ryb3B5IFRlYW0gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heQojICAgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dAojICAgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLgojCiMgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyAiQVMgSVMiCiMgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRQojIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRQojIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUKIyBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTAojIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SCiMgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIKIyBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLAojIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFCiMgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS4KIwojIEFzdHJvcHkgTGljZW5zZTogaHR0cHM6Ly9naXRodWIuY29tL2FzdHJvcHkvYXN0cm9weS9ibG9iL2NmMzI2NWU0MmEwZGI4ZTAwYmI5MDY0NGRiMzdjODE1MGY1YWMwMGMvbGljZW5zZXMvTElDRU5TRS5yc3QKIyBBc3Ryb3B5IENvZGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hc3Ryb3B5L2FzdHJvcHkvYmxvYi9jZjMyNjVlNDJhMGRiOGUwMGJiOTA2NDRkYjM3YzgxNTBmNWFjMDBjL2FzdHJvcHkvZXh0ZXJuL3NpeC5weQoKIiIiCkhhbmRsZSBsb2FkaW5nIHNpeCBwYWNrYWdlIGZyb20gc3lzdGVtIG9yIGZyb20gdGhlIGJ1bmRsZWQgY29weQoiIiIKZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhYnNvbHV0ZV9pbXBvcnQKCmltcG9ydCBpbXAgYXMgX2ltcAppbXBvcnQgc3lzIGFzIF9zeXMKCnRyeToKICAgIGZyb20gZGlzdHV0aWxzLnZlcnNpb24gaW1wb3J0IExvb3NlVmVyc2lvbiBhcyBfTG9vc2VWZXJzaW9uCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICMgU29tZSBwbGF0Zm9ybXMgKmNvdWdoKlNvbGFyaXMqY291Z2gqIGRvbid0IHNoaXAgdGhlIHdob2xlIHN0ZGxpYgogICAgX0xvb3NlVmVyc2lvbiA9IE5vbmUKCnRyeToKICAgIGltcG9ydCBzaXggYXMgX3N5c3RlbV9zaXgKZXhjZXB0IEltcG9ydEVycm9yOgogICAgX3N5c3RlbV9zaXggPSBOb25lCgpmcm9tIC4gaW1wb3J0IF9zaXggYXMgX2J1bmRsZWRfc2l4CgoKZGVmIF9maW5kX21vZHVsZShuYW1lLCBwYXRoPU5vbmUpOgogICAgIiIiQWx0ZXJuYXRpdmUgdG8gYGltcC5maW5kX21vZHVsZWAgdGhhdCBjYW4gYWxzbyBzZWFyY2ggaW4gc3VicGFja2FnZXMiIiIKICAgIHBhcnRzID0gbmFtZS5zcGxpdCgnLicpCgogICAgZm9yIHBhcnQgaW4gcGFydHM6CiAgICAgICAgaWYgcGF0aCBpcyBub3QgTm9uZToKICAgICAgICAgICAgcGF0aCA9IFtwYXRoXQogICAgICAgIGZoLCBwYXRoLCBkZXNjciA9IF9pbXAuZmluZF9tb2R1bGUocGFydCwgcGF0aCkKICAgIHJldHVybiBmaCwgcGF0aCwgZGVzY3IKCgpkZWYgX2dldF9idW5kbGVkX3NpeF9zb3VyY2UoKToKICAgICMgU3BlY2lhbCBpbXBvcnQgbG9hZGVyICh6aXBpbXBvcnQgZm9yIGluc3RhbmNlKQogICAgZm91bmQgPSBGYWxzZQogICAgZm9yIHBhdGggaW4gX3N5cy5wYXRoOgogICAgICAgIGltcG9ydGVyID0gX3N5cy5wYXRoX2ltcG9ydGVyX2NhY2hlLmdldChwYXRoKQogICAgICAgIGlmIGltcG9ydGVyOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBmb3VuZCA9IGltcG9ydGVyLmZpbmRfbW9kdWxlKCdhbnNpYmxlL21vZHVsZV91dGlscy9zaXgvX3NpeCcpCiAgICAgICAgICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGlmIGZvdW5kOgogICAgICAgICAgICAgICAgYnJlYWsKICAgIGVsc2U6CiAgICAgICAgcmFpc2UgSW1wb3J0RXJyb3IoIkNvdWxkIG5vdCBmaW5kIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeC5fc2l4IikKCiAgICBtb2R1bGVfc291cmNlID0gaW1wb3J0ZXIuZ2V0X3NvdXJjZSgnYW5zaWJsZS9tb2R1bGVfdXRpbHMvc2l4L19zaXgnKQogICAgcmV0dXJuIG1vZHVsZV9zb3VyY2UKCgpkZWYgX2dldF9zaXhfc291cmNlKCk6CiAgICAiIiJJbXBvcnQgdGhlIG5ld2VzdCB2ZXJzaW9uIG9mIHRoZSBzaXggbGlicmFyeSB0aGF0J3MgYXZhaWxhYmxlIiIiCiAgICBtb2RfaW5mbyA9IE5vbmUKICAgIHRyeToKICAgICAgICBpZiBfc3lzdGVtX3NpeCBhbmQgX0xvb3NlVmVyc2lvbiBhbmQgXAogICAgICAgICAgICAgICAgX0xvb3NlVmVyc2lvbihfc3lzdGVtX3NpeC5fX3ZlcnNpb25fXykgPj0gX0xvb3NlVmVyc2lvbihfYnVuZGxlZF9zaXguX192ZXJzaW9uX18pOgogICAgICAgICAgICBtb2RfaW5mbyA9IF9maW5kX21vZHVsZSgnc2l4JykKICAgIGV4Y2VwdDoKICAgICAgICAjIEFueSBlcnJvcnMgZmluZGluZyB0aGUgc3lzdGVtIGxpYnJhcnksIHVzZSBvdXIgYnVuZGxlZCBsaWIgaW5zdGVhZAogICAgICAgIHBhc3MKCiAgICBpZiBub3QgbW9kX2luZm86CiAgICAgICAgdHJ5OgogICAgICAgICAgICBtb2RfaW5mbyA9IF9maW5kX21vZHVsZSgnYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4Ll9zaXgnKQogICAgICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICAgICAgIyB6aXBpbXBvcnQKICAgICAgICAgICAgbW9kdWxlX3NvdXJjZSA9IF9nZXRfYnVuZGxlZF9zaXhfc291cmNlKCkKICAgICAgICAgICAgcmV0dXJuIG1vZHVsZV9zb3VyY2UKCiAgICByZXR1cm4gbW9kX2luZm9bMF0ucmVhZCgpCgpzb3VyY2UgPSBfZ2V0X3NpeF9zb3VyY2UoKQpleGVjKHNvdXJjZSkKUEsDBBQAAAAAAOK7K0u12AQGJTAAACUwAAAdAAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvX3RleHQucHkjIFRoaXMgY29kZSBpcyBwYXJ0IG9mIEFuc2libGUsIGJ1dCBpcyBhbiBpbmRlcGVuZGVudCBjb21wb25lbnQuCiMgVGhpcyBwYXJ0aWN1bGFyIGZpbGUgc25pcHBldCwgYW5kIHRoaXMgZmlsZSBzbmlwcGV0IG9ubHksIGlzIEJTRCBsaWNlbnNlZC4KIyBNb2R1bGVzIHlvdSB3cml0ZSB1c2luZyB0aGlzIHNuaXBwZXQsIHdoaWNoIGlzIGVtYmVkZGVkIGR5bmFtaWNhbGx5IGJ5IEFuc2libGUKIyBzdGlsbCBiZWxvbmcgdG8gdGhlIGF1dGhvciBvZiB0aGUgbW9kdWxlLCBhbmQgbWF5IGFzc2lnbiB0aGVpciBvd24gbGljZW5zZQojIHRvIHRoZSBjb21wbGV0ZSB3b3JrLgojCiMgQ29weXJpZ2h0IChjKSwgVG9zaGlvIEt1cmF0b21pIDxhLmJhZGdlckBnbWFpbC5jb20+LCAyMDE2CiMKIyBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLAojIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDoKIwojICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQKIyAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwKIyAgICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24KIyAgICAgIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgojCiMgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyAiQVMgSVMiIEFORAojIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVECiMgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELgojIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULAojIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywKIyBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MKIyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUCiMgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFCiMgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCiMKCiIiIgouLiB3YXJuOjogVGhpcyBtb2R1bGVfdXRpbCBpcyBjdXJyZW50bHkgaW50ZXJuYWwgaW1wbGVtZW50YXRpb24uCiAgICBXZSB3YW50IHRvIGV2YWx1YXRlIHRoaXMgY29kZSBmb3Igc3RhYmlsaXR5IGFuZCBBUEkgc3VpdGFiaWxpdHkgYmVmb3JlCiAgICBtYWtpbmcgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcy4gIFRoZSBBUEkgbWF5IGNoYW5nZSBiZXR3ZWVuCiAgICByZWxlYXNlcy4gIERvIG5vdCB1c2UgdGhpcyB1bmxlc3MgeW91IGFyZSB3aWxsaW5nIHRvIHBvcnQgeW91ciBtb2R1bGUgY29kZS4KIiIiCmltcG9ydCBjb2RlY3MKCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4IGltcG9ydCBQWTMsIHRleHRfdHlwZSwgYmluYXJ5X3R5cGUKCgp0cnk6CiAgICBjb2RlY3MubG9va3VwX2Vycm9yKCdzdXJyb2dhdGVlc2NhcGUnKQogICAgSEFTX1NVUlJPR0FURUVTQ0FQRSA9IFRydWUKZXhjZXB0IExvb2t1cEVycm9yOgogICAgSEFTX1NVUlJPR0FURUVTQ0FQRSA9IEZhbHNlCgoKX0NPTVBPU0VEX0VSUk9SX0hBTkRMRVJTID0gZnJvemVuc2V0KChOb25lLCAnc3Vycm9nYXRlX29yX2VzY2FwZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3Vycm9nYXRlX29yX3N0cmljdCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3Vycm9nYXRlX3RoZW5fcmVwbGFjZScpKQoKCmRlZiB0b19ieXRlcyhvYmosIGVuY29kaW5nPSd1dGYtOCcsIGVycm9ycz1Ob25lLCBub25zdHJpbmc9J3NpbXBsZXJlcHInKToKICAgICIiIk1ha2Ugc3VyZSB0aGF0IGEgc3RyaW5nIGlzIGEgYnl0ZSBzdHJpbmcKCiAgICA6YXJnIG9iajogQW4gb2JqZWN0IHRvIG1ha2Ugc3VyZSBpcyBhIGJ5dGUgc3RyaW5nLiAgSW4gbW9zdCBjYXNlcyB0aGlzCiAgICAgICAgd2lsbCBiZSBlaXRoZXIgYSB0ZXh0IHN0cmluZyBvciBhIGJ5dGUgc3RyaW5nLiAgSG93ZXZlciwgd2l0aAogICAgICAgIGBgbm9uc3RyaW5nPSdzaW1wbGVyZXByJ2BgLCB0aGlzIGNhbiBiZSB1c2VkIGFzIGEgdHJhY2ViYWNrLWZyZWUKICAgICAgICB2ZXJzaW9uIG9mIGBgc3RyKG9iailgYC4KICAgIDprd2FyZyBlbmNvZGluZzogVGhlIGVuY29kaW5nIHRvIHVzZSB0byB0cmFuc2Zvcm0gZnJvbSBhIHRleHQgc3RyaW5nIHRvCiAgICAgICAgYSBieXRlIHN0cmluZy4gIERlZmF1bHRzIHRvIHVzaW5nICd1dGYtOCcuCiAgICA6a3dhcmcgZXJyb3JzOiBUaGUgZXJyb3IgaGFuZGxlciB0byB1c2UgaWYgdGhlIHRleHQgc3RyaW5nIGlzIG5vdAogICAgICAgIGVuY29kYWJsZSB1c2luZyB0aGUgc3BlY2lmaWVkIGVuY29kaW5nLiAgQW55IHZhbGlkIGBjb2RlY3MgZXJyb3IKICAgICAgICBoYW5kbGVyIDxodHRwczovL2RvY3MucHl0aG9uLm9yZy8yL2xpYnJhcnkvY29kZWNzLmh0bWwjY29kZWMtYmFzZS1jbGFzc2VzPmBfCiAgICAgICAgbWF5IGJlIHNwZWNpZmllZC4gVGhlcmUgYXJlIHRocmVlIGFkZGl0aW9uYWwgZXJyb3Igc3RyYXRlZ2llcwogICAgICAgIHNwZWNpZmljYWxseSBhaW1lZCBhdCBoZWxwaW5nIHBlb3BsZSB0byBwb3J0IGNvZGUuICBUaGUgZmlyc3QgdHdvIGFyZToKCiAgICAgICAgICAgIDpzdXJyb2dhdGVfb3Jfc3RyaWN0OiBXaWxsIHVzZSBgYHN1cnJvZ2F0ZWVzY2FwZWBgIGlmIGl0IGlzIGEgdmFsaWQKICAgICAgICAgICAgICAgIGhhbmRsZXIsIG90aGVyd2lzZSBpdCB3aWxsIHVzZSBgYHN0cmljdGBgCiAgICAgICAgICAgIDpzdXJyb2dhdGVfb3JfcmVwbGFjZTogV2lsbCB1c2UgYGBzdXJyb2dhdGVlc2NhcGVgYCBpZiBpdCBpcyBhIHZhbGlkCiAgICAgICAgICAgICAgICBoYW5kbGVyLCBvdGhlcndpc2UgaXQgd2lsbCB1c2UgYGByZXBsYWNlYGAuCgogICAgICAgIEJlY2F1c2UgYGBzdXJyb2dhdGVlc2NhcGVgYCB3YXMgYWRkZWQgaW4gUHl0aG9uMyB0aGlzIHVzdWFsbHkgbWVhbnMgdGhhdAogICAgICAgIFB5dGhvbjMgd2lsbCB1c2UgYGBzdXJyb2dhdGVlc2NhcGVgYCBhbmQgUHl0aG9uMiB3aWxsIHVzZSB0aGUgZmFsbGJhY2sKICAgICAgICBlcnJvciBoYW5kbGVyLiBOb3RlIHRoYXQgdGhlIGNvZGUgY2hlY2tzIGZvciBgYHN1cnJvZ2F0ZWVzY2FwZWBgIHdoZW4gdGhlCiAgICAgICAgbW9kdWxlIGlzIGltcG9ydGVkLiAgSWYgeW91IGhhdmUgYSBiYWNrcG9ydCBvZiBgYHN1cnJvZ2F0ZWVzY2FwZWBgIGZvcgogICAgICAgIFB5dGhvbjIsIGJlIHN1cmUgdG8gcmVnaXN0ZXIgdGhlIGVycm9yIGhhbmRsZXIgcHJpb3IgdG8gaW1wb3J0aW5nIHRoaXMKICAgICAgICBtb2R1bGUuCgogICAgICAgIFRoZSBsYXN0IGVycm9yIGhhbmRsZXIgaXM6CgogICAgICAgICAgICA6c3Vycm9nYXRlX3RoZW5fcmVwbGFjZTogV2lsbCB1c2UgYGBzdXJyb2dhdGVlc2NhcGVgYCBpZiBpdCBpcyBhIHZhbGlkCiAgICAgICAgICAgICAgICBoYW5kbGVyLiAgSWYgZW5jb2Rpbmcgd2l0aCBgYHN1cnJvZ2F0ZWVzY2FwZWBgIHdvdWxkIHRyYWNlYmFjaywKICAgICAgICAgICAgICAgIHN1cnJvZ2F0ZXMgYXJlIGZpcnN0IHJlcGxhY2VkIHdpdGggYSByZXBsYWNlbWVudCBjaGFyYWN0ZXJzCiAgICAgICAgICAgICAgICBhbmQgdGhlbiB0aGUgc3RyaW5nIGlzIGVuY29kZWQgdXNpbmcgYGByZXBsYWNlYGAgKHdoaWNoIHJlcGxhY2VzCiAgICAgICAgICAgICAgICB0aGUgcmVzdCBvZiB0aGUgbm9uZW5jb2RhYmxlIGJ5dGVzKS4gIElmIGBgc3Vycm9nYXRlZXNjYXBlYGAgaXMKICAgICAgICAgICAgICAgIG5vdCBwcmVzZW50IGl0IHdpbGwgc2ltcGx5IHVzZSBgYHJlcGxhY2VgYC4gIChBZGRlZCBpbiBBbnNpYmxlIDIuMykKICAgICAgICAgICAgICAgIFRoaXMgc3RyYXRlZ3kgaXMgZGVzaWduZWQgdG8gbmV2ZXIgdHJhY2ViYWNrIHdoZW4gaXQgYXR0ZW1wdHMKICAgICAgICAgICAgICAgIHRvIGVuY29kZSBhIHN0cmluZy4KCiAgICAgICAgVGhlIGRlZmF1bHQgdW50aWwgQW5zaWJsZS0yLjIgd2FzIGBgc3Vycm9nYXRlX29yX3JlcGxhY2VgYAogICAgICAgIEZyb20gQW5zaWJsZS0yLjMgb253YXJkcywgdGhlIGRlZmF1bHQgaXMgYGBzdXJyb2dhdGVfdGhlbl9yZXBsYWNlYGAuCgogICAgOmt3YXJnIG5vbnN0cmluZzogVGhlIHN0cmF0ZWd5IHRvIHVzZSBpZiBhIG5vbnN0cmluZyBpcyBzcGVjaWZpZWQgaW4KICAgICAgICBgYG9iamBgLiAgRGVmYXVsdCBpcyAnc2ltcGxlcmVwcicuICBWYWxpZCB2YWx1ZXMgYXJlOgoKICAgICAgICA6c2ltcGxlcmVwcjogVGhlIGRlZmF1bHQuICBUaGlzIHRha2VzIHRoZSBgYHN0cmBgIG9mIHRoZSBvYmplY3QgYW5kCiAgICAgICAgICAgIHRoZW4gcmV0dXJucyB0aGUgYnl0ZXMgdmVyc2lvbiBvZiB0aGF0IHN0cmluZy4KICAgICAgICA6ZW1wdHk6IFJldHVybiBhbiBlbXB0eSBieXRlIHN0cmluZwogICAgICAgIDpwYXNzdGhydTogUmV0dXJuIHRoZSBvYmplY3QgcGFzc2VkIGluCiAgICAgICAgOnN0cmljdDogUmFpc2UgYSA6ZXhjOmBUeXBlRXJyb3JgCgogICAgOnJldHVybnM6IFR5cGljYWxseSB0aGlzIHJldHVybnMgYSBieXRlIHN0cmluZy4gIElmIGEgbm9uc3RyaW5nIG9iamVjdCBpcwogICAgICAgIHBhc3NlZCBpbiB0aGlzIG1heSBiZSBhIGRpZmZlcmVudCB0eXBlIGRlcGVuZGluZyBvbiB0aGUgc3RyYXRlZ3kKICAgICAgICBzcGVjaWZpZWQgYnkgbm9uc3RyaW5nLiAgVGhpcyB3aWxsIG5ldmVyIHJldHVybiBhIHRleHQgc3RyaW5nLgoKICAgIC4uIG5vdGU6OiBJZiBwYXNzZWQgYSBieXRlIHN0cmluZywgdGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBjaGVjayB0aGF0IHRoZQogICAgICAgIHN0cmluZyBpcyB2YWxpZCBpbiB0aGUgc3BlY2lmaWVkIGVuY29kaW5nLiAgSWYgaXQncyBpbXBvcnRhbnQgdGhhdCB0aGUKICAgICAgICBieXRlIHN0cmluZyBpcyBpbiB0aGUgc3BlY2lmaWVkIGVuY29kaW5nIGRvOjoKCiAgICAgICAgICAgIGVuY29kZWRfc3RyaW5nID0gdG9fYnl0ZXModG9fdGV4dChpbnB1dF9zdHJpbmcsICdsYXRpbi0xJyksICd1dGYtOCcpCgogICAgLi4gdmVyc2lvbl9jaGFuZ2VkOjogMi4zCgogICAgICAgIEFkZGVkIHRoZSBgYHN1cnJvZ2F0ZV90aGVuX3JlcGxhY2VgYCBlcnJvciBoYW5kbGVyIGFuZCBtYWRlIGl0IHRoZSBkZWZhdWx0IGVycm9yIGhhbmRsZXIuCiAgICAiIiIKICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBiaW5hcnlfdHlwZSk6CiAgICAgICAgcmV0dXJuIG9iagoKICAgICMgV2UncmUgZ2l2ZW4gYSB0ZXh0IHN0cmluZwogICAgIyBJZiBpdCBoYXMgc3Vycm9nYXRlcywgd2Uga25vdyBiZWNhdXNlIGl0IHdpbGwgZGVjb2RlCiAgICBvcmlnaW5hbF9lcnJvcnMgPSBlcnJvcnMKICAgIGlmIGVycm9ycyBpbiBfQ09NUE9TRURfRVJST1JfSEFORExFUlM6CiAgICAgICAgaWYgSEFTX1NVUlJPR0FURUVTQ0FQRToKICAgICAgICAgICAgZXJyb3JzID0gJ3N1cnJvZ2F0ZWVzY2FwZScKICAgICAgICBlbGlmIGVycm9ycyA9PSAnc3Vycm9nYXRlX29yX3N0cmljdCc6CiAgICAgICAgICAgIGVycm9ycyA9ICdzdHJpY3QnCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZXJyb3JzID0gJ3JlcGxhY2UnCgogICAgaWYgaXNpbnN0YW5jZShvYmosIHRleHRfdHlwZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFRyeSB0aGlzIGZpcnN0IGFzIGl0J3MgdGhlIGZhc3Rlc3QKICAgICAgICAgICAgcmV0dXJuIG9iai5lbmNvZGUoZW5jb2RpbmcsIGVycm9ycykKICAgICAgICBleGNlcHQgVW5pY29kZUVuY29kZUVycm9yOgogICAgICAgICAgICBpZiBvcmlnaW5hbF9lcnJvcnMgaW4gKE5vbmUsICdzdXJyb2dhdGVfdGhlbl9yZXBsYWNlJyk6CiAgICAgICAgICAgICAgICAjIFNsb3cgYnV0IHdvcmtzCiAgICAgICAgICAgICAgICByZXR1cm5fc3RyaW5nID0gb2JqLmVuY29kZSgndXRmLTgnLCAnc3Vycm9nYXRlZXNjYXBlJykKICAgICAgICAgICAgICAgIHJldHVybl9zdHJpbmcgPSByZXR1cm5fc3RyaW5nLmRlY29kZSgndXRmLTgnLCAncmVwbGFjZScpCiAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXJuX3N0cmluZy5lbmNvZGUoZW5jb2RpbmcsICdyZXBsYWNlJykKICAgICAgICAgICAgcmFpc2UKCiAgICAjIE5vdGU6IFdlIGRvIHRoZXNlIGxhc3QgZXZlbiB0aG91Z2ggd2UgaGF2ZSB0byBjYWxsIHRvX2J5dGVzIGFnYWluIG9uIHRoZQogICAgIyB2YWx1ZSBiZWNhdXNlIHdlJ3JlIG9wdGltaXppbmcgdGhlIGNvbW1vbiBjYXNlCiAgICBpZiBub25zdHJpbmcgPT0gJ3NpbXBsZXJlcHInOgogICAgICAgIHRyeToKICAgICAgICAgICAgdmFsdWUgPSBzdHIob2JqKQogICAgICAgIGV4Y2VwdCBVbmljb2RlRXJyb3I6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHZhbHVlID0gcmVwcihvYmopCiAgICAgICAgICAgIGV4Y2VwdCBVbmljb2RlRXJyb3I6CiAgICAgICAgICAgICAgICAjIEdpdmluZyB1cAogICAgICAgICAgICAgICAgcmV0dXJuIHRvX2J5dGVzKCcnKQogICAgZWxpZiBub25zdHJpbmcgPT0gJ3Bhc3N0aHJ1JzoKICAgICAgICByZXR1cm4gb2JqCiAgICBlbGlmIG5vbnN0cmluZyA9PSAnZW1wdHknOgogICAgICAgICMgcHl0aG9uMi40IGRvZXNuJ3QgaGF2ZSBiJycKICAgICAgICByZXR1cm4gdG9fYnl0ZXMoJycpCiAgICBlbGlmIG5vbnN0cmluZyA9PSAnc3RyaWN0JzoKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ29iaiBtdXN0IGJlIGEgc3RyaW5nIHR5cGUnKQogICAgZWxzZToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ0ludmFsaWQgdmFsdWUgJXMgZm9yIHRvX2J5dGVzXCcgbm9uc3RyaW5nIHBhcmFtZXRlcicgJSBub25zdHJpbmcpCgogICAgcmV0dXJuIHRvX2J5dGVzKHZhbHVlLCBlbmNvZGluZywgZXJyb3JzKQoKCmRlZiB0b190ZXh0KG9iaiwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPU5vbmUsIG5vbnN0cmluZz0nc2ltcGxlcmVwcicpOgogICAgIiIiTWFrZSBzdXJlIHRoYXQgYSBzdHJpbmcgaXMgYSB0ZXh0IHN0cmluZwoKICAgIDphcmcgb2JqOiBBbiBvYmplY3QgdG8gbWFrZSBzdXJlIGlzIGEgdGV4dCBzdHJpbmcuICBJbiBtb3N0IGNhc2VzIHRoaXMKICAgICAgICB3aWxsIGJlIGVpdGhlciBhIHRleHQgc3RyaW5nIG9yIGEgYnl0ZSBzdHJpbmcuICBIb3dldmVyLCB3aXRoCiAgICAgICAgYGBub25zdHJpbmc9J3NpbXBsZXJlcHInYGAsIHRoaXMgY2FuIGJlIHVzZWQgYXMgYSB0cmFjZWJhY2stZnJlZQogICAgICAgIHZlcnNpb24gb2YgYGBzdHIob2JqKWBgLgogICAgOmt3YXJnIGVuY29kaW5nOiBUaGUgZW5jb2RpbmcgdG8gdXNlIHRvIHRyYW5zZm9ybSBmcm9tIGEgYnl0ZSBzdHJpbmcgdG8KICAgICAgICBhIHRleHQgc3RyaW5nLiAgRGVmYXVsdHMgdG8gdXNpbmcgJ3V0Zi04Jy4KICAgIDprd2FyZyBlcnJvcnM6IFRoZSBlcnJvciBoYW5kbGVyIHRvIHVzZSBpZiB0aGUgYnl0ZSBzdHJpbmcgaXMgbm90CiAgICAgICAgZGVjb2RhYmxlIHVzaW5nIHRoZSBzcGVjaWZpZWQgZW5jb2RpbmcuICBBbnkgdmFsaWQgYGNvZGVjcyBlcnJvcgogICAgICAgIGhhbmRsZXIgPGh0dHBzOi8vZG9jcy5weXRob24ub3JnLzIvbGlicmFyeS9jb2RlY3MuaHRtbCNjb2RlYy1iYXNlLWNsYXNzZXM+YF8KICAgICAgICBtYXkgYmUgc3BlY2lmaWVkLiAgIFdlIHN1cHBvcnQgdGhyZWUgYWRkaXRpb25hbCBlcnJvciBzdHJhdGVnaWVzCiAgICAgICAgc3BlY2lmaWNhbGx5IGFpbWVkIGF0IGhlbHBpbmcgcGVvcGxlIHRvIHBvcnQgY29kZToKCiAgICAgICAgICAgIDpzdXJyb2dhdGVfb3Jfc3RyaWN0OiBXaWxsIHVzZSBzdXJyb2dhdGVlc2NhcGUgaWYgaXQgaXMgYSB2YWxpZAogICAgICAgICAgICAgICAgaGFuZGxlciwgb3RoZXJ3aXNlIGl0IHdpbGwgdXNlIHN0cmljdAogICAgICAgICAgICA6c3Vycm9nYXRlX29yX3JlcGxhY2U6IFdpbGwgdXNlIHN1cnJvZ2F0ZWVzY2FwZSBpZiBpdCBpcyBhIHZhbGlkCiAgICAgICAgICAgICAgICBoYW5kbGVyLCBvdGhlcndpc2UgaXQgd2lsbCB1c2UgcmVwbGFjZS4KICAgICAgICAgICAgOnN1cnJvZ2F0ZV90aGVuX3JlcGxhY2U6IERvZXMgdGhlIHNhbWUgYXMgc3Vycm9nYXRlX29yX3JlcGxhY2UgYnV0CiAgICAgICAgICAgICAgICBgd2FzIGFkZGVkIGZvciBzeW1tZXRyeSB3aXRoIHRoZSBlcnJvciBoYW5kbGVycyBpbgogICAgICAgICAgICAgICAgOmZ1bmM6YGFuc2libGUubW9kdWxlX3V0aWxzLl90ZXh0LnRvX2J5dGVzYCAoQWRkZWQgaW4gQW5zaWJsZSAyLjMpCgogICAgICAgIEJlY2F1c2Ugc3Vycm9nYXRlZXNjYXBlIHdhcyBhZGRlZCBpbiBQeXRob24zIHRoaXMgdXN1YWxseSBtZWFucyB0aGF0CiAgICAgICAgUHl0aG9uMyB3aWxsIHVzZSBgc3Vycm9nYXRlZXNjYXBlYCBhbmQgUHl0aG9uMiB3aWxsIHVzZSB0aGUgZmFsbGJhY2sKICAgICAgICBlcnJvciBoYW5kbGVyLiBOb3RlIHRoYXQgdGhlIGNvZGUgY2hlY2tzIGZvciBzdXJyb2dhdGVlc2NhcGUgd2hlbiB0aGUKICAgICAgICBtb2R1bGUgaXMgaW1wb3J0ZWQuICBJZiB5b3UgaGF2ZSBhIGJhY2twb3J0IG9mIGBzdXJyb2dhdGVlc2NhcGVgIGZvcgogICAgICAgIHB5dGhvbjIsIGJlIHN1cmUgdG8gcmVnaXN0ZXIgdGhlIGVycm9yIGhhbmRsZXIgcHJpb3IgdG8gaW1wb3J0aW5nIHRoaXMKICAgICAgICBtb2R1bGUuCgogICAgICAgIFRoZSBkZWZhdWx0IHVudGlsIEFuc2libGUtMi4yIHdhcyBgc3Vycm9nYXRlX29yX3JlcGxhY2VgCiAgICAgICAgSW4gQW5zaWJsZS0yLjMgdGhpcyBkZWZhdWx0cyB0byBgc3Vycm9nYXRlX3RoZW5fcmVwbGFjZWAgZm9yIHN5bW1ldHJ5CiAgICAgICAgd2l0aCA6ZnVuYzpgYW5zaWJsZS5tb2R1bGVfdXRpbHMuX3RleHQudG9fYnl0ZXNgIC4KICAgIDprd2FyZyBub25zdHJpbmc6IFRoZSBzdHJhdGVneSB0byB1c2UgaWYgYSBub25zdHJpbmcgaXMgc3BlY2lmaWVkIGluCiAgICAgICAgYGBvYmpgYC4gIERlZmF1bHQgaXMgJ3NpbXBsZXJlcHInLiAgVmFsaWQgdmFsdWVzIGFyZToKCiAgICAgICAgOnNpbXBsZXJlcHI6IFRoZSBkZWZhdWx0LiAgVGhpcyB0YWtlcyB0aGUgYGBzdHJgYCBvZiB0aGUgb2JqZWN0IGFuZAogICAgICAgICAgICB0aGVuIHJldHVybnMgdGhlIHRleHQgdmVyc2lvbiBvZiB0aGF0IHN0cmluZy4KICAgICAgICA6ZW1wdHk6IFJldHVybiBhbiBlbXB0eSB0ZXh0IHN0cmluZwogICAgICAgIDpwYXNzdGhydTogUmV0dXJuIHRoZSBvYmplY3QgcGFzc2VkIGluCiAgICAgICAgOnN0cmljdDogUmFpc2UgYSA6ZXhjOmBUeXBlRXJyb3JgCgogICAgOnJldHVybnM6IFR5cGljYWxseSB0aGlzIHJldHVybnMgYSB0ZXh0IHN0cmluZy4gIElmIGEgbm9uc3RyaW5nIG9iamVjdCBpcwogICAgICAgIHBhc3NlZCBpbiB0aGlzIG1heSBiZSBhIGRpZmZlcmVudCB0eXBlIGRlcGVuZGluZyBvbiB0aGUgc3RyYXRlZ3kKICAgICAgICBzcGVjaWZpZWQgYnkgbm9uc3RyaW5nLiAgVGhpcyB3aWxsIG5ldmVyIHJldHVybiBhIGJ5dGUgc3RyaW5nLgogICAgICAgIEZyb20gQW5zaWJsZS0yLjMgb253YXJkcywgdGhlIGRlZmF1bHQgaXMgYHN1cnJvZ2F0ZV90aGVuX3JlcGxhY2VgLgoKICAgIC4uIHZlcnNpb25fY2hhbmdlZDo6IDIuMwoKICAgICAgICBBZGRlZCB0aGUgc3Vycm9nYXRlX3RoZW5fcmVwbGFjZSBlcnJvciBoYW5kbGVyIGFuZCBtYWRlIGl0IHRoZSBkZWZhdWx0IGVycm9yIGhhbmRsZXIuCiAgICAiIiIKICAgIGlmIGlzaW5zdGFuY2Uob2JqLCB0ZXh0X3R5cGUpOgogICAgICAgIHJldHVybiBvYmoKCiAgICBpZiBlcnJvcnMgaW4gX0NPTVBPU0VEX0VSUk9SX0hBTkRMRVJTOgogICAgICAgIGlmIEhBU19TVVJST0dBVEVFU0NBUEU6CiAgICAgICAgICAgIGVycm9ycyA9ICdzdXJyb2dhdGVlc2NhcGUnCiAgICAgICAgZWxpZiBlcnJvcnMgPT0gJ3N1cnJvZ2F0ZV9vcl9zdHJpY3QnOgogICAgICAgICAgICBlcnJvcnMgPSAnc3RyaWN0JwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGVycm9ycyA9ICdyZXBsYWNlJwoKICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBiaW5hcnlfdHlwZSk6CiAgICAgICAgIyBOb3RlOiBXZSBkb24ndCBuZWVkIHNwZWNpYWwgaGFuZGxpbmcgZm9yIHN1cnJvZ2F0ZV90aGVuX3JlcGxhY2UKICAgICAgICAjIGJlY2F1c2UgYWxsIGJ5dGVzIHdpbGwgZWl0aGVyIGJlIG1hZGUgaW50byBzdXJyb2dhdGVzIG9yIGFyZSB2YWxpZAogICAgICAgICMgdG8gZGVjb2RlLgogICAgICAgIHJldHVybiBvYmouZGVjb2RlKGVuY29kaW5nLCBlcnJvcnMpCgogICAgIyBOb3RlOiBXZSBkbyB0aGVzZSBsYXN0IGV2ZW4gdGhvdWdoIHdlIGhhdmUgdG8gY2FsbCB0b190ZXh0IGFnYWluIG9uIHRoZQogICAgIyB2YWx1ZSBiZWNhdXNlIHdlJ3JlIG9wdGltaXppbmcgdGhlIGNvbW1vbiBjYXNlCiAgICBpZiBub25zdHJpbmcgPT0gJ3NpbXBsZXJlcHInOgogICAgICAgIHRyeToKICAgICAgICAgICAgdmFsdWUgPSBzdHIob2JqKQogICAgICAgIGV4Y2VwdCBVbmljb2RlRXJyb3I6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHZhbHVlID0gcmVwcihvYmopCiAgICAgICAgICAgIGV4Y2VwdCBVbmljb2RlRXJyb3I6CiAgICAgICAgICAgICAgICAjIEdpdmluZyB1cAogICAgICAgICAgICAgICAgcmV0dXJuIHUnJwogICAgZWxpZiBub25zdHJpbmcgPT0gJ3Bhc3N0aHJ1JzoKICAgICAgICByZXR1cm4gb2JqCiAgICBlbGlmIG5vbnN0cmluZyA9PSAnZW1wdHknOgogICAgICAgIHJldHVybiB1JycKICAgIGVsaWYgbm9uc3RyaW5nID09ICdzdHJpY3QnOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignb2JqIG11c3QgYmUgYSBzdHJpbmcgdHlwZScpCiAgICBlbHNlOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignSW52YWxpZCB2YWx1ZSAlcyBmb3IgdG9fdGV4dFwncyBub25zdHJpbmcgcGFyYW1ldGVyJyAlIG5vbnN0cmluZykKCiAgICByZXR1cm4gdG9fdGV4dCh2YWx1ZSwgZW5jb2RpbmcsIGVycm9ycykKCgojOiA6cHk6ZnVuYzpgdG9fbmF0aXZlYAojOiAgICAgIFRyYW5zZm9ybSBhIHZhcmlhYmxlIGludG8gdGhlIG5hdGl2ZSBzdHIgdHlwZSBmb3IgdGhlIHB5dGhvbiB2ZXJzaW9uCiM6CiM6ICAgICAgT24gUHl0aG9uMiwgdGhpcyBpcyBhbiBhbGlhcyBmb3IKIzogICAgICA6ZnVuYzpgfmFuc2libGUubW9kdWxlX3V0aWxzLnRvX2J5dGVzYC4gIE9uIFB5dGhvbjMgaXQgaXMgYW4gYWxpYXMgZm9yCiM6ICAgICAgOmZ1bmM6YH5hbnNpYmxlLm1vZHVsZV91dGlscy50b190ZXh0YC4gIEl0IG1ha2VzIGl0IGVhc2llciB0bwojOiAgICAgIHRyYW5zZm9ybSBhIHZhcmlhYmxlIGludG8gdGhlIG5hdGl2ZSBzdHIgdHlwZSBmb3IgdGhlIHB5dGhvbiB2ZXJzaW9uCiM6ICAgICAgdGhlIGNvZGUgaXMgcnVubmluZyBvbi4gIFVzZSB0aGlzIHdoZW4gY29uc3RydWN0aW5nIHRoZSBtZXNzYWdlIHRvCiM6ICAgICAgc2VuZCB0byBleGNlcHRpb25zIG9yIHdoZW4gZGVhbGluZyB3aXRoIGFuIEFQSSB0aGF0IG5lZWRzIHRvIHRha2UKIzogICAgICBhIG5hdGl2ZSBzdHJpbmcuICBFeGFtcGxlOjoKIzoKIzogICAgICAgICAgdHJ5OgojOiAgICAgICAgICAgICAgMS8vMAojOiAgICAgICAgICBleGNlcHQgWmVyb0RpdmlzaW9uRXJyb3IgYXMgZToKIzogICAgICAgICAgICAgIHJhaXNlIE15RXhjZXB0aW9uKCdFbmNvdW50ZXJlZCBhbmQgZXJyb3I6ICVzJyAlIHRvX25hdGl2ZShlKSkKaWYgUFkzOgogICAgdG9fbmF0aXZlID0gdG9fdGV4dAplbHNlOgogICAgdG9fbmF0aXZlID0gdG9fYnl0ZXMKUEsDBBQAAAAAAOK7K0s44sfRkXUAAJF1AAAgAAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvc2l4L19zaXgucHkiIiJVdGlsaXRpZXMgZm9yIHdyaXRpbmcgY29kZSB0aGF0IHJ1bnMgb24gUHl0aG9uIDIgYW5kIDMiIiIKCiMgQ29weXJpZ2h0IChjKSAyMDEwLTIwMTUgQmVuamFtaW4gUGV0ZXJzb24KIwojIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKIyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbAojIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMKIyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCiMgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCiMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKIwojIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbAojIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCiMKIyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgojIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLAojIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQojIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKIyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLAojIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFCiMgU09GVFdBUkUuCgpmcm9tIF9fZnV0dXJlX18gaW1wb3J0IGFic29sdXRlX2ltcG9ydAoKaW1wb3J0IGZ1bmN0b29scwppbXBvcnQgaXRlcnRvb2xzCmltcG9ydCBvcGVyYXRvcgppbXBvcnQgc3lzCmltcG9ydCB0eXBlcwoKX19hdXRob3JfXyA9ICJCZW5qYW1pbiBQZXRlcnNvbiA8YmVuamFtaW5AcHl0aG9uLm9yZz4iCl9fdmVyc2lvbl9fID0gIjEuMTAuMCIKCgojIFVzZWZ1bCBmb3IgdmVyeSBjb2Fyc2UgdmVyc2lvbiBkaWZmZXJlbnRpYXRpb24uClBZMiA9IHN5cy52ZXJzaW9uX2luZm9bMF0gPT0gMgpQWTMgPSBzeXMudmVyc2lvbl9pbmZvWzBdID09IDMKUFkzNCA9IHN5cy52ZXJzaW9uX2luZm9bMDoyXSA+PSAoMywgNCkKCmlmIFBZMzoKICAgIHN0cmluZ190eXBlcyA9IHN0ciwKICAgIGludGVnZXJfdHlwZXMgPSBpbnQsCiAgICBjbGFzc190eXBlcyA9IHR5cGUsCiAgICB0ZXh0X3R5cGUgPSBzdHIKICAgIGJpbmFyeV90eXBlID0gYnl0ZXMKICAgIE1BWFNJWkUgPSBzeXMubWF4c2l6ZQplbHNlOgogICAgc3RyaW5nX3R5cGVzID0gYmFzZXN0cmluZywKICAgIGludGVnZXJfdHlwZXMgPSAoaW50LCBsb25nKQogICAgY2xhc3NfdHlwZXMgPSAodHlwZSwgdHlwZXMuQ2xhc3NUeXBlKQogICAgdGV4dF90eXBlID0gdW5pY29kZQogICAgYmluYXJ5X3R5cGUgPSBzdHIKCiAgICBpZiBzeXMucGxhdGZvcm0uc3RhcnRzd2l0aCgiamF2YSIpOgogICAgICAgICMgSnl0aG9uIGFsd2F5cyB1c2VzIDMyIGJpdHMuCiAgICAgICAgTUFYU0laRSA9IGludCgoMSA8PCAzMSkgLSAxKQogICAgZWxzZToKICAgICAgICAjIEl0J3MgcG9zc2libGUgdG8gaGF2ZSBzaXplb2YobG9uZykgIT0gc2l6ZW9mKFB5X3NzaXplX3QpLgogICAgICAgIGNsYXNzIFgob2JqZWN0KToKCiAgICAgICAgICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgICAgICAgICAgcmV0dXJuIDEgPDwgMzEKICAgICAgICB0cnk6CiAgICAgICAgICAgIGxlbihYKCkpCiAgICAgICAgZXhjZXB0IE92ZXJmbG93RXJyb3I6CiAgICAgICAgICAgICMgMzItYml0CiAgICAgICAgICAgIE1BWFNJWkUgPSBpbnQoKDEgPDwgMzEpIC0gMSkKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIDY0LWJpdAogICAgICAgICAgICBNQVhTSVpFID0gaW50KCgxIDw8IDYzKSAtIDEpCiAgICAgICAgZGVsIFgKCgpkZWYgX2FkZF9kb2MoZnVuYywgZG9jKToKICAgICIiIkFkZCBkb2N1bWVudGF0aW9uIHRvIGEgZnVuY3Rpb24uIiIiCiAgICBmdW5jLl9fZG9jX18gPSBkb2MKCgpkZWYgX2ltcG9ydF9tb2R1bGUobmFtZSk6CiAgICAiIiJJbXBvcnQgbW9kdWxlLCByZXR1cm5pbmcgdGhlIG1vZHVsZSBhZnRlciB0aGUgbGFzdCBkb3QuIiIiCiAgICBfX2ltcG9ydF9fKG5hbWUpCiAgICByZXR1cm4gc3lzLm1vZHVsZXNbbmFtZV0KCgpjbGFzcyBfTGF6eURlc2NyKG9iamVjdCk6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG5hbWUpOgogICAgICAgIHNlbGYubmFtZSA9IG5hbWUKCiAgICBkZWYgX19nZXRfXyhzZWxmLCBvYmosIHRwKToKICAgICAgICByZXN1bHQgPSBzZWxmLl9yZXNvbHZlKCkKICAgICAgICBzZXRhdHRyKG9iaiwgc2VsZi5uYW1lLCByZXN1bHQpICAjIEludm9rZXMgX19zZXRfXy4KICAgICAgICB0cnk6CiAgICAgICAgICAgICMgVGhpcyBpcyBhIGJpdCB1Z2x5LCBidXQgaXQgYXZvaWRzIHJ1bm5pbmcgdGhpcyBhZ2FpbiBieQogICAgICAgICAgICAjIHJlbW92aW5nIHRoaXMgZGVzY3JpcHRvci4KICAgICAgICAgICAgZGVsYXR0cihvYmouX19jbGFzc19fLCBzZWxmLm5hbWUpCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICBwYXNzCiAgICAgICAgcmV0dXJuIHJlc3VsdAoKCmNsYXNzIE1vdmVkTW9kdWxlKF9MYXp5RGVzY3IpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBuYW1lLCBvbGQsIG5ldz1Ob25lKToKICAgICAgICBzdXBlcihNb3ZlZE1vZHVsZSwgc2VsZikuX19pbml0X18obmFtZSkKICAgICAgICBpZiBQWTM6CiAgICAgICAgICAgIGlmIG5ldyBpcyBOb25lOgogICAgICAgICAgICAgICAgbmV3ID0gbmFtZQogICAgICAgICAgICBzZWxmLm1vZCA9IG5ldwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYubW9kID0gb2xkCgogICAgZGVmIF9yZXNvbHZlKHNlbGYpOgogICAgICAgIHJldHVybiBfaW1wb3J0X21vZHVsZShzZWxmLm1vZCkKCiAgICBkZWYgX19nZXRhdHRyX18oc2VsZiwgYXR0cik6CiAgICAgICAgX21vZHVsZSA9IHNlbGYuX3Jlc29sdmUoKQogICAgICAgIHZhbHVlID0gZ2V0YXR0cihfbW9kdWxlLCBhdHRyKQogICAgICAgIHNldGF0dHIoc2VsZiwgYXR0ciwgdmFsdWUpCiAgICAgICAgcmV0dXJuIHZhbHVlCgoKY2xhc3MgX0xhenlNb2R1bGUodHlwZXMuTW9kdWxlVHlwZSk6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG5hbWUpOgogICAgICAgIHN1cGVyKF9MYXp5TW9kdWxlLCBzZWxmKS5fX2luaXRfXyhuYW1lKQogICAgICAgIHNlbGYuX19kb2NfXyA9IHNlbGYuX19jbGFzc19fLl9fZG9jX18KCiAgICBkZWYgX19kaXJfXyhzZWxmKToKICAgICAgICBhdHRycyA9IFsiX19kb2NfXyIsICJfX25hbWVfXyJdCiAgICAgICAgYXR0cnMgKz0gW2F0dHIubmFtZSBmb3IgYXR0ciBpbiBzZWxmLl9tb3ZlZF9hdHRyaWJ1dGVzXQogICAgICAgIHJldHVybiBhdHRycwoKICAgICMgU3ViY2xhc3NlcyBzaG91bGQgb3ZlcnJpZGUgdGhpcwogICAgX21vdmVkX2F0dHJpYnV0ZXMgPSBbXQoKCmNsYXNzIE1vdmVkQXR0cmlidXRlKF9MYXp5RGVzY3IpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBuYW1lLCBvbGRfbW9kLCBuZXdfbW9kLCBvbGRfYXR0cj1Ob25lLCBuZXdfYXR0cj1Ob25lKToKICAgICAgICBzdXBlcihNb3ZlZEF0dHJpYnV0ZSwgc2VsZikuX19pbml0X18obmFtZSkKICAgICAgICBpZiBQWTM6CiAgICAgICAgICAgIGlmIG5ld19tb2QgaXMgTm9uZToKICAgICAgICAgICAgICAgIG5ld19tb2QgPSBuYW1lCiAgICAgICAgICAgIHNlbGYubW9kID0gbmV3X21vZAogICAgICAgICAgICBpZiBuZXdfYXR0ciBpcyBOb25lOgogICAgICAgICAgICAgICAgaWYgb2xkX2F0dHIgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICBuZXdfYXR0ciA9IG5hbWUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgbmV3X2F0dHIgPSBvbGRfYXR0cgogICAgICAgICAgICBzZWxmLmF0dHIgPSBuZXdfYXR0cgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYubW9kID0gb2xkX21vZAogICAgICAgICAgICBpZiBvbGRfYXR0ciBpcyBOb25lOgogICAgICAgICAgICAgICAgb2xkX2F0dHIgPSBuYW1lCiAgICAgICAgICAgIHNlbGYuYXR0ciA9IG9sZF9hdHRyCgogICAgZGVmIF9yZXNvbHZlKHNlbGYpOgogICAgICAgIG1vZHVsZSA9IF9pbXBvcnRfbW9kdWxlKHNlbGYubW9kKQogICAgICAgIHJldHVybiBnZXRhdHRyKG1vZHVsZSwgc2VsZi5hdHRyKQoKCmNsYXNzIF9TaXhNZXRhUGF0aEltcG9ydGVyKG9iamVjdCk6CgogICAgIiIiCiAgICBBIG1ldGEgcGF0aCBpbXBvcnRlciB0byBpbXBvcnQgc2l4Lm1vdmVzIGFuZCBpdHMgc3VibW9kdWxlcy4KCiAgICBUaGlzIGNsYXNzIGltcGxlbWVudHMgYSBQRVAzMDIgZmluZGVyIGFuZCBsb2FkZXIuIEl0IHNob3VsZCBiZSBjb21wYXRpYmxlCiAgICB3aXRoIFB5dGhvbiAyLjUgYW5kIGFsbCBleGlzdGluZyB2ZXJzaW9ucyBvZiBQeXRob24zCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgc2l4X21vZHVsZV9uYW1lKToKICAgICAgICBzZWxmLm5hbWUgPSBzaXhfbW9kdWxlX25hbWUKICAgICAgICBzZWxmLmtub3duX21vZHVsZXMgPSB7fQoKICAgIGRlZiBfYWRkX21vZHVsZShzZWxmLCBtb2QsICpmdWxsbmFtZXMpOgogICAgICAgIGZvciBmdWxsbmFtZSBpbiBmdWxsbmFtZXM6CiAgICAgICAgICAgIHNlbGYua25vd25fbW9kdWxlc1tzZWxmLm5hbWUgKyAiLiIgKyBmdWxsbmFtZV0gPSBtb2QKCiAgICBkZWYgX2dldF9tb2R1bGUoc2VsZiwgZnVsbG5hbWUpOgogICAgICAgIHJldHVybiBzZWxmLmtub3duX21vZHVsZXNbc2VsZi5uYW1lICsgIi4iICsgZnVsbG5hbWVdCgogICAgZGVmIGZpbmRfbW9kdWxlKHNlbGYsIGZ1bGxuYW1lLCBwYXRoPU5vbmUpOgogICAgICAgIGlmIGZ1bGxuYW1lIGluIHNlbGYua25vd25fbW9kdWxlczoKICAgICAgICAgICAgcmV0dXJuIHNlbGYKICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiBfX2dldF9tb2R1bGUoc2VsZiwgZnVsbG5hbWUpOgogICAgICAgIHRyeToKICAgICAgICAgICAgcmV0dXJuIHNlbGYua25vd25fbW9kdWxlc1tmdWxsbmFtZV0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHJhaXNlIEltcG9ydEVycm9yKCJUaGlzIGxvYWRlciBkb2VzIG5vdCBrbm93IG1vZHVsZSAiICsgZnVsbG5hbWUpCgogICAgZGVmIGxvYWRfbW9kdWxlKHNlbGYsIGZ1bGxuYW1lKToKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgaW4gY2FzZSBvZiBhIHJlbG9hZAogICAgICAgICAgICByZXR1cm4gc3lzLm1vZHVsZXNbZnVsbG5hbWVdCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBwYXNzCiAgICAgICAgbW9kID0gc2VsZi5fX2dldF9tb2R1bGUoZnVsbG5hbWUpCiAgICAgICAgaWYgaXNpbnN0YW5jZShtb2QsIE1vdmVkTW9kdWxlKToKICAgICAgICAgICAgbW9kID0gbW9kLl9yZXNvbHZlKCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBtb2QuX19sb2FkZXJfXyA9IHNlbGYKICAgICAgICBzeXMubW9kdWxlc1tmdWxsbmFtZV0gPSBtb2QKICAgICAgICByZXR1cm4gbW9kCgogICAgZGVmIGlzX3BhY2thZ2Uoc2VsZiwgZnVsbG5hbWUpOgogICAgICAgICIiIgogICAgICAgIFJldHVybiB0cnVlLCBpZiB0aGUgbmFtZWQgbW9kdWxlIGlzIGEgcGFja2FnZS4KCiAgICAgICAgV2UgbmVlZCB0aGlzIG1ldGhvZCB0byBnZXQgY29ycmVjdCBzcGVjIG9iamVjdHMgd2l0aAogICAgICAgIFB5dGhvbiAzLjQgKHNlZSBQRVA0NTEpCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIGhhc2F0dHIoc2VsZi5fX2dldF9tb2R1bGUoZnVsbG5hbWUpLCAiX19wYXRoX18iKQoKICAgIGRlZiBnZXRfY29kZShzZWxmLCBmdWxsbmFtZSk6CiAgICAgICAgIiIiUmV0dXJuIE5vbmUKCiAgICAgICAgUmVxdWlyZWQsIGlmIGlzX3BhY2thZ2UgaXMgaW1wbGVtZW50ZWQiIiIKICAgICAgICBzZWxmLl9fZ2V0X21vZHVsZShmdWxsbmFtZSkgICMgZXZlbnR1YWxseSByYWlzZXMgSW1wb3J0RXJyb3IKICAgICAgICByZXR1cm4gTm9uZQogICAgZ2V0X3NvdXJjZSA9IGdldF9jb2RlICAjIHNhbWUgYXMgZ2V0X2NvZGUKCl9pbXBvcnRlciA9IF9TaXhNZXRhUGF0aEltcG9ydGVyKF9fbmFtZV9fKQoKCmNsYXNzIF9Nb3ZlZEl0ZW1zKF9MYXp5TW9kdWxlKToKCiAgICAiIiJMYXp5IGxvYWRpbmcgb2YgbW92ZWQgb2JqZWN0cyIiIgogICAgX19wYXRoX18gPSBbXSAgIyBtYXJrIGFzIHBhY2thZ2UKCgpfbW92ZWRfYXR0cmlidXRlcyA9IFsKICAgIE1vdmVkQXR0cmlidXRlKCJjU3RyaW5nSU8iLCAiY1N0cmluZ0lPIiwgImlvIiwgIlN0cmluZ0lPIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiZmlsdGVyIiwgIml0ZXJ0b29scyIsICJidWlsdGlucyIsICJpZmlsdGVyIiwgImZpbHRlciIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImZpbHRlcmZhbHNlIiwgIml0ZXJ0b29scyIsICJpdGVydG9vbHMiLCAiaWZpbHRlcmZhbHNlIiwgImZpbHRlcmZhbHNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiaW5wdXQiLCAiX19idWlsdGluX18iLCAiYnVpbHRpbnMiLCAicmF3X2lucHV0IiwgImlucHV0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiaW50ZXJuIiwgIl9fYnVpbHRpbl9fIiwgInN5cyIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIm1hcCIsICJpdGVydG9vbHMiLCAiYnVpbHRpbnMiLCAiaW1hcCIsICJtYXAiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJnZXRjd2QiLCAib3MiLCAib3MiLCAiZ2V0Y3dkdSIsICJnZXRjd2QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJnZXRjd2RiIiwgIm9zIiwgIm9zIiwgImdldGN3ZCIsICJnZXRjd2RiIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicmFuZ2UiLCAiX19idWlsdGluX18iLCAiYnVpbHRpbnMiLCAieHJhbmdlIiwgInJhbmdlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicmVsb2FkX21vZHVsZSIsICJfX2J1aWx0aW5fXyIsICJpbXBvcnRsaWIiIGlmIFBZMzQgZWxzZSAiaW1wIiwgInJlbG9hZCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInJlZHVjZSIsICJfX2J1aWx0aW5fXyIsICJmdW5jdG9vbHMiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJzaGxleF9xdW90ZSIsICJwaXBlcyIsICJzaGxleCIsICJxdW90ZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlN0cmluZ0lPIiwgIlN0cmluZ0lPIiwgImlvIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiVXNlckRpY3QiLCAiVXNlckRpY3QiLCAiY29sbGVjdGlvbnMiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJVc2VyTGlzdCIsICJVc2VyTGlzdCIsICJjb2xsZWN0aW9ucyIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlVzZXJTdHJpbmciLCAiVXNlclN0cmluZyIsICJjb2xsZWN0aW9ucyIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInhyYW5nZSIsICJfX2J1aWx0aW5fXyIsICJidWlsdGlucyIsICJ4cmFuZ2UiLCAicmFuZ2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ6aXAiLCAiaXRlcnRvb2xzIiwgImJ1aWx0aW5zIiwgIml6aXAiLCAiemlwIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiemlwX2xvbmdlc3QiLCAiaXRlcnRvb2xzIiwgIml0ZXJ0b29scyIsICJpemlwX2xvbmdlc3QiLCAiemlwX2xvbmdlc3QiKSwKICAgIE1vdmVkTW9kdWxlKCJidWlsdGlucyIsICJfX2J1aWx0aW5fXyIpLAogICAgTW92ZWRNb2R1bGUoImNvbmZpZ3BhcnNlciIsICJDb25maWdQYXJzZXIiKSwKICAgIE1vdmVkTW9kdWxlKCJjb3B5cmVnIiwgImNvcHlfcmVnIiksCiAgICBNb3ZlZE1vZHVsZSgiZGJtX2dudSIsICJnZGJtIiwgImRibS5nbnUiKSwKICAgIE1vdmVkTW9kdWxlKCJfZHVtbXlfdGhyZWFkIiwgImR1bW15X3RocmVhZCIsICJfZHVtbXlfdGhyZWFkIiksCiAgICBNb3ZlZE1vZHVsZSgiaHR0cF9jb29raWVqYXIiLCAiY29va2llbGliIiwgImh0dHAuY29va2llamFyIiksCiAgICBNb3ZlZE1vZHVsZSgiaHR0cF9jb29raWVzIiwgIkNvb2tpZSIsICJodHRwLmNvb2tpZXMiKSwKICAgIE1vdmVkTW9kdWxlKCJodG1sX2VudGl0aWVzIiwgImh0bWxlbnRpdHlkZWZzIiwgImh0bWwuZW50aXRpZXMiKSwKICAgIE1vdmVkTW9kdWxlKCJodG1sX3BhcnNlciIsICJIVE1MUGFyc2VyIiwgImh0bWwucGFyc2VyIiksCiAgICBNb3ZlZE1vZHVsZSgiaHR0cF9jbGllbnQiLCAiaHR0cGxpYiIsICJodHRwLmNsaWVudCIpLAogICAgTW92ZWRNb2R1bGUoImVtYWlsX21pbWVfbXVsdGlwYXJ0IiwgImVtYWlsLk1JTUVNdWx0aXBhcnQiLCAiZW1haWwubWltZS5tdWx0aXBhcnQiKSwKICAgIE1vdmVkTW9kdWxlKCJlbWFpbF9taW1lX25vbm11bHRpcGFydCIsICJlbWFpbC5NSU1FTm9uTXVsdGlwYXJ0IiwgImVtYWlsLm1pbWUubm9ubXVsdGlwYXJ0IiksCiAgICBNb3ZlZE1vZHVsZSgiZW1haWxfbWltZV90ZXh0IiwgImVtYWlsLk1JTUVUZXh0IiwgImVtYWlsLm1pbWUudGV4dCIpLAogICAgTW92ZWRNb2R1bGUoImVtYWlsX21pbWVfYmFzZSIsICJlbWFpbC5NSU1FQmFzZSIsICJlbWFpbC5taW1lLmJhc2UiKSwKICAgIE1vdmVkTW9kdWxlKCJCYXNlSFRUUFNlcnZlciIsICJCYXNlSFRUUFNlcnZlciIsICJodHRwLnNlcnZlciIpLAogICAgTW92ZWRNb2R1bGUoIkNHSUhUVFBTZXJ2ZXIiLCAiQ0dJSFRUUFNlcnZlciIsICJodHRwLnNlcnZlciIpLAogICAgTW92ZWRNb2R1bGUoIlNpbXBsZUhUVFBTZXJ2ZXIiLCAiU2ltcGxlSFRUUFNlcnZlciIsICJodHRwLnNlcnZlciIpLAogICAgTW92ZWRNb2R1bGUoImNQaWNrbGUiLCAiY1BpY2tsZSIsICJwaWNrbGUiKSwKICAgIE1vdmVkTW9kdWxlKCJxdWV1ZSIsICJRdWV1ZSIpLAogICAgTW92ZWRNb2R1bGUoInJlcHJsaWIiLCAicmVwciIpLAogICAgTW92ZWRNb2R1bGUoInNvY2tldHNlcnZlciIsICJTb2NrZXRTZXJ2ZXIiKSwKICAgIE1vdmVkTW9kdWxlKCJfdGhyZWFkIiwgInRocmVhZCIsICJfdGhyZWFkIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlciIsICJUa2ludGVyIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9kaWFsb2ciLCAiRGlhbG9nIiwgInRraW50ZXIuZGlhbG9nIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9maWxlZGlhbG9nIiwgIkZpbGVEaWFsb2ciLCAidGtpbnRlci5maWxlZGlhbG9nIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9zY3JvbGxlZHRleHQiLCAiU2Nyb2xsZWRUZXh0IiwgInRraW50ZXIuc2Nyb2xsZWR0ZXh0IiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9zaW1wbGVkaWFsb2ciLCAiU2ltcGxlRGlhbG9nIiwgInRraW50ZXIuc2ltcGxlZGlhbG9nIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl90aXgiLCAiVGl4IiwgInRraW50ZXIudGl4IiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl90dGsiLCAidHRrIiwgInRraW50ZXIudHRrIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9jb25zdGFudHMiLCAiVGtjb25zdGFudHMiLCAidGtpbnRlci5jb25zdGFudHMiKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX2RuZCIsICJUa2RuZCIsICJ0a2ludGVyLmRuZCIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfY29sb3JjaG9vc2VyIiwgInRrQ29sb3JDaG9vc2VyIiwKICAgICAgICAgICAgICAgICJ0a2ludGVyLmNvbG9yY2hvb3NlciIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfY29tbW9uZGlhbG9nIiwgInRrQ29tbW9uRGlhbG9nIiwKICAgICAgICAgICAgICAgICJ0a2ludGVyLmNvbW1vbmRpYWxvZyIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfdGtmaWxlZGlhbG9nIiwgInRrRmlsZURpYWxvZyIsICJ0a2ludGVyLmZpbGVkaWFsb2ciKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX2ZvbnQiLCAidGtGb250IiwgInRraW50ZXIuZm9udCIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfbWVzc2FnZWJveCIsICJ0a01lc3NhZ2VCb3giLCAidGtpbnRlci5tZXNzYWdlYm94IiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl90a3NpbXBsZWRpYWxvZyIsICJ0a1NpbXBsZURpYWxvZyIsCiAgICAgICAgICAgICAgICAidGtpbnRlci5zaW1wbGVkaWFsb2ciKSwKICAgIE1vdmVkTW9kdWxlKCJ1cmxsaWJfcGFyc2UiLCBfX25hbWVfXyArICIubW92ZXMudXJsbGliX3BhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRNb2R1bGUoInVybGxpYl9lcnJvciIsIF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWJfZXJyb3IiLCAidXJsbGliLmVycm9yIiksCiAgICBNb3ZlZE1vZHVsZSgidXJsbGliIiwgX19uYW1lX18gKyAiLm1vdmVzLnVybGxpYiIsIF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWIiKSwKICAgIE1vdmVkTW9kdWxlKCJ1cmxsaWJfcm9ib3RwYXJzZXIiLCAicm9ib3RwYXJzZXIiLCAidXJsbGliLnJvYm90cGFyc2VyIiksCiAgICBNb3ZlZE1vZHVsZSgieG1scnBjX2NsaWVudCIsICJ4bWxycGNsaWIiLCAieG1scnBjLmNsaWVudCIpLAogICAgTW92ZWRNb2R1bGUoInhtbHJwY19zZXJ2ZXIiLCAiU2ltcGxlWE1MUlBDU2VydmVyIiwgInhtbHJwYy5zZXJ2ZXIiKSwKXQojIEFkZCB3aW5kb3dzIHNwZWNpZmljIG1vZHVsZXMuCmlmIHN5cy5wbGF0Zm9ybSA9PSAid2luMzIiOgogICAgX21vdmVkX2F0dHJpYnV0ZXMgKz0gWwogICAgICAgIE1vdmVkTW9kdWxlKCJ3aW5yZWciLCAiX3dpbnJlZyIpLAogICAgXQoKZm9yIGF0dHIgaW4gX21vdmVkX2F0dHJpYnV0ZXM6CiAgICBzZXRhdHRyKF9Nb3ZlZEl0ZW1zLCBhdHRyLm5hbWUsIGF0dHIpCiAgICBpZiBpc2luc3RhbmNlKGF0dHIsIE1vdmVkTW9kdWxlKToKICAgICAgICBfaW1wb3J0ZXIuX2FkZF9tb2R1bGUoYXR0ciwgIm1vdmVzLiIgKyBhdHRyLm5hbWUpCmRlbCBhdHRyCgpfTW92ZWRJdGVtcy5fbW92ZWRfYXR0cmlidXRlcyA9IF9tb3ZlZF9hdHRyaWJ1dGVzCgptb3ZlcyA9IF9Nb3ZlZEl0ZW1zKF9fbmFtZV9fICsgIi5tb3ZlcyIpCl9pbXBvcnRlci5fYWRkX21vZHVsZShtb3ZlcywgIm1vdmVzIikKCgpjbGFzcyBNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9wYXJzZShfTGF6eU1vZHVsZSk6CgogICAgIiIiTGF6eSBsb2FkaW5nIG9mIG1vdmVkIG9iamVjdHMgaW4gc2l4Lm1vdmVzLnVybGxpYl9wYXJzZSIiIgoKCl91cmxsaWJfcGFyc2VfbW92ZWRfYXR0cmlidXRlcyA9IFsKICAgIE1vdmVkQXR0cmlidXRlKCJQYXJzZVJlc3VsdCIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJTcGxpdFJlc3VsdCIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJwYXJzZV9xcyIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJwYXJzZV9xc2wiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsZGVmcmFnIiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVybGpvaW4iLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJscGFyc2UiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsc3BsaXQiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsdW5wYXJzZSIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1cmx1bnNwbGl0IiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInF1b3RlIiwgInVybGxpYiIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJxdW90ZV9wbHVzIiwgInVybGxpYiIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1bnF1b3RlIiwgInVybGxpYiIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1bnF1b3RlX3BsdXMiLCAidXJsbGliIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVybGVuY29kZSIsICJ1cmxsaWIiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgic3BsaXRxdWVyeSIsICJ1cmxsaWIiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgic3BsaXR0YWciLCAidXJsbGliIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInNwbGl0dXNlciIsICJ1cmxsaWIiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXNlc19mcmFnbWVudCIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1c2VzX25ldGxvYyIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1c2VzX3BhcmFtcyIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1c2VzX3F1ZXJ5IiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVzZXNfcmVsYXRpdmUiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCl0KZm9yIGF0dHIgaW4gX3VybGxpYl9wYXJzZV9tb3ZlZF9hdHRyaWJ1dGVzOgogICAgc2V0YXR0cihNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9wYXJzZSwgYXR0ci5uYW1lLCBhdHRyKQpkZWwgYXR0cgoKTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcGFyc2UuX21vdmVkX2F0dHJpYnV0ZXMgPSBfdXJsbGliX3BhcnNlX21vdmVkX2F0dHJpYnV0ZXMKCl9pbXBvcnRlci5fYWRkX21vZHVsZShNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9wYXJzZShfX25hbWVfXyArICIubW92ZXMudXJsbGliX3BhcnNlIiksCiAgICAgICAgICAgICAgICAgICAgICAibW92ZXMudXJsbGliX3BhcnNlIiwgIm1vdmVzLnVybGxpYi5wYXJzZSIpCgoKY2xhc3MgTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfZXJyb3IoX0xhenlNb2R1bGUpOgoKICAgICIiIkxhenkgbG9hZGluZyBvZiBtb3ZlZCBvYmplY3RzIGluIHNpeC5tb3Zlcy51cmxsaWJfZXJyb3IiIiIKCgpfdXJsbGliX2Vycm9yX21vdmVkX2F0dHJpYnV0ZXMgPSBbCiAgICBNb3ZlZEF0dHJpYnV0ZSgiVVJMRXJyb3IiLCAidXJsbGliMiIsICJ1cmxsaWIuZXJyb3IiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQRXJyb3IiLCAidXJsbGliMiIsICJ1cmxsaWIuZXJyb3IiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJDb250ZW50VG9vU2hvcnRFcnJvciIsICJ1cmxsaWIiLCAidXJsbGliLmVycm9yIiksCl0KZm9yIGF0dHIgaW4gX3VybGxpYl9lcnJvcl9tb3ZlZF9hdHRyaWJ1dGVzOgogICAgc2V0YXR0cihNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9lcnJvciwgYXR0ci5uYW1lLCBhdHRyKQpkZWwgYXR0cgoKTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfZXJyb3IuX21vdmVkX2F0dHJpYnV0ZXMgPSBfdXJsbGliX2Vycm9yX21vdmVkX2F0dHJpYnV0ZXMKCl9pbXBvcnRlci5fYWRkX21vZHVsZShNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9lcnJvcihfX25hbWVfXyArICIubW92ZXMudXJsbGliLmVycm9yIiksCiAgICAgICAgICAgICAgICAgICAgICAibW92ZXMudXJsbGliX2Vycm9yIiwgIm1vdmVzLnVybGxpYi5lcnJvciIpCgoKY2xhc3MgTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcmVxdWVzdChfTGF6eU1vZHVsZSk6CgogICAgIiIiTGF6eSBsb2FkaW5nIG9mIG1vdmVkIG9iamVjdHMgaW4gc2l4Lm1vdmVzLnVybGxpYl9yZXF1ZXN0IiIiCgoKX3VybGxpYl9yZXF1ZXN0X21vdmVkX2F0dHJpYnV0ZXMgPSBbCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsb3BlbiIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiaW5zdGFsbF9vcGVuZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImJ1aWxkX29wZW5lciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicGF0aG5hbWUydXJsIiwgInVybGxpYiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVybDJwYXRobmFtZSIsICJ1cmxsaWIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJnZXRwcm94aWVzIiwgInVybGxpYiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlJlcXVlc3QiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIk9wZW5lckRpcmVjdG9yIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQRGVmYXVsdEVycm9ySGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUFJlZGlyZWN0SGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUENvb2tpZVByb2Nlc3NvciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiUHJveHlIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJCYXNlSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUFBhc3N3b3JkTWdyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQUGFzc3dvcmRNZ3JXaXRoRGVmYXVsdFJlYWxtIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJBYnN0cmFjdEJhc2ljQXV0aEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBCYXNpY0F1dGhIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJQcm94eUJhc2ljQXV0aEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkFic3RyYWN0RGlnZXN0QXV0aEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBEaWdlc3RBdXRoSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiUHJveHlEaWdlc3RBdXRoSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBTSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiRmlsZUhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkZUUEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkNhY2hlRlRQSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiVW5rbm93bkhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBFcnJvclByb2Nlc3NvciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJscmV0cmlldmUiLCAidXJsbGliIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsY2xlYW51cCIsICJ1cmxsaWIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJVUkxvcGVuZXIiLCAidXJsbGliIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiRmFuY3lVUkxvcGVuZXIiLCAidXJsbGliIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicHJveHlfYnlwYXNzIiwgInVybGxpYiIsICJ1cmxsaWIucmVxdWVzdCIpLApdCmZvciBhdHRyIGluIF91cmxsaWJfcmVxdWVzdF9tb3ZlZF9hdHRyaWJ1dGVzOgogICAgc2V0YXR0cihNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yZXF1ZXN0LCBhdHRyLm5hbWUsIGF0dHIpCmRlbCBhdHRyCgpNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yZXF1ZXN0Ll9tb3ZlZF9hdHRyaWJ1dGVzID0gX3VybGxpYl9yZXF1ZXN0X21vdmVkX2F0dHJpYnV0ZXMKCl9pbXBvcnRlci5fYWRkX21vZHVsZShNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yZXF1ZXN0KF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWIucmVxdWVzdCIpLAogICAgICAgICAgICAgICAgICAgICAgIm1vdmVzLnVybGxpYl9yZXF1ZXN0IiwgIm1vdmVzLnVybGxpYi5yZXF1ZXN0IikKCgpjbGFzcyBNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yZXNwb25zZShfTGF6eU1vZHVsZSk6CgogICAgIiIiTGF6eSBsb2FkaW5nIG9mIG1vdmVkIG9iamVjdHMgaW4gc2l4Lm1vdmVzLnVybGxpYl9yZXNwb25zZSIiIgoKCl91cmxsaWJfcmVzcG9uc2VfbW92ZWRfYXR0cmlidXRlcyA9IFsKICAgIE1vdmVkQXR0cmlidXRlKCJhZGRiYXNlIiwgInVybGxpYiIsICJ1cmxsaWIucmVzcG9uc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJhZGRjbG9zZWhvb2siLCAidXJsbGliIiwgInVybGxpYi5yZXNwb25zZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImFkZGluZm8iLCAidXJsbGliIiwgInVybGxpYi5yZXNwb25zZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImFkZGluZm91cmwiLCAidXJsbGliIiwgInVybGxpYi5yZXNwb25zZSIpLApdCmZvciBhdHRyIGluIF91cmxsaWJfcmVzcG9uc2VfbW92ZWRfYXR0cmlidXRlczoKICAgIHNldGF0dHIoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcmVzcG9uc2UsIGF0dHIubmFtZSwgYXR0cikKZGVsIGF0dHIKCk1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3Jlc3BvbnNlLl9tb3ZlZF9hdHRyaWJ1dGVzID0gX3VybGxpYl9yZXNwb25zZV9tb3ZlZF9hdHRyaWJ1dGVzCgpfaW1wb3J0ZXIuX2FkZF9tb2R1bGUoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcmVzcG9uc2UoX19uYW1lX18gKyAiLm1vdmVzLnVybGxpYi5yZXNwb25zZSIpLAogICAgICAgICAgICAgICAgICAgICAgIm1vdmVzLnVybGxpYl9yZXNwb25zZSIsICJtb3Zlcy51cmxsaWIucmVzcG9uc2UiKQoKCmNsYXNzIE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3JvYm90cGFyc2VyKF9MYXp5TW9kdWxlKToKCiAgICAiIiJMYXp5IGxvYWRpbmcgb2YgbW92ZWQgb2JqZWN0cyBpbiBzaXgubW92ZXMudXJsbGliX3JvYm90cGFyc2VyIiIiCgoKX3VybGxpYl9yb2JvdHBhcnNlcl9tb3ZlZF9hdHRyaWJ1dGVzID0gWwogICAgTW92ZWRBdHRyaWJ1dGUoIlJvYm90RmlsZVBhcnNlciIsICJyb2JvdHBhcnNlciIsICJ1cmxsaWIucm9ib3RwYXJzZXIiKSwKXQpmb3IgYXR0ciBpbiBfdXJsbGliX3JvYm90cGFyc2VyX21vdmVkX2F0dHJpYnV0ZXM6CiAgICBzZXRhdHRyKE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3JvYm90cGFyc2VyLCBhdHRyLm5hbWUsIGF0dHIpCmRlbCBhdHRyCgpNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yb2JvdHBhcnNlci5fbW92ZWRfYXR0cmlidXRlcyA9IF91cmxsaWJfcm9ib3RwYXJzZXJfbW92ZWRfYXR0cmlidXRlcwoKX2ltcG9ydGVyLl9hZGRfbW9kdWxlKE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3JvYm90cGFyc2VyKF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWIucm9ib3RwYXJzZXIiKSwKICAgICAgICAgICAgICAgICAgICAgICJtb3Zlcy51cmxsaWJfcm9ib3RwYXJzZXIiLCAibW92ZXMudXJsbGliLnJvYm90cGFyc2VyIikKCgpjbGFzcyBNb2R1bGVfc2l4X21vdmVzX3VybGxpYih0eXBlcy5Nb2R1bGVUeXBlKToKCiAgICAiIiJDcmVhdGUgYSBzaXgubW92ZXMudXJsbGliIG5hbWVzcGFjZSB0aGF0IHJlc2VtYmxlcyB0aGUgUHl0aG9uIDMgbmFtZXNwYWNlIiIiCiAgICBfX3BhdGhfXyA9IFtdICAjIG1hcmsgYXMgcGFja2FnZQogICAgcGFyc2UgPSBfaW1wb3J0ZXIuX2dldF9tb2R1bGUoIm1vdmVzLnVybGxpYl9wYXJzZSIpCiAgICBlcnJvciA9IF9pbXBvcnRlci5fZ2V0X21vZHVsZSgibW92ZXMudXJsbGliX2Vycm9yIikKICAgIHJlcXVlc3QgPSBfaW1wb3J0ZXIuX2dldF9tb2R1bGUoIm1vdmVzLnVybGxpYl9yZXF1ZXN0IikKICAgIHJlc3BvbnNlID0gX2ltcG9ydGVyLl9nZXRfbW9kdWxlKCJtb3Zlcy51cmxsaWJfcmVzcG9uc2UiKQogICAgcm9ib3RwYXJzZXIgPSBfaW1wb3J0ZXIuX2dldF9tb2R1bGUoIm1vdmVzLnVybGxpYl9yb2JvdHBhcnNlciIpCgogICAgZGVmIF9fZGlyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIFsncGFyc2UnLCAnZXJyb3InLCAncmVxdWVzdCcsICdyZXNwb25zZScsICdyb2JvdHBhcnNlciddCgpfaW1wb3J0ZXIuX2FkZF9tb2R1bGUoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWIoX19uYW1lX18gKyAiLm1vdmVzLnVybGxpYiIpLAogICAgICAgICAgICAgICAgICAgICAgIm1vdmVzLnVybGxpYiIpCgoKZGVmIGFkZF9tb3ZlKG1vdmUpOgogICAgIiIiQWRkIGFuIGl0ZW0gdG8gc2l4Lm1vdmVzLiIiIgogICAgc2V0YXR0cihfTW92ZWRJdGVtcywgbW92ZS5uYW1lLCBtb3ZlKQoKCmRlZiByZW1vdmVfbW92ZShuYW1lKToKICAgICIiIlJlbW92ZSBpdGVtIGZyb20gc2l4Lm1vdmVzLiIiIgogICAgdHJ5OgogICAgICAgIGRlbGF0dHIoX01vdmVkSXRlbXMsIG5hbWUpCiAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBkZWwgbW92ZXMuX19kaWN0X19bbmFtZV0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKCJubyBzdWNoIG1vdmUsICVyIiAlIChuYW1lLCkpCgoKaWYgUFkzOgogICAgX21ldGhfZnVuYyA9ICJfX2Z1bmNfXyIKICAgIF9tZXRoX3NlbGYgPSAiX19zZWxmX18iCgogICAgX2Z1bmNfY2xvc3VyZSA9ICJfX2Nsb3N1cmVfXyIKICAgIF9mdW5jX2NvZGUgPSAiX19jb2RlX18iCiAgICBfZnVuY19kZWZhdWx0cyA9ICJfX2RlZmF1bHRzX18iCiAgICBfZnVuY19nbG9iYWxzID0gIl9fZ2xvYmFsc19fIgplbHNlOgogICAgX21ldGhfZnVuYyA9ICJpbV9mdW5jIgogICAgX21ldGhfc2VsZiA9ICJpbV9zZWxmIgoKICAgIF9mdW5jX2Nsb3N1cmUgPSAiZnVuY19jbG9zdXJlIgogICAgX2Z1bmNfY29kZSA9ICJmdW5jX2NvZGUiCiAgICBfZnVuY19kZWZhdWx0cyA9ICJmdW5jX2RlZmF1bHRzIgogICAgX2Z1bmNfZ2xvYmFscyA9ICJmdW5jX2dsb2JhbHMiCgoKdHJ5OgogICAgYWR2YW5jZV9pdGVyYXRvciA9IG5leHQKZXhjZXB0IE5hbWVFcnJvcjoKICAgIGRlZiBhZHZhbmNlX2l0ZXJhdG9yKGl0KToKICAgICAgICByZXR1cm4gaXQubmV4dCgpCm5leHQgPSBhZHZhbmNlX2l0ZXJhdG9yCgoKdHJ5OgogICAgY2FsbGFibGUgPSBjYWxsYWJsZQpleGNlcHQgTmFtZUVycm9yOgogICAgZGVmIGNhbGxhYmxlKG9iaik6CiAgICAgICAgcmV0dXJuIGFueSgiX19jYWxsX18iIGluIGtsYXNzLl9fZGljdF9fIGZvciBrbGFzcyBpbiB0eXBlKG9iaikuX19tcm9fXykKCgppZiBQWTM6CiAgICBkZWYgZ2V0X3VuYm91bmRfZnVuY3Rpb24odW5ib3VuZCk6CiAgICAgICAgcmV0dXJuIHVuYm91bmQKCiAgICBjcmVhdGVfYm91bmRfbWV0aG9kID0gdHlwZXMuTWV0aG9kVHlwZQoKICAgIGRlZiBjcmVhdGVfdW5ib3VuZF9tZXRob2QoZnVuYywgY2xzKToKICAgICAgICByZXR1cm4gZnVuYwoKICAgIEl0ZXJhdG9yID0gb2JqZWN0CmVsc2U6CiAgICBkZWYgZ2V0X3VuYm91bmRfZnVuY3Rpb24odW5ib3VuZCk6CiAgICAgICAgcmV0dXJuIHVuYm91bmQuaW1fZnVuYwoKICAgIGRlZiBjcmVhdGVfYm91bmRfbWV0aG9kKGZ1bmMsIG9iaik6CiAgICAgICAgcmV0dXJuIHR5cGVzLk1ldGhvZFR5cGUoZnVuYywgb2JqLCBvYmouX19jbGFzc19fKQoKICAgIGRlZiBjcmVhdGVfdW5ib3VuZF9tZXRob2QoZnVuYywgY2xzKToKICAgICAgICByZXR1cm4gdHlwZXMuTWV0aG9kVHlwZShmdW5jLCBOb25lLCBjbHMpCgogICAgY2xhc3MgSXRlcmF0b3Iob2JqZWN0KToKCiAgICAgICAgZGVmIG5leHQoc2VsZik6CiAgICAgICAgICAgIHJldHVybiB0eXBlKHNlbGYpLl9fbmV4dF9fKHNlbGYpCgogICAgY2FsbGFibGUgPSBjYWxsYWJsZQpfYWRkX2RvYyhnZXRfdW5ib3VuZF9mdW5jdGlvbiwKICAgICAgICAgIiIiR2V0IHRoZSBmdW5jdGlvbiBvdXQgb2YgYSBwb3NzaWJseSB1bmJvdW5kIGZ1bmN0aW9uIiIiKQoKCmdldF9tZXRob2RfZnVuY3Rpb24gPSBvcGVyYXRvci5hdHRyZ2V0dGVyKF9tZXRoX2Z1bmMpCmdldF9tZXRob2Rfc2VsZiA9IG9wZXJhdG9yLmF0dHJnZXR0ZXIoX21ldGhfc2VsZikKZ2V0X2Z1bmN0aW9uX2Nsb3N1cmUgPSBvcGVyYXRvci5hdHRyZ2V0dGVyKF9mdW5jX2Nsb3N1cmUpCmdldF9mdW5jdGlvbl9jb2RlID0gb3BlcmF0b3IuYXR0cmdldHRlcihfZnVuY19jb2RlKQpnZXRfZnVuY3Rpb25fZGVmYXVsdHMgPSBvcGVyYXRvci5hdHRyZ2V0dGVyKF9mdW5jX2RlZmF1bHRzKQpnZXRfZnVuY3Rpb25fZ2xvYmFscyA9IG9wZXJhdG9yLmF0dHJnZXR0ZXIoX2Z1bmNfZ2xvYmFscykKCgppZiBQWTM6CiAgICBkZWYgaXRlcmtleXMoZCwgKiprdyk6CiAgICAgICAgcmV0dXJuIGl0ZXIoZC5rZXlzKCoqa3cpKQoKICAgIGRlZiBpdGVydmFsdWVzKGQsICoqa3cpOgogICAgICAgIHJldHVybiBpdGVyKGQudmFsdWVzKCoqa3cpKQoKICAgIGRlZiBpdGVyaXRlbXMoZCwgKiprdyk6CiAgICAgICAgcmV0dXJuIGl0ZXIoZC5pdGVtcygqKmt3KSkKCiAgICBkZWYgaXRlcmxpc3RzKGQsICoqa3cpOgogICAgICAgIHJldHVybiBpdGVyKGQubGlzdHMoKiprdykpCgogICAgdmlld2tleXMgPSBvcGVyYXRvci5tZXRob2RjYWxsZXIoImtleXMiKQoKICAgIHZpZXd2YWx1ZXMgPSBvcGVyYXRvci5tZXRob2RjYWxsZXIoInZhbHVlcyIpCgogICAgdmlld2l0ZW1zID0gb3BlcmF0b3IubWV0aG9kY2FsbGVyKCJpdGVtcyIpCmVsc2U6CiAgICBkZWYgaXRlcmtleXMoZCwgKiprdyk6CiAgICAgICAgcmV0dXJuIGQuaXRlcmtleXMoKiprdykKCiAgICBkZWYgaXRlcnZhbHVlcyhkLCAqKmt3KToKICAgICAgICByZXR1cm4gZC5pdGVydmFsdWVzKCoqa3cpCgogICAgZGVmIGl0ZXJpdGVtcyhkLCAqKmt3KToKICAgICAgICByZXR1cm4gZC5pdGVyaXRlbXMoKiprdykKCiAgICBkZWYgaXRlcmxpc3RzKGQsICoqa3cpOgogICAgICAgIHJldHVybiBkLml0ZXJsaXN0cygqKmt3KQoKICAgIHZpZXdrZXlzID0gb3BlcmF0b3IubWV0aG9kY2FsbGVyKCJ2aWV3a2V5cyIpCgogICAgdmlld3ZhbHVlcyA9IG9wZXJhdG9yLm1ldGhvZGNhbGxlcigidmlld3ZhbHVlcyIpCgogICAgdmlld2l0ZW1zID0gb3BlcmF0b3IubWV0aG9kY2FsbGVyKCJ2aWV3aXRlbXMiKQoKX2FkZF9kb2MoaXRlcmtleXMsICJSZXR1cm4gYW4gaXRlcmF0b3Igb3ZlciB0aGUga2V5cyBvZiBhIGRpY3Rpb25hcnkuIikKX2FkZF9kb2MoaXRlcnZhbHVlcywgIlJldHVybiBhbiBpdGVyYXRvciBvdmVyIHRoZSB2YWx1ZXMgb2YgYSBkaWN0aW9uYXJ5LiIpCl9hZGRfZG9jKGl0ZXJpdGVtcywKICAgICAgICAgIlJldHVybiBhbiBpdGVyYXRvciBvdmVyIHRoZSAoa2V5LCB2YWx1ZSkgcGFpcnMgb2YgYSBkaWN0aW9uYXJ5LiIpCl9hZGRfZG9jKGl0ZXJsaXN0cywKICAgICAgICAgIlJldHVybiBhbiBpdGVyYXRvciBvdmVyIHRoZSAoa2V5LCBbdmFsdWVzXSkgcGFpcnMgb2YgYSBkaWN0aW9uYXJ5LiIpCgoKaWYgUFkzOgogICAgZGVmIGIocyk6CiAgICAgICAgcmV0dXJuIHMuZW5jb2RlKCJsYXRpbi0xIikKCiAgICBkZWYgdShzKToKICAgICAgICByZXR1cm4gcwogICAgdW5pY2hyID0gY2hyCiAgICBpbXBvcnQgc3RydWN0CiAgICBpbnQyYnl0ZSA9IHN0cnVjdC5TdHJ1Y3QoIj5CIikucGFjawogICAgZGVsIHN0cnVjdAogICAgYnl0ZTJpbnQgPSBvcGVyYXRvci5pdGVtZ2V0dGVyKDApCiAgICBpbmRleGJ5dGVzID0gb3BlcmF0b3IuZ2V0aXRlbQogICAgaXRlcmJ5dGVzID0gaXRlcgogICAgaW1wb3J0IGlvCiAgICBTdHJpbmdJTyA9IGlvLlN0cmluZ0lPCiAgICBCeXRlc0lPID0gaW8uQnl0ZXNJTwogICAgX2Fzc2VydENvdW50RXF1YWwgPSAiYXNzZXJ0Q291bnRFcXVhbCIKICAgIGlmIHN5cy52ZXJzaW9uX2luZm9bMV0gPD0gMToKICAgICAgICBfYXNzZXJ0UmFpc2VzUmVnZXggPSAiYXNzZXJ0UmFpc2VzUmVnZXhwIgogICAgICAgIF9hc3NlcnRSZWdleCA9ICJhc3NlcnRSZWdleHBNYXRjaGVzIgogICAgZWxzZToKICAgICAgICBfYXNzZXJ0UmFpc2VzUmVnZXggPSAiYXNzZXJ0UmFpc2VzUmVnZXgiCiAgICAgICAgX2Fzc2VydFJlZ2V4ID0gImFzc2VydFJlZ2V4IgplbHNlOgogICAgZGVmIGIocyk6CiAgICAgICAgcmV0dXJuIHMKICAgICMgV29ya2Fyb3VuZCBmb3Igc3RhbmRhbG9uZSBiYWNrc2xhc2gKCiAgICBkZWYgdShzKToKICAgICAgICByZXR1cm4gdW5pY29kZShzLnJlcGxhY2UocidcXCcsIHInXFxcXCcpLCAidW5pY29kZV9lc2NhcGUiKQogICAgdW5pY2hyID0gdW5pY2hyCiAgICBpbnQyYnl0ZSA9IGNocgoKICAgIGRlZiBieXRlMmludChicyk6CiAgICAgICAgcmV0dXJuIG9yZChic1swXSkKCiAgICBkZWYgaW5kZXhieXRlcyhidWYsIGkpOgogICAgICAgIHJldHVybiBvcmQoYnVmW2ldKQogICAgaXRlcmJ5dGVzID0gZnVuY3Rvb2xzLnBhcnRpYWwoaXRlcnRvb2xzLmltYXAsIG9yZCkKICAgIGltcG9ydCBTdHJpbmdJTwogICAgU3RyaW5nSU8gPSBCeXRlc0lPID0gU3RyaW5nSU8uU3RyaW5nSU8KICAgIF9hc3NlcnRDb3VudEVxdWFsID0gImFzc2VydEl0ZW1zRXF1YWwiCiAgICBfYXNzZXJ0UmFpc2VzUmVnZXggPSAiYXNzZXJ0UmFpc2VzUmVnZXhwIgogICAgX2Fzc2VydFJlZ2V4ID0gImFzc2VydFJlZ2V4cE1hdGNoZXMiCl9hZGRfZG9jKGIsICIiIkJ5dGUgbGl0ZXJhbCIiIikKX2FkZF9kb2ModSwgIiIiVGV4dCBsaXRlcmFsIiIiKQoKCmRlZiBhc3NlcnRDb3VudEVxdWFsKHNlbGYsICphcmdzLCAqKmt3YXJncyk6CiAgICByZXR1cm4gZ2V0YXR0cihzZWxmLCBfYXNzZXJ0Q291bnRFcXVhbCkoKmFyZ3MsICoqa3dhcmdzKQoKCmRlZiBhc3NlcnRSYWlzZXNSZWdleChzZWxmLCAqYXJncywgKiprd2FyZ3MpOgogICAgcmV0dXJuIGdldGF0dHIoc2VsZiwgX2Fzc2VydFJhaXNlc1JlZ2V4KSgqYXJncywgKiprd2FyZ3MpCgoKZGVmIGFzc2VydFJlZ2V4KHNlbGYsICphcmdzLCAqKmt3YXJncyk6CiAgICByZXR1cm4gZ2V0YXR0cihzZWxmLCBfYXNzZXJ0UmVnZXgpKCphcmdzLCAqKmt3YXJncykKCgppZiBQWTM6CiAgICBleGVjXyA9IGdldGF0dHIobW92ZXMuYnVpbHRpbnMsICJleGVjIikKCiAgICBkZWYgcmVyYWlzZSh0cCwgdmFsdWUsIHRiPU5vbmUpOgogICAgICAgIGlmIHZhbHVlIGlzIE5vbmU6CiAgICAgICAgICAgIHZhbHVlID0gdHAoKQogICAgICAgIGlmIHZhbHVlLl9fdHJhY2ViYWNrX18gaXMgbm90IHRiOgogICAgICAgICAgICByYWlzZSB2YWx1ZS53aXRoX3RyYWNlYmFjayh0YikKICAgICAgICByYWlzZSB2YWx1ZQoKZWxzZToKICAgIGRlZiBleGVjXyhfY29kZV8sIF9nbG9ic189Tm9uZSwgX2xvY3NfPU5vbmUpOgogICAgICAgICIiIkV4ZWN1dGUgY29kZSBpbiBhIG5hbWVzcGFjZS4iIiIKICAgICAgICBpZiBfZ2xvYnNfIGlzIE5vbmU6CiAgICAgICAgICAgIGZyYW1lID0gc3lzLl9nZXRmcmFtZSgxKQogICAgICAgICAgICBfZ2xvYnNfID0gZnJhbWUuZl9nbG9iYWxzCiAgICAgICAgICAgIGlmIF9sb2NzXyBpcyBOb25lOgogICAgICAgICAgICAgICAgX2xvY3NfID0gZnJhbWUuZl9sb2NhbHMKICAgICAgICAgICAgZGVsIGZyYW1lCiAgICAgICAgZWxpZiBfbG9jc18gaXMgTm9uZToKICAgICAgICAgICAgX2xvY3NfID0gX2dsb2JzXwogICAgICAgIGV4ZWMoIiIiZXhlYyBfY29kZV8gaW4gX2dsb2JzXywgX2xvY3NfIiIiKQoKICAgIGV4ZWNfKCIiImRlZiByZXJhaXNlKHRwLCB2YWx1ZSwgdGI9Tm9uZSk6CiAgICByYWlzZSB0cCwgdmFsdWUsIHRiCiIiIikKCgppZiBzeXMudmVyc2lvbl9pbmZvWzoyXSA9PSAoMywgMik6CiAgICBleGVjXygiIiJkZWYgcmFpc2VfZnJvbSh2YWx1ZSwgZnJvbV92YWx1ZSk6CiAgICBpZiBmcm9tX3ZhbHVlIGlzIE5vbmU6CiAgICAgICAgcmFpc2UgdmFsdWUKICAgIHJhaXNlIHZhbHVlIGZyb20gZnJvbV92YWx1ZQoiIiIpCmVsaWYgc3lzLnZlcnNpb25faW5mb1s6Ml0gPiAoMywgMik6CiAgICBleGVjXygiIiJkZWYgcmFpc2VfZnJvbSh2YWx1ZSwgZnJvbV92YWx1ZSk6CiAgICByYWlzZSB2YWx1ZSBmcm9tIGZyb21fdmFsdWUKIiIiKQplbHNlOgogICAgZGVmIHJhaXNlX2Zyb20odmFsdWUsIGZyb21fdmFsdWUpOgogICAgICAgIHJhaXNlIHZhbHVlCgoKcHJpbnRfID0gZ2V0YXR0cihtb3Zlcy5idWlsdGlucywgInByaW50IiwgTm9uZSkKaWYgcHJpbnRfIGlzIE5vbmU6CiAgICBkZWYgcHJpbnRfKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgIiIiVGhlIG5ldy1zdHlsZSBwcmludCBmdW5jdGlvbiBmb3IgUHl0aG9uIDIuNCBhbmQgMi41LiIiIgogICAgICAgIGZwID0ga3dhcmdzLnBvcCgiZmlsZSIsIHN5cy5zdGRvdXQpCiAgICAgICAgaWYgZnAgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIGRlZiB3cml0ZShkYXRhKToKICAgICAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoZGF0YSwgYmFzZXN0cmluZyk6CiAgICAgICAgICAgICAgICBkYXRhID0gc3RyKGRhdGEpCiAgICAgICAgICAgICMgSWYgdGhlIGZpbGUgaGFzIGFuIGVuY29kaW5nLCBlbmNvZGUgdW5pY29kZSB3aXRoIGl0LgogICAgICAgICAgICBpZiAoaXNpbnN0YW5jZShmcCwgZmlsZSkgYW5kCiAgICAgICAgICAgICAgICAgICAgaXNpbnN0YW5jZShkYXRhLCB1bmljb2RlKSBhbmQKICAgICAgICAgICAgICAgICAgICBmcC5lbmNvZGluZyBpcyBub3QgTm9uZSk6CiAgICAgICAgICAgICAgICBlcnJvcnMgPSBnZXRhdHRyKGZwLCAiZXJyb3JzIiwgTm9uZSkKICAgICAgICAgICAgICAgIGlmIGVycm9ycyBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgIGVycm9ycyA9ICJzdHJpY3QiCiAgICAgICAgICAgICAgICBkYXRhID0gZGF0YS5lbmNvZGUoZnAuZW5jb2RpbmcsIGVycm9ycykKICAgICAgICAgICAgZnAud3JpdGUoZGF0YSkKICAgICAgICB3YW50X3VuaWNvZGUgPSBGYWxzZQogICAgICAgIHNlcCA9IGt3YXJncy5wb3AoInNlcCIsIE5vbmUpCiAgICAgICAgaWYgc2VwIGlzIG5vdCBOb25lOgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHNlcCwgdW5pY29kZSk6CiAgICAgICAgICAgICAgICB3YW50X3VuaWNvZGUgPSBUcnVlCiAgICAgICAgICAgIGVsaWYgbm90IGlzaW5zdGFuY2Uoc2VwLCBzdHIpOgogICAgICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJzZXAgbXVzdCBiZSBOb25lIG9yIGEgc3RyaW5nIikKICAgICAgICBlbmQgPSBrd2FyZ3MucG9wKCJlbmQiLCBOb25lKQogICAgICAgIGlmIGVuZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShlbmQsIHVuaWNvZGUpOgogICAgICAgICAgICAgICAgd2FudF91bmljb2RlID0gVHJ1ZQogICAgICAgICAgICBlbGlmIG5vdCBpc2luc3RhbmNlKGVuZCwgc3RyKToKICAgICAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigiZW5kIG11c3QgYmUgTm9uZSBvciBhIHN0cmluZyIpCiAgICAgICAgaWYga3dhcmdzOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoImludmFsaWQga2V5d29yZCBhcmd1bWVudHMgdG8gcHJpbnQoKSIpCiAgICAgICAgaWYgbm90IHdhbnRfdW5pY29kZToKICAgICAgICAgICAgZm9yIGFyZyBpbiBhcmdzOgogICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShhcmcsIHVuaWNvZGUpOgogICAgICAgICAgICAgICAgICAgIHdhbnRfdW5pY29kZSA9IFRydWUKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGlmIHdhbnRfdW5pY29kZToKICAgICAgICAgICAgbmV3bGluZSA9IHVuaWNvZGUoIlxuIikKICAgICAgICAgICAgc3BhY2UgPSB1bmljb2RlKCIgIikKICAgICAgICBlbHNlOgogICAgICAgICAgICBuZXdsaW5lID0gIlxuIgogICAgICAgICAgICBzcGFjZSA9ICIgIgogICAgICAgIGlmIHNlcCBpcyBOb25lOgogICAgICAgICAgICBzZXAgPSBzcGFjZQogICAgICAgIGlmIGVuZCBpcyBOb25lOgogICAgICAgICAgICBlbmQgPSBuZXdsaW5lCiAgICAgICAgZm9yIGksIGFyZyBpbiBlbnVtZXJhdGUoYXJncyk6CiAgICAgICAgICAgIGlmIGk6CiAgICAgICAgICAgICAgICB3cml0ZShzZXApCiAgICAgICAgICAgIHdyaXRlKGFyZykKICAgICAgICB3cml0ZShlbmQpCmlmIHN5cy52ZXJzaW9uX2luZm9bOjJdIDwgKDMsIDMpOgogICAgX3ByaW50ID0gcHJpbnRfCgogICAgZGVmIHByaW50XygqYXJncywgKiprd2FyZ3MpOgogICAgICAgIGZwID0ga3dhcmdzLmdldCgiZmlsZSIsIHN5cy5zdGRvdXQpCiAgICAgICAgZmx1c2ggPSBrd2FyZ3MucG9wKCJmbHVzaCIsIEZhbHNlKQogICAgICAgIF9wcmludCgqYXJncywgKiprd2FyZ3MpCiAgICAgICAgaWYgZmx1c2ggYW5kIGZwIGlzIG5vdCBOb25lOgogICAgICAgICAgICBmcC5mbHVzaCgpCgpfYWRkX2RvYyhyZXJhaXNlLCAiIiJSZXJhaXNlIGFuIGV4Y2VwdGlvbi4iIiIpCgppZiBzeXMudmVyc2lvbl9pbmZvWzA6Ml0gPCAoMywgNCk6CiAgICBkZWYgd3JhcHMod3JhcHBlZCwgYXNzaWduZWQ9ZnVuY3Rvb2xzLldSQVBQRVJfQVNTSUdOTUVOVFMsCiAgICAgICAgICAgICAgdXBkYXRlZD1mdW5jdG9vbHMuV1JBUFBFUl9VUERBVEVTKToKICAgICAgICBkZWYgd3JhcHBlcihmKToKICAgICAgICAgICAgZiA9IGZ1bmN0b29scy53cmFwcyh3cmFwcGVkLCBhc3NpZ25lZCwgdXBkYXRlZCkoZikKICAgICAgICAgICAgZi5fX3dyYXBwZWRfXyA9IHdyYXBwZWQKICAgICAgICAgICAgcmV0dXJuIGYKICAgICAgICByZXR1cm4gd3JhcHBlcgplbHNlOgogICAgd3JhcHMgPSBmdW5jdG9vbHMud3JhcHMKCgpkZWYgd2l0aF9tZXRhY2xhc3MobWV0YSwgKmJhc2VzKToKICAgICIiIkNyZWF0ZSBhIGJhc2UgY2xhc3Mgd2l0aCBhIG1ldGFjbGFzcy4iIiIKICAgICMgVGhpcyByZXF1aXJlcyBhIGJpdCBvZiBleHBsYW5hdGlvbjogdGhlIGJhc2ljIGlkZWEgaXMgdG8gbWFrZSBhIGR1bW15CiAgICAjIG1ldGFjbGFzcyBmb3Igb25lIGxldmVsIG9mIGNsYXNzIGluc3RhbnRpYXRpb24gdGhhdCByZXBsYWNlcyBpdHNlbGYgd2l0aAogICAgIyB0aGUgYWN0dWFsIG1ldGFjbGFzcy4KICAgIGNsYXNzIG1ldGFjbGFzcyhtZXRhKToKCiAgICAgICAgZGVmIF9fbmV3X18oY2xzLCBuYW1lLCB0aGlzX2Jhc2VzLCBkKToKICAgICAgICAgICAgcmV0dXJuIG1ldGEobmFtZSwgYmFzZXMsIGQpCiAgICByZXR1cm4gdHlwZS5fX25ld19fKG1ldGFjbGFzcywgJ3RlbXBvcmFyeV9jbGFzcycsICgpLCB7fSkKCgpkZWYgYWRkX21ldGFjbGFzcyhtZXRhY2xhc3MpOgogICAgIiIiQ2xhc3MgZGVjb3JhdG9yIGZvciBjcmVhdGluZyBhIGNsYXNzIHdpdGggYSBtZXRhY2xhc3MuIiIiCiAgICBkZWYgd3JhcHBlcihjbHMpOgogICAgICAgIG9yaWdfdmFycyA9IGNscy5fX2RpY3RfXy5jb3B5KCkKICAgICAgICBzbG90cyA9IG9yaWdfdmFycy5nZXQoJ19fc2xvdHNfXycpCiAgICAgICAgaWYgc2xvdHMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoc2xvdHMsIHN0cik6CiAgICAgICAgICAgICAgICBzbG90cyA9IFtzbG90c10KICAgICAgICAgICAgZm9yIHNsb3RzX3ZhciBpbiBzbG90czoKICAgICAgICAgICAgICAgIG9yaWdfdmFycy5wb3Aoc2xvdHNfdmFyKQogICAgICAgIG9yaWdfdmFycy5wb3AoJ19fZGljdF9fJywgTm9uZSkKICAgICAgICBvcmlnX3ZhcnMucG9wKCdfX3dlYWtyZWZfXycsIE5vbmUpCiAgICAgICAgcmV0dXJuIG1ldGFjbGFzcyhjbHMuX19uYW1lX18sIGNscy5fX2Jhc2VzX18sIG9yaWdfdmFycykKICAgIHJldHVybiB3cmFwcGVyCgoKZGVmIHB5dGhvbl8yX3VuaWNvZGVfY29tcGF0aWJsZShrbGFzcyk6CiAgICAiIiIKICAgIEEgZGVjb3JhdG9yIHRoYXQgZGVmaW5lcyBfX3VuaWNvZGVfXyBhbmQgX19zdHJfXyBtZXRob2RzIHVuZGVyIFB5dGhvbiAyLgogICAgVW5kZXIgUHl0aG9uIDMgaXQgZG9lcyBub3RoaW5nLgoKICAgIFRvIHN1cHBvcnQgUHl0aG9uIDIgYW5kIDMgd2l0aCBhIHNpbmdsZSBjb2RlIGJhc2UsIGRlZmluZSBhIF9fc3RyX18gbWV0aG9kCiAgICByZXR1cm5pbmcgdGV4dCBhbmQgYXBwbHkgdGhpcyBkZWNvcmF0b3IgdG8gdGhlIGNsYXNzLgogICAgIiIiCiAgICBpZiBQWTI6CiAgICAgICAgaWYgJ19fc3RyX18nIG5vdCBpbiBrbGFzcy5fX2RpY3RfXzoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiQHB5dGhvbl8yX3VuaWNvZGVfY29tcGF0aWJsZSBjYW5ub3QgYmUgYXBwbGllZCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRvICVzIGJlY2F1c2UgaXQgZG9lc24ndCBkZWZpbmUgX19zdHJfXygpLiIgJQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtsYXNzLl9fbmFtZV9fKQogICAgICAgIGtsYXNzLl9fdW5pY29kZV9fID0ga2xhc3MuX19zdHJfXwogICAgICAgIGtsYXNzLl9fc3RyX18gPSBsYW1iZGEgc2VsZjogc2VsZi5fX3VuaWNvZGVfXygpLmVuY29kZSgndXRmLTgnKQogICAgcmV0dXJuIGtsYXNzCgoKIyBDb21wbGV0ZSB0aGUgbW92ZXMgaW1wbGVtZW50YXRpb24uCiMgVGhpcyBjb2RlIGlzIGF0IHRoZSBlbmQgb2YgdGhpcyBtb2R1bGUgdG8gc3BlZWQgdXAgbW9kdWxlIGxvYWRpbmcuCiMgVHVybiB0aGlzIG1vZHVsZSBpbnRvIGEgcGFja2FnZS4KX19wYXRoX18gPSBbXSAgIyByZXF1aXJlZCBmb3IgUEVQIDMwMiBhbmQgUEVQIDQ1MQpfX3BhY2thZ2VfXyA9IF9fbmFtZV9fICAjIHNlZSBQRVAgMzY2IEBSZXNlcnZlZEFzc2lnbm1lbnQKaWYgZ2xvYmFscygpLmdldCgiX19zcGVjX18iKSBpcyBub3QgTm9uZToKICAgIF9fc3BlY19fLnN1Ym1vZHVsZV9zZWFyY2hfbG9jYXRpb25zID0gW10gICMgUEVQIDQ1MSBAVW5kZWZpbmVkVmFyaWFibGUKIyBSZW1vdmUgb3RoZXIgc2l4IG1ldGEgcGF0aCBpbXBvcnRlcnMsIHNpbmNlIHRoZXkgY2F1c2UgcHJvYmxlbXMuIFRoaXMgY2FuCiMgaGFwcGVuIGlmIHNpeCBpcyByZW1vdmVkIGZyb20gc3lzLm1vZHVsZXMgYW5kIHRoZW4gcmVsb2FkZWQuIChTZXR1cHRvb2xzIGRvZXMKIyB0aGlzIGZvciBzb21lIHJlYXNvbi4pCmlmIHN5cy5tZXRhX3BhdGg6CiAgICBmb3IgaSwgaW1wb3J0ZXIgaW4gZW51bWVyYXRlKHN5cy5tZXRhX3BhdGgpOgogICAgICAgICMgSGVyZSdzIHNvbWUgcmVhbCBuYXN0aW5lc3M6IEFub3RoZXIgImluc3RhbmNlIiBvZiB0aGUgc2l4IG1vZHVsZSBtaWdodAogICAgICAgICMgYmUgZmxvYXRpbmcgYXJvdW5kLiBUaGVyZWZvcmUsIHdlIGNhbid0IHVzZSBpc2luc3RhbmNlKCkgdG8gY2hlY2sgZm9yCiAgICAgICAgIyB0aGUgc2l4IG1ldGEgcGF0aCBpbXBvcnRlciwgc2luY2UgdGhlIG90aGVyIHNpeCBpbnN0YW5jZSB3aWxsIGhhdmUKICAgICAgICAjIGluc2VydGVkIGFuIGltcG9ydGVyIHdpdGggZGlmZmVyZW50IGNsYXNzLgogICAgICAgIGlmICh0eXBlKGltcG9ydGVyKS5fX25hbWVfXyA9PSAiX1NpeE1ldGFQYXRoSW1wb3J0ZXIiIGFuZAogICAgICAgICAgICAgICAgaW1wb3J0ZXIubmFtZSA9PSBfX25hbWVfXyk6CiAgICAgICAgICAgIGRlbCBzeXMubWV0YV9wYXRoW2ldCiAgICAgICAgICAgIGJyZWFrCiAgICBkZWwgaSwgaW1wb3J0ZXIKIyBGaW5hbGx5LCBhZGQgdGhlIGltcG9ydGVyIHRvIHRoZSBtZXRhIHBhdGggaW1wb3J0IGhvb2suCnN5cy5tZXRhX3BhdGguYXBwZW5kKF9pbXBvcnRlcikKUEsBAhQDFAAAAAAA4rsrS4+n8VJ3AAAAdwAAABMAAAAAAAAAAAAAAIABAAAAAGFuc2libGUvX19pbml0X18ucHlQSwECFAMUAAAAAADiuytLncXxa0gAAABIAAAAIAAAAAAAAAAAAAAAgAGoAAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvX19pbml0X18ucHlQSwECFAMUAAAAAADiuytL3cujDjs7AAA7OwAAKQAAAAAAAAAAAAAAgAEuAQAAYW5zaWJsZV9tb2R1bGVfbmV0YXBwX2Vfc25hcHNob3RfZ3JvdXAucHlQSwECFAMUAAAAAADiuytLO985lTCKAQAwigEAHQAAAAAAAAAAAAAAgAGwPAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvYmFzaWMucHlQSwECFAMUAAAAAADiuytLBPWOi+gNAADoDQAAGwAAAAAAAAAAAAAAgAEbxwEAYW5zaWJsZS9tb2R1bGVfdXRpbHMvYXBpLnB5UEsBAhQDFAAAAAAA4rsrSyXctH4TEAAAExAAACIAAAAAAAAAAAAAAIABPNUBAGFuc2libGUvbW9kdWxlX3V0aWxzL3B5Y29tcGF0MjQucHlQSwECFAMUAAAAAADiuytLXYa1bzutAAA7rQAAHAAAAAAAAAAAAAAAgAGP5QEAYW5zaWJsZS9tb2R1bGVfdXRpbHMvdXJscy5weVBLAQIUAxQAAAAAAOK7K0sYF3L1AREAAAERAAAkAAAAAAAAAAAAAACAAQSTAgBhbnNpYmxlL21vZHVsZV91dGlscy9zaXgvX19pbml0X18ucHlQSwECFAMUAAAAAADiuytLtdgEBiUwAAAlMAAAHQAAAAAAAAAAAAAAgAFHpAIAYW5zaWJsZS9tb2R1bGVfdXRpbHMvX3RleHQucHlQSwECFAMUAAAAAADiuytLOOLH0ZF1AACRdQAAIAAAAAAAAAAAAAAAgAGn1AIAYW5zaWJsZS9tb2R1bGVfdXRpbHMvc2l4L19zaXgucHlQSwUGAAAAAAoACgD/AgAAdkoDAAAA"""
def invoke_module(module, modlib_path, json_params):
    pythonpath = os.environ.get('PYTHONPATH')
    if pythonpath:
        os.environ['PYTHONPATH'] = ':'.join((modlib_path, pythonpath))
    else:
        os.environ['PYTHONPATH'] = modlib_path
    p = subprocess.Popen(['/usr/bin/python', module], env=os.environ, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
    (stdout, stderr) = p.communicate(json_params)
    if not isinstance(stderr, (bytes, unicode)):
        stderr = stderr.read()
    if not isinstance(stdout, (bytes, unicode)):
        stdout = stdout.read()
    if PY3:
        sys.stderr.buffer.write(stderr)
        sys.stdout.buffer.write(stdout)
    else:
        sys.stderr.write(stderr)
        sys.stdout.write(stdout)
    return p.returncode
def debug(command, zipped_mod, json_params):
    basedir = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'debug_dir')
    args_path = os.path.join(basedir, 'args')
    script_path = os.path.join(basedir, 'ansible_module_netapp_e_snapshot_group.py')
    if command == 'explode':
        z = zipfile.ZipFile(zipped_mod)
        for filename in z.namelist():
            if filename.startswith('/'):
                raise Exception('Something wrong with this module zip file: should not contain absolute paths')
            dest_filename = os.path.join(basedir, filename)
            if dest_filename.endswith(os.path.sep) and not os.path.exists(dest_filename):
                os.makedirs(dest_filename)
            else:
                directory = os.path.dirname(dest_filename)
                if not os.path.exists(directory):
                    os.makedirs(directory)
                f = open(dest_filename, 'wb')
                f.write(z.read(filename))
                f.close()
        f = open(args_path, 'wb')
        f.write(json_params)
        f.close()
        print('Module expanded into:')
        print('%s' % basedir)
        exitcode = 0
    elif command == 'execute':
        pythonpath = os.environ.get('PYTHONPATH')
        if pythonpath:
            os.environ['PYTHONPATH'] = ':'.join((basedir, pythonpath))
        else:
            os.environ['PYTHONPATH'] = basedir
        p = subprocess.Popen(['/usr/bin/python', script_path, args_path],
                env=os.environ, shell=False, stdout=subprocess.PIPE,
                stderr=subprocess.PIPE, stdin=subprocess.PIPE)
        (stdout, stderr) = p.communicate()
        if not isinstance(stderr, (bytes, unicode)):
            stderr = stderr.read()
        if not isinstance(stdout, (bytes, unicode)):
            stdout = stdout.read()
        if PY3:
            sys.stderr.buffer.write(stderr)
            sys.stdout.buffer.write(stdout)
        else:
            sys.stderr.write(stderr)
            sys.stdout.write(stdout)
        return p.returncode
    elif command == 'excommunicate':
        sys.argv = ['netapp_e_snapshot_group', args_path]
        sys.path.insert(0, basedir)
        from ansible_module_netapp_e_snapshot_group import main
        main()
        print('WARNING: Module returned to wrapper instead of exiting')
        sys.exit(1)
    else:
        print('WARNING: Unknown debug command.  Doing nothing.')
        exitcode = 0
    return exitcode
if __name__ == '__main__':
    ANSIBALLZ_PARAMS = json.dumps({"ANSIBLE_MODULE_ARGS": json.load(sys.stdin)})
    if PY3:
        ANSIBALLZ_PARAMS = ANSIBALLZ_PARAMS.encode('utf-8')
    try:
        temp_path = tempfile.mkdtemp(prefix='ansible_')
        zipped_mod = os.path.join(temp_path, 'ansible_modlib.zip')
        modlib = open(zipped_mod, 'wb')
        modlib.write(base64.b64decode(ZIPDATA))
        modlib.close()
        if len(sys.argv) == 2:
            exitcode = debug(sys.argv[1], zipped_mod, ANSIBALLZ_PARAMS)
        else:
            z = zipfile.ZipFile(zipped_mod, mode='r')
            module = os.path.join(temp_path, 'ansible_module_netapp_e_snapshot_group.py')
            f = open(module, 'wb')
            f.write(z.read('ansible_module_netapp_e_snapshot_group.py'))
            f.close()
            z = zipfile.ZipFile(zipped_mod, mode='a')
            sitecustomize = u'import sys\nsys.path.insert(0,"%s")\n' %  zipped_mod
            sitecustomize = sitecustomize.encode('utf-8')
            zinfo = zipfile.ZipInfo()
            zinfo.filename = 'sitecustomize.py'
            zinfo.date_time = ( 2017, 9, 11, 23, 31, 4)
            z.writestr(zinfo, sitecustomize)
            z.close()
            exitcode = invoke_module(module, zipped_mod, ANSIBALLZ_PARAMS)
    finally:
        try:
            shutil.rmtree(temp_path)
        except OSError:
            pass
    sys.exit(exitcode)