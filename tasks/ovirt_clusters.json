{
  "input_method": "stdin", 
  "description": "Module to manage clusters in oVirt/RHV", 
  "parameters": {
    "comment": {
      "type": "Optional[String[0]]", 
      "description": "Comment of the cluster."
    }, 
    "ha_reservation": {
      "type": "Optional[String[0]]", 
      "description": "If I(True) enable the oVirt/RHV to monitor cluster capacity for highly available virtual machines."
    }, 
    "fence_skip_if_connectivity_broken": {
      "type": "Optional[String[0]]", 
      "description": "If I(True) fencing will be temporarily disabled if the percentage of hosts in the cluster that are experiencing connectivity issues is greater than or equal to the defined threshold."
    }, 
    "virt": {
      "type": "Optional[String[0]]", 
      "description": "If I(True), hosts in this cluster will be used to run virtual machines."
    }, 
    "threads_as_cores": {
      "type": "Optional[String[0]]", 
      "description": "If I(True) the exposed host threads would be treated as cores which can be utilized by virtual machines."
    }, 
    "gluster": {
      "type": "Optional[String[0]]", 
      "description": "If I(True), hosts in this cluster will be used as Gluster Storage server nodes, and not for running virtual machines."
    }, 
    "vm_reason": {
      "type": "Optional[String[0]]", 
      "description": "If I(True) enable an optional reason field when a virtual machine is shut down from the Manager, allowing the administrator to provide an explanation for the maintenance."
    }, 
    "fetch_nested": {
      "type": "Optional[String[0]]", 
      "description": "If I(True) the module will fetch additional data from the API."
    }, 
    "migration_bandwidth_limit": {
      "type": "Optional[String[0]]", 
      "description": "Set the I(custom) migration bandwidth limit."
    }, 
    "switch_type": {
      "type": "Optional[Enum[\"legacy\", \"ovs\"]]", 
      "description": "Type of switch to be used by all networks in given cluster. Either I(legacy) which is using linux brigde or I(ovs) using Open vSwitch."
    }, 
    "data_center": {
      "type": "Optional[String[0]]", 
      "description": "Datacenter name where cluster reside."
    }, 
    "ksm_numa": {
      "type": "Optional[String[0]]", 
      "description": "If I(True) enables KSM C(ksm) for best berformance inside NUMA nodes."
    }, 
    "description": {
      "type": "Optional[String[0]]", 
      "description": "Description of the cluster."
    }, 
    "cpu_arch": {
      "type": "Optional[Enum[\"x86_64\", \"ppc64\", \"undefined\"]]", 
      "description": "CPU architecture of cluster."
    }, 
    "rng_sources": {
      "type": "Optional[String[0]]", 
      "description": "List that specify the random number generator devices that all hosts in the cluster will use."
    }, 
    "network": {
      "type": "Optional[String[0]]", 
      "description": "Management network of cluster to access cluster hosts."
    }, 
    "state": {
      "type": "Optional[Enum[\"present\", \"absent\"]]", 
      "description": "Should the cluster be present or absent"
    }, 
    "ksm": {
      "type": "Optional[String[0]]", 
      "description": "I I(True) MoM enables to run Kernel Same-page Merging I(KSM) when necessary and when it can yield a memory saving benefit that outweighs its CPU cost."
    }, 
    "migration_compressed": {
      "type": "Optional[Enum[\"true\", \"false\", \"inherit\"]]", 
      "description": "If I(True) compression is used during live migration of the virtual machine."
    }, 
    "ballooning": {
      "type": "Optional[String[0]]", 
      "description": "If I(True) enable memory balloon optimization. Memory balloon is used to re-distribute / reclaim the host memory based on VM needs in a dynamic way."
    }, 
    "migration_auto_converge": {
      "type": "Optional[Enum[\"true\", \"false\", \"inherit\"]]", 
      "description": "If I(True) auto-convergence is used during live migration of virtual machines."
    }, 
    "fence_enabled": {
      "type": "Optional[String[0]]", 
      "description": "If I(True) enables fencing on the cluster."
    }, 
    "migration_policy": {
      "type": "Optional[Enum[\"legacy\", \"minimal_downtime\", \"suspend_workload\", \"post_copy\"]]", 
      "description": "A migration policy defines the conditions for live migrating virtual machines in the event of host failure."
    }, 
    "nested_attributes": {
      "type": "Optional[String[0]]", 
      "description": "Specifies list of the attributes which should be fetched from the API."
    }, 
    "resilience_policy": {
      "type": "Optional[Enum[\"do_not_migrate\", \"migrate\", \"migrate_highly_available\"]]", 
      "description": "The resilience policy defines how the virtual machines are prioritized in the migration."
    }, 
    "fence_connectivity_threshold": {
      "type": "Optional[String[0]]", 
      "description": "The threshold used by C(fence_skip_if_connectivity_broken)."
    }, 
    "spice_proxy": {
      "type": "Optional[String[0]]", 
      "description": "The proxy by which the SPICE client will connect to virtual machines."
    }, 
    "auth": {
      "type": "String[0]", 
      "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:"
    }, 
    "memory_policy": {
      "type": "Optional[Enum[\"disabled\", \"server\", \"desktop\"]]", 
      "description": "I(disabled) - Disables memory page sharing."
    }, 
    "migration_bandwidth": {
      "type": "Optional[Enum[\"auto\", \"hypervisor_default\", \"custom\"]]", 
      "description": "The bandwidth settings define the maximum bandwidth of both outgoing and incoming migrations per host."
    }, 
    "fence_skip_if_sd_active": {
      "type": "Optional[String[0]]", 
      "description": "If I(True) any hosts in the cluster that are Non Responsive and still connected to storage will not be fenced."
    }, 
    "scheduling_policy": {
      "type": "Optional[String[0]]", 
      "description": "Name of the scheduling policy to be used for cluster."
    }, 
    "wait": {
      "type": "Optional[String[0]]", 
      "description": "I(True) if the module should wait for the entity to get into desired state."
    }, 
    "compatibility_version": {
      "type": "Optional[String[0]]", 
      "description": "The compatibility version of the cluster. All hosts in this cluster must support at least this compatibility version."
    }, 
    "serial_policy_value": {
      "type": "Optional[String[0]]", 
      "description": "Allows you to specify a custom serial number."
    }, 
    "name": {
      "type": "String[0]", 
      "description": "Name of the cluster to manage."
    }, 
    "host_reason": {
      "type": "Optional[String[0]]", 
      "description": "If I(True) enable an optional reason field when a host is placed into maintenance mode from the Manager, allowing the administrator to provide an explanation for the maintenance."
    }, 
    "poll_interval": {
      "type": "Optional[String[0]]", 
      "description": "Number of the seconds the module waits until another poll request on entity status is sent."
    }, 
    "cpu_type": {
      "type": "Optional[String[0]]", 
      "description": "CPU codename. For example I(Intel SandyBridge Family)."
    }, 
    "timeout": {
      "type": "Optional[String[0]]", 
      "description": "The amount of time in seconds the module should wait for the instance to get into desired state."
    }, 
    "serial_policy": {
      "type": "Optional[String[0]]", 
      "description": "Specify a serial number policy for the virtual machines in the cluster."
    }, 
    "trusted_service": {
      "type": "Optional[String[0]]", 
      "description": "If (True) enable integration with an OpenAttestation server."
    }
  }
}