{
  "description": "Module to manage storage domains in oVirt/RHV", 
  "parameters": {
    "comment": {
      "type": "Optional[String]", 
      "description": "Comment of the storage domain."
    }, 
    "fcp": {
      "type": "Optional[String]", 
      "description": "Dictionary with values for fibre channel storage type: C(address) - Address of the fibre channel storage server. C(port) - Port of the fibre channel storage server. C(lun_id) - LUN id. Note that these parameters are not idempotent."
    }, 
    "state": {
      "type": "Optional[String]", 
      "description": "Should the storage domain be present/absent/maintenance/unattached"
    }, 
    "description": {
      "type": "Optional[String]", 
      "description": "Description of the storage domain."
    }, 
    "format": {
      "type": "Optional[String]", 
      "description": "If I(True) storage domain will be formatted after removing it from oVirt/RHV. This parameter is relevant only when C(state) is I(absent)."
    }, 
    "iscsi": {
      "type": "Optional[String]", 
      "description": "Dictionary with values for iSCSI storage type: C(address) - Address of the iSCSI storage server. C(port) - Port of the iSCSI storage server. C(target) - The target IQN for the storage device. C(lun_id) - LUN id(s). C(username) - A CHAP user name for logging into a target. C(password) - A CHAP password for logging into a target. C(override_luns) - If I(True) ISCSI storage domain luns will be overridden before adding. Note that these parameters are not idempotent."
    }, 
    "posixfs": {
      "type": "Optional[String]", 
      "description": "Dictionary with values for PosixFS storage type: C(path) - Path of the mount point. E.g.: /path/to/my/data C(vfs_type) - Virtual File System type. C(mount_options) - Option which will be passed when mounting storage. Note that these parameters are not idempotent."
    }, 
    "poll_interval": {
      "type": "Optional[String]", 
      "description": "Number of the seconds the module waits until another poll request on entity status is sent."
    }, 
    "glusterfs": {
      "type": "Optional[String]", 
      "description": "Dictionary with values for GlusterFS storage type: C(address) - Address of the Gluster server. E.g.: myserver.mydomain.com C(path) - Path of the mount point. E.g.: /path/to/my/data C(mount_options) - Option which will be passed when mounting storage. Note that these parameters are not idempotent."
    }, 
    "nested_attributes": {
      "type": "Optional[String]", 
      "description": "Specifies list of the attributes which should be fetched from the API. This parameter apply only when C(fetch_nested) is I(true)."
    }, 
    "name": {
      "type": "Optional[String]", 
      "description": "Name of the storage domain to manage."
    }, 
    "timeout": {
      "type": "Optional[String]", 
      "description": "The amount of time in seconds the module should wait for the instance to get into desired state."
    }, 
    "fetch_nested": {
      "type": "Optional[String]", 
      "description": "If I(True) the module will fetch additional data from the API. It will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes)."
    }, 
    "localfs": {
      "type": "Optional[String]", 
      "description": "Dictionary with values for localfs storage type: C(path) - Path of the mount point. E.g.: /path/to/my/data Note that these parameters are not idempotent."
    }, 
    "nfs": {
      "type": "Optional[String]", 
      "description": "Dictionary with values for NFS storage type: C(address) - Address of the NFS server. E.g.: myserver.mydomain.com C(path) - Path of the mount point. E.g.: /path/to/my/data C(version) - NFS version. One of: I(auto), I(v3), I(v4) or I(v4_1). C(timeout) - The time in tenths of a second to wait for a response before retrying NFS requests. Range 0 to 65535. C(retrans) - The number of times to retry a request before attempting further recovery actions. Range 0 to 65535. Note that these parameters are not idempotent."
    }, 
    "auth": {
      "type": "String", 
      "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt: C(username)[I(required)] - The name of the user, something like I(admin@internal). Default value is set by I(OVIRT_USERNAME) environment variable. C(password)[I(required)] - The password of the user. Default value is set by I(OVIRT_PASSWORD) environment variable. C(url)[I(required)] - A string containing the base URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`. Default value is set by I(OVIRT_URL) environment variable. C(token) - Token to be used instead of login with username/password. Default value is set by I(OVIRT_TOKEN) environment variable. C(insecure) - A boolean flag that indicates if the server TLS certificate and host name should be checked. C(ca_file) - A PEM file containing the trusted CA certificates. The certificate presented by the server will be verified using these CA certificates. If `C(ca_file)` parameter is not set, system wide CA certificate store is used. Default value is set by I(OVIRT_CAFILE) environment variable. C(kerberos) - A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication."
    }, 
    "domain_function": {
      "type": "Optional[String]", 
      "description": "Function of the storage domain. This parameter isn't idempotent, it's not possible to change domain function of storage domain."
    }, 
    "data_center": {
      "type": "Optional[String]", 
      "description": "Data center name where storage domain should be attached. This parameter isn't idempotent, it's not possible to change data center of storage domain."
    }, 
    "host": {
      "type": "Optional[String]", 
      "description": "Host to be used to mount storage."
    }, 
    "destroy": {
      "type": "Optional[String]", 
      "description": "Logical remove of the storage domain. If I(true) retains the storage domain's data for import. This parameter is relevant only when C(state) is I(absent)."
    }, 
    "wait": {
      "type": "Optional[String]", 
      "description": "I(True) if the module should wait for the entity to get into desired state."
    }
  }
}