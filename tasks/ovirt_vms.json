{
  "description": "Module to manage Virtual Machines in oVirt/RHV", 
  "parameters": {
    "comment": {
      "type": "Optional[String]", 
      "description": "Comment of the Virtual Machine."
    }, 
    "memory_guaranteed": {
      "type": "Optional[String]", 
      "description": "Amount of minimal guaranteed memory of the Virtual Machine. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB). C(memory_guaranteed) parameter can't be lower than C(memory) parameter. Default value is set by engine."
    }, 
    "force": {
      "type": "Optional[String]", 
      "description": "Please check to I(Synopsis) to more detailed description of force parameter, it can behave differently in different situations."
    }, 
    "cloud_init_nics": {
      "type": "Optional[String]", 
      "description": "List of dictionaries representing network interafaces to be setup by cloud init. This option is used, when user needs to setup more network interfaces via cloud init. If one network interface is enough, user should use C(cloud_init) I(nic_*) parameters. C(cloud_init) I(nic_*) parameters are merged with C(cloud_init_nics) parameters. Dictionary can contain following values: C(nic_boot_protocol) - Set boot protocol of the network interface of Virtual Machine. Can be one of none, dhcp or static. C(nic_ip_address) - If boot protocol is static, set this IP address to network interface of Virtual Machine. C(nic_netmask) - If boot protocol is static, set this netmask to network interface of Virtual Machine. C(nic_gateway) - If boot protocol is static, set this gateway to network interface of Virtual Machine. C(nic_name) - Set name to network interface of Virtual Machine. C(nic_on_boot) - If I(True) network interface will be set to start on boot."
    }, 
    "xen": {
      "type": "Optional[String]", 
      "description": "Dictionary of values to be used to connect to XEN and import a virtual machine to oVirt. Dictionary can contain following values: C(url) - The URL to be passed to the I(virt-v2v) tool for conversion. For example: I(xen+ssh://root@zen.server). This is required paramater. C(drivers_iso) - The name of the ISO containing drivers that can be used during the I(virt-v2v) conversion process. C(sparse) - Specifies the disk allocation policy of the resulting virtual machine: I(true) for sparse, I(false) for preallocated. Default value is I(true). C(storage_domain) - Specifies the target storage domain for converted disks. This is required parameter."
    }, 
    "cluster": {
      "type": "Optional[String]", 
      "description": "Name of the cluster, where Virtual Machine should be created. Required if creating VM."
    }, 
    "fetch_nested": {
      "type": "Optional[String]", 
      "description": "If I(True) the module will fetch additional data from the API. It will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes)."
    }, 
    "timezone": {
      "type": "Optional[String]", 
      "description": "Sets time zone offset of the guest hardware clock. For example: Etc/GMT"
    }, 
    "id": {
      "type": "Optional[String]", 
      "description": "ID of the Virtual Machine to manage."
    }, 
    "vmware": {
      "type": "Optional[String]", 
      "description": "Dictionary of values to be used to connect to VMware and import a virtual machine to oVirt. Dictionary can contain following values: C(username) - The username to authenticate against the VMware. C(password) - The password to authenticate against the VMware. C(url) - The URL to be passed to the I(virt-v2v) tool for conversion. For example: I(vpx://wmware_user@vcenter-host/DataCenter/Cluster/esxi-host?no_verify=1) C(drivers_iso) - The name of the ISO containing drivers that can be used during the I(virt-v2v) conversion process. C(sparse) - Specifies the disk allocation policy of the resulting virtual machine: I(true) for sparse, I(false) for preallocated. Default value is I(true). C(storage_domain) - Specifies the target storage domain for converted disks. This is required parameter."
    }, 
    "high_availability": {
      "type": "Optional[String]", 
      "description": "If I(True) Virtual Machine will be set as highly available. If I(False) Virtual Machine won't be set as highly available. If no value is passed, default value is set by oVirt/RHV engine."
    }, 
    "storage_domain": {
      "type": "Optional[String]", 
      "description": "Name of the storage domain where all template disks should be created. This parameter is considered only when C(template) is provided. C(**IMPORTANT**) This parameter is not idempotent, if the VM exists and you specfiy different storage domain, disk won't move."
    }, 
    "kernel_params": {
      "type": "Optional[String]", 
      "description": "Kernel command line parameters (formatted as string) to be used with the kernel specified by C(kernel_path) option."
    }, 
    "nics": {
      "type": "Optional[String]", 
      "description": "List of NICs, which should be attached to Virtual Machine. NIC is described by following dictionary: C(name) - Name of the NIC. C(profile_name) - Profile name where NIC should be attached. C(interface) -  Type of the network interface. One of following: I(virtio), I(e1000), I(rtl8139), default is I(virtio). C(mac_address) - Custom MAC address of the network interface, by default it's obtained from MAC pool. C(Note:) This parameter is used only when C(state) is I(running) or I(present) and is able to only create NICs. To manage NICs of the VM in more depth please use M(ovirt_nics) module instead."
    }, 
    "disk_format": {
      "type": "Optional[String]", 
      "description": "Specify format of the disk. If (cow) format is used, disk will by created as sparse, so space will be allocated for the volume as needed, also known as I(thin provision). If (raw) format is used, disk storage will be allocated right away, also known as I(preallocated). Note that this option isn't idempotent as it's not currently possible to change format of the disk via API. This parameter is considered only when C(template) and C(storage domain) is provided."
    }, 
    "sysprep": {
      "type": "Optional[String]", 
      "description": "Dictionary with values for Windows Virtual Machine initialization using sysprep: C(host_name) - Hostname to be set to Virtual Machine when deployed. C(active_directory_ou) - Active Directory Organizational Unit, to be used for login of user. C(org_name) - Organization name to be set to Windows Virtual Machine. C(domain) - Domain to be set to Windows Virtual Machine. C(timezone) - Timezone to be set to Windows Virtual Machine. C(ui_language) - UI language of the Windows Virtual Machine. C(system_locale) - System localization of the Windows Virtual Machine. C(input_locale) - Input localization of the Windows Virtual Machine. C(windows_license_key) - License key to be set to Windows Virtual Machine. C(user_name) - Username to be used for set password to Windows Virtual Machine. C(root_password) - Password to be set for username to Windows Virtual Machine."
    }, 
    "cpu_cores": {
      "type": "Optional[String]", 
      "description": "Number of virtual CPUs cores of the Virtual Machine. Default value is set by oVirt/RHV engine."
    }, 
    "state": {
      "type": "Optional[String]", 
      "description": "Should the Virtual Machine be running/stopped/present/absent/suspended/next_run. I(present) and I(running) are equal states. I(next_run) state updates the VM and if the VM has next run configuration it will be rebooted. Please check I(notes) to more detailed description of states."
    }, 
    "cpu_sockets": {
      "type": "Optional[String]", 
      "description": "Number of virtual CPUs sockets of the Virtual Machine. Default value is set by oVirt/RHV engine."
    }, 
    "delete_protected": {
      "type": "Optional[String]", 
      "description": "If I(True) Virtual Machine will be set as delete protected. If I(False) Virtual Machine won't be set as delete protected. If no value is passed, default value is set by oVirt/RHV engine."
    }, 
    "memory": {
      "type": "Optional[String]", 
      "description": "Amount of memory of the Virtual Machine. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB). Default value is set by engine."
    }, 
    "cd_iso": {
      "type": "Optional[String]", 
      "description": "ISO file from ISO storage domain which should be attached to Virtual Machine. If you pass empty string the CD will be ejected from VM. If used with C(state) I(running) or I(present) and VM is running the CD will be attached to VM. If used with C(state) I(running) or I(present) and VM is down the CD will be attached to VM persistently."
    }, 
    "clone_permissions": {
      "type": "Optional[String]", 
      "description": "If I(True) then the permissions of the template (only the direct ones, not the inherited ones) will be copied to the created virtual machine. This parameter is used only when C(state) is I(running) or I(present) and VM didn't exist before."
    }, 
    "type": {
      "type": "Optional[String]", 
      "description": "Type of the Virtual Machine. Default value is set by oVirt/RHV engine."
    }, 
    "initrd_path": {
      "type": "Optional[String]", 
      "description": "Path to an initial ramdisk to be used with the kernel specified by C(kernel_path) option. Ramdisk image must be stored on either the ISO domain or on the host's storage."
    }, 
    "disks": {
      "type": "Optional[String]", 
      "description": "List of disks, which should be attached to Virtual Machine. Disk is described by following dictionary: C(name) - Name of the disk. Either C(name) or C(id) is reuqired. C(id) - ID of the disk. Either C(name) or C(id) is reuqired. C(interface) - Interface of the disk, either I(virtio) or I(IDE), default is I(virtio). C(bootable) - I(True) if the disk should be bootable, default is non bootable. C(activate) - I(True) if the disk should be activated, default is activated. C(Note:) This parameter is used only when C(state) is I(running) or I(present) and is able to only attach disks. To manage disks of the VM in more depth please use M(ovirt_disks) module instead."
    }, 
    "description": {
      "type": "Optional[String]", 
      "description": "Description of the Virtual Machine."
    }, 
    "clone": {
      "type": "Optional[String]", 
      "description": "If I(True) then the disks of the created virtual machine will be cloned and independent of the template. This parameter is used only when C(state) is I(running) or I(present) and VM didn't exist before."
    }, 
    "kvm": {
      "type": "Optional[String]", 
      "description": "Dictionary of values to be used to connect to kvm and import a virtual machine to oVirt. Dictionary can contain following values: C(name) - The name of the KVM virtual machine. C(username) - The username to authenticate against the KVM. C(password) - The password to authenticate against the KVM. C(url) - The URL to be passed to the I(virt-v2v) tool for conversion. For example: I(qemu:///system). This is required paramater. C(drivers_iso) - The name of the ISO containing drivers that can be used during the I(virt-v2v) conversion process. C(sparse) - Specifies the disk allocation policy of the resulting virtual machine: I(true) for sparse, I(false) for preallocated. Default value is I(true). C(storage_domain) - Specifies the target storage domain for converted disks. This is required parameter."
    }, 
    "boot_devices": {
      "type": "Optional[String]", 
      "description": "List of boot devices which should be used to boot. Choices I(network), I(hd) and I(cdrom). For example: ['cdrom', 'hd']. Default value is set by oVirt/RHV engine."
    }, 
    "nested_attributes": {
      "type": "Optional[String]", 
      "description": "Specifies list of the attributes which should be fetched from the API. This parameter apply only when C(fetch_nested) is I(true)."
    }, 
    "host": {
      "type": "Optional[String]", 
      "description": "Specify host where Virtual Machine should be running. By default the host is chosen by engine scheduler. This parameter is used only when C(state) is I(running) or I(present)."
    }, 
    "serial_policy": {
      "type": "Optional[String]", 
      "description": "Specify a serial number policy for the Virtual Machine. Following options are supported: C(vm) - Sets the Virtual Machine's UUID as its serial number. C(host) - Sets the host's UUID as the Virtual Machine's serial number. C(custom) - Allows you to specify a custom serial number in C(serial_policy_value)."
    }, 
    "auth": {
      "type": "String", 
      "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt: C(username)[I(required)] - The name of the user, something like I(admin@internal). Default value is set by I(OVIRT_USERNAME) environment variable. C(password)[I(required)] - The password of the user. Default value is set by I(OVIRT_PASSWORD) environment variable. C(url)[I(required)] - A string containing the base URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`. Default value is set by I(OVIRT_URL) environment variable. C(token) - Token to be used instead of login with username/password. Default value is set by I(OVIRT_TOKEN) environment variable. C(insecure) - A boolean flag that indicates if the server TLS certificate and host name should be checked. C(ca_file) - A PEM file containing the trusted CA certificates. The certificate presented by the server will be verified using these CA certificates. If `C(ca_file)` parameter is not set, system wide CA certificate store is used. Default value is set by I(OVIRT_CAFILE) environment variable. C(kerberos) - A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication."
    }, 
    "wait": {
      "type": "Optional[String]", 
      "description": "I(True) if the module should wait for the entity to get into desired state."
    }, 
    "use_latest_template_version": {
      "type": "Optional[String]", 
      "description": "Specify if latest template version should be used, when running a stateless VM. If this parameter is set to I(true) stateless VM is created."
    }, 
    "stateless": {
      "type": "Optional[String]", 
      "description": "If I(True) Virtual Machine will be set as stateless. If I(False) Virtual Machine will be unset as stateless. If no value is passed, default value is set by oVirt/RHV engine."
    }, 
    "operating_system": {
      "type": "Optional[String]", 
      "description": "Operating system of the Virtual Machine. Default value is set by oVirt/RHV engine."
    }, 
    "serial_policy_value": {
      "type": "Optional[String]", 
      "description": "Allows you to specify a custom serial number. This parameter is used only when C(serial_policy) is I(custom)."
    }, 
    "name": {
      "type": "Optional[String]", 
      "description": "Name of the Virtual Machine to manage. If VM don't exists C(name) is required. Otherwise C(id) or C(name) can be used."
    }, 
    "kernel_path": {
      "type": "Optional[String]", 
      "description": "Path to a kernel image used to boot the virtual machine. Kernel image must be stored on either the ISO domain or on the host's storage."
    }, 
    "cloud_init": {
      "type": "Optional[String]", 
      "description": "Dictionary with values for Unix-like Virtual Machine initialization using cloud init: C(host_name) - Hostname to be set to Virtual Machine when deployed. C(timezone) - Timezone to be set to Virtual Machine when deployed. C(user_name) - Username to be used to set password to Virtual Machine when deployed. C(root_password) - Password to be set for user specified by C(user_name) parameter. C(authorized_ssh_keys) - Use this SSH keys to login to Virtual Machine. C(regenerate_ssh_keys) - If I(True) SSH keys will be regenerated on Virtual Machine. C(custom_script) - Cloud-init script which will be executed on Virtual Machine when deployed. C(dns_servers) - DNS servers to be configured on Virtual Machine. C(dns_search) - DNS search domains to be configured on Virtual Machine. C(nic_boot_protocol) - Set boot protocol of the network interface of Virtual Machine. Can be one of none, dhcp or static. C(nic_ip_address) - If boot protocol is static, set this IP address to network interface of Virtual Machine. C(nic_netmask) - If boot protocol is static, set this netmask to network interface of Virtual Machine. C(nic_gateway) - If boot protocol is static, set this gateway to network interface of Virtual Machine. C(nic_name) - Set name to network interface of Virtual Machine. C(nic_on_boot) - If I(True) network interface will be set to start on boot."
    }, 
    "template_version": {
      "type": "Optional[String]", 
      "description": "Version number of the template to be used for VM. By default the latest available version of the template is used."
    }, 
    "poll_interval": {
      "type": "Optional[String]", 
      "description": "Number of the seconds the module waits until another poll request on entity status is sent."
    }, 
    "instance_type": {
      "type": "Optional[String]", 
      "description": "Name of virtual machine's hardware configuration. By default no instance type is used."
    }, 
    "template": {
      "type": "Optional[String]", 
      "description": "Name of the template, which should be used to create Virtual Machine. Required if creating VM. If template is not specified and VM doesn't exist, VM will be created from I(Blank) template."
    }, 
    "timeout": {
      "type": "Optional[String]", 
      "description": "The amount of time in seconds the module should wait for the instance to get into desired state."
    }, 
    "cpu_shares": {
      "type": "Optional[String]", 
      "description": "Set a CPU shares for this Virtual Machine. Default value is set by oVirt/RHV engine."
    }
  }
}