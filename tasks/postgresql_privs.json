{
  "description": "Grant or revoke privileges on PostgreSQL database objects.", 
  "parameters": {
    "objs": {
      "type": "Optional[String]", 
      "description": "Comma separated list of database objects to set privileges on. If I(type) is C(table) or C(sequence), the special value C(ALL_IN_SCHEMA) can be provided instead to specify all database objects of type I(type) in the schema specified via I(schema). (This also works with PostgreSQL < 9.0.) If I(type) is C(database), this parameter can be omitted, in which case privileges are set for the database specified via I(database). If I(type) is I(function), colons (\":\") in object names will be replaced with commas (needed to specify function signatures, see examples) Alias: I(obj)"
    }, 
    "ssl_rootcert": {
      "type": "Optional[String]", 
      "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s). If the file exists, the server's certificate will be verified to be signed by one of these authorities."
    }, 
    "ssl_mode": {
      "type": "Optional[String]", 
      "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server. See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes. Default of C(prefer) matches libpq default."
    }, 
    "roles": {
      "type": "String", 
      "description": "Comma separated list of role (user/group) names to set permissions for. The special value C(PUBLIC) can be provided instead to set permissions for the implicitly defined PUBLIC group. Alias: I(role)"
    }, 
    "database": {
      "type": "String", 
      "description": "Name of database to connect to. Alias: I(db)"
    }, 
    "privs": {
      "type": "Optional[String]", 
      "description": "Comma separated list of privileges to grant/revoke. Alias: I(priv)"
    }, 
    "host": {
      "type": "Optional[String]", 
      "description": "Database host address. If unspecified, connect via Unix socket. Alias: I(login_host)"
    }, 
    "unix_socket": {
      "type": "Optional[String]", 
      "description": "Path to a Unix domain socket for local connections. Alias: I(login_unix_socket)"
    }, 
    "state": {
      "type": "Optional[String]", 
      "description": "If C(present), the specified privileges are granted, if C(absent) they are revoked."
    }, 
    "login": {
      "type": "Optional[String]", 
      "description": "The username to authenticate with. Alias: I(login_user)"
    }, 
    "password": {
      "type": "Optional[String]", 
      "description": "The password to authenticate with. Alias: I(login_password))"
    }, 
    "type": {
      "type": "Optional[String]", 
      "description": "Type of database object to set privileges on."
    }, 
    "port": {
      "type": "Optional[String]", 
      "description": "Database port to connect to."
    }, 
    "grant_option": {
      "type": "Optional[String]", 
      "description": "Whether C(role) may grant/revoke the specified privileges/group memberships to others. Set to C(no) to revoke GRANT OPTION, leave unspecified to make no changes. I(grant_option) only has an effect if I(state) is C(present). Alias: I(admin_option)"
    }, 
    "schema": {
      "type": "Optional[String]", 
      "description": "Schema that contains the database objects specified via I(objs). May only be provided if I(type) is C(table), C(sequence) or C(function). Defaults to  C(public) in these cases."
    }
  }
}