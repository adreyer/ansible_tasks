{
  "input_method": "stdin", 
  "description": "Add or remove PostgreSQL users (roles) from a remote host and, optionally, grant the users access to an existing database or tables.", 
  "parameters": {
    "ssl_rootcert": {
      "type": "Optional[String[0]]", 
      "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s). If the file exists, the server's certificate will be verified to be signed by one of these authorities."
    }, 
    "ssl_mode": {
      "type": "Optional[Enum[\"disable\", \"allow\", \"prefer\", \"require\", \"verify-ca\", \"verify-full\"]]", 
      "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server."
    }, 
    "name": {
      "type": "String[0]", 
      "description": "name of the user (role) to add or remove"
    }, 
    "no_password_changes": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "if C(yes), don't inspect database for password changes. Effective when C(pg_authid) is not accessible (such as AWS RDS). Otherwise, make password changes as necessary."
    }, 
    "login_user": {
      "type": "Optional[String[0]]", 
      "description": "User (role) used to authenticate with PostgreSQL"
    }, 
    "login_host": {
      "type": "Optional[String[0]]", 
      "description": "Host running PostgreSQL."
    }, 
    "expires": {
      "type": "Optional[String[0]]", 
      "description": "sets the user's password expiration."
    }, 
    "db": {
      "type": "Optional[String[0]]", 
      "description": "name of database where permissions will be granted"
    }, 
    "role_attr_flags": {
      "type": "Optional[Enum[\"[NO]SUPERUSER\", \"[NO]CREATEROLE\", \"[NO]CREATEUSER\", \"[NO]CREATEDB\", \"[NO]INHERIT\", \"[NO]LOGIN\", \"[NO]REPLICATION\", \"[NO]BYPASSRLS\"]]", 
      "description": "PostgreSQL role attributes string in the format: CREATEDB,CREATEROLE,SUPERUSER"
    }, 
    "login_unix_socket": {
      "type": "Optional[String[0]]", 
      "description": "Path to a Unix domain socket for local connections"
    }, 
    "state": {
      "type": "Optional[Enum[\"present\", \"absent\"]]", 
      "description": "The user (role) state"
    }, 
    "encrypted": {
      "type": "Optional[String[0]]", 
      "description": "whether the password is stored hashed in the database. boolean. Passwords can be passed already hashed or unhashed, and postgresql ensures the stored password is hashed when encrypted is set."
    }, 
    "login_password": {
      "type": "Optional[String[0]]", 
      "description": "Password used to authenticate with PostgreSQL"
    }, 
    "password": {
      "type": "Optional[String[0]]", 
      "description": "set the user's password, before 1.4 this was required."
    }, 
    "port": {
      "type": "Optional[String[0]]", 
      "description": "Database port to connect to."
    }, 
    "fail_on_user": {
      "type": "Optional[Enum[\"yes\", \"no\"]]", 
      "description": "if C(yes), fail when user can't be removed. Otherwise just log and continue"
    }, 
    "priv": {
      "type": "Optional[String[0]]", 
      "description": "PostgreSQL privileges string in the format: C(table:priv1,priv2)"
    }
  }
}