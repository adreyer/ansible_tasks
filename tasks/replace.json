{
  "description": "Replace all instances of a particular string in a file using a back-referenced regular expression.", 
  "parameters": {
    "seuser": {
      "type": "Optional[String]", 
      "description": "User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available."
    }, 
    "group": {
      "type": "Optional[String]", 
      "description": "Name of the group that should own the file/directory, as would be fed to I(chown)."
    }, 
    "encoding": {
      "type": "Optional[String]", 
      "description": "The character encoding for reading and writing the file."
    }, 
    "unsafe_writes": {
      "type": "Optional[String]", 
      "description": "Normally this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, sometimes systems are configured or just broken in ways that prevent this. One example are docker mounted files, they cannot be updated atomically and can only be done in an unsafe manner. This boolean option allows ansible to fall back to unsafe methods of updating files for those cases in which you do not have any other choice. Be aware that this is subject to race conditions and can lead to data corruption."
    }, 
    "selevel": {
      "type": "Optional[String]", 
      "description": "Level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). C(_default) feature works as for I(seuser)."
    }, 
    "after": {
      "type": "Optional[String]", 
      "description": "If specified, the line after the replace/remove will start. Can be used in combination with C(before). Uses Python regular expressions; see U(http://docs.python.org/2/library/re.html)."
    }, 
    "serole": {
      "type": "Optional[String]", 
      "description": "Role part of SELinux file context, C(_default) feature works as for I(seuser)."
    }, 
    "replace": {
      "type": "Optional[String]", 
      "description": "The string to replace regexp matches. May contain backreferences that will get expanded with the regexp capture groups if the regexp matches. If not set, matches are removed entirely."
    }, 
    "path": {
      "type": "String", 
      "description": "The file to modify. Before 2.3 this option was only usable as I(dest), I(destfile) and I(name)."
    }, 
    "setype": {
      "type": "Optional[String]", 
      "description": "Type part of SELinux file context, C(_default) feature works as for I(seuser)."
    }, 
    "mode": {
      "type": "Optional[String]", 
      "description": "Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r))."
    }, 
    "follow": {
      "type": "Optional[String]", 
      "description": "This flag indicates that filesystem links, if they exist, should be followed."
    }, 
    "owner": {
      "type": "Optional[String]", 
      "description": "Name of the user that should own the file/directory, as would be fed to I(chown)."
    }, 
    "regexp": {
      "type": "String", 
      "description": "The regular expression to look for in the contents of the file. Uses Python regular expressions; see U(http://docs.python.org/2/library/re.html). Uses multiline mode, which means C(^) and C($) match the beginning and end respectively of I(each line) of the file. Note that, as of ansible 2, short form tasks should have any escape sequences backslash-escaped in order to prevent them being parsed as string literal escapes. See the examples."
    }, 
    "validate": {
      "type": "Optional[String]", 
      "description": "The validation command to run before copying into place. The path to the file to validate is passed in via '%s' which must be present as in the example below. The command is passed securely so shell features like expansion and pipes won't work."
    }, 
    "attributes": {
      "type": "Optional[String]", 
      "description": "Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr)."
    }, 
    "backup": {
      "type": "Optional[String]", 
      "description": "Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."
    }, 
    "others": {
      "type": "Optional[String]", 
      "description": "All arguments accepted by the M(file) module also work here."
    }, 
    "before": {
      "type": "Optional[String]", 
      "description": "If specified, the line before the replace/remove will occur. Can be used in combination with C(after). Uses Python regular expressions; see U(http://docs.python.org/2/library/re.html)."
    }
  }
}