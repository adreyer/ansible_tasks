#!/usr/bin/python
# -*- coding: utf-8 -*-
ANSIBALLZ_WRAPPER = True # For test-module script to tell this is a ANSIBALLZ_WRAPPER
import os
import os.path
import sys
import __main__
scriptdir = None
try:
    scriptdir = os.path.dirname(os.path.abspath(__main__.__file__))
except (AttributeError, OSError):
    pass
if scriptdir is not None:
    sys.path = [p for p in sys.path if p != scriptdir]
import base64
import json
import shutil
import zipfile
import tempfile
import subprocess
if sys.version_info < (3,):
    bytes = str
    PY3 = False
else:
    unicode = str
    PY3 = True
try:
    from io import BytesIO as IOStream
except ImportError:
    from StringIO import StringIO as IOStream
ZIPDATA = """UEsDBBQAAAAAANa7K0uPp/FSdwAAAHcAAAATAAAAYW5zaWJsZS9fX2luaXRfXy5weWZyb20gcGtndXRpbCBpbXBvcnQgZXh0ZW5kX3BhdGgKX19wYXRoX189ZXh0ZW5kX3BhdGgoX19wYXRoX18sX19uYW1lX18pCl9fdmVyc2lvbl9fPSIyLjQuMCIKX19hdXRob3JfXz0iQW5zaWJsZSwgSW5jLiIKUEsDBBQAAAAAANa7K0udxfFrSAAAAEgAAAAgAAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvX19pbml0X18ucHlmcm9tIHBrZ3V0aWwgaW1wb3J0IGV4dGVuZF9wYXRoCl9fcGF0aF9fPWV4dGVuZF9wYXRoKF9fcGF0aF9fLF9fbmFtZV9fKQpQSwMEFAAAAAAA1rsrSzwxwHugIwAAoCMAABoAAABhbnNpYmxlX21vZHVsZV9zZW5kZ3JpZC5weSMhL3Vzci9iaW4vcHl0aG9uCiMgLSotIGNvZGluZzogdXRmLTggLSotCgojIChjKSAyMDE1LCBNYXR0IE1ha2FpIDxtYXR0aGV3Lm1ha2FpQGdtYWlsLmNvbT4KIwojIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIEFuc2libGUKIwojIEFuc2libGUgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQojIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5CiMgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKIyAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgojCiMgQW5zaWJsZSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAojIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiMgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQojIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCiMKIyBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQojIGFsb25nIHdpdGggQW5zaWJsZS4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi4KCkFOU0lCTEVfTUVUQURBVEEgPSB7J21ldGFkYXRhX3ZlcnNpb24nOiAnMS4wJywKICAgICAgICAgICAgICAgICAgICAnc3RhdHVzJzogWydwcmV2aWV3J10sCiAgICAgICAgICAgICAgICAgICAgJ3N1cHBvcnRlZF9ieSc6ICdjb21tdW5pdHknfQoKCkRPQ1VNRU5UQVRJT04gPSAnJycKLS0tCnZlcnNpb25fYWRkZWQ6ICIyLjAiCm1vZHVsZTogc2VuZGdyaWQKc2hvcnRfZGVzY3JpcHRpb246IFNlbmRzIGFuIGVtYWlsIHdpdGggdGhlIFNlbmRHcmlkIEFQSQpkZXNjcmlwdGlvbjoKICAgLSAiU2VuZHMgYW4gZW1haWwgd2l0aCBhIFNlbmRHcmlkIGFjY291bnQgdGhyb3VnaCB0aGVpciBBUEksIG5vdCB0aHJvdWdoCiAgICAgdGhlIFNNVFAgc2VydmljZS4iCm5vdGVzOgogICAtICJUaGlzIG1vZHVsZSBpcyBub24taWRlbXBvdGVudCBiZWNhdXNlIGl0IHNlbmRzIGFuIGVtYWlsIHRocm91Z2ggdGhlCiAgICAgZXh0ZXJuYWwgQVBJLiBJdCBpcyBpZGVtcG90ZW50IG9ubHkgaW4gdGhlIGNhc2UgdGhhdCB0aGUgbW9kdWxlIGZhaWxzLiIKICAgLSAiTGlrZSB0aGUgb3RoZXIgbm90aWZpY2F0aW9uIG1vZHVsZXMsIHRoaXMgb25lIHJlcXVpcmVzIGFuIGV4dGVybmFsCiAgICAgZGVwZW5kZW5jeSB0byB3b3JrLiBJbiB0aGlzIGNhc2UsIHlvdSdsbCBuZWVkIGFuIGFjdGl2ZSBTZW5kR3JpZAogICAgIGFjY291bnQuIgogICAtICJJbiBvcmRlciB0byB1c2UgYXBpX2tleSwgY2MsIGJjYywgYXR0YWNobWVudHMsIGZyb21fbmFtZSwgaHRtbF9ib2R5LCBoZWFkZXJzCiAgICAgeW91IG11c3QgcGlwIGluc3RhbGwgc2VuZGdyaWQiCiAgIC0gInNpbmNlIDIuMiB1c2VybmFtZSBhbmQgcGFzc3dvcmQgYXJlIG5vdCByZXF1aXJlZCBpZiB5b3Ugc3VwcGx5IGFuIGFwaV9rZXkiCnJlcXVpcmVtZW50czoKICAtIHNlbmRncmlkIHB5dGhvbiBsaWJyYXJ5Cm9wdGlvbnM6CiAgdXNlcm5hbWU6CiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSB1c2VybmFtZSBmb3IgbG9nZ2luZyBpbnRvIHRoZSBTZW5kR3JpZCBhY2NvdW50LgogICAgICAtIFNpbmNlIDIuMiBpdCBpcyBvbmx5IHJlcXVpcmVkIGlmIGFwaV9rZXkgaXMgbm90IHN1cHBsaWVkLgogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBudWxsCiAgcGFzc3dvcmQ6CiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBwYXNzd29yZCB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSB1c2VybmFtZQogICAgICAtIFNpbmNlIDIuMiBpdCBpcyBvbmx5IHJlcXVpcmVkIGlmIGFwaV9rZXkgaXMgbm90IHN1cHBsaWVkLgogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBudWxsCiAgZnJvbV9hZGRyZXNzOgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gdGhlIGFkZHJlc3MgaW4gdGhlICJmcm9tIiBmaWVsZCBmb3IgdGhlIGVtYWlsCiAgICByZXF1aXJlZDogdHJ1ZQogIHRvX2FkZHJlc3NlczoKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIGEgbGlzdCB3aXRoIG9uZSBvciBtb3JlIHJlY2lwaWVudCBlbWFpbCBhZGRyZXNzZXMKICAgIHJlcXVpcmVkOiB0cnVlCiAgc3ViamVjdDoKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIHRoZSBkZXNpcmVkIHN1YmplY3QgZm9yIHRoZSBlbWFpbAogICAgcmVxdWlyZWQ6IHRydWUKICBhcGlfa2V5OgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gc2VuZGdyaWQgQVBJIGtleSB0byB1c2UgaW5zdGVhZCBvZiB1c2VybmFtZS9wYXNzd29yZAogICAgdmVyc2lvbl9hZGRlZDogMi4yCiAgICByZXF1aXJlZDogZmFsc2UKICAgIGRlZmF1bHQ6IG51bGwKICBjYzoKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIGEgbGlzdCBvZiBlbWFpbCBhZGRyZXNzZXMgdG8gY2MKICAgIHZlcnNpb25fYWRkZWQ6IDIuMgogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBudWxsCiAgYmNjOgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gYSBsaXN0IG9mIGVtYWlsIGFkZHJlc3NlcyB0byBiY2MKICAgIHZlcnNpb25fYWRkZWQ6IDIuMgogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBudWxsCiAgYXR0YWNobWVudHM6CiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBhIGxpc3Qgb2YgcmVsYXRpdmUgb3IgZXhwbGljaXQgcGF0aHMgb2YgZmlsZXMgeW91IHdhbnQgdG8gYXR0YWNoICg3TUIgbGltaXQgYXMgcGVyIFNlbmRHcmlkIGRvY3MpCiAgICB2ZXJzaW9uX2FkZGVkOiAyLjIKICAgIHJlcXVpcmVkOiBmYWxzZQogICAgZGVmYXVsdDogbnVsbAogIGZyb21fbmFtZToKICAgIGRlc2NyaXB0aW9uOgogICAgICAtIHRoZSBuYW1lIHlvdSB3YW50IHRvIGFwcGVhciBpbiB0aGUgZnJvbSBmaWVsZCwgaS5lICdKb2huIERvZScKICAgIHZlcnNpb25fYWRkZWQ6IDIuMgogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBudWxsCiAgaHRtbF9ib2R5OgogICAgZGVzY3JpcHRpb246CiAgICAgIC0gd2hldGhlciB0aGUgYm9keSBpcyBodG1sIGNvbnRlbnQgdGhhdCBzaG91bGQgYmUgcmVuZGVyZWQKICAgIHZlcnNpb25fYWRkZWQ6IDIuMgogICAgcmVxdWlyZWQ6IGZhbHNlCiAgICBkZWZhdWx0OiBmYWxzZQogIGhlYWRlcnM6CiAgICBkZXNjcmlwdGlvbjoKICAgICAgLSBhIGRpY3QgdG8gcGFzcyBvbiBhcyBoZWFkZXJzCiAgICB2ZXJzaW9uX2FkZGVkOiAyLjIKICAgIHJlcXVpcmVkOiBmYWxzZQogICAgZGVmYXVsdDogbnVsbAphdXRob3I6ICJNYXR0IE1ha2FpIChAbWFrYWltYykiCicnJwoKRVhBTVBMRVMgPSAnJycKIyBzZW5kIGFuIGVtYWlsIHRvIGEgc2luZ2xlIHJlY2lwaWVudCB0aGF0IHRoZSBkZXBsb3ltZW50IHdhcyBzdWNjZXNzZnVsCi0gc2VuZGdyaWQ6CiAgICB1c2VybmFtZTogInt7IHNlbmRncmlkX3VzZXJuYW1lIH19IgogICAgcGFzc3dvcmQ6ICJ7eyBzZW5kZ3JpZF9wYXNzd29yZCB9fSIKICAgIGZyb21fYWRkcmVzczogImFuc2libGVAbXljb21wYW55LmNvbSIKICAgIHRvX2FkZHJlc3NlczoKICAgICAgLSAib3BzQG15Y29tcGFueS5jb20iCiAgICBzdWJqZWN0OiAiRGVwbG95bWVudCBzdWNjZXNzLiIKICAgIGJvZHk6ICJUaGUgbW9zdCByZWNlbnQgQW5zaWJsZSBkZXBsb3ltZW50IHdhcyBzdWNjZXNzZnVsLiIKICBkZWxlZ2F0ZV90bzogbG9jYWxob3N0CgojIHNlbmQgYW4gZW1haWwgdG8gbW9yZSB0aGFuIG9uZSByZWNpcGllbnQgdGhhdCB0aGUgYnVpbGQgZmFpbGVkCi0gc2VuZGdyaWQ6CiAgICAgIHVzZXJuYW1lOiAie3sgc2VuZGdyaWRfdXNlcm5hbWUgfX0iCiAgICAgIHBhc3N3b3JkOiAie3sgc2VuZGdyaWRfcGFzc3dvcmQgfX0iCiAgICAgIGZyb21fYWRkcmVzczogImJ1aWxkQG15Y29tcGFueS5jb20iCiAgICAgIHRvX2FkZHJlc3NlczoKICAgICAgICAtICJvcHNAbXljb21wYW55LmNvbSIKICAgICAgICAtICJkZXZ0ZWFtQG15Y29tcGFueS5jb20iCiAgICAgIHN1YmplY3Q6ICJCdWlsZCBmYWlsdXJlIS4iCiAgICAgIGJvZHk6ICJVbmFibGUgdG8gcHVsbCBzb3VyY2UgcmVwb3NpdG9yeSBmcm9tIEdpdCBzZXJ2ZXIuIgogIGRlbGVnYXRlX3RvOiBsb2NhbGhvc3QKJycnCgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIHNlbmRncmlkIG1vZHVsZSBzdXBwb3J0IG1ldGhvZHMKIwpmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeC5tb3Zlcy51cmxsaWIucGFyc2UgaW1wb3J0IHVybGVuY29kZQoKdHJ5OgogICAgaW1wb3J0IHNlbmRncmlkCiAgICBIQVNfU0VOREdSSUQgPSBUcnVlCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIEhBU19TRU5ER1JJRCA9IEZhbHNlCgpkZWYgcG9zdF9zZW5kZ3JpZF9hcGkobW9kdWxlLCB1c2VybmFtZSwgcGFzc3dvcmQsIGZyb21fYWRkcmVzcywgdG9fYWRkcmVzc2VzLAogICAgICAgIHN1YmplY3QsIGJvZHksIGFwaV9rZXk9Tm9uZSwgY2M9Tm9uZSwgYmNjPU5vbmUsIGF0dGFjaG1lbnRzPU5vbmUsCiAgICAgICAgaHRtbF9ib2R5PUZhbHNlLCBmcm9tX25hbWU9Tm9uZSwgaGVhZGVycz1Ob25lKToKCiAgICBpZiBub3QgSEFTX1NFTkRHUklEOgogICAgICAgIFNFTkRHUklEX1VSSSA9ICJodHRwczovL2FwaS5zZW5kZ3JpZC5jb20vYXBpL21haWwuc2VuZC5qc29uIgogICAgICAgIEFHRU5UID0gIkFuc2libGUiCiAgICAgICAgZGF0YSA9IHsnYXBpX3VzZXInOiB1c2VybmFtZSwgJ2FwaV9rZXknOnBhc3N3b3JkLAogICAgICAgICAgICAgICAgJ2Zyb20nOmZyb21fYWRkcmVzcywgJ3N1YmplY3QnOiBzdWJqZWN0LCAndGV4dCc6IGJvZHl9CiAgICAgICAgZW5jb2RlZF9kYXRhID0gdXJsZW5jb2RlKGRhdGEpCiAgICAgICAgdG9fYWRkcmVzc2VzX2FwaSA9ICcnCiAgICAgICAgZm9yIHJlY2lwaWVudCBpbiB0b19hZGRyZXNzZXM6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmVjaXBpZW50LCB1bmljb2RlKToKICAgICAgICAgICAgICAgIHJlY2lwaWVudCA9IHJlY2lwaWVudC5lbmNvZGUoJ3V0Zi04JykKICAgICAgICAgICAgdG9fYWRkcmVzc2VzX2FwaSArPSAnJnRvW109JXMnICUgcmVjaXBpZW50CiAgICAgICAgZW5jb2RlZF9kYXRhICs9IHRvX2FkZHJlc3Nlc19hcGkKCiAgICAgICAgaGVhZGVycyA9IHsgJ1VzZXItQWdlbnQnOiBBR0VOVCwKICAgICAgICAgICAgICAgICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywKICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbid9CiAgICAgICAgcmV0dXJuIGZldGNoX3VybChtb2R1bGUsIFNFTkRHUklEX1VSSSwgZGF0YT1lbmNvZGVkX2RhdGEsIGhlYWRlcnM9aGVhZGVycywgbWV0aG9kPSdQT1NUJykKICAgIGVsc2U6CgogICAgICAgIGlmIGFwaV9rZXk6CiAgICAgICAgICAgIHNnID0gc2VuZGdyaWQuU2VuZEdyaWRDbGllbnQoYXBpX2tleSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZyA9IHNlbmRncmlkLlNlbmRHcmlkQ2xpZW50KHVzZXJuYW1lLCBwYXNzd29yZCkKCiAgICAgICAgbWVzc2FnZSA9IHNlbmRncmlkLk1haWwoKQogICAgICAgIG1lc3NhZ2Uuc2V0X3N1YmplY3Qoc3ViamVjdCkKCiAgICAgICAgZm9yIHJlY2lwIGluIHRvX2FkZHJlc3NlczoKICAgICAgICAgICAgbWVzc2FnZS5hZGRfdG8ocmVjaXApCgogICAgICAgIGlmIGNjOgogICAgICAgICAgICBmb3IgcmVjaXAgaW4gY2M6CiAgICAgICAgICAgICAgICBtZXNzYWdlLmFkZF9jYyhyZWNpcCkKICAgICAgICBpZiBiY2M6CiAgICAgICAgICAgIGZvciByZWNpcCBpbiBiY2M6CiAgICAgICAgICAgICAgICBtZXNzYWdlLmFkZF9iY2MocmVjaXApCgogICAgICAgIGlmIGhlYWRlcnM6CiAgICAgICAgICAgIG1lc3NhZ2Uuc2V0X2hlYWRlcnMoaGVhZGVycykKCiAgICAgICAgaWYgYXR0YWNobWVudHM6CiAgICAgICAgICAgIGZvciBmIGluIGF0dGFjaG1lbnRzOgogICAgICAgICAgICAgICAgbmFtZSA9IG9zLnBhdGguYmFzZW5hbWUoZikKICAgICAgICAgICAgICAgIG1lc3NhZ2UuYWRkX2F0dGFjaG1lbnQobmFtZSwgZikKCiAgICAgICAgaWYgZnJvbV9uYW1lOgogICAgICAgICAgICBtZXNzYWdlLnNldF9mcm9tKCclcyA8JXMuJyAlIChmcm9tX25hbWUsIGZyb21fYWRkcmVzcykpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbWVzc2FnZS5zZXRfZnJvbShmcm9tX2FkZHJlc3MpCgogICAgICAgIGlmIGh0bWxfYm9keToKICAgICAgICAgICAgbWVzc2FnZS5zZXRfaHRtbChib2R5KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG1lc3NhZ2Uuc2V0X3RleHQoYm9keSkKCiAgICAgICAgcmV0dXJuIHNnLnNlbmQobWVzc2FnZSkKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIyBNYWluCiMKCmRlZiBtYWluKCk6CiAgICBtb2R1bGUgPSBBbnNpYmxlTW9kdWxlKAogICAgICAgIGFyZ3VtZW50X3NwZWM9ZGljdCgKICAgICAgICAgICAgdXNlcm5hbWU9ZGljdChyZXF1aXJlZD1GYWxzZSksCiAgICAgICAgICAgIHBhc3N3b3JkPWRpY3QocmVxdWlyZWQ9RmFsc2UsIG5vX2xvZz1UcnVlKSwKICAgICAgICAgICAgYXBpX2tleT1kaWN0KHJlcXVpcmVkPUZhbHNlLCBub19sb2c9VHJ1ZSksCiAgICAgICAgICAgIGJjYz1kaWN0KHJlcXVpcmVkPUZhbHNlLCB0eXBlPSdsaXN0JyksCiAgICAgICAgICAgIGNjPWRpY3QocmVxdWlyZWQ9RmFsc2UsIHR5cGU9J2xpc3QnKSwKICAgICAgICAgICAgaGVhZGVycz1kaWN0KHJlcXVpcmVkPUZhbHNlLCB0eXBlPSdkaWN0JyksCiAgICAgICAgICAgIGZyb21fYWRkcmVzcz1kaWN0KHJlcXVpcmVkPVRydWUpLAogICAgICAgICAgICBmcm9tX25hbWU9ZGljdChyZXF1aXJlZD1GYWxzZSksCiAgICAgICAgICAgIHRvX2FkZHJlc3Nlcz1kaWN0KHJlcXVpcmVkPVRydWUsIHR5cGU9J2xpc3QnKSwKICAgICAgICAgICAgc3ViamVjdD1kaWN0KHJlcXVpcmVkPVRydWUpLAogICAgICAgICAgICBib2R5PWRpY3QocmVxdWlyZWQ9VHJ1ZSksCiAgICAgICAgICAgIGh0bWxfYm9keT1kaWN0KHJlcXVpcmVkPUZhbHNlLCBkZWZhdWx0PUZhbHNlLCB0eXBlPSdib29sJyksCiAgICAgICAgICAgIGF0dGFjaG1lbnRzPWRpY3QocmVxdWlyZWQ9RmFsc2UsIHR5cGU9J2xpc3QnKQogICAgICAgICksCiAgICAgICAgc3VwcG9ydHNfY2hlY2tfbW9kZT1UcnVlLAogICAgICAgIG11dHVhbGx5X2V4Y2x1c2l2ZSA9IFsKICAgICAgICAgICAgWydhcGlfa2V5JywgJ3Bhc3N3b3JkJ10sCiAgICAgICAgICAgIFsnYXBpX2tleScsICd1c2VybmFtZSddCiAgICAgICAgICAgIF0sCiAgICAgICAgcmVxdWlyZWRfdG9nZXRoZXIgPSBbWyd1c2VybmFtZScsICdwYXNzd29yZCddXSwKICAgICkKCiAgICB1c2VybmFtZSA9IG1vZHVsZS5wYXJhbXNbJ3VzZXJuYW1lJ10KICAgIHBhc3N3b3JkID0gbW9kdWxlLnBhcmFtc1sncGFzc3dvcmQnXQogICAgYXBpX2tleSA9IG1vZHVsZS5wYXJhbXNbJ2FwaV9rZXknXQogICAgYmNjID0gbW9kdWxlLnBhcmFtc1snYmNjJ10KICAgIGNjID0gbW9kdWxlLnBhcmFtc1snY2MnXQogICAgaGVhZGVycyA9IG1vZHVsZS5wYXJhbXNbJ2hlYWRlcnMnXQogICAgZnJvbV9uYW1lID0gbW9kdWxlLnBhcmFtc1snZnJvbV9uYW1lJ10KICAgIGZyb21fYWRkcmVzcyA9IG1vZHVsZS5wYXJhbXNbJ2Zyb21fYWRkcmVzcyddCiAgICB0b19hZGRyZXNzZXMgPSBtb2R1bGUucGFyYW1zWyd0b19hZGRyZXNzZXMnXQogICAgc3ViamVjdCA9IG1vZHVsZS5wYXJhbXNbJ3N1YmplY3QnXQogICAgYm9keSA9IG1vZHVsZS5wYXJhbXNbJ2JvZHknXQogICAgaHRtbF9ib2R5ID0gbW9kdWxlLnBhcmFtc1snaHRtbF9ib2R5J10KICAgIGF0dGFjaG1lbnRzID0gbW9kdWxlLnBhcmFtc1snYXR0YWNobWVudHMnXQoKICAgIHNlbmRncmlkX2xpYl9hcmdzID0gW2FwaV9rZXksIGJjYywgY2MsIGhlYWRlcnMsIGZyb21fbmFtZSwgaHRtbF9ib2R5LCBhdHRhY2htZW50c10KCiAgICBpZiBhbnkobGliX2FyZyBpcyBub3QgTm9uZSBmb3IgbGliX2FyZyBpbiBzZW5kZ3JpZF9saWJfYXJncykgYW5kIG5vdCBIQVNfU0VOREdSSUQ6CiAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9J1lvdSBtdXN0IGluc3RhbGwgdGhlIHNlbmRncmlkIHB5dGhvbiBsaWJyYXJ5IGlmIHlvdSB3YW50IHRvIHVzZSBhbnkgb2YgdGhlIGZvbGxvd2luZyBhcmd1bWVudHM6ICcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXBpX2tleSwgYmNjLCBjYywgaGVhZGVycywgZnJvbV9uYW1lLCBodG1sX2JvZHksIGF0dGFjaG1lbnRzJykKCiAgICByZXNwb25zZSwgaW5mbyA9IHBvc3Rfc2VuZGdyaWRfYXBpKG1vZHVsZSwgdXNlcm5hbWUsIHBhc3N3b3JkLAogICAgICAgIGZyb21fYWRkcmVzcywgdG9fYWRkcmVzc2VzLCBzdWJqZWN0LCBib2R5LCBhdHRhY2htZW50cz1hdHRhY2htZW50cywKICAgICAgICBiY2M9YmNjLCBjYz1jYywgaGVhZGVycz1oZWFkZXJzLCBodG1sX2JvZHk9aHRtbF9ib2R5LCBhcGlfa2V5PWFwaV9rZXkpCgogICAgaWYgbm90IEhBU19TRU5ER1JJRDoKICAgICAgICBpZiBpbmZvWydzdGF0dXMnXSAhPSAyMDA6CiAgICAgICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSJ1bmFibGUgdG8gc2VuZCBlbWFpbCB0aHJvdWdoIFNlbmRHcmlkIEFQSTogJXMiICUgaW5mb1snbXNnJ10pCiAgICBlbHNlOgogICAgICAgIGlmIHJlc3BvbnNlICE9IDIwMDoKICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9InVuYWJsZSB0byBzZW5kIGVtYWlsIHRocm91Z2ggU2VuZEdyaWQgQVBJOiAlcyIgJSBpbmZvWydtZXNzYWdlJ10pCgogICAgbW9kdWxlLmV4aXRfanNvbihtc2c9c3ViamVjdCwgY2hhbmdlZD1GYWxzZSkKCiMgaW1wb3J0IG1vZHVsZSBzbmlwcGV0cwpmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLmJhc2ljIGltcG9ydCAqCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMudXJscyBpbXBvcnQgKgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgbWFpbigpClBLAwQUAAAAAADWuytLO985lTCKAQAwigEAHQAAAGFuc2libGUvbW9kdWxlX3V0aWxzL2Jhc2ljLnB5IyBUaGlzIGNvZGUgaXMgcGFydCBvZiBBbnNpYmxlLCBidXQgaXMgYW4gaW5kZXBlbmRlbnQgY29tcG9uZW50LgojIFRoaXMgcGFydGljdWxhciBmaWxlIHNuaXBwZXQsIGFuZCB0aGlzIGZpbGUgc25pcHBldCBvbmx5LCBpcyBCU0QgbGljZW5zZWQuCiMgTW9kdWxlcyB5b3Ugd3JpdGUgdXNpbmcgdGhpcyBzbmlwcGV0LCB3aGljaCBpcyBlbWJlZGRlZCBkeW5hbWljYWxseSBieSBBbnNpYmxlCiMgc3RpbGwgYmVsb25nIHRvIHRoZSBhdXRob3Igb2YgdGhlIG1vZHVsZSwgYW5kIG1heSBhc3NpZ24gdGhlaXIgb3duIGxpY2Vuc2UKIyB0byB0aGUgY29tcGxldGUgd29yay4KIwojIENvcHlyaWdodCAoYyksIE1pY2hhZWwgRGVIYWFuIDxtaWNoYWVsLmRlaGFhbkBnbWFpbC5jb20+LCAyMDEyLTIwMTMKIyBDb3B5cmlnaHQgKGMpLCBUb3NoaW8gS3VyYXRvbWkgPHRrdXJhdG9taUBhbnNpYmxlLmNvbT4gMjAxNgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLAojIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDoKIwojICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQKIyAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwKIyAgICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24KIyAgICAgIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgojCiMgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyAiQVMgSVMiIEFORAojIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVECiMgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELgojIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULAojIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywKIyBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MKIyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUCiMgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFCiMgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCiMKCkJPT0xFQU5TX1RSVUUgPSBbJ3knLCAneWVzJywgJ29uJywgJzEnLCAndHJ1ZScsIDEsIFRydWVdCkJPT0xFQU5TX0ZBTFNFID0gWyduJywgJ25vJywgJ29mZicsICcwJywgJ2ZhbHNlJywgMCwgRmFsc2VdCkJPT0xFQU5TID0gQk9PTEVBTlNfVFJVRSArIEJPT0xFQU5TX0ZBTFNFCgpTSVpFX1JBTkdFUyA9IHsgJ1knOiAxPDw4MCwgJ1onOiAxPDw3MCwgJ0UnOiAxPDw2MCwgJ1AnOiAxPDw1MCwgJ1QnOiAxPDw0MCwgJ0cnOiAxPDwzMCwgJ00nOiAxPDwyMCwgJ0snOiAxPDwxMCwgJ0InOiAxIH0KCkZJTEVfQVRUUklCVVRFUyA9IHsKICAgICdBJzogJ25vYXRpbWUnLAogICAgJ2EnOiAnYXBwZW5kJywKICAgICdjJzogJ2NvbXByZXNzZWQnLAogICAgJ0MnOiAnbm9jb3cnLAogICAgJ2QnOiAnbm9kdW1wJywKICAgICdEJzogJ2RpcnN5bmMnLAogICAgJ2UnOiAnZXh0ZW50cycsCiAgICAnRSc6ICdlbmNyeXB0ZWQnLAogICAgJ2gnOiAnYmxvY2tzaXplJywKICAgICdpJzogJ2ltbXV0YWJsZScsCiAgICAnSSc6ICdpbmRleGVkJywKICAgICdqJzogJ2pvdXJuYWxsZWQnLAogICAgJ04nOiAnaW5saW5lJywKICAgICdzJzogJ3plcm8nLAogICAgJ1MnOiAnc3luY2hyb25vdXMnLAogICAgJ3QnOiAnbm90YWlsJywKICAgICdUJzogJ2Jsb2Nrcm9vdCcsCiAgICAndSc6ICd1bmRlbGV0ZScsCiAgICAnWCc6ICdjb21wcmVzc2VkcmF3JywKICAgICdaJzogJ2NvbXByZXNzZWRkaXJ0eScsCn0KCiMgYW5zaWJsZSBtb2R1bGVzIGNhbiBiZSB3cml0dGVuIGluIGFueSBsYW5ndWFnZS4gIFRvIHNpbXBsaWZ5CiMgZGV2ZWxvcG1lbnQgb2YgUHl0aG9uIG1vZHVsZXMsIHRoZSBmdW5jdGlvbnMgYXZhaWxhYmxlIGhlcmUgY2FuCiMgYmUgdXNlZCB0byBkbyBtYW55IGNvbW1vbiB0YXNrcwoKaW1wb3J0IGxvY2FsZQppbXBvcnQgb3MKaW1wb3J0IHJlCmltcG9ydCBzaGxleAppbXBvcnQgc3VicHJvY2VzcwppbXBvcnQgc3lzCmltcG9ydCB0eXBlcwppbXBvcnQgdGltZQppbXBvcnQgc2VsZWN0CmltcG9ydCBzaHV0aWwKaW1wb3J0IHN0YXQKaW1wb3J0IHRlbXBmaWxlCmltcG9ydCB0cmFjZWJhY2sKaW1wb3J0IGdycAppbXBvcnQgcHdkCmltcG9ydCBwbGF0Zm9ybQppbXBvcnQgZXJybm8KaW1wb3J0IGRhdGV0aW1lCmZyb20gaXRlcnRvb2xzIGltcG9ydCByZXBlYXQsIGNoYWluCgp0cnk6CiAgICBpbXBvcnQgc3lzbG9nCiAgICBIQVNfU1lTTE9HPVRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgSEFTX1NZU0xPRz1GYWxzZQoKdHJ5OgogICAgZnJvbSBzeXN0ZW1kIGltcG9ydCBqb3VybmFsCiAgICBoYXNfam91cm5hbCA9IFRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgaGFzX2pvdXJuYWwgPSBGYWxzZQoKSEFWRV9TRUxJTlVYPUZhbHNlCnRyeToKICAgIGltcG9ydCBzZWxpbnV4CiAgICBIQVZFX1NFTElOVVg9VHJ1ZQpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBwYXNzCgojIFB5dGhvbjIgJiAzIHdheSB0byBnZXQgTm9uZVR5cGUKTm9uZVR5cGUgPSB0eXBlKE5vbmUpCgp0cnk6CiAgICBmcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBTZXF1ZW5jZSwgTWFwcGluZwpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAjIHB5dGhvbjIuNQogICAgU2VxdWVuY2UgPSAobGlzdCwgdHVwbGUpCiAgICBNYXBwaW5nID0gKGRpY3QsKQoKIyBOb3RlOiBXaGVuIGdldHRpbmcgU2VxdWVuY2UgZnJvbSBjb2xsZWN0aW9ucywgaXQgbWF0Y2hlcyB3aXRoIHN0cmluZ3MuICBJZgojIHRoaXMgbWF0dGVycywgbWFrZSBzdXJlIHRvIGNoZWNrIGZvciBzdHJpbmdzIGJlZm9yZSBjaGVja2luZyBmb3Igc2VxdWVuY2V0eXBlCnRyeToKICAgIGZyb20gY29sbGVjdGlvbnMuYWJjIGltcG9ydCBLZXlzVmlldwogICAgU0VRVUVOQ0VUWVBFID0gKFNlcXVlbmNlLCBLZXlzVmlldykKZXhjZXB0OgogICAgU0VRVUVOQ0VUWVBFID0gU2VxdWVuY2UKCnRyeToKICAgIGltcG9ydCBqc29uCiAgICAjIERldGVjdCB0aGUgcHl0aG9uLWpzb24gbGlicmFyeSB3aGljaCBpcyBpbmNvbXBhdGlibGUKICAgICMgTG9vayBmb3Igc2ltcGxlanNvbiBpZiB0aGF0J3MgdGhlIGNhc2UKICAgIHRyeToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShqc29uLmxvYWRzLCB0eXBlcy5GdW5jdGlvblR5cGUpIG9yIG5vdCBpc2luc3RhbmNlKGpzb24uZHVtcHMsIHR5cGVzLkZ1bmN0aW9uVHlwZSk6CiAgICAgICAgICAgIHJhaXNlIEltcG9ydEVycm9yCiAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgcmFpc2UgSW1wb3J0RXJyb3IKZXhjZXB0IEltcG9ydEVycm9yOgogICAgdHJ5OgogICAgICAgIGltcG9ydCBzaW1wbGVqc29uIGFzIGpzb24KICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBwcmludCgnXG57Im1zZyI6ICJFcnJvcjogYW5zaWJsZSByZXF1aXJlcyB0aGUgc3RkbGliIGpzb24gb3Igc2ltcGxlanNvbiBtb2R1bGUsIG5laXRoZXIgd2FzIGZvdW5kISIsICJmYWlsZWQiOiB0cnVlfScpCiAgICAgICAgc3lzLmV4aXQoMSkKICAgIGV4Y2VwdCBTeW50YXhFcnJvcjoKICAgICAgICBwcmludCgnXG57Im1zZyI6ICJTeW50YXhFcnJvcjogcHJvYmFibHkgZHVlIHRvIGluc3RhbGxlZCBzaW1wbGVqc29uIGJlaW5nIGZvciBhIGRpZmZlcmVudCBweXRob24gdmVyc2lvbiIsICJmYWlsZWQiOiB0cnVlfScpCiAgICAgICAgc3lzLmV4aXQoMSkKCkFWQUlMQUJMRV9IQVNIX0FMR09SSVRITVMgPSBkaWN0KCkKdHJ5OgogICAgaW1wb3J0IGhhc2hsaWIKCiAgICAjIHB5dGhvbiAyLjcuOSsgYW5kIDIuNy4wKwogICAgZm9yIGF0dHJpYnV0ZSBpbiAoJ2F2YWlsYWJsZV9hbGdvcml0aG1zJywgJ2FsZ29yaXRobXMnKToKICAgICAgICBhbGdvcml0aG1zID0gZ2V0YXR0cihoYXNobGliLCBhdHRyaWJ1dGUsIE5vbmUpCiAgICAgICAgaWYgYWxnb3JpdGhtczoKICAgICAgICAgICAgYnJlYWsKICAgIGlmIGFsZ29yaXRobXMgaXMgTm9uZToKICAgICAgICAjIHB5dGhvbiAyLjUrCiAgICAgICAgYWxnb3JpdGhtcyA9ICgnbWQ1JywgJ3NoYTEnLCAnc2hhMjI0JywgJ3NoYTI1NicsICdzaGEzODQnLCAnc2hhNTEyJykKICAgIGZvciBhbGdvcml0aG0gaW4gYWxnb3JpdGhtczoKICAgICAgICBBVkFJTEFCTEVfSEFTSF9BTEdPUklUSE1TW2FsZ29yaXRobV0gPSBnZXRhdHRyKGhhc2hsaWIsIGFsZ29yaXRobSkKZXhjZXB0IEltcG9ydEVycm9yOgogICAgaW1wb3J0IHNoYQogICAgQVZBSUxBQkxFX0hBU0hfQUxHT1JJVEhNUyA9IHsnc2hhMSc6IHNoYS5zaGF9CiAgICB0cnk6CiAgICAgICAgaW1wb3J0IG1kNQogICAgICAgIEFWQUlMQUJMRV9IQVNIX0FMR09SSVRITVNbJ21kNSddID0gbWQ1Lm1kNQogICAgZXhjZXB0IEltcG9ydEVycm9yOgogICAgICAgIHBhc3MKCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMucHljb21wYXQyNCBpbXBvcnQgZ2V0X2V4Y2VwdGlvbiwgbGl0ZXJhbF9ldmFsCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4IGltcG9ydCAoUFkyLCBQWTMsIGIsIGJpbmFyeV90eXBlLCBpbnRlZ2VyX3R5cGVzLAogICAgICAgIGl0ZXJpdGVtcywgdGV4dF90eXBlLCBzdHJpbmdfdHlwZXMpCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4Lm1vdmVzIGltcG9ydCBtYXAsIHJlZHVjZSwgc2hsZXhfcXVvdGUKZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5fdGV4dCBpbXBvcnQgdG9fbmF0aXZlLCB0b19ieXRlcywgdG9fdGV4dAoKUEFTU1dPUkRfTUFUQ0ggPSByZS5jb21waWxlKHInXig/Oi4rWy1fXHNdKT9wYXNzKD86Wy1fXHNdPyg/OndvcmR8cGhyYXNlfHdyZHx3ZCk/KSg/OlstX1xzXS4rKT8kJywgcmUuSSkKCl9OVU1CRVJUWVBFUyA9IHR1cGxlKGxpc3QoaW50ZWdlcl90eXBlcykgKyBbZmxvYXRdKQoKIyBEZXByZWNhdGVkIGNvbXBhdC4gIE9ubHkga2VwdCBpbiBjYXNlIGFub3RoZXIgbW9kdWxlIHVzZWQgdGhlc2UgbmFtZXMgIFVzaW5nCiMgYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4IGlzIHByZWZlcnJlZAoKTlVNQkVSVFlQRVMgPSBfTlVNQkVSVFlQRVMKCmltYXAgPSBtYXAKCnRyeToKICAgICMgUHl0aG9uIDIKICAgIHVuaWNvZGUKZXhjZXB0IE5hbWVFcnJvcjoKICAgICMgUHl0aG9uIDMKICAgIHVuaWNvZGUgPSB0ZXh0X3R5cGUKCnRyeToKICAgICMgUHl0aG9uIDIuNisKICAgIGJ5dGVzCmV4Y2VwdCBOYW1lRXJyb3I6CiAgICAjIFB5dGhvbiAyLjQKICAgIGJ5dGVzID0gYmluYXJ5X3R5cGUKCnRyeToKICAgICMgUHl0aG9uIDIKICAgIGJhc2VzdHJpbmcKZXhjZXB0IE5hbWVFcnJvcjoKICAgICMgUHl0aG9uIDMKICAgIGJhc2VzdHJpbmcgPSBzdHJpbmdfdHlwZXMKCl9saXRlcmFsX2V2YWwgPSBsaXRlcmFsX2V2YWwKCiMgRW5kIG9mIGRlcHJlY2F0ZWQgbmFtZXMKCiMgSW50ZXJuYWwgZ2xvYmFsIGhvbGRpbmcgcGFzc2VkIGluIHBhcmFtcy4gIFRoaXMgaXMgY29uc3VsdGVkIGluIGNhc2UKIyBtdWx0aXBsZSBBbnNpYmxlTW9kdWxlcyBhcmUgY3JlYXRlZC4gIE90aGVyd2lzZSBlYWNoIEFuc2libGVNb2R1bGUgd291bGQKIyBhdHRlbXB0IHRvIHJlYWQgZnJvbSBzdGRpbi4gIE90aGVyIGNvZGUgc2hvdWxkIG5vdCB1c2UgdGhpcyBkaXJlY3RseSBhcyBpdAojIGlzIGFuIGludGVybmFsIGltcGxlbWVudGF0aW9uIGRldGFpbApfQU5TSUJMRV9BUkdTID0gTm9uZQoKRklMRV9DT01NT05fQVJHVU1FTlRTPWRpY3QoCiAgICBzcmMgPSBkaWN0KCksCiAgICBtb2RlID0gZGljdCh0eXBlPSdyYXcnKSwKICAgIG93bmVyID0gZGljdCgpLAogICAgZ3JvdXAgPSBkaWN0KCksCiAgICBzZXVzZXIgPSBkaWN0KCksCiAgICBzZXJvbGUgPSBkaWN0KCksCiAgICBzZWxldmVsID0gZGljdCgpLAogICAgc2V0eXBlID0gZGljdCgpLAogICAgZm9sbG93ID0gZGljdCh0eXBlPSdib29sJywgZGVmYXVsdD1GYWxzZSksCiAgICAjIG5vdCB0YWtlbiBieSB0aGUgZmlsZSBtb2R1bGUsIGJ1dCBvdGhlciBtb2R1bGVzIGNhbGwgZmlsZSBzbyBpdCBtdXN0IGlnbm9yZSB0aGVtLgogICAgY29udGVudCA9IGRpY3Qobm9fbG9nPVRydWUpLAogICAgYmFja3VwID0gZGljdCgpLAogICAgZm9yY2UgPSBkaWN0KCksCiAgICByZW1vdGVfc3JjID0gZGljdCgpLCAjIHVzZWQgYnkgYXNzZW1ibGUKICAgIHJlZ2V4cCA9IGRpY3QoKSwgIyB1c2VkIGJ5IGFzc2VtYmxlCiAgICBkZWxpbWl0ZXIgPSBkaWN0KCksICMgdXNlZCBieSBhc3NlbWJsZQogICAgZGlyZWN0b3J5X21vZGUgPSBkaWN0KCksICMgdXNlZCBieSBjb3B5CiAgICB1bnNhZmVfd3JpdGVzICA9IGRpY3QodHlwZT0nYm9vbCcpLCAjIHNob3VsZCBiZSBhdmFpbGFibGUgdG8gYW55IG1vZHVsZSB1c2luZyBhdG9taWNfbW92ZQogICAgYXR0cmlidXRlcyA9IGRpY3QoYWxpYXNlcz1bJ2F0dHInXSksCikKClBBU1NXRF9BUkdfUkUgPSByZS5jb21waWxlKHInXlstXXswLDJ9cGFzc1stXT8od29yZHx3ZCk/JykKCiMgQ2FuJ3QgdXNlIDA3Nzc3IG9uIFB5dGhvbiAzLCBjYW4ndCB1c2UgMG83Nzc3IG9uIFB5dGhvbiAyLjQKUEVSTV9CSVRTID0gaW50KCcwNzc3NycsIDgpICAgICAgIyBmaWxlIG1vZGUgcGVybWlzc2lvbiBiaXRzCkVYRUNfUEVSTV9CSVRTID0gaW50KCcwMDExMScsIDgpICMgZXhlY3V0ZSBwZXJtaXNzaW9uIGJpdHMKREVGQVVMVF9QRVJNID0gaW50KCcwNjY2JywgOCkgICAgIyBkZWZhdWx0IGZpbGUgcGVybWlzc2lvbiBiaXRzCgoKZGVmIGdldF9wbGF0Zm9ybSgpOgogICAgJycnIHdoYXQncyB0aGUgcGxhdGZvcm0/ICBleGFtcGxlOiBMaW51eCBpcyBhIHBsYXRmb3JtLiAnJycKICAgIHJldHVybiBwbGF0Zm9ybS5zeXN0ZW0oKQoKZGVmIGdldF9kaXN0cmlidXRpb24oKToKICAgICcnJyByZXR1cm4gdGhlIGRpc3RyaWJ1dGlvbiBuYW1lICcnJwogICAgaWYgcGxhdGZvcm0uc3lzdGVtKCkgPT0gJ0xpbnV4JzoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHN1cHBvcnRlZF9kaXN0cyA9IHBsYXRmb3JtLl9zdXBwb3J0ZWRfZGlzdHMgKyAoJ2FyY2gnLCdhbHBpbmUnKQogICAgICAgICAgICBkaXN0cmlidXRpb24gPSBwbGF0Zm9ybS5saW51eF9kaXN0cmlidXRpb24oc3VwcG9ydGVkX2Rpc3RzPXN1cHBvcnRlZF9kaXN0cylbMF0uY2FwaXRhbGl6ZSgpCiAgICAgICAgICAgIGlmIG5vdCBkaXN0cmlidXRpb24gYW5kIG9zLnBhdGguaXNmaWxlKCcvZXRjL3N5c3RlbS1yZWxlYXNlJyk6CiAgICAgICAgICAgICAgICBkaXN0cmlidXRpb24gPSBwbGF0Zm9ybS5saW51eF9kaXN0cmlidXRpb24oc3VwcG9ydGVkX2Rpc3RzPVsnc3lzdGVtJ10pWzBdLmNhcGl0YWxpemUoKQogICAgICAgICAgICAgICAgaWYgJ0FtYXpvbicgaW4gZGlzdHJpYnV0aW9uOgogICAgICAgICAgICAgICAgICAgIGRpc3RyaWJ1dGlvbiA9ICdBbWF6b24nCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGRpc3RyaWJ1dGlvbiA9ICdPdGhlckxpbnV4JwogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgIyBGSVhNRTogTWV0aG9kTWlzc2luZywgSSBhc3N1bWU/CiAgICAgICAgICAgIGRpc3RyaWJ1dGlvbiA9IHBsYXRmb3JtLmRpc3QoKVswXS5jYXBpdGFsaXplKCkKICAgIGVsc2U6CiAgICAgICAgZGlzdHJpYnV0aW9uID0gTm9uZQogICAgcmV0dXJuIGRpc3RyaWJ1dGlvbgoKZGVmIGdldF9kaXN0cmlidXRpb25fdmVyc2lvbigpOgogICAgJycnIHJldHVybiB0aGUgZGlzdHJpYnV0aW9uIHZlcnNpb24gJycnCiAgICBpZiBwbGF0Zm9ybS5zeXN0ZW0oKSA9PSAnTGludXgnOgogICAgICAgIHRyeToKICAgICAgICAgICAgZGlzdHJpYnV0aW9uX3ZlcnNpb24gPSBwbGF0Zm9ybS5saW51eF9kaXN0cmlidXRpb24oKVsxXQogICAgICAgICAgICBpZiBub3QgZGlzdHJpYnV0aW9uX3ZlcnNpb24gYW5kIG9zLnBhdGguaXNmaWxlKCcvZXRjL3N5c3RlbS1yZWxlYXNlJyk6CiAgICAgICAgICAgICAgICBkaXN0cmlidXRpb25fdmVyc2lvbiA9IHBsYXRmb3JtLmxpbnV4X2Rpc3RyaWJ1dGlvbihzdXBwb3J0ZWRfZGlzdHM9WydzeXN0ZW0nXSlbMV0KICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICMgRklYTUU6IE1ldGhvZE1pc3NpbmcsIEkgYXNzdW1lPwogICAgICAgICAgICBkaXN0cmlidXRpb25fdmVyc2lvbiA9IHBsYXRmb3JtLmRpc3QoKVsxXQogICAgZWxzZToKICAgICAgICBkaXN0cmlidXRpb25fdmVyc2lvbiA9IE5vbmUKICAgIHJldHVybiBkaXN0cmlidXRpb25fdmVyc2lvbgoKZGVmIGdldF9hbGxfc3ViY2xhc3NlcyhjbHMpOgogICAgJycnCiAgICB1c2VkIGJ5IG1vZHVsZXMgbGlrZSBIYXJkd2FyZSBvciBOZXR3b3JrIGZhY3QgY2xhc3NlcyB0byByZXRyaWV2ZSBhbGwgc3ViY2xhc3NlcyBvZiBhIGdpdmVuIGNsYXNzLgogICAgX19zdWJjbGFzc2VzX18gcmV0dXJuIG9ubHkgZGlyZWN0IHN1YiBjbGFzc2VzLiBUaGlzIG9uZSBnbyBkb3duIGludG8gdGhlIGNsYXNzIHRyZWUuCiAgICAnJycKICAgICMgUmV0cmlldmUgZGlyZWN0IHN1YmNsYXNzZXMKICAgIHN1YmNsYXNzZXMgPSBjbHMuX19zdWJjbGFzc2VzX18oKQogICAgdG9fdmlzaXQgPSBsaXN0KHN1YmNsYXNzZXMpCiAgICAjIFRoZW4gdmlzaXQgYWxsIHN1YmNsYXNzZXMKICAgIHdoaWxlIHRvX3Zpc2l0OgogICAgICAgIGZvciBzYyBpbiB0b192aXNpdDoKICAgICAgICAgICAgIyBUaGUgY3VycmVudCBjbGFzcyBpcyBub3cgdmlzaXRlZCwgc28gcmVtb3ZlIGl0IGZyb20gbGlzdAogICAgICAgICAgICB0b192aXNpdC5yZW1vdmUoc2MpCiAgICAgICAgICAgICMgQXBwZW5kaW5nIGFsbCBzdWJjbGFzc2VzIHRvIHZpc2l0IGFuZCBrZWVwIGEgcmVmZXJlbmNlIG9mIGF2YWlsYWJsZSBjbGFzcwogICAgICAgICAgICBmb3Igc3NjIGluIHNjLl9fc3ViY2xhc3Nlc19fKCk6CiAgICAgICAgICAgICAgICBzdWJjbGFzc2VzLmFwcGVuZChzc2MpCiAgICAgICAgICAgICAgICB0b192aXNpdC5hcHBlbmQoc3NjKQogICAgcmV0dXJuIHN1YmNsYXNzZXMKCgpkZWYgbG9hZF9wbGF0Zm9ybV9zdWJjbGFzcyhjbHMsICphcmdzLCAqKmt3YXJncyk6CiAgICAnJycKICAgIHVzZWQgYnkgbW9kdWxlcyBsaWtlIFVzZXIgdG8gaGF2ZSBkaWZmZXJlbnQgaW1wbGVtZW50YXRpb25zIGJhc2VkIG9uIGRldGVjdGVkIHBsYXRmb3JtLiAgU2VlIFVzZXIKICAgIG1vZHVsZSBmb3IgYW4gZXhhbXBsZS4KICAgICcnJwoKICAgIHRoaXNfcGxhdGZvcm0gPSBnZXRfcGxhdGZvcm0oKQogICAgZGlzdHJpYnV0aW9uID0gZ2V0X2Rpc3RyaWJ1dGlvbigpCiAgICBzdWJjbGFzcyA9IE5vbmUKCiAgICAjIGdldCB0aGUgbW9zdCBzcGVjaWZpYyBzdXBlcmNsYXNzIGZvciB0aGlzIHBsYXRmb3JtCiAgICBpZiBkaXN0cmlidXRpb24gaXMgbm90IE5vbmU6CiAgICAgICAgZm9yIHNjIGluIGdldF9hbGxfc3ViY2xhc3NlcyhjbHMpOgogICAgICAgICAgICBpZiBzYy5kaXN0cmlidXRpb24gaXMgbm90IE5vbmUgYW5kIHNjLmRpc3RyaWJ1dGlvbiA9PSBkaXN0cmlidXRpb24gYW5kIHNjLnBsYXRmb3JtID09IHRoaXNfcGxhdGZvcm06CiAgICAgICAgICAgICAgICBzdWJjbGFzcyA9IHNjCiAgICBpZiBzdWJjbGFzcyBpcyBOb25lOgogICAgICAgIGZvciBzYyBpbiBnZXRfYWxsX3N1YmNsYXNzZXMoY2xzKToKICAgICAgICAgICAgaWYgc2MucGxhdGZvcm0gPT0gdGhpc19wbGF0Zm9ybSBhbmQgc2MuZGlzdHJpYnV0aW9uIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBzdWJjbGFzcyA9IHNjCiAgICBpZiBzdWJjbGFzcyBpcyBOb25lOgogICAgICAgIHN1YmNsYXNzID0gY2xzCgogICAgcmV0dXJuIHN1cGVyKGNscywgc3ViY2xhc3MpLl9fbmV3X18oc3ViY2xhc3MpCgoKZGVmIGpzb25fZGljdF91bmljb2RlX3RvX2J5dGVzKGQsIGVuY29kaW5nPSd1dGYtOCcsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpOgogICAgJycnIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgZGljdCBrZXlzIGFuZCB2YWx1ZXMgdG8gYnl0ZSBzdHIKCiAgICAgICAgU3BlY2lhbGl6ZWQgZm9yIGpzb24gcmV0dXJuIGJlY2F1c2UgdGhpcyBvbmx5IGhhbmRsZXMsIGxpc3RzLCB0dXBsZXMsCiAgICAgICAgYW5kIGRpY3QgY29udGFpbmVyIHR5cGVzICh0aGUgY29udGFpbmVycyB0aGF0IHRoZSBqc29uIG1vZHVsZSByZXR1cm5zKQogICAgJycnCgogICAgaWYgaXNpbnN0YW5jZShkLCB0ZXh0X3R5cGUpOgogICAgICAgIHJldHVybiB0b19ieXRlcyhkLCBlbmNvZGluZz1lbmNvZGluZywgZXJyb3JzPWVycm9ycykKICAgIGVsaWYgaXNpbnN0YW5jZShkLCBkaWN0KToKICAgICAgICByZXR1cm4gZGljdChtYXAoanNvbl9kaWN0X3VuaWNvZGVfdG9fYnl0ZXMsIGl0ZXJpdGVtcyhkKSwgcmVwZWF0KGVuY29kaW5nKSwgcmVwZWF0KGVycm9ycykpKQogICAgZWxpZiBpc2luc3RhbmNlKGQsIGxpc3QpOgogICAgICAgIHJldHVybiBsaXN0KG1hcChqc29uX2RpY3RfdW5pY29kZV90b19ieXRlcywgZCwgcmVwZWF0KGVuY29kaW5nKSwgcmVwZWF0KGVycm9ycykpKQogICAgZWxpZiBpc2luc3RhbmNlKGQsIHR1cGxlKToKICAgICAgICByZXR1cm4gdHVwbGUobWFwKGpzb25fZGljdF91bmljb2RlX3RvX2J5dGVzLCBkLCByZXBlYXQoZW5jb2RpbmcpLCByZXBlYXQoZXJyb3JzKSkpCiAgICBlbHNlOgogICAgICAgIHJldHVybiBkCgpkZWYganNvbl9kaWN0X2J5dGVzX3RvX3VuaWNvZGUoZCwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0Jyk6CiAgICAnJycgUmVjdXJzaXZlbHkgY29udmVydCBkaWN0IGtleXMgYW5kIHZhbHVlcyB0byBieXRlIHN0cgoKICAgICAgICBTcGVjaWFsaXplZCBmb3IganNvbiByZXR1cm4gYmVjYXVzZSB0aGlzIG9ubHkgaGFuZGxlcywgbGlzdHMsIHR1cGxlcywKICAgICAgICBhbmQgZGljdCBjb250YWluZXIgdHlwZXMgKHRoZSBjb250YWluZXJzIHRoYXQgdGhlIGpzb24gbW9kdWxlIHJldHVybnMpCiAgICAnJycKCiAgICBpZiBpc2luc3RhbmNlKGQsIGJpbmFyeV90eXBlKToKICAgICAgICAjIFdhcm5pbmcsIGNhbiB0cmFjZWJhY2sKICAgICAgICByZXR1cm4gdG9fdGV4dChkLCBlbmNvZGluZz1lbmNvZGluZywgZXJyb3JzPWVycm9ycykKICAgIGVsaWYgaXNpbnN0YW5jZShkLCBkaWN0KToKICAgICAgICByZXR1cm4gZGljdChtYXAoanNvbl9kaWN0X2J5dGVzX3RvX3VuaWNvZGUsIGl0ZXJpdGVtcyhkKSwgcmVwZWF0KGVuY29kaW5nKSwgcmVwZWF0KGVycm9ycykpKQogICAgZWxpZiBpc2luc3RhbmNlKGQsIGxpc3QpOgogICAgICAgIHJldHVybiBsaXN0KG1hcChqc29uX2RpY3RfYnl0ZXNfdG9fdW5pY29kZSwgZCwgcmVwZWF0KGVuY29kaW5nKSwgcmVwZWF0KGVycm9ycykpKQogICAgZWxpZiBpc2luc3RhbmNlKGQsIHR1cGxlKToKICAgICAgICByZXR1cm4gdHVwbGUobWFwKGpzb25fZGljdF9ieXRlc190b191bmljb2RlLCBkLCByZXBlYXQoZW5jb2RpbmcpLCByZXBlYXQoZXJyb3JzKSkpCiAgICBlbHNlOgogICAgICAgIHJldHVybiBkCgpkZWYgcmV0dXJuX3ZhbHVlcyhvYmopOgogICAgIiIiIFJldHVybiBuYXRpdmUgc3RyaW5naWZpZWQgdmFsdWVzIGZyb20gZGF0YXN0cnVjdHVyZXMuCgogICAgRm9yIHVzZSB3aXRoIHJlbW92aW5nIHNlbnNpdGl2ZSB2YWx1ZXMgcHJlLWpzb25pZmljYXRpb24uIiIiCiAgICBpZiBpc2luc3RhbmNlKG9iaiwgKHRleHRfdHlwZSwgYmluYXJ5X3R5cGUpKToKICAgICAgICBpZiBvYmo6CiAgICAgICAgICAgIHlpZWxkIHRvX25hdGl2ZShvYmosIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgcmV0dXJuCiAgICBlbGlmIGlzaW5zdGFuY2Uob2JqLCBTRVFVRU5DRVRZUEUpOgogICAgICAgIGZvciBlbGVtZW50IGluIG9iajoKICAgICAgICAgICAgZm9yIHN1YmVsZW1lbnQgaW4gcmV0dXJuX3ZhbHVlcyhlbGVtZW50KToKICAgICAgICAgICAgICAgIHlpZWxkIHN1YmVsZW1lbnQKICAgIGVsaWYgaXNpbnN0YW5jZShvYmosIE1hcHBpbmcpOgogICAgICAgIGZvciBlbGVtZW50IGluIG9iai5pdGVtcygpOgogICAgICAgICAgICBmb3Igc3ViZWxlbWVudCBpbiByZXR1cm5fdmFsdWVzKGVsZW1lbnRbMV0pOgogICAgICAgICAgICAgICAgeWllbGQgc3ViZWxlbWVudAogICAgZWxpZiBpc2luc3RhbmNlKG9iaiwgKGJvb2wsIE5vbmVUeXBlKSk6CiAgICAgICAgIyBUaGlzIG11c3QgY29tZSBiZWZvcmUgaW50IGJlY2F1c2UgYm9vbHMgYXJlIGFsc28gaW50cwogICAgICAgIHJldHVybgogICAgZWxpZiBpc2luc3RhbmNlKG9iaiwgTlVNQkVSVFlQRVMpOgogICAgICAgIHlpZWxkIHRvX25hdGl2ZShvYmosIG5vbnN0cmluZz0nc2ltcGxlcmVwcicpCiAgICBlbHNlOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignVW5rbm93biBwYXJhbWV0ZXIgdHlwZTogJXMsICVzJyAlICh0eXBlKG9iaiksIG9iaikpCgpkZWYgcmVtb3ZlX3ZhbHVlcyh2YWx1ZSwgbm9fbG9nX3N0cmluZ3MpOgogICAgIiIiIFJlbW92ZSBzdHJpbmdzIGluIG5vX2xvZ19zdHJpbmdzIGZyb20gdmFsdWUuICBJZiB2YWx1ZSBpcyBhIGNvbnRhaW5lcgogICAgdHlwZSwgdGhlbiByZW1vdmUgYSBsb3QgbW9yZSIiIgogICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgKHRleHRfdHlwZSwgYmluYXJ5X3R5cGUpKToKICAgICAgICAjIE5lZWQgbmF0aXZlIHN0ciB0eXBlCiAgICAgICAgbmF0aXZlX3N0cl92YWx1ZSA9IHZhbHVlCiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgdGV4dF90eXBlKToKICAgICAgICAgICAgdmFsdWVfaXNfdGV4dCA9IFRydWUKICAgICAgICAgICAgaWYgUFkyOgogICAgICAgICAgICAgICAgbmF0aXZlX3N0cl92YWx1ZSA9IHRvX2J5dGVzKHZhbHVlLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQogICAgICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgYmluYXJ5X3R5cGUpOgogICAgICAgICAgICB2YWx1ZV9pc190ZXh0ID0gRmFsc2UKICAgICAgICAgICAgaWYgUFkzOgogICAgICAgICAgICAgICAgbmF0aXZlX3N0cl92YWx1ZSA9IHRvX3RleHQodmFsdWUsIGVuY29kaW5nPSd1dGYtOCcsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCgogICAgICAgIGlmIG5hdGl2ZV9zdHJfdmFsdWUgaW4gbm9fbG9nX3N0cmluZ3M6CiAgICAgICAgICAgIHJldHVybiAnVkFMVUVfU1BFQ0lGSUVEX0lOX05PX0xPR19QQVJBTUVURVInCiAgICAgICAgZm9yIG9taXRfbWUgaW4gbm9fbG9nX3N0cmluZ3M6CiAgICAgICAgICAgIG5hdGl2ZV9zdHJfdmFsdWUgPSBuYXRpdmVfc3RyX3ZhbHVlLnJlcGxhY2Uob21pdF9tZSwgJyonICogOCkKCiAgICAgICAgaWYgdmFsdWVfaXNfdGV4dCBhbmQgaXNpbnN0YW5jZShuYXRpdmVfc3RyX3ZhbHVlLCBiaW5hcnlfdHlwZSk6CiAgICAgICAgICAgIHZhbHVlID0gdG9fdGV4dChuYXRpdmVfc3RyX3ZhbHVlLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3JlcGxhY2UnKQogICAgICAgIGVsaWYgbm90IHZhbHVlX2lzX3RleHQgYW5kIGlzaW5zdGFuY2UobmF0aXZlX3N0cl92YWx1ZSwgdGV4dF90eXBlKToKICAgICAgICAgICAgdmFsdWUgPSB0b19ieXRlcyhuYXRpdmVfc3RyX3ZhbHVlLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3JlcGxhY2UnKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHZhbHVlID0gbmF0aXZlX3N0cl92YWx1ZQogICAgZWxpZiBpc2luc3RhbmNlKHZhbHVlLCBTRVFVRU5DRVRZUEUpOgogICAgICAgIHJldHVybiBbcmVtb3ZlX3ZhbHVlcyhlbGVtLCBub19sb2dfc3RyaW5ncykgZm9yIGVsZW0gaW4gdmFsdWVdCiAgICBlbGlmIGlzaW5zdGFuY2UodmFsdWUsIE1hcHBpbmcpOgogICAgICAgIHJldHVybiBkaWN0KChrLCByZW1vdmVfdmFsdWVzKHYsIG5vX2xvZ19zdHJpbmdzKSkgZm9yIGssIHYgaW4gdmFsdWUuaXRlbXMoKSkKICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgdHVwbGUoY2hhaW4oTlVNQkVSVFlQRVMsIChib29sLCBOb25lVHlwZSkpKSk6CiAgICAgICAgc3RyaW5neV92YWx1ZSA9IHRvX25hdGl2ZSh2YWx1ZSwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKICAgICAgICBpZiBzdHJpbmd5X3ZhbHVlIGluIG5vX2xvZ19zdHJpbmdzOgogICAgICAgICAgICByZXR1cm4gJ1ZBTFVFX1NQRUNJRklFRF9JTl9OT19MT0dfUEFSQU1FVEVSJwogICAgICAgIGZvciBvbWl0X21lIGluIG5vX2xvZ19zdHJpbmdzOgogICAgICAgICAgICBpZiBvbWl0X21lIGluIHN0cmluZ3lfdmFsdWU6CiAgICAgICAgICAgICAgICByZXR1cm4gJ1ZBTFVFX1NQRUNJRklFRF9JTl9OT19MT0dfUEFSQU1FVEVSJwogICAgZWxpZiBpc2luc3RhbmNlKHZhbHVlLCBkYXRldGltZS5kYXRldGltZSk6CiAgICAgICAgdmFsdWUgPSB2YWx1ZS5pc29mb3JtYXQoKQogICAgZWxzZToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ1ZhbHVlIG9mIHVua25vd24gdHlwZTogJXMsICVzJyAlICh0eXBlKHZhbHVlKSwgdmFsdWUpKQogICAgcmV0dXJuIHZhbHVlCgoKZGVmIGhldXJpc3RpY19sb2dfc2FuaXRpemUoZGF0YSwgbm9fbG9nX3ZhbHVlcz1Ob25lKToKICAgICcnJyBSZW1vdmUgc3RyaW5ncyB0aGF0IGxvb2sgbGlrZSBwYXNzd29yZHMgZnJvbSBsb2cgbWVzc2FnZXMgJycnCiAgICAjIEN1cnJlbnRseSBmaWx0ZXJzOgogICAgIyB1c2VyOnBhc3NAZm9vL3doYXRldmVyIGFuZCBodHRwOi8vdXNlcm5hbWU6cGFzc0B3aGVyZXZlci9mb28KICAgICMgVGhpcyBjb2RlIGhhcyBmYWxzZSBwb3NpdGl2ZXMgYW5kIGNvbnN1bWVzIHBhcnRzIG9mIGxvZ3MgdGhhdCBhcmUKICAgICMgbm90IHBhc3N3ZHMKCiAgICAjIGJlZ2luOiBzdGFydCBvZiBhIHBhc3N3ZCBjb250YWluaW5nIHN0cmluZwogICAgIyBlbmQ6IGVuZCBvZiBhIHBhc3N3ZCBjb250YWluaW5nIHN0cmluZwogICAgIyBzZXA6IGNoYXIgYmV0d2VlbiB1c2VyIGFuZCBwYXNzd2QKICAgICMgcHJldl9iZWdpbjogd2hlcmUgaW4gdGhlIG92ZXJhbGwgc3RyaW5nIHRvIHN0YXJ0IGEgc2VhcmNoIGZvcgogICAgIyAgIGEgcGFzc3dkCiAgICAjIHNlcF9zZWFyY2hfZW5kOiB3aGVyZSBpbiB0aGUgc3RyaW5nIHRvIGVuZCBhIHNlYXJjaCBmb3IgdGhlIHNlcAogICAgZGF0YSA9IHRvX25hdGl2ZShkYXRhKQoKICAgIG91dHB1dCA9IFtdCiAgICBiZWdpbiA9IGxlbihkYXRhKQogICAgcHJldl9iZWdpbiA9IGJlZ2luCiAgICBzZXAgPSAxCiAgICB3aGlsZSBzZXA6CiAgICAgICAgIyBGaW5kIHRoZSBwb3RlbnRpYWwgZW5kIG9mIGEgcGFzc3dkCiAgICAgICAgdHJ5OgogICAgICAgICAgICBlbmQgPSBkYXRhLnJpbmRleCgnQCcsIDAsIGJlZ2luKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICAjIE5vIHBhc3N3ZCBpbiB0aGUgcmVzdCBvZiB0aGUgZGF0YQogICAgICAgICAgICBvdXRwdXQuaW5zZXJ0KDAsIGRhdGFbMDpiZWdpbl0pCiAgICAgICAgICAgIGJyZWFrCgogICAgICAgICMgU2VhcmNoIGZvciB0aGUgYmVnaW5uaW5nIG9mIGEgcGFzc3dkCiAgICAgICAgc2VwID0gTm9uZQogICAgICAgIHNlcF9zZWFyY2hfZW5kID0gZW5kCiAgICAgICAgd2hpbGUgbm90IHNlcDoKICAgICAgICAgICAgIyBVUkwtc3R5bGUgdXNlcm5hbWUrcGFzc3dvcmQKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgYmVnaW4gPSBkYXRhLnJpbmRleCgnOi8vJywgMCwgc2VwX3NlYXJjaF9lbmQpCiAgICAgICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICAgICAgIyBObyB1cmwgc3R5bGUgaW4gdGhlIGRhdGEsIGNoZWNrIGZvciBzc2ggc3R5bGUgaW4gdGhlCiAgICAgICAgICAgICAgICAjIHJlc3Qgb2YgdGhlIHN0cmluZwogICAgICAgICAgICAgICAgYmVnaW4gPSAwCiAgICAgICAgICAgICMgU2VhcmNoIGZvciBzZXBhcmF0b3IKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VwID0gZGF0YS5pbmRleCgnOicsIGJlZ2luICsgMywgZW5kKQogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgICAgICMgTm8gc2VwYXJhdG9yOyBjaG9pY2VzOgogICAgICAgICAgICAgICAgaWYgYmVnaW4gPT0gMDoKICAgICAgICAgICAgICAgICAgICAjIFNlYXJjaGVkIHRoZSB3aG9sZSBzdHJpbmcgc28gdGhlcmUncyBubyBwYXNzd29yZAogICAgICAgICAgICAgICAgICAgICMgaGVyZS4gIFJldHVybiB0aGUgcmVtYWluaW5nIGRhdGEKICAgICAgICAgICAgICAgICAgICBvdXRwdXQuaW5zZXJ0KDAsIGRhdGFbMDpiZWdpbl0pCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICMgU2VhcmNoIGZvciBhIGRpZmZlcmVudCBiZWdpbm5pbmcgb2YgdGhlIHBhc3N3b3JkIGZpZWxkLgogICAgICAgICAgICAgICAgc2VwX3NlYXJjaF9lbmQgPSBiZWdpbgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICBpZiBzZXA6CiAgICAgICAgICAgICMgUGFzc3dvcmQgd2FzIGZvdW5kOyByZW1vdmUgaXQuCiAgICAgICAgICAgIG91dHB1dC5pbnNlcnQoMCwgZGF0YVtlbmQ6cHJldl9iZWdpbl0pCiAgICAgICAgICAgIG91dHB1dC5pbnNlcnQoMCwgJyoqKioqKioqJykKICAgICAgICAgICAgb3V0cHV0Lmluc2VydCgwLCBkYXRhW2JlZ2luOnNlcCArIDFdKQogICAgICAgICAgICBwcmV2X2JlZ2luID0gYmVnaW4KCiAgICBvdXRwdXQgPSAnJy5qb2luKG91dHB1dCkKICAgIGlmIG5vX2xvZ192YWx1ZXM6CiAgICAgICAgb3V0cHV0ID0gcmVtb3ZlX3ZhbHVlcyhvdXRwdXQsIG5vX2xvZ192YWx1ZXMpCiAgICByZXR1cm4gb3V0cHV0CgpkZWYgYnl0ZXNfdG9faHVtYW4oc2l6ZSwgaXNiaXRzPUZhbHNlLCB1bml0PU5vbmUpOgoKICAgIGJhc2UgPSAnQnl0ZXMnCiAgICBpZiBpc2JpdHM6CiAgICAgICAgYmFzZSA9ICdiaXRzJwogICAgc3VmZml4ID0gJycKCiAgICBmb3Igc3VmZml4LCBsaW1pdCBpbiBzb3J0ZWQoaXRlcml0ZW1zKFNJWkVfUkFOR0VTKSwga2V5PWxhbWJkYSBpdGVtOiAtaXRlbVsxXSk6CiAgICAgICAgaWYgKHVuaXQgaXMgTm9uZSBhbmQgc2l6ZSA+PSBsaW1pdCkgb3IgdW5pdCBpcyBub3QgTm9uZSBhbmQgdW5pdC51cHBlcigpID09IHN1ZmZpeFswXToKICAgICAgICAgICAgYnJlYWsKCiAgICBpZiBsaW1pdCAhPSAxOgogICAgICAgIHN1ZmZpeCArPSBiYXNlWzBdCiAgICBlbHNlOgogICAgICAgIHN1ZmZpeCA9IGJhc2UKCiAgICByZXR1cm4gJyUuMmYgJXMnICUgKGZsb2F0KHNpemUpLyBsaW1pdCwgc3VmZml4KQoKZGVmIGh1bWFuX3RvX2J5dGVzKG51bWJlciwgZGVmYXVsdF91bml0PU5vbmUsIGlzYml0cz1GYWxzZSk6CgogICAgJycnCiAgICBDb252ZXJ0IG51bWJlciBpbiBzdHJpbmcgZm9ybWF0IGludG8gYnl0ZXMgKGV4OiAnMksnID0+IDIwNDgpIG9yIHVzaW5nIHVuaXQgYXJndW1lbnQKICAgIGV4OgogICAgICBodW1hbl90b19ieXRlcygnMTBNJykgPD0+IGh1bWFuX3RvX2J5dGVzKDEwLCAnTScpCiAgICAnJycKICAgIG0gPSByZS5zZWFyY2goJ15ccyooXGQqXC4/XGQqKVxzKihbQS1aYS16XSspPycsIHN0cihudW1iZXIpLCBmbGFncz1yZS5JR05PUkVDQVNFKQogICAgaWYgbSBpcyBOb25lOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImh1bWFuX3RvX2J5dGVzKCkgY2FuJ3QgaW50ZXJwcmV0IGZvbGxvd2luZyBzdHJpbmc6ICVzIiAlIHN0cihudW1iZXIpKQogICAgdHJ5OgogICAgICAgIG51bSA9IGZsb2F0KG0uZ3JvdXAoMSkpCiAgICBleGNlcHQ6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiaHVtYW5fdG9fYnl0ZXMoKSBjYW4ndCBpbnRlcnByZXQgZm9sbG93aW5nIG51bWJlcjogJXMgKG9yaWdpbmFsIGlucHV0IHN0cmluZzogJXMpIiAlIChtLmdyb3VwKDEpLCBudW1iZXIpKQoKICAgIHVuaXQgPSBtLmdyb3VwKDIpCiAgICBpZiB1bml0IGlzIE5vbmU6CiAgICAgICAgdW5pdCA9IGRlZmF1bHRfdW5pdAoKICAgIGlmIHVuaXQgaXMgTm9uZToKICAgICAgICAnJycgTm8gdW5pdCBnaXZlbiwgcmV0dXJuaW5nIHJhdyBudW1iZXIgJycnCiAgICAgICAgcmV0dXJuIGludChyb3VuZChudW0pKQogICAgcmFuZ2Vfa2V5ID0gdW5pdFswXS51cHBlcigpCiAgICB0cnk6CiAgICAgICAgbGltaXQgPSBTSVpFX1JBTkdFU1tyYW5nZV9rZXldCiAgICBleGNlcHQ6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiaHVtYW5fdG9fYnl0ZXMoKSBmYWlsZWQgdG8gY29udmVydCAlcyAodW5pdCA9ICVzKS4gVGhlIHN1ZmZpeCBtdXN0IGJlIG9uZSBvZiAlcyIgJSAobnVtYmVyLCB1bml0LCAiLCAiLmpvaW4oU0laRV9SQU5HRVMua2V5cygpKSkpCgogICAgIyBkZWZhdWx0IHZhbHVlCiAgICB1bml0X2NsYXNzID0gJ0InCiAgICB1bml0X2NsYXNzX25hbWUgPSAnYnl0ZScKICAgICMgaGFuZGxpbmcgYml0cyBjYXNlCiAgICBpZiBpc2JpdHM6CiAgICAgICAgdW5pdF9jbGFzcyA9ICdiJwogICAgICAgIHVuaXRfY2xhc3NfbmFtZSA9ICdiaXQnCiAgICAjIGNoZWNrIHVuaXQgdmFsdWUgaWYgbW9yZSB0aGFuIG9uZSBjaGFyYWN0ZXIgKEtCLCBNQikKICAgIGlmIGxlbih1bml0KSA+IDE6CiAgICAgICAgZXhwZWN0X21lc3NhZ2UgPSAnZXhwZWN0ICVzJXMgb3IgJXMnICUgKHJhbmdlX2tleSwgdW5pdF9jbGFzcywgcmFuZ2Vfa2V5KQogICAgICAgIGlmIHJhbmdlX2tleSA9PSAnQic6CiAgICAgICAgICAgIGV4cGVjdF9tZXNzYWdlID0gJ2V4cGVjdCAlcyBvciAlcycgJSAodW5pdF9jbGFzcywgdW5pdF9jbGFzc19uYW1lKQoKICAgICAgICBpZiB1bml0X2NsYXNzX25hbWUgaW4gdW5pdC5sb3dlcigpOgogICAgICAgICAgICBwYXNzCiAgICAgICAgZWxpZiB1bml0WzFdICE9IHVuaXRfY2xhc3M6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImh1bWFuX3RvX2J5dGVzKCkgZmFpbGVkIHRvIGNvbnZlcnQgJXMuIFZhbHVlIGlzIG5vdCBhIHZhbGlkIHN0cmluZyAoJXMpIiAlIChudW1iZXIsIGV4cGVjdF9tZXNzYWdlKSkKCiAgICByZXR1cm4gaW50KHJvdW5kKG51bSAqIGxpbWl0KSkKCmRlZiBpc19leGVjdXRhYmxlKHBhdGgpOgogICAgJycnaXMgdGhlIGdpdmVuIHBhdGggZXhlY3V0YWJsZT8KCiAgICBMaW1pdGF0aW9uczoKICAgICogRG9lcyBub3QgYWNjb3VudCBmb3IgRlNBQ0xzLgogICAgKiBNb3N0IHRpbWVzIHdlIHJlYWxseSB3YW50IHRvIGtub3cgIkNhbiB0aGUgY3VycmVudCB1c2VyIGV4ZWN1dGUgdGhpcwogICAgICBmaWxlIiAgVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCB0ZWxsIHVzIHRoYXQsIG9ubHkgaWYgYW4gZXhlY3V0ZSBiaXQgaXMgc2V0LgogICAgJycnCiAgICAjIFRoZXNlIGFyZSBhbGwgYml0ZmllbGRzIHNvIGZpcnN0IGJpdHdpc2Utb3IgYWxsIHRoZSBwZXJtaXNzaW9ucyB3ZSdyZQogICAgIyBsb29raW5nIGZvciwgdGhlbiBiaXR3aXNlLWFuZCB3aXRoIHRoZSBmaWxlJ3MgbW9kZSB0byBkZXRlcm1pbmUgaWYgYW55CiAgICAjIGV4ZWN1dGUgYml0cyBhcmUgc2V0LgogICAgcmV0dXJuICgoc3RhdC5TX0lYVVNSIHwgc3RhdC5TX0lYR1JQIHwgc3RhdC5TX0lYT1RIKSAmIG9zLnN0YXQocGF0aClbc3RhdC5TVF9NT0RFXSkKCmRlZiBfbG9hZF9wYXJhbXMoKToKICAgICcnJyByZWFkIHRoZSBtb2R1bGVzIHBhcmFtZXRlcnMgYW5kIHN0b3JlIHRoZW0gZ2xvYmFsbHkuCgogICAgVGhpcyBmdW5jdGlvbiBtYXkgYmUgbmVlZGVkIGZvciBjZXJ0YWluIHZlcnkgZHluYW1pYyBjdXN0b20gbW9kdWxlcyB3aGljaAogICAgd2FudCB0byBwcm9jZXNzIHRoZSBwYXJhbWV0ZXJzIHRoYXQgYXJlIGJlaW5nIGhhbmRlZCB0aGUgbW9kdWxlLiAgU2luY2UKICAgIHRoaXMgaXMgc28gY2xvc2VseSB0aWVkIHRvIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiBtb2R1bGVzIHdlIGNhbm5vdAogICAgZ3VhcmFudGVlIEFQSSBzdGFiaWxpdHkgZm9yIGl0IChpdCBtYXkgY2hhbmdlIGJldHdlZW4gdmVyc2lvbnMpIGhvd2V2ZXIgd2UKICAgIHdpbGwgdHJ5IG5vdCB0byBicmVhayBpdCBncmF0dWl0b3VzbHkuICBJdCBpcyBjZXJ0YWlubHkgbW9yZSBmdXR1cmUtcHJvb2YKICAgIHRvIGNhbGwgdGhpcyBmdW5jdGlvbiBhbmQgY29uc3VtZSBpdHMgb3V0cHV0cyB0aGFuIHRvIGltcGxlbWVudCB0aGUgbG9naWMKICAgIGluc2lkZSBpdCBhcyBhIGNvcHkgaW4geW91ciBvd24gY29kZS4KICAgICcnJwogICAgZ2xvYmFsIF9BTlNJQkxFX0FSR1MKICAgIGlmIF9BTlNJQkxFX0FSR1MgaXMgbm90IE5vbmU6CiAgICAgICAgYnVmZmVyID0gX0FOU0lCTEVfQVJHUwogICAgZWxzZToKICAgICAgICAjIGRlYnVnIG92ZXJyaWRlcyB0byByZWFkIGFyZ3MgZnJvbSBmaWxlIG9yIGNtZGxpbmUKCiAgICAgICAgIyBBdm9pZCB0cmFjZWJhY2tzIHdoZW4gbG9jYWxlIGlzIG5vbi11dGY4CiAgICAgICAgIyBXZSBjb250cm9sIHRoZSBhcmdzIGFuZCB3ZSBwYXNzIHRoZW0gYXMgdXRmOAogICAgICAgIGlmIGxlbihzeXMuYXJndikgPiAxOgogICAgICAgICAgICBpZiBvcy5wYXRoLmlzZmlsZShzeXMuYXJndlsxXSk6CiAgICAgICAgICAgICAgICBmZCA9IG9wZW4oc3lzLmFyZ3ZbMV0sICdyYicpCiAgICAgICAgICAgICAgICBidWZmZXIgPSBmZC5yZWFkKCkKICAgICAgICAgICAgICAgIGZkLmNsb3NlKCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGJ1ZmZlciA9IHN5cy5hcmd2WzFdCiAgICAgICAgICAgICAgICBpZiBQWTM6CiAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gYnVmZmVyLmVuY29kZSgndXRmLTgnLCBlcnJvcnM9J3N1cnJvZ2F0ZWVzY2FwZScpCiAgICAgICAgIyBkZWZhdWx0IGNhc2UsIHJlYWQgZnJvbSBzdGRpbgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGlmIFBZMjoKICAgICAgICAgICAgICAgIGJ1ZmZlciA9IHN5cy5zdGRpbi5yZWFkKCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGJ1ZmZlciA9IHN5cy5zdGRpbi5idWZmZXIucmVhZCgpCiAgICAgICAgX0FOU0lCTEVfQVJHUyA9IGJ1ZmZlcgoKICAgIHRyeToKICAgICAgICBwYXJhbXMgPSBqc29uLmxvYWRzKGJ1ZmZlci5kZWNvZGUoJ3V0Zi04JykpCiAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAjIFRoaXMgaGVscGVyIHVzZWQgdG9vIGVhcmx5IGZvciBmYWlsX2pzb24gdG8gd29yay4KICAgICAgICBwcmludCgnXG57Im1zZyI6ICJFcnJvcjogTW9kdWxlIHVuYWJsZSB0byBkZWNvZGUgdmFsaWQgSlNPTiBvbiBzdGRpbi4gIFVuYWJsZSB0byBmaWd1cmUgb3V0IHdoYXQgcGFyYW1ldGVycyB3ZXJlIHBhc3NlZCIsICJmYWlsZWQiOiB0cnVlfScpCiAgICAgICAgc3lzLmV4aXQoMSkKCiAgICBpZiBQWTI6CiAgICAgICAgcGFyYW1zID0ganNvbl9kaWN0X3VuaWNvZGVfdG9fYnl0ZXMocGFyYW1zKQoKICAgIHRyeToKICAgICAgICByZXR1cm4gcGFyYW1zWydBTlNJQkxFX01PRFVMRV9BUkdTJ10KICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAjIFRoaXMgaGVscGVyIGRvZXMgbm90IGhhdmUgYWNjZXNzIHRvIGZhaWxfanNvbiBzbyB3ZSBoYXZlIHRvIHByaW50CiAgICAgICAgIyBqc29uIG91dHB1dCBvbiBvdXIgb3duLgogICAgICAgIHByaW50KCdcbnsibXNnIjogIkVycm9yOiBNb2R1bGUgdW5hYmxlIHRvIGxvY2F0ZSBBTlNJQkxFX01PRFVMRV9BUkdTIGluIGpzb24gZGF0YSBmcm9tIHN0ZGluLiAgVW5hYmxlIHRvIGZpZ3VyZSBvdXQgd2hhdCBwYXJhbWV0ZXJzIHdlcmUgcGFzc2VkIiwgJwogICAgICAgICAgICAgICciZmFpbGVkIjogdHJ1ZX0nKQogICAgICAgIHN5cy5leGl0KDEpCgpkZWYgZW52X2ZhbGxiYWNrKCphcmdzLCAqKmt3YXJncyk6CiAgICAnJycgTG9hZCB2YWx1ZSBmcm9tIGVudmlyb25tZW50ICcnJwogICAgZm9yIGFyZyBpbiBhcmdzOgogICAgICAgIGlmIGFyZyBpbiBvcy5lbnZpcm9uOgogICAgICAgICAgICByZXR1cm4gb3MuZW52aXJvblthcmddCiAgICBlbHNlOgogICAgICAgIHJhaXNlIEFuc2libGVGYWxsYmFja05vdEZvdW5kCgpkZWYgX2xlbmllbnRfbG93ZXJjYXNlKGxzdCk6CiAgICAiIiJMb3dlcmNhc2UgZWxlbWVudHMgb2YgYSBsaXN0LgoKICAgIElmIGFuIGVsZW1lbnQgaXMgbm90IGEgc3RyaW5nLCBwYXNzIGl0IHRocm91Z2ggdW50b3VjaGVkLgogICAgIiIiCiAgICBsb3dlcmVkID0gW10KICAgIGZvciB2YWx1ZSBpbiBsc3Q6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBsb3dlcmVkLmFwcGVuZCh2YWx1ZS5sb3dlcigpKQogICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoKICAgICAgICAgICAgbG93ZXJlZC5hcHBlbmQodmFsdWUpCiAgICByZXR1cm4gbG93ZXJlZAoKZGVmIGZvcm1hdF9hdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpOgogICAgYXR0cmlidXRlX2xpc3QgPSBbXQogICAgZm9yIGF0dHIgaW4gYXR0cmlidXRlczoKICAgICAgICBpZiBhdHRyIGluIEZJTEVfQVRUUklCVVRFUzoKICAgICAgICAgICAgYXR0cmlidXRlX2xpc3QuYXBwZW5kKEZJTEVfQVRUUklCVVRFU1thdHRyXSkKICAgIHJldHVybiBhdHRyaWJ1dGVfbGlzdAoKZGVmIGdldF9mbGFnc19mcm9tX2F0dHJpYnV0ZXMoYXR0cmlidXRlcyk6CiAgICBmbGFncyA9IFtdCiAgICBmb3Iga2V5LGF0dHIgaW4gRklMRV9BVFRSSUJVVEVTLml0ZW1zKCk6CiAgICAgICAgaWYgYXR0ciBpbiBhdHRyaWJ1dGVzOgogICAgICAgICAgICBmbGFncy5hcHBlbmQoa2V5KQogICAgcmV0dXJuICcnLmpvaW4oZmxhZ3MpCgpjbGFzcyBBbnNpYmxlRmFsbGJhY2tOb3RGb3VuZChFeGNlcHRpb24pOgogICAgcGFzcwoKCmNsYXNzIEFuc2libGVNb2R1bGUob2JqZWN0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBhcmd1bWVudF9zcGVjLCBieXBhc3NfY2hlY2tzPUZhbHNlLCBub19sb2c9RmFsc2UsCiAgICAgICAgICAgICAgICAgY2hlY2tfaW52YWxpZF9hcmd1bWVudHM9VHJ1ZSwgbXV0dWFsbHlfZXhjbHVzaXZlPU5vbmUsIHJlcXVpcmVkX3RvZ2V0aGVyPU5vbmUsCiAgICAgICAgICAgICAgICAgcmVxdWlyZWRfb25lX29mPU5vbmUsIGFkZF9maWxlX2NvbW1vbl9hcmdzPUZhbHNlLCBzdXBwb3J0c19jaGVja19tb2RlPUZhbHNlLAogICAgICAgICAgICAgICAgIHJlcXVpcmVkX2lmPU5vbmUpOgoKICAgICAgICAnJycKICAgICAgICBjb21tb24gY29kZSBmb3IgcXVpY2tseSBidWlsZGluZyBhbiBhbnNpYmxlIG1vZHVsZSBpbiBQeXRob24KICAgICAgICAoYWx0aG91Z2ggeW91IGNhbiB3cml0ZSBtb2R1bGVzIGluIGFueXRoaW5nIHRoYXQgY2FuIHJldHVybiBKU09OKQogICAgICAgIHNlZSBsaWJyYXJ5LyogZm9yIGV4YW1wbGVzCiAgICAgICAgJycnCgogICAgICAgIHNlbGYuX25hbWUgPSBvcy5wYXRoLmJhc2VuYW1lKF9fZmlsZV9fKSAjaW5pdGlhbGl6ZSBuYW1lIHVudGlsIHdlIGNhbiBwYXJzZSBmcm9tIG9wdGlvbnMKICAgICAgICBzZWxmLmFyZ3VtZW50X3NwZWMgPSBhcmd1bWVudF9zcGVjCiAgICAgICAgc2VsZi5zdXBwb3J0c19jaGVja19tb2RlID0gc3VwcG9ydHNfY2hlY2tfbW9kZQogICAgICAgIHNlbGYuY2hlY2tfbW9kZSA9IEZhbHNlCiAgICAgICAgc2VsZi5ub19sb2cgPSBub19sb2cKICAgICAgICBzZWxmLmNsZWFudXBfZmlsZXMgPSBbXQogICAgICAgIHNlbGYuX2RlYnVnID0gRmFsc2UKICAgICAgICBzZWxmLl9kaWZmID0gRmFsc2UKICAgICAgICBzZWxmLl9zb2NrZXRfcGF0aCA9IE5vbmUKICAgICAgICBzZWxmLl92ZXJib3NpdHkgPSAwCiAgICAgICAgIyBNYXkgYmUgdXNlZCB0byBzZXQgbW9kaWZpY2F0aW9ucyB0byB0aGUgZW52aXJvbm1lbnQgZm9yIGFueQogICAgICAgICMgcnVuX2NvbW1hbmQgaW52b2NhdGlvbgogICAgICAgIHNlbGYucnVuX2NvbW1hbmRfZW52aXJvbl91cGRhdGUgPSB7fQogICAgICAgIHNlbGYuX3dhcm5pbmdzID0gW10KICAgICAgICBzZWxmLl9kZXByZWNhdGlvbnMgPSBbXQoKICAgICAgICBzZWxmLmFsaWFzZXMgPSB7fQogICAgICAgIHNlbGYuX2xlZ2FsX2lucHV0cyA9IFsnX2Fuc2libGVfY2hlY2tfbW9kZScsICdfYW5zaWJsZV9ub19sb2cnLCAnX2Fuc2libGVfZGVidWcnLCAnX2Fuc2libGVfZGlmZicsICdfYW5zaWJsZV92ZXJib3NpdHknLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnX2Fuc2libGVfc2VsaW51eF9zcGVjaWFsX2ZzJywgJ19hbnNpYmxlX21vZHVsZV9uYW1lJywgJ19hbnNpYmxlX3ZlcnNpb24nLCAnX2Fuc2libGVfc3lzbG9nX2ZhY2lsaXR5JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ19hbnNpYmxlX3NvY2tldCddCgogICAgICAgIGlmIGFkZF9maWxlX2NvbW1vbl9hcmdzOgogICAgICAgICAgICBmb3IgaywgdiBpbiBGSUxFX0NPTU1PTl9BUkdVTUVOVFMuaXRlbXMoKToKICAgICAgICAgICAgICAgIGlmIGsgbm90IGluIHNlbGYuYXJndW1lbnRfc3BlYzoKICAgICAgICAgICAgICAgICAgICBzZWxmLmFyZ3VtZW50X3NwZWNba10gPSB2CgogICAgICAgIHNlbGYuX2xvYWRfcGFyYW1zKCkKICAgICAgICBzZWxmLl9zZXRfZmFsbGJhY2tzKCkKCiAgICAgICAgIyBhcHBlbmQgdG8gbGVnYWxfaW5wdXRzIGFuZCB0aGVuIHBvc3NpYmx5IGNoZWNrIGFnYWluc3QgdGhlbQogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5hbGlhc2VzID0gc2VsZi5faGFuZGxlX2FsaWFzZXMoKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgIyBVc2UgZXhjZXB0aW9ucyBoZXJlIGJlY2F1c2UgaXQgaXNuJ3Qgc2FmZSB0byBjYWxsIGZhaWxfanNvbiB1bnRpbCBub19sb2cgaXMgcHJvY2Vzc2VkCiAgICAgICAgICAgIHByaW50KCdcbnsiZmFpbGVkIjogdHJ1ZSwgIm1zZyI6ICJNb2R1bGUgYWxpYXMgZXJyb3I6ICVzIn0nICUgc3RyKGUpKQogICAgICAgICAgICBzeXMuZXhpdCgxKQoKICAgICAgICAjIFNhdmUgcGFyYW1ldGVyIHZhbHVlcyB0aGF0IHNob3VsZCBuZXZlciBiZSBsb2dnZWQKICAgICAgICBzZWxmLm5vX2xvZ192YWx1ZXMgPSBzZXQoKQogICAgICAgICMgVXNlIHRoZSBhcmdzcGVjIHRvIGRldGVybWluZSB3aGljaCBhcmdzIGFyZSBub19sb2cKICAgICAgICBmb3IgYXJnX25hbWUsIGFyZ19vcHRzIGluIHNlbGYuYXJndW1lbnRfc3BlYy5pdGVtcygpOgogICAgICAgICAgICBpZiBhcmdfb3B0cy5nZXQoJ25vX2xvZycsIEZhbHNlKToKICAgICAgICAgICAgICAgICMgRmluZCB0aGUgdmFsdWUgZm9yIHRoZSBub19sb2cnZCBwYXJhbQogICAgICAgICAgICAgICAgbm9fbG9nX29iamVjdCA9IHNlbGYucGFyYW1zLmdldChhcmdfbmFtZSwgTm9uZSkKICAgICAgICAgICAgICAgIGlmIG5vX2xvZ19vYmplY3Q6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5ub19sb2dfdmFsdWVzLnVwZGF0ZShyZXR1cm5fdmFsdWVzKG5vX2xvZ19vYmplY3QpKQoKICAgICAgICAgICAgaWYgYXJnX29wdHMuZ2V0KCdyZW1vdmVkX2luX3ZlcnNpb24nKSBpcyBub3QgTm9uZSBhbmQgYXJnX25hbWUgaW4gc2VsZi5wYXJhbXM6CiAgICAgICAgICAgICAgICBzZWxmLl9kZXByZWNhdGlvbnMuYXBwZW5kKHsKICAgICAgICAgICAgICAgICAgICAnbXNnJzogIlBhcmFtICclcycgaXMgZGVwcmVjYXRlZC4gU2VlIHRoZSBtb2R1bGUgZG9jcyBmb3IgbW9yZSBpbmZvcm1hdGlvbiIgJSBhcmdfbmFtZSwKICAgICAgICAgICAgICAgICAgICAndmVyc2lvbic6IGFyZ19vcHRzLmdldCgncmVtb3ZlZF9pbl92ZXJzaW9uJykKICAgICAgICAgICAgICAgIH0pCgogICAgICAgICMgY2hlY2sgdGhlIGxvY2FsZSBhcyBzZXQgYnkgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQsIGFuZCByZXNldCB0bwogICAgICAgICMgYSBrbm93biB2YWxpZCAoTEFORz1DKSBpZiBpdCdzIGFuIGludmFsaWQvdW5hdmFpbGFibGUgbG9jYWxlCiAgICAgICAgc2VsZi5fY2hlY2tfbG9jYWxlKCkKCiAgICAgICAgc2VsZi5fY2hlY2tfYXJndW1lbnRzKGNoZWNrX2ludmFsaWRfYXJndW1lbnRzKQoKICAgICAgICAjIGNoZWNrIGV4Y2x1c2l2ZSBlYXJseQogICAgICAgIGlmIG5vdCBieXBhc3NfY2hlY2tzOgogICAgICAgICAgICBzZWxmLl9jaGVja19tdXR1YWxseV9leGNsdXNpdmUobXV0dWFsbHlfZXhjbHVzaXZlKQoKICAgICAgICBzZWxmLl9zZXRfZGVmYXVsdHMocHJlPVRydWUpCgogICAgICAgIHNlbGYuX0NIRUNLX0FSR1VNRU5UX1RZUEVTX0RJU1BBVENIRVIgPSB7CiAgICAgICAgICAgICdzdHInOiBzZWxmLl9jaGVja190eXBlX3N0ciwKICAgICAgICAgICAgJ2xpc3QnOiBzZWxmLl9jaGVja190eXBlX2xpc3QsCiAgICAgICAgICAgICdkaWN0Jzogc2VsZi5fY2hlY2tfdHlwZV9kaWN0LAogICAgICAgICAgICAnYm9vbCc6IHNlbGYuX2NoZWNrX3R5cGVfYm9vbCwKICAgICAgICAgICAgJ2ludCc6IHNlbGYuX2NoZWNrX3R5cGVfaW50LAogICAgICAgICAgICAnZmxvYXQnOiBzZWxmLl9jaGVja190eXBlX2Zsb2F0LAogICAgICAgICAgICAncGF0aCc6IHNlbGYuX2NoZWNrX3R5cGVfcGF0aCwKICAgICAgICAgICAgJ3Jhdyc6IHNlbGYuX2NoZWNrX3R5cGVfcmF3LAogICAgICAgICAgICAnanNvbmFyZyc6IHNlbGYuX2NoZWNrX3R5cGVfanNvbmFyZywKICAgICAgICAgICAgJ2pzb24nOiBzZWxmLl9jaGVja190eXBlX2pzb25hcmcsCiAgICAgICAgICAgICdieXRlcyc6IHNlbGYuX2NoZWNrX3R5cGVfYnl0ZXMsCiAgICAgICAgICAgICdiaXRzJzogc2VsZi5fY2hlY2tfdHlwZV9iaXRzLAogICAgICAgIH0KICAgICAgICBpZiBub3QgYnlwYXNzX2NoZWNrczoKICAgICAgICAgICAgc2VsZi5fY2hlY2tfcmVxdWlyZWRfYXJndW1lbnRzKCkKICAgICAgICAgICAgc2VsZi5fY2hlY2tfYXJndW1lbnRfdHlwZXMoKQogICAgICAgICAgICBzZWxmLl9jaGVja19hcmd1bWVudF92YWx1ZXMoKQogICAgICAgICAgICBzZWxmLl9jaGVja19yZXF1aXJlZF90b2dldGhlcihyZXF1aXJlZF90b2dldGhlcikKICAgICAgICAgICAgc2VsZi5fY2hlY2tfcmVxdWlyZWRfb25lX29mKHJlcXVpcmVkX29uZV9vZikKICAgICAgICAgICAgc2VsZi5fY2hlY2tfcmVxdWlyZWRfaWYocmVxdWlyZWRfaWYpCgogICAgICAgIHNlbGYuX3NldF9kZWZhdWx0cyhwcmU9RmFsc2UpCgogICAgICAgIGlmIG5vdCBzZWxmLm5vX2xvZzoKICAgICAgICAgICAgc2VsZi5fbG9nX2ludm9jYXRpb24oKQoKICAgICAgICAjIGZpbmFsbHksIG1ha2Ugc3VyZSB3ZSdyZSBpbiBhIHNhbmUgd29ya2luZyBkaXIKICAgICAgICBzZWxmLl9zZXRfY3dkKCkKCiAgICBkZWYgd2FybihzZWxmLCB3YXJuaW5nKToKCiAgICAgICAgaWYgaXNpbnN0YW5jZSh3YXJuaW5nLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICBzZWxmLl93YXJuaW5ncy5hcHBlbmQod2FybmluZykKICAgICAgICAgICAgc2VsZi5sb2coJ1tXQVJOSU5HXSAlcycgJSB3YXJuaW5nKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigid2FybiByZXF1aXJlcyBhIHN0cmluZyBub3QgYSAlcyIgJSB0eXBlKHdhcm5pbmcpKQoKICAgIGRlZiBkZXByZWNhdGUoc2VsZiwgbXNnLCB2ZXJzaW9uPU5vbmUpOgogICAgICAgIGlmIGlzaW5zdGFuY2UobXNnLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICBzZWxmLl9kZXByZWNhdGlvbnMuYXBwZW5kKHsKICAgICAgICAgICAgICAgICdtc2cnOiBtc2csCiAgICAgICAgICAgICAgICAndmVyc2lvbic6IHZlcnNpb24KICAgICAgICAgICAgfSkKICAgICAgICAgICAgc2VsZi5sb2coJ1tERVBSRUNBVElPTiBXQVJOSU5HXSAlcyAlcycgJSAobXNnLCB2ZXJzaW9uKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoImRlcHJlY2F0ZSByZXF1aXJlcyBhIHN0cmluZyBub3QgYSAlcyIgJSB0eXBlKG1zZykpCgogICAgZGVmIGxvYWRfZmlsZV9jb21tb25fYXJndW1lbnRzKHNlbGYsIHBhcmFtcyk6CiAgICAgICAgJycnCiAgICAgICAgbWFueSBtb2R1bGVzIGRlYWwgd2l0aCBmaWxlcywgdGhpcyBlbmNhcHN1bGF0ZXMgY29tbW9uCiAgICAgICAgb3B0aW9ucyB0aGF0IHRoZSBmaWxlIG1vZHVsZSBhY2NlcHRzIHN1Y2ggdGhhdCBpdCBpcyBkaXJlY3RseQogICAgICAgIGF2YWlsYWJsZSB0byBhbGwgbW9kdWxlcyBhbmQgdGhleSBjYW4gc2hhcmUgY29kZS4KICAgICAgICAnJycKCiAgICAgICAgcGF0aCA9IHBhcmFtcy5nZXQoJ3BhdGgnLCBwYXJhbXMuZ2V0KCdkZXN0JywgTm9uZSkpCiAgICAgICAgaWYgcGF0aCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4ge30KICAgICAgICBlbHNlOgogICAgICAgICAgICBwYXRoID0gb3MucGF0aC5leHBhbmR1c2VyKG9zLnBhdGguZXhwYW5kdmFycyhwYXRoKSkKCiAgICAgICAgYl9wYXRoID0gdG9fYnl0ZXMocGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKICAgICAgICAjIGlmIHRoZSBwYXRoIGlzIGEgc3ltbGluaywgYW5kIHdlJ3JlIGZvbGxvd2luZyBsaW5rcywgZ2V0CiAgICAgICAgIyB0aGUgdGFyZ2V0IG9mIHRoZSBsaW5rIGluc3RlYWQgZm9yIHRlc3RpbmcKICAgICAgICBpZiBwYXJhbXMuZ2V0KCdmb2xsb3cnLCBGYWxzZSkgYW5kIG9zLnBhdGguaXNsaW5rKGJfcGF0aCk6CiAgICAgICAgICAgIGJfcGF0aCA9IG9zLnBhdGgucmVhbHBhdGgoYl9wYXRoKQogICAgICAgICAgICBwYXRoID0gdG9fbmF0aXZlKGJfcGF0aCkKCiAgICAgICAgbW9kZSAgID0gcGFyYW1zLmdldCgnbW9kZScsIE5vbmUpCiAgICAgICAgb3duZXIgID0gcGFyYW1zLmdldCgnb3duZXInLCBOb25lKQogICAgICAgIGdyb3VwICA9IHBhcmFtcy5nZXQoJ2dyb3VwJywgTm9uZSkKCiAgICAgICAgIyBzZWxpbnV4IHJlbGF0ZWQgb3B0aW9ucwogICAgICAgIHNldXNlciAgICA9IHBhcmFtcy5nZXQoJ3NldXNlcicsIE5vbmUpCiAgICAgICAgc2Vyb2xlICAgID0gcGFyYW1zLmdldCgnc2Vyb2xlJywgTm9uZSkKICAgICAgICBzZXR5cGUgICAgPSBwYXJhbXMuZ2V0KCdzZXR5cGUnLCBOb25lKQogICAgICAgIHNlbGV2ZWwgICA9IHBhcmFtcy5nZXQoJ3NlbGV2ZWwnLCBOb25lKQogICAgICAgIHNlY29udGV4dCA9IFtzZXVzZXIsIHNlcm9sZSwgc2V0eXBlXQoKICAgICAgICBpZiBzZWxmLnNlbGludXhfbWxzX2VuYWJsZWQoKToKICAgICAgICAgICAgc2Vjb250ZXh0LmFwcGVuZChzZWxldmVsKQoKICAgICAgICBkZWZhdWx0X3NlY29udGV4dCA9IHNlbGYuc2VsaW51eF9kZWZhdWx0X2NvbnRleHQocGF0aCkKICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4oZGVmYXVsdF9zZWNvbnRleHQpKToKICAgICAgICAgICAgaWYgaSBpcyBub3QgTm9uZSBhbmQgc2Vjb250ZXh0W2ldID09ICdfZGVmYXVsdCc6CiAgICAgICAgICAgICAgICBzZWNvbnRleHRbaV0gPSBkZWZhdWx0X3NlY29udGV4dFtpXQoKICAgICAgICBhdHRyaWJ1dGVzID0gcGFyYW1zLmdldCgnYXR0cmlidXRlcycsIE5vbmUpCiAgICAgICAgcmV0dXJuIGRpY3QoCiAgICAgICAgICAgIHBhdGg9cGF0aCwgbW9kZT1tb2RlLCBvd25lcj1vd25lciwgZ3JvdXA9Z3JvdXAsCiAgICAgICAgICAgIHNldXNlcj1zZXVzZXIsIHNlcm9sZT1zZXJvbGUsIHNldHlwZT1zZXR5cGUsCiAgICAgICAgICAgIHNlbGV2ZWw9c2VsZXZlbCwgc2Vjb250ZXh0PXNlY29udGV4dCwgYXR0cmlidXRlcz1hdHRyaWJ1dGVzLAogICAgICAgICkKCgogICAgIyBEZXRlY3Qgd2hldGhlciB1c2luZyBzZWxpbnV4IHRoYXQgaXMgTUxTLWF3YXJlLgogICAgIyBXaGlsZSB0aGlzIG1lYW5zIHlvdSBjYW4gc2V0IHRoZSBsZXZlbC9yYW5nZSB3aXRoCiAgICAjIHNlbGludXgubHNldGZpbGVjb24oKSwgaXQgbWF5IG9yIG1heSBub3QgbWVhbiB0aGF0IHlvdQogICAgIyB3aWxsIGdldCB0aGUgc2VsZXZlbCBhcyBwYXJ0IG9mIHRoZSBjb250ZXh0IHJldHVybmVkCiAgICAjIGJ5IHNlbGludXgubGdldGZpbGVjb24oKS4KCiAgICBkZWYgc2VsaW51eF9tbHNfZW5hYmxlZChzZWxmKToKICAgICAgICBpZiBub3QgSEFWRV9TRUxJTlVYOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICBpZiBzZWxpbnV4LmlzX3NlbGludXhfbWxzX2VuYWJsZWQoKSA9PSAxOgogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBzZWxpbnV4X2VuYWJsZWQoc2VsZik6CiAgICAgICAgaWYgbm90IEhBVkVfU0VMSU5VWDoKICAgICAgICAgICAgc2VlbmFibGVkID0gc2VsZi5nZXRfYmluX3BhdGgoJ3NlbGludXhlbmFibGVkJykKICAgICAgICAgICAgaWYgc2VlbmFibGVkIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgKHJjLG91dCxlcnIpID0gc2VsZi5ydW5fY29tbWFuZChzZWVuYWJsZWQpCiAgICAgICAgICAgICAgICBpZiByYyA9PSAwOgogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0iQWJvcnRpbmcsIHRhcmdldCB1c2VzIHNlbGludXggYnV0IHB5dGhvbiBiaW5kaW5ncyAobGlic2VsaW51eC1weXRob24pIGFyZW4ndCBpbnN0YWxsZWQhIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgaWYgc2VsaW51eC5pc19zZWxpbnV4X2VuYWJsZWQoKSA9PSAxOgogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICMgRGV0ZXJtaW5lIHdoZXRoZXIgd2UgbmVlZCBhIHBsYWNlaG9sZGVyIGZvciBzZWxldmVsL21scwogICAgZGVmIHNlbGludXhfaW5pdGlhbF9jb250ZXh0KHNlbGYpOgogICAgICAgIGNvbnRleHQgPSBbTm9uZSwgTm9uZSwgTm9uZV0KICAgICAgICBpZiBzZWxmLnNlbGludXhfbWxzX2VuYWJsZWQoKToKICAgICAgICAgICAgY29udGV4dC5hcHBlbmQoTm9uZSkKICAgICAgICByZXR1cm4gY29udGV4dAoKICAgICMgSWYgc2VsaW51eCBmYWlscyB0byBmaW5kIGEgZGVmYXVsdCwgcmV0dXJuIGFuIGFycmF5IG9mIE5vbmUKICAgIGRlZiBzZWxpbnV4X2RlZmF1bHRfY29udGV4dChzZWxmLCBwYXRoLCBtb2RlPTApOgogICAgICAgIGNvbnRleHQgPSBzZWxmLnNlbGludXhfaW5pdGlhbF9jb250ZXh0KCkKICAgICAgICBpZiBub3QgSEFWRV9TRUxJTlVYIG9yIG5vdCBzZWxmLnNlbGludXhfZW5hYmxlZCgpOgogICAgICAgICAgICByZXR1cm4gY29udGV4dAogICAgICAgIHRyeToKICAgICAgICAgICAgcmV0ID0gc2VsaW51eC5tYXRjaHBhdGhjb24odG9fbmF0aXZlKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpLCBtb2RlKQogICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICByZXR1cm4gY29udGV4dAogICAgICAgIGlmIHJldFswXSA9PSAtMToKICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQKICAgICAgICAjIExpbWl0IHNwbGl0IHRvIDQgYmVjYXVzZSB0aGUgc2VsZXZlbCwgdGhlIGxhc3QgaW4gdGhlIGxpc3QsCiAgICAgICAgIyBtYXkgY29udGFpbiAnOicgY2hhcmFjdGVycwogICAgICAgIGNvbnRleHQgPSByZXRbMV0uc3BsaXQoJzonLCAzKQogICAgICAgIHJldHVybiBjb250ZXh0CgogICAgZGVmIHNlbGludXhfY29udGV4dChzZWxmLCBwYXRoKToKICAgICAgICBjb250ZXh0ID0gc2VsZi5zZWxpbnV4X2luaXRpYWxfY29udGV4dCgpCiAgICAgICAgaWYgbm90IEhBVkVfU0VMSU5VWCBvciBub3Qgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldCA9IHNlbGludXgubGdldGZpbGVjb25fcmF3KHRvX25hdGl2ZShwYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKSkKICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICBpZiBlLmVycm5vID09IGVycm5vLkVOT0VOVDoKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSdwYXRoICVzIGRvZXMgbm90IGV4aXN0JyAlIHBhdGgpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nZmFpbGVkIHRvIHJldHJpZXZlIHNlbGludXggY29udGV4dCcpCiAgICAgICAgaWYgcmV0WzBdID09IC0xOgogICAgICAgICAgICByZXR1cm4gY29udGV4dAogICAgICAgICMgTGltaXQgc3BsaXQgdG8gNCBiZWNhdXNlIHRoZSBzZWxldmVsLCB0aGUgbGFzdCBpbiB0aGUgbGlzdCwKICAgICAgICAjIG1heSBjb250YWluICc6JyBjaGFyYWN0ZXJzCiAgICAgICAgY29udGV4dCA9IHJldFsxXS5zcGxpdCgnOicsIDMpCiAgICAgICAgcmV0dXJuIGNvbnRleHQKCiAgICBkZWYgdXNlcl9hbmRfZ3JvdXAoc2VsZiwgcGF0aCwgZXhwYW5kPVRydWUpOgogICAgICAgIGJfcGF0aCA9IHRvX2J5dGVzKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBpZiBleHBhbmQ6CiAgICAgICAgICAgIGJfcGF0aCA9IG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnMoYl9wYXRoKSkKICAgICAgICBzdCA9IG9zLmxzdGF0KGJfcGF0aCkKICAgICAgICB1aWQgPSBzdC5zdF91aWQKICAgICAgICBnaWQgPSBzdC5zdF9naWQKICAgICAgICByZXR1cm4gKHVpZCwgZ2lkKQoKICAgIGRlZiBmaW5kX21vdW50X3BvaW50KHNlbGYsIHBhdGgpOgogICAgICAgIHBhdGhfaXNfYnl0ZXMgPSBGYWxzZQogICAgICAgIGlmIGlzaW5zdGFuY2UocGF0aCwgYmluYXJ5X3R5cGUpOgogICAgICAgICAgICBwYXRoX2lzX2J5dGVzID0gVHJ1ZQoKICAgICAgICBiX3BhdGggPSBvcy5wYXRoLnJlYWxwYXRoKHRvX2J5dGVzKG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnMocGF0aCkpLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKSkKICAgICAgICB3aGlsZSBub3Qgb3MucGF0aC5pc21vdW50KGJfcGF0aCk6CiAgICAgICAgICAgIGJfcGF0aCA9IG9zLnBhdGguZGlybmFtZShiX3BhdGgpCgogICAgICAgIGlmIHBhdGhfaXNfYnl0ZXM6CiAgICAgICAgICAgIHJldHVybiBiX3BhdGgKCiAgICAgICAgcmV0dXJuIHRvX3RleHQoYl9wYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQoKICAgIGRlZiBpc19zcGVjaWFsX3NlbGludXhfcGF0aChzZWxmLCBwYXRoKToKICAgICAgICAiIiIKICAgICAgICBSZXR1cm5zIGEgdHVwbGUgY29udGFpbmluZyAoVHJ1ZSwgc2VsaW51eF9jb250ZXh0KSBpZiB0aGUgZ2l2ZW4gcGF0aCBpcyBvbiBhCiAgICAgICAgTkZTIG9yIG90aGVyICdzcGVjaWFsJyBmcyAgbW91bnQgcG9pbnQsIG90aGVyd2lzZSB0aGUgcmV0dXJuIHdpbGwgYmUgKEZhbHNlLCBOb25lKS4KICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGYgPSBvcGVuKCcvcHJvYy9tb3VudHMnLCAncicpCiAgICAgICAgICAgIG1vdW50X2RhdGEgPSBmLnJlYWRsaW5lcygpCiAgICAgICAgICAgIGYuY2xvc2UoKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcmV0dXJuIChGYWxzZSwgTm9uZSkKICAgICAgICBwYXRoX21vdW50X3BvaW50ID0gc2VsZi5maW5kX21vdW50X3BvaW50KHBhdGgpCiAgICAgICAgZm9yIGxpbmUgaW4gbW91bnRfZGF0YToKICAgICAgICAgICAgKGRldmljZSwgbW91bnRfcG9pbnQsIGZzdHlwZSwgb3B0aW9ucywgcmVzdCkgPSBsaW5lLnNwbGl0KCcgJywgNCkKCiAgICAgICAgICAgIGlmIHBhdGhfbW91bnRfcG9pbnQgPT0gbW91bnRfcG9pbnQ6CiAgICAgICAgICAgICAgICBmb3IgZnMgaW4gc2VsZi5fc2VsaW51eF9zcGVjaWFsX2ZzOgogICAgICAgICAgICAgICAgICAgIGlmIGZzIGluIGZzdHlwZToKICAgICAgICAgICAgICAgICAgICAgICAgc3BlY2lhbF9jb250ZXh0ID0gc2VsZi5zZWxpbnV4X2NvbnRleHQocGF0aF9tb3VudF9wb2ludCkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChUcnVlLCBzcGVjaWFsX2NvbnRleHQpCgogICAgICAgIHJldHVybiAoRmFsc2UsIE5vbmUpCgogICAgZGVmIHNldF9kZWZhdWx0X3NlbGludXhfY29udGV4dChzZWxmLCBwYXRoLCBjaGFuZ2VkKToKICAgICAgICBpZiBub3QgSEFWRV9TRUxJTlVYIG9yIG5vdCBzZWxmLnNlbGludXhfZW5hYmxlZCgpOgogICAgICAgICAgICByZXR1cm4gY2hhbmdlZAogICAgICAgIGNvbnRleHQgPSBzZWxmLnNlbGludXhfZGVmYXVsdF9jb250ZXh0KHBhdGgpCiAgICAgICAgcmV0dXJuIHNlbGYuc2V0X2NvbnRleHRfaWZfZGlmZmVyZW50KHBhdGgsIGNvbnRleHQsIEZhbHNlKQoKICAgIGRlZiBzZXRfY29udGV4dF9pZl9kaWZmZXJlbnQoc2VsZiwgcGF0aCwgY29udGV4dCwgY2hhbmdlZCwgZGlmZj1Ob25lKToKCiAgICAgICAgaWYgbm90IEhBVkVfU0VMSU5VWCBvciBub3Qgc2VsZi5zZWxpbnV4X2VuYWJsZWQoKToKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQKICAgICAgICBjdXJfY29udGV4dCA9IHNlbGYuc2VsaW51eF9jb250ZXh0KHBhdGgpCiAgICAgICAgbmV3X2NvbnRleHQgPSBsaXN0KGN1cl9jb250ZXh0KQogICAgICAgICMgSXRlcmF0ZSBvdmVyIHRoZSBjdXJyZW50IGNvbnRleHQgaW5zdGVhZCBvZiB0aGUKICAgICAgICAjIGFyZ3VtZW50IGNvbnRleHQsIHdoaWNoIG1heSBoYXZlIHNlbGV2ZWwuCgogICAgICAgIChpc19zcGVjaWFsX3NlLCBzcF9jb250ZXh0KSA9IHNlbGYuaXNfc3BlY2lhbF9zZWxpbnV4X3BhdGgocGF0aCkKICAgICAgICBpZiBpc19zcGVjaWFsX3NlOgogICAgICAgICAgICBuZXdfY29udGV4dCA9IHNwX2NvbnRleHQKICAgICAgICBlbHNlOgogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4oY3VyX2NvbnRleHQpKToKICAgICAgICAgICAgICAgIGlmIGxlbihjb250ZXh0KSA+IGk6CiAgICAgICAgICAgICAgICAgICAgaWYgY29udGV4dFtpXSBpcyBub3QgTm9uZSBhbmQgY29udGV4dFtpXSAhPSBjdXJfY29udGV4dFtpXToKICAgICAgICAgICAgICAgICAgICAgICAgbmV3X2NvbnRleHRbaV0gPSBjb250ZXh0W2ldCiAgICAgICAgICAgICAgICAgICAgZWxpZiBjb250ZXh0W2ldIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19jb250ZXh0W2ldID0gY3VyX2NvbnRleHRbaV0KCiAgICAgICAgaWYgY3VyX2NvbnRleHQgIT0gbmV3X2NvbnRleHQ6CiAgICAgICAgICAgIGlmIGRpZmYgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBpZiAnYmVmb3JlJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXVsnc2Vjb250ZXh0J10gPSBjdXJfY29udGV4dAogICAgICAgICAgICAgICAgaWYgJ2FmdGVyJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddID0ge30KICAgICAgICAgICAgICAgIGRpZmZbJ2FmdGVyJ11bJ3NlY29udGV4dCddID0gbmV3X2NvbnRleHQKCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIHNlbGYuY2hlY2tfbW9kZToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgcmMgPSBzZWxpbnV4LmxzZXRmaWxlY29uKHRvX25hdGl2ZShwYXRoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIoJzonLmpvaW4obmV3X2NvbnRleHQpKSkKICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0naW52YWxpZCBzZWxpbnV4IGNvbnRleHQ6ICVzJyAlIHN0cihlKSwgbmV3X2NvbnRleHQ9bmV3X2NvbnRleHQsIGN1cl9jb250ZXh0PWN1cl9jb250ZXh0LCBpbnB1dF93YXM9Y29udGV4dCkKICAgICAgICAgICAgaWYgcmMgIT0gMDoKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSdzZXQgc2VsaW51eCBjb250ZXh0IGZhaWxlZCcpCiAgICAgICAgICAgIGNoYW5nZWQgPSBUcnVlCiAgICAgICAgcmV0dXJuIGNoYW5nZWQKCiAgICBkZWYgc2V0X293bmVyX2lmX2RpZmZlcmVudChzZWxmLCBwYXRoLCBvd25lciwgY2hhbmdlZCwgZGlmZj1Ob25lLCBleHBhbmQ9VHJ1ZSk6CiAgICAgICAgYl9wYXRoID0gdG9fYnl0ZXMocGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9zdHJpY3QnKQogICAgICAgIGlmIGV4cGFuZDoKICAgICAgICAgICAgYl9wYXRoID0gb3MucGF0aC5leHBhbmR1c2VyKG9zLnBhdGguZXhwYW5kdmFycyhiX3BhdGgpKQogICAgICAgIHBhdGggPSB0b190ZXh0KGJfcGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9zdHJpY3QnKQogICAgICAgIGlmIG93bmVyIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VkCiAgICAgICAgb3JpZ191aWQsIG9yaWdfZ2lkID0gc2VsZi51c2VyX2FuZF9ncm91cChwYXRoLCBleHBhbmQpCiAgICAgICAgdHJ5OgogICAgICAgICAgICB1aWQgPSBpbnQob3duZXIpCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHVpZCA9IHB3ZC5nZXRwd25hbShvd25lcikucHdfdWlkCiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSdjaG93biBmYWlsZWQ6IGZhaWxlZCB0byBsb29rIHVwIHVzZXIgJXMnICUgb3duZXIpCiAgICAgICAgaWYgb3JpZ191aWQgIT0gdWlkOgoKICAgICAgICAgICAgaWYgZGlmZiBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIGlmICdiZWZvcmUnIG5vdCBpbiBkaWZmOgogICAgICAgICAgICAgICAgICAgIGRpZmZbJ2JlZm9yZSddID0ge30KICAgICAgICAgICAgICAgIGRpZmZbJ2JlZm9yZSddWydvd25lciddID0gb3JpZ191aWQKICAgICAgICAgICAgICAgIGlmICdhZnRlcicgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgZGlmZlsnYWZ0ZXInXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddWydvd25lciddID0gdWlkCgogICAgICAgICAgICBpZiBzZWxmLmNoZWNrX21vZGU6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBvcy5sY2hvd24oYl9wYXRoLCB1aWQsIC0xKQogICAgICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSdjaG93biBmYWlsZWQnKQogICAgICAgICAgICBjaGFuZ2VkID0gVHJ1ZQogICAgICAgIHJldHVybiBjaGFuZ2VkCgogICAgZGVmIHNldF9ncm91cF9pZl9kaWZmZXJlbnQoc2VsZiwgcGF0aCwgZ3JvdXAsIGNoYW5nZWQsIGRpZmY9Tm9uZSwgZXhwYW5kPVRydWUpOgogICAgICAgIGJfcGF0aCA9IHRvX2J5dGVzKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBpZiBleHBhbmQ6CiAgICAgICAgICAgIGJfcGF0aCA9IG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnMoYl9wYXRoKSkKICAgICAgICBwYXRoID0gdG9fdGV4dChiX3BhdGgsIGVycm9ycz0nc3Vycm9nYXRlX3RoZW5fc3RyaWN0JykKICAgICAgICBpZiBncm91cCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gY2hhbmdlZAogICAgICAgIG9yaWdfdWlkLCBvcmlnX2dpZCA9IHNlbGYudXNlcl9hbmRfZ3JvdXAoYl9wYXRoLCBleHBhbmQpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBnaWQgPSBpbnQoZ3JvdXApCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGdpZCA9IGdycC5nZXRncm5hbShncm91cCkuZ3JfZ2lkCiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSdjaGdycCBmYWlsZWQ6IGZhaWxlZCB0byBsb29rIHVwIGdyb3VwICVzJyAlIGdyb3VwKQogICAgICAgIGlmIG9yaWdfZ2lkICE9IGdpZDoKCiAgICAgICAgICAgIGlmIGRpZmYgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBpZiAnYmVmb3JlJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXVsnZ3JvdXAnXSA9IG9yaWdfZ2lkCiAgICAgICAgICAgICAgICBpZiAnYWZ0ZXInIG5vdCBpbiBkaWZmOgogICAgICAgICAgICAgICAgICAgIGRpZmZbJ2FmdGVyJ10gPSB7fQogICAgICAgICAgICAgICAgZGlmZlsnYWZ0ZXInXVsnZ3JvdXAnXSA9IGdpZAoKICAgICAgICAgICAgaWYgc2VsZi5jaGVja19tb2RlOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgb3MubGNob3duKGJfcGF0aCwgLTEsIGdpZCkKICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihwYXRoPXBhdGgsIG1zZz0nY2hncnAgZmFpbGVkJykKICAgICAgICAgICAgY2hhbmdlZCA9IFRydWUKICAgICAgICByZXR1cm4gY2hhbmdlZAoKICAgIGRlZiBzZXRfbW9kZV9pZl9kaWZmZXJlbnQoc2VsZiwgcGF0aCwgbW9kZSwgY2hhbmdlZCwgZGlmZj1Ob25lLCBleHBhbmQ9VHJ1ZSk6CiAgICAgICAgYl9wYXRoID0gdG9fYnl0ZXMocGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9zdHJpY3QnKQogICAgICAgIGlmIGV4cGFuZDoKICAgICAgICAgICAgYl9wYXRoID0gb3MucGF0aC5leHBhbmR1c2VyKG9zLnBhdGguZXhwYW5kdmFycyhiX3BhdGgpKQogICAgICAgIHBhdGggPSB0b190ZXh0KGJfcGF0aCwgZXJyb3JzPSdzdXJyb2dhdGVfdGhlbl9zdHJpY3QnKQogICAgICAgIHBhdGhfc3RhdCA9IG9zLmxzdGF0KGJfcGF0aCkKCiAgICAgICAgaWYgbW9kZSBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gY2hhbmdlZAoKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShtb2RlLCBpbnQpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBtb2RlID0gaW50KG1vZGUsIDgpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgbW9kZSA9IHNlbGYuX3N5bWJvbGljX21vZGVfdG9fb2N0YWwocGF0aF9zdGF0LCBtb2RlKQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocGF0aD1wYXRoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZz0ibW9kZSBtdXN0IGJlIGluIG9jdGFsIG9yIHN5bWJvbGljIGZvcm0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM9c3RyKGUpKQoKICAgICAgICAgICAgICAgIGlmIG1vZGUgIT0gc3RhdC5TX0lNT0RFKG1vZGUpOgogICAgICAgICAgICAgICAgICAgICMgcHJldmVudCBtb2RlIGZyb20gaGF2aW5nIGV4dHJhIGluZm8gb3JiZWluZyBpbnZhbGlkIGxvbmcgbnVtYmVyCiAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocGF0aD1wYXRoLCBtc2c9IkludmFsaWQgbW9kZSBzdXBwbGllZCwgb25seSBwZXJtaXNzaW9uIGluZm8gaXMgYWxsb3dlZCIsIGRldGFpbHM9bW9kZSkKCiAgICAgICAgcHJldl9tb2RlID0gc3RhdC5TX0lNT0RFKHBhdGhfc3RhdC5zdF9tb2RlKQoKICAgICAgICBpZiBwcmV2X21vZGUgIT0gbW9kZToKCiAgICAgICAgICAgIGlmIGRpZmYgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBpZiAnYmVmb3JlJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXSA9IHt9CiAgICAgICAgICAgICAgICBkaWZmWydiZWZvcmUnXVsnbW9kZSddID0gJzAlMDNvJyAlIHByZXZfbW9kZQogICAgICAgICAgICAgICAgaWYgJ2FmdGVyJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICBkaWZmWydhZnRlciddID0ge30KICAgICAgICAgICAgICAgIGRpZmZbJ2FmdGVyJ11bJ21vZGUnXSA9ICcwJTAzbycgJSBtb2RlCgogICAgICAgICAgICBpZiBzZWxmLmNoZWNrX21vZGU6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAjIEZJWE1FOiBjb21wYXJpc29uIGFnYWluc3Qgc3RyaW5nIGFib3ZlIHdpbGwgY2F1c2UgdGhpcyB0byBiZSBleGVjdXRlZAogICAgICAgICAgICAjIGV2ZXJ5IHRpbWUKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgaWYgaGFzYXR0cihvcywgJ2xjaG1vZCcpOgogICAgICAgICAgICAgICAgICAgIG9zLmxjaG1vZChiX3BhdGgsIG1vZGUpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBvcy5wYXRoLmlzbGluayhiX3BhdGgpOgogICAgICAgICAgICAgICAgICAgICAgICBvcy5jaG1vZChiX3BhdGgsIG1vZGUpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgIyBBdHRlbXB0IHRvIHNldCB0aGUgcGVybXMgb2YgdGhlIHN5bWxpbmsgYnV0IGJlCiAgICAgICAgICAgICAgICAgICAgICAgICMgY2FyZWZ1bCBub3QgdG8gY2hhbmdlIHRoZSBwZXJtcyBvZiB0aGUgdW5kZXJseWluZwogICAgICAgICAgICAgICAgICAgICAgICAjIGZpbGUgd2hpbGUgdHJ5aW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVybHlpbmdfc3RhdCA9IG9zLnN0YXQoYl9wYXRoKQogICAgICAgICAgICAgICAgICAgICAgICBvcy5jaG1vZChiX3BhdGgsIG1vZGUpCiAgICAgICAgICAgICAgICAgICAgICAgIG5ld191bmRlcmx5aW5nX3N0YXQgPSBvcy5zdGF0KGJfcGF0aCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgdW5kZXJseWluZ19zdGF0LnN0X21vZGUgIT0gbmV3X3VuZGVybHlpbmdfc3RhdC5zdF9tb2RlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3MuY2htb2QoYl9wYXRoLCBzdGF0LlNfSU1PREUodW5kZXJseWluZ19zdGF0LnN0X21vZGUpKQogICAgICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgIGlmIG9zLnBhdGguaXNsaW5rKGJfcGF0aCkgYW5kIGUuZXJybm8gPT0gZXJybm8uRVBFUk06ICAjIENhbid0IHNldCBtb2RlIG9uIHN5bWJvbGljIGxpbmtzCiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgZWxpZiBlLmVycm5vIGluIChlcnJuby5FTk9FTlQsIGVycm5vLkVMT09QKTogIyBDYW4ndCBzZXQgbW9kZSBvbiBicm9rZW4gc3ltYm9saWMgbGlua3MKICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHJhaXNlIGUKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHBhdGg9cGF0aCwgbXNnPSdjaG1vZCBmYWlsZWQnLCBkZXRhaWxzPXN0cihlKSkKCiAgICAgICAgICAgIHBhdGhfc3RhdCA9IG9zLmxzdGF0KGJfcGF0aCkKICAgICAgICAgICAgbmV3X21vZGUgPSBzdGF0LlNfSU1PREUocGF0aF9zdGF0LnN0X21vZGUpCgogICAgICAgICAgICBpZiBuZXdfbW9kZSAhPSBwcmV2X21vZGU6CiAgICAgICAgICAgICAgICBjaGFuZ2VkID0gVHJ1ZQogICAgICAgIHJldHVybiBjaGFuZ2VkCgogICAgZGVmIHNldF9hdHRyaWJ1dGVzX2lmX2RpZmZlcmVudChzZWxmLCBwYXRoLCBhdHRyaWJ1dGVzLCBjaGFuZ2VkLCBkaWZmPU5vbmUsIGV4cGFuZD1UcnVlKToKCiAgICAgICAgaWYgYXR0cmlidXRlcyBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gY2hhbmdlZAoKICAgICAgICBiX3BhdGggPSB0b19ieXRlcyhwYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3N0cmljdCcpCiAgICAgICAgaWYgZXhwYW5kOgogICAgICAgICAgICBiX3BhdGggPSBvcy5wYXRoLmV4cGFuZHVzZXIob3MucGF0aC5leHBhbmR2YXJzKGJfcGF0aCkpCiAgICAgICAgcGF0aCA9IHRvX3RleHQoYl9wYXRoLCBlcnJvcnM9J3N1cnJvZ2F0ZV90aGVuX3N0cmljdCcpCgogICAgICAgIGV4aXN0aW5nID0gc2VsZi5nZXRfZmlsZV9hdHRyaWJ1dGVzKGJfcGF0aCkKCiAgICAgICAgaWYgZXhpc3RpbmcuZ2V0KCdhdHRyX2ZsYWdzJywnJykgIT0gYXR0cmlidXRlczoKICAgICAgICAgICAgYXR0cmNtZCA9IHNlbGYuZ2V0X2Jpbl9wYXRoKCdjaGF0dHInKQogICAgICAgICAgICBpZiBhdHRyY21kOgogICAgICAgICAgICAgICAgYXR0cmNtZCA9IFthdHRyY21kLCAnPSVzJyAlIGF0dHJpYnV0ZXMsIGJfcGF0aF0KICAgICAgICAgICAgICAgIGNoYW5nZWQgPSBUcnVlCgogICAgICAgICAgICAgICAgaWYgZGlmZiBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICBpZiAnYmVmb3JlJyBub3QgaW4gZGlmZjoKICAgICAgICAgICAgICAgICAgICAgICAgZGlmZlsnYmVmb3JlJ10gPSB7fQogICAgICAgICAgICAgICAgICAgIGRpZmZbJ2JlZm9yZSddWydhdHRyaWJ1dGVzJ10gPSBleGlzdGluZy5nZXQoJ2F0dHJfZmxhZ3MnKQogICAgICAgICAgICAgICAgICAgIGlmICdhZnRlcicgbm90IGluIGRpZmY6CiAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZbJ2FmdGVyJ10gPSB7fQogICAgICAgICAgICAgICAgICAgIGRpZmZbJ2FmdGVyJ11bJ2F0dHJpYnV0ZXMnXSA9IGF0dHJpYnV0ZXMKCiAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5jaGVja19tb2RlOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgcmMsIG91dCwgZXJyID0gc2VsZi5ydW5fY29tbWFuZChhdHRyY21kKQogICAgICAgICAgICAgICAgICAgICAgICBpZiByYyAhPSAwIG9yIGVycjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbigiRXJyb3Igd2hpbGUgc2V0dGluZyBhdHRyaWJ1dGVzOiAlcyIgJSAob3V0ICsgZXJyKSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocGF0aD1wYXRoLCBtc2c9J2NoYXR0ciBmYWlsZWQnLCBkZXRhaWxzPXN0cihlKSkKICAgICAgICByZXR1cm4gY2hhbmdlZAoKICAgIGRlZiBnZXRfZmlsZV9hdHRyaWJ1dGVzKHNlbGYsIHBhdGgpOgogICAgICAgIG91dHB1dCA9IHt9CiAgICAgICAgYXR0cmNtZCA9IHNlbGYuZ2V0X2Jpbl9wYXRoKCdsc2F0dHInLCBGYWxzZSkKICAgICAgICBpZiBhdHRyY21kOgogICAgICAgICAgICBhdHRyY21kID0gW2F0dHJjbWQsICctdmQnLCBwYXRoXQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByYywgb3V0LCBlcnIgPSBzZWxmLnJ1bl9jb21tYW5kKGF0dHJjbWQpCiAgICAgICAgICAgICAgICBpZiByYyA9PSAwOgogICAgICAgICAgICAgICAgICAgIHJlcyA9IG91dC5zcGxpdCgnICcpWzA6Ml0KICAgICAgICAgICAgICAgICAgICBvdXRwdXRbJ2F0dHJfZmxhZ3MnXSA9ICByZXNbMV0ucmVwbGFjZSgnLScsJycpLnN0cmlwKCkKICAgICAgICAgICAgICAgICAgICBvdXRwdXRbJ3ZlcnNpb24nXSA9IHJlc1swXS5zdHJpcCgpCiAgICAgICAgICAgICAgICAgICAgb3V0cHV0WydhdHRyaWJ1dGVzJ10gPSBmb3JtYXRfYXR0cmlidXRlcyhvdXRwdXRbJ2F0dHJfZmxhZ3MnXSkKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgIHJldHVybiBvdXRwdXQKCgogICAgZGVmIF9zeW1ib2xpY19tb2RlX3RvX29jdGFsKHNlbGYsIHBhdGhfc3RhdCwgc3ltYm9saWNfbW9kZSk6CiAgICAgICAgbmV3X21vZGUgPSBzdGF0LlNfSU1PREUocGF0aF9zdGF0LnN0X21vZGUpCgogICAgICAgIG1vZGVfcmUgPSByZS5jb21waWxlKHInXig/UDx1c2Vycz5bdWdvYV0rKSg/UDxvcGVyYXRvcj5bLSs9XSkoP1A8cGVybXM+W3J3eFhzdC1dKnxbdWdvXSkkJykKICAgICAgICBmb3IgbW9kZSBpbiBzeW1ib2xpY19tb2RlLnNwbGl0KCcsJyk6CiAgICAgICAgICAgIG1hdGNoID0gbW9kZV9yZS5tYXRjaChtb2RlKQogICAgICAgICAgICBpZiBtYXRjaDoKICAgICAgICAgICAgICAgIHVzZXJzID0gbWF0Y2guZ3JvdXAoJ3VzZXJzJykKICAgICAgICAgICAgICAgIG9wZXJhdG9yID0gbWF0Y2guZ3JvdXAoJ29wZXJhdG9yJykKICAgICAgICAgICAgICAgIHBlcm1zID0gbWF0Y2guZ3JvdXAoJ3Blcm1zJykKCiAgICAgICAgICAgICAgICBpZiB1c2VycyA9PSAnYSc6CiAgICAgICAgICAgICAgICAgICAgdXNlcnMgPSAndWdvJwoKICAgICAgICAgICAgICAgIGZvciB1c2VyIGluIHVzZXJzOgogICAgICAgICAgICAgICAgICAgIG1vZGVfdG9fYXBwbHkgPSBzZWxmLl9nZXRfb2N0YWxfbW9kZV9mcm9tX3N5bWJvbGljX3Blcm1zKHBhdGhfc3RhdCwgdXNlciwgcGVybXMpCiAgICAgICAgICAgICAgICAgICAgbmV3X21vZGUgPSBzZWxmLl9hcHBseV9vcGVyYXRpb25fdG9fbW9kZSh1c2VyLCBvcGVyYXRvciwgbW9kZV90b19hcHBseSwgbmV3X21vZGUpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJiYWQgc3ltYm9saWMgcGVybWlzc2lvbiBmb3IgbW9kZTogJXMiICUgbW9kZSkKICAgICAgICByZXR1cm4gbmV3X21vZGUKCiAgICBkZWYgX2FwcGx5X29wZXJhdGlvbl90b19tb2RlKHNlbGYsIHVzZXIsIG9wZXJhdG9yLCBtb2RlX3RvX2FwcGx5LCBjdXJyZW50X21vZGUpOgogICAgICAgIGlmIG9wZXJhdG9yICA9PSAgJz0nOgogICAgICAgICAgICBpZiB1c2VyID09ICd1JzoKICAgICAgICAgICAgICAgIG1hc2sgPSBzdGF0LlNfSVJXWFUgfCBzdGF0LlNfSVNVSUQKICAgICAgICAgICAgZWxpZiB1c2VyID09ICdnJzoKICAgICAgICAgICAgICAgIG1hc2sgPSBzdGF0LlNfSVJXWEcgfCBzdGF0LlNfSVNHSUQKICAgICAgICAgICAgZWxpZiB1c2VyID09ICdvJzoKICAgICAgICAgICAgICAgIG1hc2sgPSBzdGF0LlNfSVJXWE8gfCBzdGF0LlNfSVNWVFgKCiAgICAgICAgICAgICMgbWFzayBvdXQgdSwgZywgb3IgbyBwZXJtaXNzaW9ucyBmcm9tIGN1cnJlbnRfbW9kZSBhbmQgYXBwbHkgbmV3IHBlcm1pc3Npb25zCiAgICAgICAgICAgIGludmVyc2VfbWFzayA9IG1hc2sgXiBQRVJNX0JJVFMKICAgICAgICAgICAgbmV3X21vZGUgPSAoY3VycmVudF9tb2RlICYgaW52ZXJzZV9tYXNrKSB8IG1vZGVfdG9fYXBwbHkKICAgICAgICBlbGlmIG9wZXJhdG9yID09ICcrJzoKICAgICAgICAgICAgbmV3X21vZGUgPSBjdXJyZW50X21vZGUgfCBtb2RlX3RvX2FwcGx5CiAgICAgICAgZWxpZiBvcGVyYXRvciA9PSAnLSc6CiAgICAgICAgICAgIG5ld19tb2RlID0gY3VycmVudF9tb2RlIC0gKGN1cnJlbnRfbW9kZSAmIG1vZGVfdG9fYXBwbHkpCiAgICAgICAgcmV0dXJuIG5ld19tb2RlCgogICAgZGVmIF9nZXRfb2N0YWxfbW9kZV9mcm9tX3N5bWJvbGljX3Blcm1zKHNlbGYsIHBhdGhfc3RhdCwgdXNlciwgcGVybXMpOgogICAgICAgIHByZXZfbW9kZSA9IHN0YXQuU19JTU9ERShwYXRoX3N0YXQuc3RfbW9kZSkKCiAgICAgICAgaXNfZGlyZWN0b3J5ID0gc3RhdC5TX0lTRElSKHBhdGhfc3RhdC5zdF9tb2RlKQogICAgICAgIGhhc194X3Blcm1pc3Npb25zID0gKHByZXZfbW9kZSAmIEVYRUNfUEVSTV9CSVRTKSA+IDAKICAgICAgICBhcHBseV9YX3Blcm1pc3Npb24gPSBpc19kaXJlY3Rvcnkgb3IgaGFzX3hfcGVybWlzc2lvbnMKCiAgICAgICAgIyBQZXJtaXNzaW9uIGJpdHMgY29uc3RhbnRzIGRvY3VtZW50ZWQgYXQ6CiAgICAgICAgIyBodHRwOi8vZG9jcy5weXRob24ub3JnLzIvbGlicmFyeS9zdGF0Lmh0bWwjc3RhdC5TX0lTVUlECiAgICAgICAgaWYgYXBwbHlfWF9wZXJtaXNzaW9uOgogICAgICAgICAgICBYX3Blcm1zID0gewogICAgICAgICAgICAgICAgJ3UnOiB7J1gnOiBzdGF0LlNfSVhVU1J9LAogICAgICAgICAgICAgICAgJ2cnOiB7J1gnOiBzdGF0LlNfSVhHUlB9LAogICAgICAgICAgICAgICAgJ28nOiB7J1gnOiBzdGF0LlNfSVhPVEh9CiAgICAgICAgICAgIH0KICAgICAgICBlbHNlOgogICAgICAgICAgICBYX3Blcm1zID0gewogICAgICAgICAgICAgICAgJ3UnOiB7J1gnOiAwfSwKICAgICAgICAgICAgICAgICdnJzogeydYJzogMH0sCiAgICAgICAgICAgICAgICAnbyc6IHsnWCc6IDB9CiAgICAgICAgICAgIH0KCiAgICAgICAgdXNlcl9wZXJtc190b19tb2RlcyA9IHsKICAgICAgICAgICAgJ3UnOiB7CiAgICAgICAgICAgICAgICAncic6IHN0YXQuU19JUlVTUiwKICAgICAgICAgICAgICAgICd3Jzogc3RhdC5TX0lXVVNSLAogICAgICAgICAgICAgICAgJ3gnOiBzdGF0LlNfSVhVU1IsCiAgICAgICAgICAgICAgICAncyc6IHN0YXQuU19JU1VJRCwKICAgICAgICAgICAgICAgICd0JzogMCwKICAgICAgICAgICAgICAgICd1JzogcHJldl9tb2RlICYgc3RhdC5TX0lSV1hVLAogICAgICAgICAgICAgICAgJ2cnOiAocHJldl9tb2RlICYgc3RhdC5TX0lSV1hHKSA8PCAzLAogICAgICAgICAgICAgICAgJ28nOiAocHJldl9tb2RlICYgc3RhdC5TX0lSV1hPKSA8PCA2IH0sCiAgICAgICAgICAgICdnJzogewogICAgICAgICAgICAgICAgJ3InOiBzdGF0LlNfSVJHUlAsCiAgICAgICAgICAgICAgICAndyc6IHN0YXQuU19JV0dSUCwKICAgICAgICAgICAgICAgICd4Jzogc3RhdC5TX0lYR1JQLAogICAgICAgICAgICAgICAgJ3MnOiBzdGF0LlNfSVNHSUQsCiAgICAgICAgICAgICAgICAndCc6IDAsCiAgICAgICAgICAgICAgICAndSc6IChwcmV2X21vZGUgJiBzdGF0LlNfSVJXWFUpID4+IDMsCiAgICAgICAgICAgICAgICAnZyc6IHByZXZfbW9kZSAmIHN0YXQuU19JUldYRywKICAgICAgICAgICAgICAgICdvJzogKHByZXZfbW9kZSAmIHN0YXQuU19JUldYTykgPDwgMyB9LAogICAgICAgICAgICAnbyc6IHsKICAgICAgICAgICAgICAgICdyJzogc3RhdC5TX0lST1RILAogICAgICAgICAgICAgICAgJ3cnOiBzdGF0LlNfSVdPVEgsCiAgICAgICAgICAgICAgICAneCc6IHN0YXQuU19JWE9USCwKICAgICAgICAgICAgICAgICdzJzogMCwKICAgICAgICAgICAgICAgICd0Jzogc3RhdC5TX0lTVlRYLAogICAgICAgICAgICAgICAgJ3UnOiAocHJldl9tb2RlICYgc3RhdC5TX0lSV1hVKSA+PiA2LAogICAgICAgICAgICAgICAgJ2cnOiAocHJldl9tb2RlICYgc3RhdC5TX0lSV1hHKSA+PiAzLAogICAgICAgICAgICAgICAgJ28nOiBwcmV2X21vZGUgJiBzdGF0LlNfSVJXWE8gfQogICAgICAgIH0KCiAgICAgICAgIyBJbnNlcnQgWF9wZXJtcyBpbnRvIHVzZXJfcGVybXNfdG9fbW9kZXMKICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBYX3Blcm1zLml0ZW1zKCk6CiAgICAgICAgICAgIHVzZXJfcGVybXNfdG9fbW9kZXNba2V5XS51cGRhdGUodmFsdWUpCgogICAgICAgIG9yX3JlZHVjZSA9IGxhbWJkYSBtb2RlLCBwZXJtOiBtb2RlIHwgdXNlcl9wZXJtc190b19tb2Rlc1t1c2VyXVtwZXJtXQogICAgICAgIHJldHVybiByZWR1Y2Uob3JfcmVkdWNlLCBwZXJtcywgMCkKCiAgICBkZWYgc2V0X2ZzX2F0dHJpYnV0ZXNfaWZfZGlmZmVyZW50KHNlbGYsIGZpbGVfYXJncywgY2hhbmdlZCwgZGlmZj1Ob25lLCBleHBhbmQ9VHJ1ZSk6CiAgICAgICAgIyBzZXQgbW9kZXMgb3duZXJzIGFuZCBjb250ZXh0IGFzIG5lZWRlZAogICAgICAgIGNoYW5nZWQgPSBzZWxmLnNldF9jb250ZXh0X2lmX2RpZmZlcmVudCgKICAgICAgICAgICAgZmlsZV9hcmdzWydwYXRoJ10sIGZpbGVfYXJnc1snc2Vjb250ZXh0J10sIGNoYW5nZWQsIGRpZmYKICAgICAgICApCiAgICAgICAgY2hhbmdlZCA9IHNlbGYuc2V0X293bmVyX2lmX2RpZmZlcmVudCgKICAgICAgICAgICAgZmlsZV9hcmdzWydwYXRoJ10sIGZpbGVfYXJnc1snb3duZXInXSwgY2hhbmdlZCwgZGlmZiwgZXhwYW5kCiAgICAgICAgKQogICAgICAgIGNoYW5nZWQgPSBzZWxmLnNldF9ncm91cF9pZl9kaWZmZXJlbnQoCiAgICAgICAgICAgIGZpbGVfYXJnc1sncGF0aCddLCBmaWxlX2FyZ3NbJ2dyb3VwJ10sIGNoYW5nZWQsIGRpZmYsIGV4cGFuZAogICAgICAgICkKICAgICAgICBjaGFuZ2VkID0gc2VsZi5zZXRfbW9kZV9pZl9kaWZmZXJlbnQoCiAgICAgICAgICAgIGZpbGVfYXJnc1sncGF0aCddLCBmaWxlX2FyZ3NbJ21vZGUnXSwgY2hhbmdlZCwgZGlmZiwgZXhwYW5kCiAgICAgICAgKQogICAgICAgIGNoYW5nZWQgPSBzZWxmLnNldF9hdHRyaWJ1dGVzX2lmX2RpZmZlcmVudCgKICAgICAgICAgICAgZmlsZV9hcmdzWydwYXRoJ10sIGZpbGVfYXJnc1snYXR0cmlidXRlcyddLCBjaGFuZ2VkLCBkaWZmLCBleHBhbmQKICAgICAgICApCiAgICAgICAgcmV0dXJuIGNoYW5nZWQKCiAgICBkZWYgc2V0X2RpcmVjdG9yeV9hdHRyaWJ1dGVzX2lmX2RpZmZlcmVudChzZWxmLCBmaWxlX2FyZ3MsIGNoYW5nZWQsIGRpZmY9Tm9uZSwgZXhwYW5kPVRydWUpOgogICAgICAgIHJldHVybiBzZWxmLnNldF9mc19hdHRyaWJ1dGVzX2lmX2RpZmZlcmVudChmaWxlX2FyZ3MsIGNoYW5nZWQsIGRpZmYsIGV4cGFuZCkKCiAgICBkZWYgc2V0X2ZpbGVfYXR0cmlidXRlc19pZl9kaWZmZXJlbnQoc2VsZiwgZmlsZV9hcmdzLCBjaGFuZ2VkLCBkaWZmPU5vbmUsIGV4cGFuZD1UcnVlKToKICAgICAgICByZXR1cm4gc2VsZi5zZXRfZnNfYXR0cmlidXRlc19pZl9kaWZmZXJlbnQoZmlsZV9hcmdzLCBjaGFuZ2VkLCBkaWZmLCBleHBhbmQpCgogICAgZGVmIGFkZF9wYXRoX2luZm8oc2VsZiwga3dhcmdzKToKICAgICAgICAnJycKICAgICAgICBmb3IgcmVzdWx0cyB0aGF0IGFyZSBmaWxlcywgc3VwcGxlbWVudCB0aGUgaW5mbyBhYm91dCB0aGUgZmlsZQogICAgICAgIGluIHRoZSByZXR1cm4gcGF0aCB3aXRoIHN0YXRzIGFib3V0IHRoZSBmaWxlIHBhdGguCiAgICAgICAgJycnCgogICAgICAgIHBhdGggPSBrd2FyZ3MuZ2V0KCdwYXRoJywga3dhcmdzLmdldCgnZGVzdCcsIE5vbmUpKQogICAgICAgIGlmIHBhdGggaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIGt3YXJncwogICAgICAgIGJfcGF0aCA9IHRvX2J5dGVzKHBhdGgsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMoYl9wYXRoKToKICAgICAgICAgICAgKHVpZCwgZ2lkKSA9IHNlbGYudXNlcl9hbmRfZ3JvdXAocGF0aCkKICAgICAgICAgICAga3dhcmdzWyd1aWQnXSA9IHVpZAogICAgICAgICAgICBrd2FyZ3NbJ2dpZCddID0gZ2lkCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHVzZXIgPSBwd2QuZ2V0cHd1aWQodWlkKVswXQogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICB1c2VyID0gc3RyKHVpZCkKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZ3JvdXAgPSBncnAuZ2V0Z3JnaWQoZ2lkKVswXQogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICBncm91cCA9IHN0cihnaWQpCiAgICAgICAgICAgIGt3YXJnc1snb3duZXInXSA9IHVzZXIKICAgICAgICAgICAga3dhcmdzWydncm91cCddID0gZ3JvdXAKICAgICAgICAgICAgc3QgPSBvcy5sc3RhdChiX3BhdGgpCiAgICAgICAgICAgIGt3YXJnc1snbW9kZSddID0gJzAlMDNvJyAlIHN0YXQuU19JTU9ERShzdFtzdGF0LlNUX01PREVdKQogICAgICAgICAgICAjIHNlY29udGV4dCBub3QgeWV0IHN1cHBvcnRlZAogICAgICAgICAgICBpZiBvcy5wYXRoLmlzbGluayhiX3BhdGgpOgogICAgICAgICAgICAgICAga3dhcmdzWydzdGF0ZSddID0gJ2xpbmsnCiAgICAgICAgICAgIGVsaWYgb3MucGF0aC5pc2RpcihiX3BhdGgpOgogICAgICAgICAgICAgICAga3dhcmdzWydzdGF0ZSddID0gJ2RpcmVjdG9yeScKICAgICAgICAgICAgZWxpZiBvcy5zdGF0KGJfcGF0aCkuc3RfbmxpbmsgPiAxOgogICAgICAgICAgICAgICAga3dhcmdzWydzdGF0ZSddID0gJ2hhcmQnCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBrd2FyZ3NbJ3N0YXRlJ10gPSAnZmlsZScKICAgICAgICAgICAgaWYgSEFWRV9TRUxJTlVYIGFuZCBzZWxmLnNlbGludXhfZW5hYmxlZCgpOgogICAgICAgICAgICAgICAga3dhcmdzWydzZWNvbnRleHQnXSA9ICc6Jy5qb2luKHNlbGYuc2VsaW51eF9jb250ZXh0KHBhdGgpKQogICAgICAgICAgICBrd2FyZ3NbJ3NpemUnXSA9IHN0W3N0YXQuU1RfU0laRV0KICAgICAgICBlbHNlOgogICAgICAgICAgICBrd2FyZ3NbJ3N0YXRlJ10gPSAnYWJzZW50JwogICAgICAgIHJldHVybiBrd2FyZ3MKCiAgICBkZWYgX2NoZWNrX2xvY2FsZShzZWxmKToKICAgICAgICAnJycKICAgICAgICBVc2VzIHRoZSBsb2NhbGUgbW9kdWxlIHRvIHRlc3QgdGhlIGN1cnJlbnRseSBzZXQgbG9jYWxlCiAgICAgICAgKHBlciB0aGUgTEFORyBhbmQgTENfQ1RZUEUgZW52aXJvbm1lbnQgc2V0dGluZ3MpCiAgICAgICAgJycnCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIHNldHRpbmcgdGhlIGxvY2FsZSB0byAnJyB1c2VzIHRoZSBkZWZhdWx0IGxvY2FsZQogICAgICAgICAgICAjIGFzIGl0IHdvdWxkIGJlIHJldHVybmVkIGJ5IGxvY2FsZS5nZXRkZWZhdWx0bG9jYWxlKCkKICAgICAgICAgICAgbG9jYWxlLnNldGxvY2FsZShsb2NhbGUuTENfQUxMLCAnJykKICAgICAgICBleGNlcHQgbG9jYWxlLkVycm9yOgogICAgICAgICAgICAjIGZhbGxiYWNrIHRvIHRoZSAnQycgbG9jYWxlLCB3aGljaCBtYXkgY2F1c2UgdW5pY29kZQogICAgICAgICAgICAjIGlzc3VlcyBidXQgaXMgcHJlZmVyYWJsZSB0byBzaW1wbHkgZmFpbGluZyBiZWNhdXNlCiAgICAgICAgICAgICMgb2YgYW4gdW5rbm93biBsb2NhbGUKICAgICAgICAgICAgbG9jYWxlLnNldGxvY2FsZShsb2NhbGUuTENfQUxMLCAnQycpCiAgICAgICAgICAgIG9zLmVudmlyb25bJ0xBTkcnXSA9ICdDJwogICAgICAgICAgICBvcy5lbnZpcm9uWydMQ19BTEwnXSA9ICdDJwogICAgICAgICAgICBvcy5lbnZpcm9uWydMQ19NRVNTQUdFUyddID0gJ0MnCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9IkFuIHVua25vd24gZXJyb3Igd2FzIGVuY291bnRlcmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gdmFsaWRhdGUgdGhlIGxvY2FsZTogJXMiICUgZSkKCiAgICBkZWYgX2hhbmRsZV9hbGlhc2VzKHNlbGYsIHNwZWM9Tm9uZSk6CiAgICAgICAgIyB0aGlzIHVzZXMgZXhjZXB0aW9ucyBhcyBpdCBoYXBwZW5zIGJlZm9yZSB3ZSBjYW4gc2FmZWx5IGNhbGwgZmFpbF9qc29uCiAgICAgICAgYWxpYXNlc19yZXN1bHRzID0ge30gI2FsaWFzOmNhbm9uCiAgICAgICAgaWYgc3BlYyBpcyBOb25lOgogICAgICAgICAgICBzcGVjID0gc2VsZi5hcmd1bWVudF9zcGVjCiAgICAgICAgZm9yIChrLHYpIGluIHNwZWMuaXRlbXMoKToKICAgICAgICAgICAgc2VsZi5fbGVnYWxfaW5wdXRzLmFwcGVuZChrKQogICAgICAgICAgICBhbGlhc2VzID0gdi5nZXQoJ2FsaWFzZXMnLCBOb25lKQogICAgICAgICAgICBkZWZhdWx0ID0gdi5nZXQoJ2RlZmF1bHQnLCBOb25lKQogICAgICAgICAgICByZXF1aXJlZCA9IHYuZ2V0KCdyZXF1aXJlZCcsIEZhbHNlKQogICAgICAgICAgICBpZiBkZWZhdWx0IGlzIG5vdCBOb25lIGFuZCByZXF1aXJlZDoKICAgICAgICAgICAgICAgICMgbm90IGFsaWFzIHNwZWNpZmljIGJ1dCB0aGlzIGlzIGEgZ29vZCBwbGFjZSB0byBjaGVjayB0aGlzCiAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oImludGVybmFsIGVycm9yOiByZXF1aXJlZCBhbmQgZGVmYXVsdCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlIGZvciAlcyIgJSBrKQogICAgICAgICAgICBpZiBhbGlhc2VzIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShhbGlhc2VzLCBTRVFVRU5DRVRZUEUpIG9yIGlzaW5zdGFuY2UoYWxpYXNlcywgKGJpbmFyeV90eXBlLCB0ZXh0X3R5cGUpKToKICAgICAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbignaW50ZXJuYWwgZXJyb3I6IGFsaWFzZXMgbXVzdCBiZSBhIGxpc3Qgb3IgdHVwbGUnKQogICAgICAgICAgICBmb3IgYWxpYXMgaW4gYWxpYXNlczoKICAgICAgICAgICAgICAgIHNlbGYuX2xlZ2FsX2lucHV0cy5hcHBlbmQoYWxpYXMpCiAgICAgICAgICAgICAgICBhbGlhc2VzX3Jlc3VsdHNbYWxpYXNdID0gawogICAgICAgICAgICAgICAgaWYgYWxpYXMgaW4gc2VsZi5wYXJhbXM6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5wYXJhbXNba10gPSBzZWxmLnBhcmFtc1thbGlhc10KCiAgICAgICAgcmV0dXJuIGFsaWFzZXNfcmVzdWx0cwoKICAgIGRlZiBfY2hlY2tfYXJndW1lbnRzKHNlbGYsIGNoZWNrX2ludmFsaWRfYXJndW1lbnRzKToKICAgICAgICBzZWxmLl9zeXNsb2dfZmFjaWxpdHkgPSAnTE9HX1VTRVInCiAgICAgICAgdW5zdXBwb3J0ZWRfcGFyYW1ldGVycyA9IHNldCgpCiAgICAgICAgZm9yIChrLHYpIGluIGxpc3Qoc2VsZi5wYXJhbXMuaXRlbXMoKSk6CgogICAgICAgICAgICBpZiBrID09ICdfYW5zaWJsZV9jaGVja19tb2RlJyBhbmQgdjoKICAgICAgICAgICAgICAgIHNlbGYuY2hlY2tfbW9kZSA9IFRydWUKCiAgICAgICAgICAgIGVsaWYgayA9PSAnX2Fuc2libGVfbm9fbG9nJzoKICAgICAgICAgICAgICAgIHNlbGYubm9fbG9nID0gc2VsZi5ib29sZWFuKHYpCgogICAgICAgICAgICBlbGlmIGsgPT0gJ19hbnNpYmxlX2RlYnVnJzoKICAgICAgICAgICAgICAgIHNlbGYuX2RlYnVnID0gc2VsZi5ib29sZWFuKHYpCgogICAgICAgICAgICBlbGlmIGsgPT0gJ19hbnNpYmxlX2RpZmYnOgogICAgICAgICAgICAgICAgc2VsZi5fZGlmZiA9IHNlbGYuYm9vbGVhbih2KQoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV92ZXJib3NpdHknOgogICAgICAgICAgICAgICAgc2VsZi5fdmVyYm9zaXR5ID0gdgoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV9zZWxpbnV4X3NwZWNpYWxfZnMnOgogICAgICAgICAgICAgICAgc2VsZi5fc2VsaW51eF9zcGVjaWFsX2ZzID0gdgoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV9zeXNsb2dfZmFjaWxpdHknOgogICAgICAgICAgICAgICAgc2VsZi5fc3lzbG9nX2ZhY2lsaXR5ID0gdgoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV92ZXJzaW9uJzoKICAgICAgICAgICAgICAgIHNlbGYuYW5zaWJsZV92ZXJzaW9uID0gdgoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV9tb2R1bGVfbmFtZSc6CiAgICAgICAgICAgICAgICBzZWxmLl9uYW1lID0gdgoKICAgICAgICAgICAgZWxpZiBrID09ICdfYW5zaWJsZV9zb2NrZXQnOgogICAgICAgICAgICAgICAgc2VsZi5fc29ja2V0X3BhdGggPSB2CgogICAgICAgICAgICBlbGlmIGNoZWNrX2ludmFsaWRfYXJndW1lbnRzIGFuZCBrIG5vdCBpbiBzZWxmLl9sZWdhbF9pbnB1dHM6CiAgICAgICAgICAgICAgICB1bnN1cHBvcnRlZF9wYXJhbWV0ZXJzLmFkZChrKQoKICAgICAgICAgICAgI2NsZWFuIHVwIGludGVybmFsIHBhcmFtczoKICAgICAgICAgICAgaWYgay5zdGFydHN3aXRoKCdfYW5zaWJsZV8nKToKICAgICAgICAgICAgICAgIGRlbCBzZWxmLnBhcmFtc1trXQoKICAgICAgICBpZiB1bnN1cHBvcnRlZF9wYXJhbWV0ZXJzOgogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9IlVuc3VwcG9ydGVkIHBhcmFtZXRlcnMgZm9yICglcykgbW9kdWxlOiAlcy4gU3VwcG9ydGVkIHBhcmFtZXRlcnMgaW5jbHVkZTogJXMiICUgKHNlbGYuX25hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJywnLmpvaW4oc29ydGVkKGxpc3QodW5zdXBwb3J0ZWRfcGFyYW1ldGVycykpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLCcuam9pbihzb3J0ZWQoc2VsZi5hcmd1bWVudF9zcGVjLmtleXMoKSkpKSkKICAgICAgICBpZiBzZWxmLmNoZWNrX21vZGUgYW5kIG5vdCBzZWxmLnN1cHBvcnRzX2NoZWNrX21vZGU6CiAgICAgICAgICAgIHNlbGYuZXhpdF9qc29uKHNraXBwZWQ9VHJ1ZSwgbXNnPSJyZW1vdGUgbW9kdWxlICglcykgZG9lcyBub3Qgc3VwcG9ydCBjaGVjayBtb2RlIiAlIHNlbGYuX25hbWUpCgogICAgZGVmIF9jb3VudF90ZXJtcyhzZWxmLCBjaGVjayk6CiAgICAgICAgY291bnQgPSAwCiAgICAgICAgZm9yIHRlcm0gaW4gY2hlY2s6CiAgICAgICAgICAgIGlmIHRlcm0gaW4gc2VsZi5wYXJhbXM6CiAgICAgICAgICAgICAgICBjb3VudCArPSAxCiAgICAgICAgcmV0dXJuIGNvdW50CgogICAgZGVmIF9jaGVja19tdXR1YWxseV9leGNsdXNpdmUoc2VsZiwgc3BlYyk6CiAgICAgICAgaWYgc3BlYyBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4KICAgICAgICBmb3IgY2hlY2sgaW4gc3BlYzoKICAgICAgICAgICAgY291bnQgPSBzZWxmLl9jb3VudF90ZXJtcyhjaGVjaykKICAgICAgICAgICAgaWYgY291bnQgPiAxOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJwYXJhbWV0ZXJzIGFyZSBtdXR1YWxseSBleGNsdXNpdmU6ICVzIiAlIChjaGVjaywpKQoKICAgIGRlZiBfY2hlY2tfcmVxdWlyZWRfb25lX29mKHNlbGYsIHNwZWMpOgogICAgICAgIGlmIHNwZWMgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZm9yIGNoZWNrIGluIHNwZWM6CiAgICAgICAgICAgIGNvdW50ID0gc2VsZi5fY291bnRfdGVybXMoY2hlY2spCiAgICAgICAgICAgIGlmIGNvdW50ID09IDA6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9Im9uZSBvZiB0aGUgZm9sbG93aW5nIGlzIHJlcXVpcmVkOiAlcyIgJSAnLCcuam9pbihjaGVjaykpCgogICAgZGVmIF9jaGVja19yZXF1aXJlZF90b2dldGhlcihzZWxmLCBzcGVjKToKICAgICAgICBpZiBzcGVjIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGZvciBjaGVjayBpbiBzcGVjOgogICAgICAgICAgICBjb3VudHMgPSBbIHNlbGYuX2NvdW50X3Rlcm1zKFtmaWVsZF0pIGZvciBmaWVsZCBpbiBjaGVjayBdCiAgICAgICAgICAgIG5vbl96ZXJvID0gWyBjIGZvciBjIGluIGNvdW50cyBpZiBjID4gMCBdCiAgICAgICAgICAgIGlmIGxlbihub25femVybykgPiAwOgogICAgICAgICAgICAgICAgaWYgMCBpbiBjb3VudHM6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJwYXJhbWV0ZXJzIGFyZSByZXF1aXJlZCB0b2dldGhlcjogJXMiICUgKGNoZWNrLCkpCgogICAgZGVmIF9jaGVja19yZXF1aXJlZF9hcmd1bWVudHMoc2VsZiwgc3BlYz1Ob25lLCBwYXJhbT1Ob25lICk6CiAgICAgICAgJycnIGVuc3VyZSBhbGwgcmVxdWlyZWQgYXJndW1lbnRzIGFyZSBwcmVzZW50ICcnJwogICAgICAgIG1pc3NpbmcgPSBbXQogICAgICAgIGlmIHNwZWMgaXMgTm9uZToKICAgICAgICAgICAgc3BlYyA9IHNlbGYuYXJndW1lbnRfc3BlYwogICAgICAgIGlmIHBhcmFtIGlzIE5vbmU6CiAgICAgICAgICAgIHBhcmFtID0gc2VsZi5wYXJhbXMKICAgICAgICBmb3IgKGssdikgaW4gc3BlYy5pdGVtcygpOgogICAgICAgICAgICByZXF1aXJlZCA9IHYuZ2V0KCdyZXF1aXJlZCcsIEZhbHNlKQogICAgICAgICAgICBpZiByZXF1aXJlZCBhbmQgayBub3QgaW4gcGFyYW06CiAgICAgICAgICAgICAgICBtaXNzaW5nLmFwcGVuZChrKQogICAgICAgIGlmIGxlbihtaXNzaW5nKSA+IDA6CiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0ibWlzc2luZyByZXF1aXJlZCBhcmd1bWVudHM6ICVzIiAlICIsIi5qb2luKG1pc3NpbmcpKQoKICAgIGRlZiBfY2hlY2tfcmVxdWlyZWRfaWYoc2VsZiwgc3BlYyk6CiAgICAgICAgJycnIGVuc3VyZSB0aGF0IHBhcmFtZXRlcnMgd2hpY2ggY29uZGl0aW9uYWxseSByZXF1aXJlZCBhcmUgcHJlc2VudCAnJycKICAgICAgICBpZiBzcGVjIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGZvciBzcCBpbiBzcGVjOgogICAgICAgICAgICBtaXNzaW5nID0gW10KICAgICAgICAgICAgbWF4X21pc3NpbmdfY291bnQgPSAwCiAgICAgICAgICAgIGlzX29uZV9vZiA9IEZhbHNlCiAgICAgICAgICAgIGlmIGxlbihzcCkgPT0gNDoKICAgICAgICAgICAgICAgIGtleSwgdmFsLCByZXF1aXJlbWVudHMsIGlzX29uZV9vZiA9IHNwCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBrZXksIHZhbCwgcmVxdWlyZW1lbnRzID0gc3AKCiAgICAgICAgICAgICMgaXNfb25lX29mIGlzIFRydWUgYXQgbGVhc3Qgb25lIHJlcXVpcmVtZW50IHNob3VsZCBiZQogICAgICAgICAgICAjIHByZXNlbnQsIGVsc2UgYWxsIHJlcXVpcmVtZW50cyBzaG91bGQgYmUgcHJlc2VudC4KICAgICAgICAgICAgaWYgaXNfb25lX29mOgogICAgICAgICAgICAgICAgbWF4X21pc3NpbmdfY291bnQgPSBsZW4ocmVxdWlyZW1lbnRzKQoKICAgICAgICAgICAgaWYga2V5IGluIHNlbGYucGFyYW1zIGFuZCBzZWxmLnBhcmFtc1trZXldID09IHZhbDoKICAgICAgICAgICAgICAgIGZvciBjaGVjayBpbiByZXF1aXJlbWVudHM6CiAgICAgICAgICAgICAgICAgICAgY291bnQgPSBzZWxmLl9jb3VudF90ZXJtcygoY2hlY2ssKSkKICAgICAgICAgICAgICAgICAgICBpZiBjb3VudCA9PSAwOgogICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nLmFwcGVuZChjaGVjaykKICAgICAgICAgICAgaWYgbGVuKG1pc3NpbmcpIGFuZCBsZW4obWlzc2luZykgPj0gbWF4X21pc3NpbmdfY291bnQ6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9IiVzIGlzICVzIGJ1dCB0aGUgZm9sbG93aW5nIGFyZSBtaXNzaW5nOiAlcyIgJSAoa2V5LCB2YWwsICcsJy5qb2luKG1pc3NpbmcpKSkKCiAgICBkZWYgX2NoZWNrX2FyZ3VtZW50X3ZhbHVlcyhzZWxmLCBzcGVjPU5vbmUsIHBhcmFtPU5vbmUpOgogICAgICAgICcnJyBlbnN1cmUgYWxsIGFyZ3VtZW50cyBoYXZlIHRoZSByZXF1ZXN0ZWQgdmFsdWVzLCBhbmQgdGhlcmUgYXJlIG5vIHN0cmF5IGFyZ3VtZW50cyAnJycKICAgICAgICBpZiBzcGVjIGlzIE5vbmU6CiAgICAgICAgICAgIHNwZWMgPSBzZWxmLmFyZ3VtZW50X3NwZWMKICAgICAgICBpZiBwYXJhbSBpcyBOb25lOgogICAgICAgICAgICBwYXJhbSA9IHNlbGYucGFyYW1zCiAgICAgICAgZm9yIChrLHYpIGluIHNwZWMuaXRlbXMoKToKICAgICAgICAgICAgY2hvaWNlcyA9IHYuZ2V0KCdjaG9pY2VzJyxOb25lKQogICAgICAgICAgICBpZiBjaG9pY2VzIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGNob2ljZXMsIFNFUVVFTkNFVFlQRSkgYW5kIG5vdCBpc2luc3RhbmNlKGNob2ljZXMsIChiaW5hcnlfdHlwZSwgdGV4dF90eXBlKSk6CiAgICAgICAgICAgICAgICBpZiBrIGluIHBhcmFtOgogICAgICAgICAgICAgICAgICAgIGlmIHBhcmFtW2tdIG5vdCBpbiBjaG9pY2VzOgogICAgICAgICAgICAgICAgICAgICAgICAjIFB5WWFtbCBjb252ZXJ0cyBjZXJ0YWluIHN0cmluZ3MgdG8gYm9vbHMuICBJZiB3ZSBjYW4gdW5hbWJpZ3VvdXNseSBjb252ZXJ0IGJhY2ssIGRvIHNvIGJlZm9yZSBjaGVja2luZwogICAgICAgICAgICAgICAgICAgICAgICAjIHRoZSB2YWx1ZS4gIElmIHdlIGNhbid0IGZpZ3VyZSB0aGlzIG91dCwgbW9kdWxlIGF1dGhvciBpcyByZXNwb25zaWJsZS4KICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXJlZF9jaG9pY2VzID0gTm9uZQogICAgICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbVtrXSA9PSAnRmFsc2UnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXJlZF9jaG9pY2VzID0gX2xlbmllbnRfbG93ZXJjYXNlKGNob2ljZXMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGQUxTRVkgPSBmcm96ZW5zZXQoQk9PTEVBTlNfRkFMU0UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVybGFwID0gRkFMU0VZLmludGVyc2VjdGlvbihjaG9pY2VzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKG92ZXJsYXApID09IDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBFeHRyYWN0IGZyb20gYSBzZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocGFyYW1ba10sKSA9IG92ZXJsYXAKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHBhcmFtW2tdID09ICdUcnVlJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxvd2VyZWRfY2hvaWNlcyBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyZWRfY2hvaWNlcyA9IF9sZW5pZW50X2xvd2VyY2FzZShjaG9pY2VzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgVFJVVEhZID0gZnJvemVuc2V0KEJPT0xFQU5TX1RSVUUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVybGFwID0gVFJVVEhZLmludGVyc2VjdGlvbihjaG9pY2VzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKG92ZXJsYXApID09IDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBhcmFtW2tdLCkgPSBvdmVybGFwCgogICAgICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbVtrXSBub3QgaW4gY2hvaWNlczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNob2ljZXNfc3RyPSIsIi5qb2luKFt0b19uYXRpdmUoYykgZm9yIGMgaW4gY2hvaWNlc10pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2c9InZhbHVlIG9mICVzIG11c3QgYmUgb25lIG9mOiAlcywgZ290OiAlcyIgJSAoaywgY2hvaWNlc19zdHIsIHBhcmFtW2tdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPW1zZykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0iaW50ZXJuYWwgZXJyb3I6IGNob2ljZXMgZm9yIGFyZ3VtZW50ICVzIGFyZSBub3QgaXRlcmFibGU6ICVzIiAlIChrLCBjaG9pY2VzKSkKCiAgICBkZWYgc2FmZV9ldmFsKHNlbGYsIHZhbHVlLCBsb2NhbHM9Tm9uZSwgaW5jbHVkZV9leGNlcHRpb25zPUZhbHNlKToKCiAgICAgICAgIyBkbyBub3QgYWxsb3cgbWV0aG9kIGNhbGxzIHRvIG1vZHVsZXMKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZSh2YWx1ZSwgc3RyaW5nX3R5cGVzKToKICAgICAgICAgICAgIyBhbHJlYWR5IHRlbXBsYXRlZCB0byBhIGRhdGF2YWx1ZXN0cnVjdHVyZSwgcGVyaGFwcz8KICAgICAgICAgICAgaWYgaW5jbHVkZV9leGNlcHRpb25zOgogICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSwgTm9uZSkKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCiAgICAgICAgaWYgcmUuc2VhcmNoKHInXHdcLlx3K1woJywgdmFsdWUpOgogICAgICAgICAgICBpZiBpbmNsdWRlX2V4Y2VwdGlvbnM6CiAgICAgICAgICAgICAgICByZXR1cm4gKHZhbHVlLCBOb25lKQogICAgICAgICAgICByZXR1cm4gdmFsdWUKICAgICAgICAjIGRvIG5vdCBhbGxvdyBpbXBvcnRzCiAgICAgICAgaWYgcmUuc2VhcmNoKHInaW1wb3J0IFx3KycsIHZhbHVlKToKICAgICAgICAgICAgaWYgaW5jbHVkZV9leGNlcHRpb25zOgogICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSwgTm9uZSkKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXN1bHQgPSBsaXRlcmFsX2V2YWwodmFsdWUpCiAgICAgICAgICAgIGlmIGluY2x1ZGVfZXhjZXB0aW9uczoKICAgICAgICAgICAgICAgIHJldHVybiAocmVzdWx0LCBOb25lKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgaWYgaW5jbHVkZV9leGNlcHRpb25zOgogICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSwgZSkKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCgogICAgZGVmIF9jaGVja190eXBlX3N0cihzZWxmLCB2YWx1ZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgc3RyaW5nX3R5cGVzKToKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCiAgICAgICAgIyBOb3RlOiBUaGlzIGNvdWxkIHRocm93IGEgdW5pY29kZSBlcnJvciBpZiB2YWx1ZSdzIF9fc3RyX18oKSBtZXRob2QKICAgICAgICAjIHJldHVybnMgbm9uLWFzY2lpLiAgSGF2ZSB0byBwb3J0IHV0aWxzLnRvX2J5dGVzKCkgaWYgdGhhdCBoYXBwZW5zCiAgICAgICAgcmV0dXJuIHN0cih2YWx1ZSkKCiAgICBkZWYgX2NoZWNrX3R5cGVfbGlzdChzZWxmLCB2YWx1ZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgbGlzdCk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQoKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBzdHJpbmdfdHlwZXMpOgogICAgICAgICAgICByZXR1cm4gdmFsdWUuc3BsaXQoIiwiKQogICAgICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgaW50KSBvciBpc2luc3RhbmNlKHZhbHVlLCBmbG9hdCk6CiAgICAgICAgICAgIHJldHVybiBbIHN0cih2YWx1ZSkgXQoKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYSBsaXN0JyAlIHR5cGUodmFsdWUpKQoKICAgIGRlZiBfY2hlY2tfdHlwZV9kaWN0KHNlbGYsIHZhbHVlKToKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBkaWN0KToKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIHN0cmluZ190eXBlcyk6CiAgICAgICAgICAgIGlmIHZhbHVlLnN0YXJ0c3dpdGgoInsiKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICByZXR1cm4ganNvbi5sb2Fkcyh2YWx1ZSkKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAocmVzdWx0LCBleGMpID0gc2VsZi5zYWZlX2V2YWwodmFsdWUsIGRpY3QoKSwgaW5jbHVkZV9leGNlcHRpb25zPVRydWUpCiAgICAgICAgICAgICAgICAgICAgaWYgZXhjIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ3VuYWJsZSB0byBldmFsdWF0ZSBzdHJpbmcgYXMgZGljdGlvbmFyeScpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgICAgICAgICBlbGlmICc9JyBpbiB2YWx1ZToKICAgICAgICAgICAgICAgIGZpZWxkcyA9IFtdCiAgICAgICAgICAgICAgICBmaWVsZF9idWZmZXIgPSBbXQogICAgICAgICAgICAgICAgaW5fcXVvdGUgPSBGYWxzZQogICAgICAgICAgICAgICAgaW5fZXNjYXBlID0gRmFsc2UKICAgICAgICAgICAgICAgIGZvciBjIGluIHZhbHVlLnN0cmlwKCk6CiAgICAgICAgICAgICAgICAgICAgaWYgaW5fZXNjYXBlOgogICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9idWZmZXIuYXBwZW5kKGMpCiAgICAgICAgICAgICAgICAgICAgICAgIGluX2VzY2FwZSA9IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgZWxpZiBjID09ICdcXCc6CiAgICAgICAgICAgICAgICAgICAgICAgIGluX2VzY2FwZSA9IFRydWUKICAgICAgICAgICAgICAgICAgICBlbGlmIG5vdCBpbl9xdW90ZSBhbmQgYyBpbiAoJ1wnJywgJyInKToKICAgICAgICAgICAgICAgICAgICAgICAgaW5fcXVvdGUgPSBjCiAgICAgICAgICAgICAgICAgICAgZWxpZiBpbl9xdW90ZSBhbmQgaW5fcXVvdGUgPT0gYzoKICAgICAgICAgICAgICAgICAgICAgICAgaW5fcXVvdGUgPSBGYWxzZQogICAgICAgICAgICAgICAgICAgIGVsaWYgbm90IGluX3F1b3RlIGFuZCBjIGluICgnLCcsICcgJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkID0gJycuam9pbihmaWVsZF9idWZmZXIpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGZpZWxkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRzLmFwcGVuZChmaWVsZCkKICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfYnVmZmVyID0gW10KICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9idWZmZXIuYXBwZW5kKGMpCgogICAgICAgICAgICAgICAgZmllbGQgPSAnJy5qb2luKGZpZWxkX2J1ZmZlcikKICAgICAgICAgICAgICAgIGlmIGZpZWxkOgogICAgICAgICAgICAgICAgICAgIGZpZWxkcy5hcHBlbmQoZmllbGQpCiAgICAgICAgICAgICAgICByZXR1cm4gZGljdCh4LnNwbGl0KCI9IiwgMSkgZm9yIHggaW4gZmllbGRzKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJkaWN0aW9uYXJ5IHJlcXVlc3RlZCwgY291bGQgbm90IHBhcnNlIEpTT04gb3Iga2V5PXZhbHVlIikKCiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCclcyBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgZGljdCcgJSB0eXBlKHZhbHVlKSkKCiAgICBkZWYgX2NoZWNrX3R5cGVfYm9vbChzZWxmLCB2YWx1ZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgYm9vbCk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQoKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBzdHJpbmdfdHlwZXMpIG9yIGlzaW5zdGFuY2UodmFsdWUsIGludCk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLmJvb2xlYW4odmFsdWUpCgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignJXMgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIGJvb2wnICUgdHlwZSh2YWx1ZSkpCgogICAgZGVmIF9jaGVja190eXBlX2ludChzZWxmLCB2YWx1ZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgaW50KToKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIHN0cmluZ190eXBlcyk6CiAgICAgICAgICAgIHJldHVybiBpbnQodmFsdWUpCgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignJXMgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhbiBpbnQnICUgdHlwZSh2YWx1ZSkpCgogICAgZGVmIF9jaGVja190eXBlX2Zsb2F0KHNlbGYsIHZhbHVlKToKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBmbG9hdCk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQoKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCAoYmluYXJ5X3R5cGUsIHRleHRfdHlwZSwgaW50KSk6CiAgICAgICAgICAgIHJldHVybiBmbG9hdCh2YWx1ZSkKCiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCclcyBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgZmxvYXQnICUgdHlwZSh2YWx1ZSkpCgogICAgZGVmIF9jaGVja190eXBlX3BhdGgoc2VsZiwgdmFsdWUpOgogICAgICAgIHZhbHVlID0gc2VsZi5fY2hlY2tfdHlwZV9zdHIodmFsdWUpCiAgICAgICAgcmV0dXJuIG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmV4cGFuZHZhcnModmFsdWUpKQoKICAgIGRlZiBfY2hlY2tfdHlwZV9qc29uYXJnKHNlbGYsIHZhbHVlKToKICAgICAgICAjIFJldHVybiBhIGpzb25pZmllZCBzdHJpbmcuICBTb21ldGltZXMgdGhlIGNvbnRyb2xsZXIgdHVybnMgYSBqc29uCiAgICAgICAgIyBzdHJpbmcgaW50byBhIGRpY3QvbGlzdCBzbyB0cmFuc2Zvcm0gaXQgYmFjayBpbnRvIGpzb24gaGVyZQogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsICh0ZXh0X3R5cGUsIGJpbmFyeV90eXBlKSk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5zdHJpcCgpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgKGxpc3QsIHR1cGxlLCBkaWN0KSk6CiAgICAgICAgICAgICAgICByZXR1cm4ganNvbi5kdW1wcyh2YWx1ZSkKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYSBqc29uIHN0cmluZycgJSB0eXBlKHZhbHVlKSkKCiAgICBkZWYgX2NoZWNrX3R5cGVfcmF3KHNlbGYsIHZhbHVlKToKICAgICAgICByZXR1cm4gdmFsdWUKCgogICAgZGVmIF9jaGVja190eXBlX2J5dGVzKHNlbGYsIHZhbHVlKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYuaHVtYW5fdG9fYnl0ZXModmFsdWUpCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcignJXMgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIEJ5dGUgdmFsdWUnICUgdHlwZSh2YWx1ZSkpCgoKICAgIGRlZiBfY2hlY2tfdHlwZV9iaXRzKHNlbGYsIHZhbHVlKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYuaHVtYW5fdG9fYnl0ZXModmFsdWUsIGlzYml0cz1UcnVlKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gYSBCaXQgdmFsdWUnICUgdHlwZSh2YWx1ZSkpCgogICAgZGVmIF9jaGVja19hcmd1bWVudF90eXBlcyhzZWxmLCBzcGVjPU5vbmUsIHBhcmFtPU5vbmUpOgogICAgICAgICcnJyBlbnN1cmUgYWxsIGFyZ3VtZW50cyBoYXZlIHRoZSByZXF1ZXN0ZWQgdHlwZSAnJycKCiAgICAgICAgaWYgc3BlYyBpcyBOb25lOgogICAgICAgICAgICBzcGVjID0gc2VsZi5hcmd1bWVudF9zcGVjCiAgICAgICAgaWYgcGFyYW0gaXMgTm9uZToKICAgICAgICAgICAgcGFyYW0gPSBzZWxmLnBhcmFtcwoKICAgICAgICBmb3IgKGssIHYpIGluIHNwZWMuaXRlbXMoKToKICAgICAgICAgICAgd2FudGVkID0gdi5nZXQoJ3R5cGUnLCBOb25lKQogICAgICAgICAgICBpZiBrIG5vdCBpbiBwYXJhbToKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGlmIHdhbnRlZCBpcyBOb25lOgogICAgICAgICAgICAgICAgIyBNb3N0bHkgd2Ugd2FudCB0byBkZWZhdWx0IHRvIHN0ci4KICAgICAgICAgICAgICAgICMgRm9yIHZhbHVlcyBzZXQgdG8gTm9uZSBleHBsaWNpdGx5LCByZXR1cm4gTm9uZSBpbnN0ZWFkIGFzCiAgICAgICAgICAgICAgICAjIHRoYXQgYWxsb3dzIGEgdXNlciB0byB1bnNldCBhIHBhcmFtZXRlcgogICAgICAgICAgICAgICAgaWYgcGFyYW1ba10gaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgd2FudGVkID0gJ3N0cicKCiAgICAgICAgICAgIHZhbHVlID0gcGFyYW1ba10KICAgICAgICAgICAgaWYgdmFsdWUgaXMgTm9uZToKICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB0eXBlX2NoZWNrZXIgPSBzZWxmLl9DSEVDS19BUkdVTUVOVF9UWVBFU19ESVNQQVRDSEVSW3dhbnRlZF0KICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSJpbXBsZW1lbnRhdGlvbiBlcnJvcjogdW5rbm93biB0eXBlICVzIHJlcXVlc3RlZCBmb3IgJXMiICUgKHdhbnRlZCwgaykpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHBhcmFtW2tdID0gdHlwZV9jaGVja2VyKHZhbHVlKQogICAgICAgICAgICBleGNlcHQgKFR5cGVFcnJvciwgVmFsdWVFcnJvcik6CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9ImFyZ3VtZW50ICVzIGlzIG9mIHR5cGUgJXMgYW5kIHdlIHdlcmUgdW5hYmxlIHRvIGNvbnZlcnQgdG8gJXM6ICVzIiAlIChrLCB0eXBlKHZhbHVlKSwgd2FudGVkLCBlKSkKCiAgICAgICAgICAgICMgZGVhbCB3aXRoIHN1YiBvcHRpb25zIHRvIGNyZWF0ZSBzdWIgc3BlYwogICAgICAgICAgICBzcGVjID0gTm9uZQogICAgICAgICAgICBpZiB3YW50ZWQgPT0gJ2RpY3QnIG9yICh3YW50ZWQgPT0gJ2xpc3QnIGFuZCB2LmdldCgnZWxlbWVudHMnLCAnJykgPT0gJ2RpY3QnKToKICAgICAgICAgICAgICAgIHNwZWMgPSB2LmdldCgnb3B0aW9ucycsIE5vbmUpCiAgICAgICAgICAgICAgICBpZiBzcGVjOgogICAgICAgICAgICAgICAgICAgIHNlbGYuX2NoZWNrX3JlcXVpcmVkX2FyZ3VtZW50cyhzcGVjLCBwYXJhbVtrXSkKICAgICAgICAgICAgICAgICAgICBzZWxmLl9jaGVja19hcmd1bWVudF90eXBlcyhzcGVjLCBwYXJhbVtrXSkKICAgICAgICAgICAgICAgICAgICBzZWxmLl9jaGVja19hcmd1bWVudF92YWx1ZXMoc3BlYywgcGFyYW1ba10pCgogICAgZGVmIF9zZXRfZGVmYXVsdHMoc2VsZiwgcHJlPVRydWUpOgogICAgICAgIGZvciAoayx2KSBpbiBzZWxmLmFyZ3VtZW50X3NwZWMuaXRlbXMoKToKICAgICAgICAgICAgZGVmYXVsdCA9IHYuZ2V0KCdkZWZhdWx0JywgTm9uZSkKICAgICAgICAgICAgaWYgcHJlIGlzIFRydWU6CiAgICAgICAgICAgICAgICAjIHRoaXMgcHJldmVudHMgc2V0dGluZyBkZWZhdWx0cyBvbiByZXF1aXJlZCBpdGVtcwogICAgICAgICAgICAgICAgaWYgZGVmYXVsdCBpcyBub3QgTm9uZSBhbmQgayBub3QgaW4gc2VsZi5wYXJhbXM6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5wYXJhbXNba10gPSBkZWZhdWx0CiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIG1ha2Ugc3VyZSB0aGluZ3Mgd2l0aG91dCBhIGRlZmF1bHQgc3RpbGwgZ2V0IHNldCBOb25lCiAgICAgICAgICAgICAgICBpZiBrIG5vdCBpbiBzZWxmLnBhcmFtczoKICAgICAgICAgICAgICAgICAgICBzZWxmLnBhcmFtc1trXSA9IGRlZmF1bHQKCiAgICBkZWYgX3NldF9mYWxsYmFja3Moc2VsZik6CiAgICAgICAgZm9yIGssdiBpbiBzZWxmLmFyZ3VtZW50X3NwZWMuaXRlbXMoKToKICAgICAgICAgICAgZmFsbGJhY2sgPSB2LmdldCgnZmFsbGJhY2snLCAoTm9uZSwpKQogICAgICAgICAgICBmYWxsYmFja19zdHJhdGVneSA9IGZhbGxiYWNrWzBdCiAgICAgICAgICAgIGZhbGxiYWNrX2FyZ3MgPSBbXQogICAgICAgICAgICBmYWxsYmFja19rd2FyZ3MgPSB7fQogICAgICAgICAgICBpZiBrIG5vdCBpbiBzZWxmLnBhcmFtcyBhbmQgZmFsbGJhY2tfc3RyYXRlZ3kgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBmb3IgaXRlbSBpbiBmYWxsYmFja1sxOl06CiAgICAgICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShpdGVtLCBkaWN0KToKICAgICAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tfa3dhcmdzID0gaXRlbQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrX2FyZ3MgPSBpdGVtCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5wYXJhbXNba10gPSBmYWxsYmFja19zdHJhdGVneSgqZmFsbGJhY2tfYXJncywgKipmYWxsYmFja19rd2FyZ3MpCiAgICAgICAgICAgICAgICBleGNlcHQgQW5zaWJsZUZhbGxiYWNrTm90Rm91bmQ6CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKCiAgICBkZWYgX2xvYWRfcGFyYW1zKHNlbGYpOgogICAgICAgICcnJyByZWFkIHRoZSBpbnB1dCBhbmQgc2V0IHRoZSBwYXJhbXMgYXR0cmlidXRlLgoKICAgICAgICBUaGlzIG1ldGhvZCBpcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuICBUaGUgZ3V0cyBvZiB0aGUgZnVuY3Rpb24KICAgICAgICB3ZXJlIG1vdmVkIG91dCBpbiAyLjEgc28gdGhhdCBjdXN0b20gbW9kdWxlcyBjb3VsZCByZWFkIHRoZSBwYXJhbWV0ZXJzLgogICAgICAgICcnJwogICAgICAgICMgZGVidWcgb3ZlcnJpZGVzIHRvIHJlYWQgYXJncyBmcm9tIGZpbGUgb3IgY21kbGluZQogICAgICAgIHNlbGYucGFyYW1zID0gX2xvYWRfcGFyYW1zKCkKCiAgICBkZWYgX2xvZ190b19zeXNsb2coc2VsZiwgbXNnKToKICAgICAgICBpZiBIQVNfU1lTTE9HOgogICAgICAgICAgICBtb2R1bGUgPSAnYW5zaWJsZS0lcycgJSBzZWxmLl9uYW1lCiAgICAgICAgICAgIGZhY2lsaXR5ID0gZ2V0YXR0cihzeXNsb2csIHNlbGYuX3N5c2xvZ19mYWNpbGl0eSwgc3lzbG9nLkxPR19VU0VSKQogICAgICAgICAgICBzeXNsb2cub3BlbmxvZyhzdHIobW9kdWxlKSwgMCwgZmFjaWxpdHkpCiAgICAgICAgICAgIHN5c2xvZy5zeXNsb2coc3lzbG9nLkxPR19JTkZPLCBtc2cpCgogICAgZGVmIGRlYnVnKHNlbGYsIG1zZyk6CiAgICAgICAgaWYgc2VsZi5fZGVidWc6CiAgICAgICAgICAgIHNlbGYubG9nKCdbZGVidWddICVzJyAlIG1zZykKCiAgICBkZWYgbG9nKHNlbGYsIG1zZywgbG9nX2FyZ3M9Tm9uZSk6CgogICAgICAgIGlmIG5vdCBzZWxmLm5vX2xvZzoKCiAgICAgICAgICAgIGlmIGxvZ19hcmdzIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBsb2dfYXJncyA9IGRpY3QoKQoKICAgICAgICAgICAgbW9kdWxlID0gJ2Fuc2libGUtJXMnICUgc2VsZi5fbmFtZQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKG1vZHVsZSwgYmluYXJ5X3R5cGUpOgogICAgICAgICAgICAgICAgbW9kdWxlID0gbW9kdWxlLmRlY29kZSgndXRmLTgnLCAncmVwbGFjZScpCgogICAgICAgICAgICAjIDY2NTUgLSBhbGxvdyBmb3IgYWNjZW50ZWQgY2hhcmFjdGVycwogICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShtc2csIChiaW5hcnlfdHlwZSwgdGV4dF90eXBlKSk6CiAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoIm1zZyBzaG91bGQgYmUgYSBzdHJpbmcgKGdvdCAlcykiICUgdHlwZShtc2cpKQoKICAgICAgICAgICAgIyBXZSB3YW50IGpvdXJuYWwgdG8gYWx3YXlzIHRha2UgdGV4dCB0eXBlCiAgICAgICAgICAgICMgc3lzbG9nIHRha2VzIGJ5dGVzIG9uIHB5MiwgdGV4dCB0eXBlIG9uIHB5MwogICAgICAgICAgICBpZiBpc2luc3RhbmNlKG1zZywgYmluYXJ5X3R5cGUpOgogICAgICAgICAgICAgICAgam91cm5hbF9tc2cgPSByZW1vdmVfdmFsdWVzKG1zZy5kZWNvZGUoJ3V0Zi04JywgJ3JlcGxhY2UnKSwgc2VsZi5ub19sb2dfdmFsdWVzKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBUT0RPOiBzdXJyb2dhdGVlc2NhcGUgaXMgYSBkYW5nZXIgaGVyZSBvbiBQeTMKICAgICAgICAgICAgICAgIGpvdXJuYWxfbXNnID0gcmVtb3ZlX3ZhbHVlcyhtc2csIHNlbGYubm9fbG9nX3ZhbHVlcykKCiAgICAgICAgICAgIGlmIFBZMzoKICAgICAgICAgICAgICAgIHN5c2xvZ19tc2cgPSBqb3VybmFsX21zZwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc3lzbG9nX21zZyA9IGpvdXJuYWxfbXNnLmVuY29kZSgndXRmLTgnLCAncmVwbGFjZScpCgogICAgICAgICAgICBpZiBoYXNfam91cm5hbDoKICAgICAgICAgICAgICAgIGpvdXJuYWxfYXJncyA9IFsoIk1PRFVMRSIsIG9zLnBhdGguYmFzZW5hbWUoX19maWxlX18pKV0KICAgICAgICAgICAgICAgIGZvciBhcmcgaW4gbG9nX2FyZ3M6CiAgICAgICAgICAgICAgICAgICAgam91cm5hbF9hcmdzLmFwcGVuZCgoYXJnLnVwcGVyKCksIHN0cihsb2dfYXJnc1thcmddKSkpCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgam91cm5hbC5zZW5kKHUiJXMgJXMiICUgKG1vZHVsZSwgam91cm5hbF9tc2cpLCAqKmRpY3Qoam91cm5hbF9hcmdzKSkKICAgICAgICAgICAgICAgIGV4Y2VwdCBJT0Vycm9yOgogICAgICAgICAgICAgICAgICAgICMgZmFsbCBiYWNrIHRvIHN5c2xvZyBzaW5jZSBsb2dnaW5nIHRvIGpvdXJuYWwgZmFpbGVkCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fbG9nX3RvX3N5c2xvZyhzeXNsb2dfbXNnKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5fbG9nX3RvX3N5c2xvZyhzeXNsb2dfbXNnKQoKICAgIGRlZiBfbG9nX2ludm9jYXRpb24oc2VsZik6CiAgICAgICAgJycnIGxvZyB0aGF0IGFuc2libGUgcmFuIHRoZSBtb2R1bGUgJycnCiAgICAgICAgIyBUT0RPOiBnZW5lcmFsaXplIGEgc2VwYXJhdGUgbG9nIGZ1bmN0aW9uIGFuZCBtYWtlIGxvZ19pbnZvY2F0aW9uIHVzZSBpdAogICAgICAgICMgU2FuaXRpemUgcG9zc2libGUgcGFzc3dvcmQgYXJndW1lbnQgd2hlbiBsb2dnaW5nLgogICAgICAgIGxvZ19hcmdzID0gZGljdCgpCgogICAgICAgIGZvciBwYXJhbSBpbiBzZWxmLnBhcmFtczoKICAgICAgICAgICAgY2Fub24gID0gc2VsZi5hbGlhc2VzLmdldChwYXJhbSwgcGFyYW0pCiAgICAgICAgICAgIGFyZ19vcHRzID0gc2VsZi5hcmd1bWVudF9zcGVjLmdldChjYW5vbiwge30pCiAgICAgICAgICAgIG5vX2xvZyA9IGFyZ19vcHRzLmdldCgnbm9fbG9nJywgRmFsc2UpCgogICAgICAgICAgICBpZiBzZWxmLmJvb2xlYW4obm9fbG9nKToKICAgICAgICAgICAgICAgIGxvZ19hcmdzW3BhcmFtXSA9ICdOT1RfTE9HR0lOR19QQVJBTUVURVInCiAgICAgICAgICAgICMgdHJ5IHRvIGNhcHR1cmUgYWxsIHBhc3N3b3Jkcy9wYXNzcGhyYXNlIG5hbWVkIGZpZWxkcyBtaXNzZWQgYnkgbm9fbG9nCiAgICAgICAgICAgIGVsaWYgUEFTU1dPUkRfTUFUQ0guc2VhcmNoKHBhcmFtKSBhbmQgXAogICAgICAgICAgICAgIGFyZ19vcHRzLmdldCgndHlwZScsICdzdHInKSAhPSAnYm9vbCcgYW5kIFwKICAgICAgICAgICAgICBub3QgYXJnX29wdHMuZ2V0KCdjaG9pY2VzJywgRmFsc2UpOgogICAgICAgICAgICAgICAgIyBza2lwIGJvb2xlYW4gYW5kIGVudW1zIGFzIHRoZXkgYXJlIGFib3V0ICdwYXNzd29yZCcgc3RhdGUKICAgICAgICAgICAgICAgIGxvZ19hcmdzW3BhcmFtXSA9ICdOT1RfTE9HR0lOR19QQVNTV09SRCcKICAgICAgICAgICAgICAgIHNlbGYud2FybignTW9kdWxlIGRpZCBub3Qgc2V0IG5vX2xvZyBmb3IgJXMnICUgcGFyYW0pCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwYXJhbV92YWwgPSBzZWxmLnBhcmFtc1twYXJhbV0KICAgICAgICAgICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKHBhcmFtX3ZhbCwgKHRleHRfdHlwZSwgYmluYXJ5X3R5cGUpKToKICAgICAgICAgICAgICAgICAgICBwYXJhbV92YWwgPSBzdHIocGFyYW1fdmFsKQogICAgICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKHBhcmFtX3ZhbCwgdGV4dF90eXBlKToKICAgICAgICAgICAgICAgICAgICBwYXJhbV92YWwgPSBwYXJhbV92YWwuZW5jb2RlKCd1dGYtOCcpCiAgICAgICAgICAgICAgICBsb2dfYXJnc1twYXJhbV0gPSBoZXVyaXN0aWNfbG9nX3Nhbml0aXplKHBhcmFtX3ZhbCwgc2VsZi5ub19sb2dfdmFsdWVzKQoKICAgICAgICBtc2cgPSBbJyVzPSVzJyAlICh0b19uYXRpdmUoYXJnKSwgdG9fbmF0aXZlKHZhbCkpIGZvciBhcmcsIHZhbCBpbiBsb2dfYXJncy5pdGVtcygpXQogICAgICAgIGlmIG1zZzoKICAgICAgICAgICAgbXNnID0gJ0ludm9rZWQgd2l0aCAlcycgJSAnICcuam9pbihtc2cpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbXNnID0gJ0ludm9rZWQnCgogICAgICAgIHNlbGYubG9nKG1zZywgbG9nX2FyZ3M9bG9nX2FyZ3MpCgoKICAgIGRlZiBfc2V0X2N3ZChzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGN3ZCA9IG9zLmdldGN3ZCgpCiAgICAgICAgICAgIGlmIG5vdCBvcy5hY2Nlc3MoY3dkLCBvcy5GX09LfG9zLlJfT0spOgogICAgICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCkKICAgICAgICAgICAgcmV0dXJuIGN3ZAogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgIyB3ZSBkb24ndCBoYXZlIGFjY2VzcyB0byB0aGUgY3dkLCBwcm9iYWJseSBiZWNhdXNlIG9mIHN1ZG8uCiAgICAgICAgICAgICMgVHJ5IGFuZCBtb3ZlIHRvIGEgbmV1dHJhbCBsb2NhdGlvbiB0byBwcmV2ZW50IGVycm9ycwogICAgICAgICAgICBmb3IgY3dkIGluIFtvcy5wYXRoLmV4cGFuZHZhcnMoJyRIT01FJyksIHRlbXBmaWxlLmdldHRlbXBkaXIoKV06CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgaWYgb3MuYWNjZXNzKGN3ZCwgb3MuRl9PS3xvcy5SX09LKToKICAgICAgICAgICAgICAgICAgICAgICAgb3MuY2hkaXIoY3dkKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3dkCiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICMgd2Ugd29uJ3QgZXJyb3IgaGVyZSwgYXMgaXQgbWF5ICpub3QqIGJlIGEgcHJvYmxlbSwKICAgICAgICAjIGFuZCB3ZSBkb24ndCB3YW50IHRvIGJyZWFrIG1vZHVsZXMgdW5uZWNlc3NhcmlseQogICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIGdldF9iaW5fcGF0aChzZWxmLCBhcmcsIHJlcXVpcmVkPUZhbHNlLCBvcHRfZGlycz1bXSk6CiAgICAgICAgJycnCiAgICAgICAgZmluZCBzeXN0ZW0gZXhlY3V0YWJsZSBpbiBQQVRILgogICAgICAgIE9wdGlvbmFsIGFyZ3VtZW50czoKICAgICAgICAgICAtIHJlcXVpcmVkOiAgaWYgZXhlY3V0YWJsZSBpcyBub3QgZm91bmQgYW5kIHJlcXVpcmVkIGlzIHRydWUsIGZhaWxfanNvbgogICAgICAgICAgIC0gb3B0X2RpcnM6ICBvcHRpb25hbCBsaXN0IG9mIGRpcmVjdG9yaWVzIHRvIHNlYXJjaCBpbiBhZGRpdGlvbiB0byBQQVRICiAgICAgICAgaWYgZm91bmQgcmV0dXJuIGZ1bGwgcGF0aDsgb3RoZXJ3aXNlIHJldHVybiBOb25lCiAgICAgICAgJycnCiAgICAgICAgc2Jpbl9wYXRocyA9IFsnL3NiaW4nLCAnL3Vzci9zYmluJywgJy91c3IvbG9jYWwvc2JpbiddCiAgICAgICAgcGF0aHMgPSBbXQogICAgICAgIGZvciBkIGluIG9wdF9kaXJzOgogICAgICAgICAgICBpZiBkIGlzIG5vdCBOb25lIGFuZCBvcy5wYXRoLmV4aXN0cyhkKToKICAgICAgICAgICAgICAgIHBhdGhzLmFwcGVuZChkKQogICAgICAgIHBhdGhzICs9IG9zLmVudmlyb24uZ2V0KCdQQVRIJywgJycpLnNwbGl0KG9zLnBhdGhzZXApCiAgICAgICAgYmluX3BhdGggPSBOb25lCiAgICAgICAgIyBtYW5nbGUgUEFUSCB0byBpbmNsdWRlIC9zYmluIGRpcnMKICAgICAgICBmb3IgcCBpbiBzYmluX3BhdGhzOgogICAgICAgICAgICBpZiBwIG5vdCBpbiBwYXRocyBhbmQgb3MucGF0aC5leGlzdHMocCk6CiAgICAgICAgICAgICAgICBwYXRocy5hcHBlbmQocCkKICAgICAgICBmb3IgZCBpbiBwYXRoczoKICAgICAgICAgICAgaWYgbm90IGQ6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBwYXRoID0gb3MucGF0aC5qb2luKGQsIGFyZykKICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMocGF0aCkgYW5kIG5vdCBvcy5wYXRoLmlzZGlyKHBhdGgpIGFuZCBpc19leGVjdXRhYmxlKHBhdGgpOgogICAgICAgICAgICAgICAgYmluX3BhdGggPSBwYXRoCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGlmIHJlcXVpcmVkIGFuZCBiaW5fcGF0aCBpcyBOb25lOgogICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9J0ZhaWxlZCB0byBmaW5kIHJlcXVpcmVkIGV4ZWN1dGFibGUgJXMgaW4gcGF0aHM6ICVzJyAlIChhcmcsIG9zLnBhdGhzZXAuam9pbihwYXRocykpKQogICAgICAgIHJldHVybiBiaW5fcGF0aAoKICAgIGRlZiBib29sZWFuKHNlbGYsIGFyZyk6CiAgICAgICAgJycnIHJldHVybiBhIGJvb2wgZm9yIHRoZSBhcmcgJycnCiAgICAgICAgaWYgYXJnIGlzIE5vbmUgb3IgaXNpbnN0YW5jZShhcmcsIGJvb2wpOgogICAgICAgICAgICByZXR1cm4gYXJnCiAgICAgICAgaWYgaXNpbnN0YW5jZShhcmcsIHN0cmluZ190eXBlcyk6CiAgICAgICAgICAgIGFyZyA9IGFyZy5sb3dlcigpCiAgICAgICAgaWYgYXJnIGluIEJPT0xFQU5TX1RSVUU6CiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZWxpZiBhcmcgaW4gQk9PTEVBTlNfRkFMU0U6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0nJXMgaXMgbm90IGEgdmFsaWQgYm9vbGVhbi4gVmFsaWQgYm9vbGVhbnMgaW5jbHVkZTogJXMnICUgKHRvX3RleHQoYXJnKSwgJywnLmpvaW4oWyclcycgJSB4IGZvciB4IGluIEJPT0xFQU5TXSkpKQoKICAgIGRlZiBqc29uaWZ5KHNlbGYsIGRhdGEpOgogICAgICAgIGZvciBlbmNvZGluZyBpbiAoInV0Zi04IiwgImxhdGluLTEiKToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmV0dXJuIGpzb24uZHVtcHMoZGF0YSwgZW5jb2Rpbmc9ZW5jb2RpbmcpCiAgICAgICAgICAgICMgT2xkIHN5c3RlbXMgdXNpbmcgb2xkIHNpbXBsZWpzb24gbW9kdWxlIGRvZXMgbm90IHN1cHBvcnQgZW5jb2Rpbmcga2V5d29yZC4KICAgICAgICAgICAgZXhjZXB0IFR5cGVFcnJvcjoKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBuZXdfZGF0YSA9IGpzb25fZGljdF9ieXRlc190b191bmljb2RlKGRhdGEsIGVuY29kaW5nPWVuY29kaW5nKQogICAgICAgICAgICAgICAgZXhjZXB0IFVuaWNvZGVEZWNvZGVFcnJvcjoKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgcmV0dXJuIGpzb24uZHVtcHMobmV3X2RhdGEpCiAgICAgICAgICAgIGV4Y2VwdCBVbmljb2RlRGVjb2RlRXJyb3I6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0nSW52YWxpZCB1bmljb2RlIGVuY29kaW5nIGVuY291bnRlcmVkJykKCiAgICBkZWYgZnJvbV9qc29uKHNlbGYsIGRhdGEpOgogICAgICAgIHJldHVybiBqc29uLmxvYWRzKGRhdGEpCgogICAgZGVmIGFkZF9jbGVhbnVwX2ZpbGUoc2VsZiwgcGF0aCk6CiAgICAgICAgaWYgcGF0aCBub3QgaW4gc2VsZi5jbGVhbnVwX2ZpbGVzOgogICAgICAgICAgICBzZWxmLmNsZWFudXBfZmlsZXMuYXBwZW5kKHBhdGgpCgogICAgZGVmIGRvX2NsZWFudXBfZmlsZXMoc2VsZik6CiAgICAgICAgZm9yIHBhdGggaW4gc2VsZi5jbGVhbnVwX2ZpbGVzOgogICAgICAgICAgICBzZWxmLmNsZWFudXAocGF0aCkKCiAgICBkZWYgX3JldHVybl9mb3JtYXR0ZWQoc2VsZiwga3dhcmdzKToKCiAgICAgICAgc2VsZi5hZGRfcGF0aF9pbmZvKGt3YXJncykKCiAgICAgICAgaWYgJ2ludm9jYXRpb24nIG5vdCBpbiBrd2FyZ3M6CiAgICAgICAgICAgIGt3YXJnc1snaW52b2NhdGlvbiddID0geydtb2R1bGVfYXJncyc6IHNlbGYucGFyYW1zfQoKICAgICAgICBpZiAnd2FybmluZ3MnIGluIGt3YXJnczoKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShrd2FyZ3NbJ3dhcm5pbmdzJ10sIGxpc3QpOgogICAgICAgICAgICAgICAgZm9yIHcgaW4ga3dhcmdzWyd3YXJuaW5ncyddOgogICAgICAgICAgICAgICAgICAgIHNlbGYud2Fybih3KQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi53YXJuKGt3YXJnc1snd2FybmluZ3MnXSkKCiAgICAgICAgaWYgc2VsZi5fd2FybmluZ3M6CiAgICAgICAgICAgIGt3YXJnc1snd2FybmluZ3MnXSA9IHNlbGYuX3dhcm5pbmdzCgogICAgICAgIGlmICdkZXByZWNhdGlvbnMnIGluIGt3YXJnczoKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShrd2FyZ3NbJ2RlcHJlY2F0aW9ucyddLCBsaXN0KToKICAgICAgICAgICAgICAgIGZvciBkIGluIGt3YXJnc1snZGVwcmVjYXRpb25zJ106CiAgICAgICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShkLCBTRVFVRU5DRVRZUEUpIGFuZCBsZW4oZCkgPT0gMjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kZXByZWNhdGUoZFswXSwgdmVyc2lvbj1kWzFdKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGVwcmVjYXRlKGQpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmRlcHJlY2F0ZShrd2FyZ3NbJ2RlcHJlY2F0aW9ucyddKQoKICAgICAgICBpZiBzZWxmLl9kZXByZWNhdGlvbnM6CiAgICAgICAgICAgIGt3YXJnc1snZGVwcmVjYXRpb25zJ10gPSBzZWxmLl9kZXByZWNhdGlvbnMKCiAgICAgICAga3dhcmdzID0gcmVtb3ZlX3ZhbHVlcyhrd2FyZ3MsIHNlbGYubm9fbG9nX3ZhbHVlcykKICAgICAgICBwcmludCgnXG4lcycgJSBzZWxmLmpzb25pZnkoa3dhcmdzKSkKCiAgICBkZWYgZXhpdF9qc29uKHNlbGYsICoqa3dhcmdzKToKICAgICAgICAnJycgcmV0dXJuIGZyb20gdGhlIG1vZHVsZSwgd2l0aG91dCBlcnJvciAnJycKCiAgICAgICAgaWYgbm90ICdjaGFuZ2VkJyBpbiBrd2FyZ3M6CiAgICAgICAgICAgIGt3YXJnc1snY2hhbmdlZCddID0gRmFsc2UKCiAgICAgICAgc2VsZi5kb19jbGVhbnVwX2ZpbGVzKCkKICAgICAgICBzZWxmLl9yZXR1cm5fZm9ybWF0dGVkKGt3YXJncykKICAgICAgICBzeXMuZXhpdCgwKQoKICAgIGRlZiBmYWlsX2pzb24oc2VsZiwgKiprd2FyZ3MpOgogICAgICAgICcnJyByZXR1cm4gZnJvbSB0aGUgbW9kdWxlLCB3aXRoIGFuIGVycm9yIG1lc3NhZ2UgJycnCgogICAgICAgIGFzc2VydCAnbXNnJyBpbiBrd2FyZ3MsICJpbXBsZW1lbnRhdGlvbiBlcnJvciAtLSBtc2cgdG8gZXhwbGFpbiB0aGUgZXJyb3IgaXMgcmVxdWlyZWQiCiAgICAgICAga3dhcmdzWydmYWlsZWQnXSA9IFRydWUKCiAgICAgICAgaWYgbm90ICdjaGFuZ2VkJyBpbiBrd2FyZ3M6CiAgICAgICAgICAgIGt3YXJnc1snY2hhbmdlZCddID0gRmFsc2UKCiAgICAgICAgc2VsZi5kb19jbGVhbnVwX2ZpbGVzKCkKICAgICAgICBzZWxmLl9yZXR1cm5fZm9ybWF0dGVkKGt3YXJncykKICAgICAgICBzeXMuZXhpdCgxKQoKICAgIGRlZiBmYWlsX29uX21pc3NpbmdfcGFyYW1zKHNlbGYsIHJlcXVpcmVkX3BhcmFtcz1Ob25lKToKICAgICAgICAnJycgVGhpcyBpcyBmb3IgY2hlY2tpbmcgZm9yIHJlcXVpcmVkIHBhcmFtcyB3aGVuIHdlIGNhbiBub3QgY2hlY2sgdmlhIGFyZ3NwZWMgYmVjYXVzZSB3ZQogICAgICAgIG5lZWQgbW9yZSBpbmZvcm1hdGlvbiB0aGFuIGlzIHNpbXBseSBnaXZlbiBpbiB0aGUgYXJnc3BlYy4KICAgICAgICAnJycKICAgICAgICBpZiBub3QgcmVxdWlyZWRfcGFyYW1zOgogICAgICAgICAgICByZXR1cm4KICAgICAgICBtaXNzaW5nX3BhcmFtcyA9IFtdCiAgICAgICAgZm9yIHJlcXVpcmVkX3BhcmFtIGluIHJlcXVpcmVkX3BhcmFtczoKICAgICAgICAgICAgaWYgbm90IHNlbGYucGFyYW1zLmdldChyZXF1aXJlZF9wYXJhbSk6CiAgICAgICAgICAgICAgICBtaXNzaW5nX3BhcmFtcy5hcHBlbmQocmVxdWlyZWRfcGFyYW0pCiAgICAgICAgaWYgbWlzc2luZ19wYXJhbXM6CiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0ibWlzc2luZyByZXF1aXJlZCBhcmd1bWVudHM6ICVzIiAlICcsJy5qb2luKG1pc3NpbmdfcGFyYW1zKSkKCiAgICBkZWYgZGlnZXN0X2Zyb21fZmlsZShzZWxmLCBmaWxlbmFtZSwgYWxnb3JpdGhtKToKICAgICAgICAnJycgUmV0dXJuIGhleCBkaWdlc3Qgb2YgbG9jYWwgZmlsZSBmb3IgYSBkaWdlc3RfbWV0aG9kIHNwZWNpZmllZCBieSBuYW1lLCBvciBOb25lIGlmIGZpbGUgaXMgbm90IHByZXNlbnQuICcnJwogICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhmaWxlbmFtZSk6CiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgaWYgb3MucGF0aC5pc2RpcihmaWxlbmFtZSk6CiAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKG1zZz0iYXR0ZW1wdGVkIHRvIHRha2UgY2hlY2tzdW0gb2YgZGlyZWN0b3J5OiAlcyIgJSBmaWxlbmFtZSkKCiAgICAgICAgIyBwcmVzZXJ2ZSBvbGQgYmVoYXZpb3VyIHdoZXJlIHRoZSB0aGlyZCBwYXJhbWV0ZXIgd2FzIGEgaGFzaCBhbGdvcml0aG0gb2JqZWN0CiAgICAgICAgaWYgaGFzYXR0cihhbGdvcml0aG0sICdoZXhkaWdlc3QnKToKICAgICAgICAgICAgZGlnZXN0X21ldGhvZCA9IGFsZ29yaXRobQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGRpZ2VzdF9tZXRob2QgPSBBVkFJTEFCTEVfSEFTSF9BTEdPUklUSE1TW2FsZ29yaXRobV0oKQogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9IkNvdWxkIG5vdCBoYXNoIGZpbGUgJyVzJyB3aXRoIGFsZ29yaXRobSAnJXMnLiBBdmFpbGFibGUgYWxnb3JpdGhtczogJXMiICUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZmlsZW5hbWUsIGFsZ29yaXRobSwgJywgJy5qb2luKEFWQUlMQUJMRV9IQVNIX0FMR09SSVRITVMpKSkKCiAgICAgICAgYmxvY2tzaXplID0gNjQgKiAxMDI0CiAgICAgICAgaW5maWxlID0gb3Blbihvcy5wYXRoLnJlYWxwYXRoKGZpbGVuYW1lKSwgJ3JiJykKICAgICAgICBibG9jayA9IGluZmlsZS5yZWFkKGJsb2Nrc2l6ZSkKICAgICAgICB3aGlsZSBibG9jazoKICAgICAgICAgICAgZGlnZXN0X21ldGhvZC51cGRhdGUoYmxvY2spCiAgICAgICAgICAgIGJsb2NrID0gaW5maWxlLnJlYWQoYmxvY2tzaXplKQogICAgICAgIGluZmlsZS5jbG9zZSgpCiAgICAgICAgcmV0dXJuIGRpZ2VzdF9tZXRob2QuaGV4ZGlnZXN0KCkKCiAgICBkZWYgbWQ1KHNlbGYsIGZpbGVuYW1lKToKICAgICAgICAnJycgUmV0dXJuIE1ENSBoZXggZGlnZXN0IG9mIGxvY2FsIGZpbGUgdXNpbmcgZGlnZXN0X2Zyb21fZmlsZSgpLgoKICAgICAgICBEbyBub3QgdXNlIHRoaXMgZnVuY3Rpb24gdW5sZXNzIHlvdSBoYXZlIG5vIG90aGVyIGNob2ljZSBmb3I6CiAgICAgICAgICAgIDEpIE9wdGlvbmFsIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5CiAgICAgICAgICAgIDIpIENvbXBhdGliaWxpdHkgd2l0aCBhIHRoaXJkIHBhcnR5IHByb3RvY29sCgogICAgICAgIFRoaXMgZnVuY3Rpb24gd2lsbCBub3Qgd29yayBvbiBzeXN0ZW1zIGNvbXBseWluZyB3aXRoIEZJUFMtMTQwLTIuCgogICAgICAgIE1vc3QgdXNlcyBvZiB0aGlzIGZ1bmN0aW9uIGNhbiB1c2UgdGhlIG1vZHVsZS5zaGExIGZ1bmN0aW9uIGluc3RlYWQuCiAgICAgICAgJycnCiAgICAgICAgaWYgJ21kNScgbm90IGluIEFWQUlMQUJMRV9IQVNIX0FMR09SSVRITVM6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ01ENSBub3QgYXZhaWxhYmxlLiAgUG9zc2libHkgcnVubmluZyBpbiBGSVBTIG1vZGUnKQogICAgICAgIHJldHVybiBzZWxmLmRpZ2VzdF9mcm9tX2ZpbGUoZmlsZW5hbWUsICdtZDUnKQoKICAgIGRlZiBzaGExKHNlbGYsIGZpbGVuYW1lKToKICAgICAgICAnJycgUmV0dXJuIFNIQTEgaGV4IGRpZ2VzdCBvZiBsb2NhbCBmaWxlIHVzaW5nIGRpZ2VzdF9mcm9tX2ZpbGUoKS4gJycnCiAgICAgICAgcmV0dXJuIHNlbGYuZGlnZXN0X2Zyb21fZmlsZShmaWxlbmFtZSwgJ3NoYTEnKQoKICAgIGRlZiBzaGEyNTYoc2VsZiwgZmlsZW5hbWUpOgogICAgICAgICcnJyBSZXR1cm4gU0hBLTI1NiBoZXggZGlnZXN0IG9mIGxvY2FsIGZpbGUgdXNpbmcgZGlnZXN0X2Zyb21fZmlsZSgpLiAnJycKICAgICAgICByZXR1cm4gc2VsZi5kaWdlc3RfZnJvbV9maWxlKGZpbGVuYW1lLCAnc2hhMjU2JykKCiAgICBkZWYgYmFja3VwX2xvY2FsKHNlbGYsIGZuKToKICAgICAgICAnJydtYWtlIGEgZGF0ZS1tYXJrZWQgYmFja3VwIG9mIHRoZSBzcGVjaWZpZWQgZmlsZSwgcmV0dXJuIFRydWUgb3IgRmFsc2Ugb24gc3VjY2VzcyBvciBmYWlsdXJlJycnCgogICAgICAgIGJhY2t1cGRlc3QgPSAnJwogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKGZuKToKICAgICAgICAgICAgIyBiYWNrdXBzIG5hbWVkIGJhc2VuYW1lLlBJRC5ZWVlZLU1NLUREQEhIOk1NOlNTfgogICAgICAgICAgICBleHQgPSB0aW1lLnN0cmZ0aW1lKCIlWS0lbS0lZEAlSDolTTolU34iLCB0aW1lLmxvY2FsdGltZSh0aW1lLnRpbWUoKSkpCiAgICAgICAgICAgIGJhY2t1cGRlc3QgPSAnJXMuJXMuJXMnICUgKGZuLCBvcy5nZXRwaWQoKSwgZXh0KQoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2h1dGlsLmNvcHkyKGZuLCBiYWNrdXBkZXN0KQogICAgICAgICAgICBleGNlcHQgKHNodXRpbC5FcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9J0NvdWxkIG5vdCBtYWtlIGJhY2t1cCBvZiAlcyB0byAlczogJXMnICUgKGZuLCBiYWNrdXBkZXN0LCBlKSkKCiAgICAgICAgcmV0dXJuIGJhY2t1cGRlc3QKCiAgICBkZWYgY2xlYW51cChzZWxmLCB0bXBmaWxlKToKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyh0bXBmaWxlKToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgb3MudW5saW5rKHRtcGZpbGUpCiAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgc3lzLnN0ZGVyci53cml0ZSgiY291bGQgbm90IGNsZWFudXAgJXM6ICVzIiAlICh0bXBmaWxlLCBlKSkKCiAgICBkZWYgYXRvbWljX21vdmUoc2VsZiwgc3JjLCBkZXN0LCB1bnNhZmVfd3JpdGVzPUZhbHNlKToKICAgICAgICAnJydhdG9taWNhbGx5IG1vdmUgc3JjIHRvIGRlc3QsIGNvcHlpbmcgYXR0cmlidXRlcyBmcm9tIGRlc3QsIHJldHVybnMgdHJ1ZSBvbiBzdWNjZXNzCiAgICAgICAgaXQgdXNlcyBvcy5yZW5hbWUgdG8gZW5zdXJlIHRoaXMgYXMgaXQgaXMgYW4gYXRvbWljIG9wZXJhdGlvbiwgcmVzdCBvZiB0aGUgZnVuY3Rpb24gaXMKICAgICAgICB0byB3b3JrIGFyb3VuZCBsaW1pdGF0aW9ucywgY29ybmVyIGNhc2VzIGFuZCBlbnN1cmUgc2VsaW51eCBjb250ZXh0IGlzIHNhdmVkIGlmIHBvc3NpYmxlJycnCiAgICAgICAgY29udGV4dCA9IE5vbmUKICAgICAgICBkZXN0X3N0YXQgPSBOb25lCiAgICAgICAgYl9zcmMgPSB0b19ieXRlcyhzcmMsIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgYl9kZXN0ID0gdG9fYnl0ZXMoZGVzdCwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhiX2Rlc3QpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBkZXN0X3N0YXQgPSBvcy5zdGF0KGJfZGVzdCkKCiAgICAgICAgICAgICAgICAjIGNvcHkgbW9kZSBhbmQgb3duZXJzaGlwCiAgICAgICAgICAgICAgICBvcy5jaG1vZChiX3NyYywgZGVzdF9zdGF0LnN0X21vZGUgJiBQRVJNX0JJVFMpCiAgICAgICAgICAgICAgICBvcy5jaG93bihiX3NyYywgZGVzdF9zdGF0LnN0X3VpZCwgZGVzdF9zdGF0LnN0X2dpZCkKCiAgICAgICAgICAgICAgICAjIHRyeSB0byBjb3B5IGZsYWdzIGlmIHBvc3NpYmxlCiAgICAgICAgICAgICAgICBpZiBoYXNhdHRyKG9zLCAnY2hmbGFncycpIGFuZCBoYXNhdHRyKGRlc3Rfc3RhdCwgJ3N0X2ZsYWdzJyk6CiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICBvcy5jaGZsYWdzKGJfc3JjLCBkZXN0X3N0YXQuc3RfZmxhZ3MpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGVyciBpbiAnRU9QTk9UU1VQUCcsICdFTk9UU1VQJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGhhc2F0dHIoZXJybm8sIGVycikgYW5kIGUuZXJybm8gPT0gZ2V0YXR0cihlcnJubywgZXJyKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UKICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICBpZiBlLmVycm5vICE9IGVycm5vLkVQRVJNOgogICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgIGlmIHNlbGYuc2VsaW51eF9lbmFibGVkKCk6CiAgICAgICAgICAgICAgICBjb250ZXh0ID0gc2VsZi5zZWxpbnV4X2NvbnRleHQoZGVzdCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBzZWxmLnNlbGludXhfZW5hYmxlZCgpOgogICAgICAgICAgICAgICAgY29udGV4dCA9IHNlbGYuc2VsaW51eF9kZWZhdWx0X2NvbnRleHQoZGVzdCkKCiAgICAgICAgY3JlYXRpbmcgPSBub3Qgb3MucGF0aC5leGlzdHMoYl9kZXN0KQoKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgT3B0aW1pc3RpY2FsbHkgdHJ5IGEgcmVuYW1lLCBzb2x2ZXMgc29tZSBjb3JuZXIgY2FzZXMgYW5kIGNhbiBhdm9pZCB1c2VsZXNzIHdvcmssIHRocm93cyBleGNlcHRpb24gaWYgbm90IGF0b21pYy4KICAgICAgICAgICAgb3MucmVuYW1lKGJfc3JjLCBiX2Rlc3QpCiAgICAgICAgZXhjZXB0IChJT0Vycm9yLCBPU0Vycm9yKToKICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICBpZiBlLmVycm5vIG5vdCBpbiBbZXJybm8uRVBFUk0sIGVycm5vLkVYREVWLCBlcnJuby5FQUNDRVMsIGVycm5vLkVUWFRCU1ksIGVycm5vLkVCVVNZXToKICAgICAgICAgICAgICAgICMgb25seSB0cnkgd29ya2Fyb3VuZHMgZm9yIGVycm5vIDE4IChjcm9zcyBkZXZpY2UpLCAxIChub3QgcGVybWl0dGVkKSwgIDEzIChwZXJtaXNzaW9uIGRlbmllZCkKICAgICAgICAgICAgICAgICMgYW5kIDI2ICh0ZXh0IGZpbGUgYnVzeSkgd2hpY2ggaGFwcGVucyBvbiB2YWdyYW50IHN5bmNlZCBmb2xkZXJzIGFuZCBvdGhlciAnZXhvdGljJyBub24gcG9zaXggZmlsZSBzeXN0ZW1zCiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9J0NvdWxkIG5vdCByZXBsYWNlIGZpbGU6ICVzIHRvICVzOiAlcycgJSAoc3JjLCBkZXN0LCBlKSwgZXhjZXB0aW9uPXRyYWNlYmFjay5mb3JtYXRfZXhjKCkpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBiX2Rlc3RfZGlyID0gb3MucGF0aC5kaXJuYW1lKGJfZGVzdCkKICAgICAgICAgICAgICAgICMgVXNlIGJ5dGVzIGhlcmUuICBJbiB0aGUgc2hpcHBhYmxlIENJLCB0aGlzIGZhaWxzIHdpdGgKICAgICAgICAgICAgICAgICMgYSBVbmljb2RlRXJyb3Igd2l0aCBzdXJyb2dhdGVlc2NhcGUnZCBzdHJpbmdzIGZvciBhbiB1bmtub3duCiAgICAgICAgICAgICAgICAjIHJlYXNvbiAoZG9lc24ndCBoYXBwZW4gaW4gYSBsb2NhbCBVYnVudHUxNi4wNCBWTSkKICAgICAgICAgICAgICAgIG5hdGl2ZV9kZXN0X2RpciA9IGJfZGVzdF9kaXIKICAgICAgICAgICAgICAgIG5hdGl2ZV9zdWZmaXggPSBvcy5wYXRoLmJhc2VuYW1lKGJfZGVzdCkKICAgICAgICAgICAgICAgIG5hdGl2ZV9wcmVmaXggPSBiKCcuYW5zaWJsZV90bXAnKQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHRtcF9kZXN0X2ZkLCB0bXBfZGVzdF9uYW1lID0gdGVtcGZpbGUubWtzdGVtcCggcHJlZml4PW5hdGl2ZV9wcmVmaXgsIGRpcj1uYXRpdmVfZGVzdF9kaXIsIHN1ZmZpeD1uYXRpdmVfc3VmZml4KQogICAgICAgICAgICAgICAgZXhjZXB0IChPU0Vycm9yLCBJT0Vycm9yKToKICAgICAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdUaGUgZGVzdGluYXRpb24gZGlyZWN0b3J5ICglcykgaXMgbm90IHdyaXRhYmxlIGJ5IHRoZSBjdXJyZW50IHVzZXIuIEVycm9yIHdhczogJXMnICUgKG9zLnBhdGguZGlybmFtZShkZXN0KSwgZSkpCiAgICAgICAgICAgICAgICBleGNlcHQgVHlwZUVycm9yOgogICAgICAgICAgICAgICAgICAgICMgV2UgZXhwZWN0IHRoYXQgdGhpcyBpcyBoYXBwZW5pbmcgYmVjYXVzZSBweXRob24zLjQueCBhbmQKICAgICAgICAgICAgICAgICAgICAjIGJlbG93IGNhbid0IGhhbmRsZSBieXRlIHN0cmluZ3MgaW4gbWtzdGVtcCgpLiAgVHJhY2ViYWNrCiAgICAgICAgICAgICAgICAgICAgIyB3b3VsZCBlbmQgaW4gc29tZXRoaW5nIGxpa2U6CiAgICAgICAgICAgICAgICAgICAgIyAgICAgZmlsZSA9IF9vcy5wYXRoLmpvaW4oZGlyLCBwcmUgKyBuYW1lICsgc3VmKQogICAgICAgICAgICAgICAgICAgICMgVHlwZUVycm9yOiBjYW4ndCBjb25jYXQgYnl0ZXMgdG8gc3RyCiAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdGYWlsZWQgY3JlYXRpbmcgdGVtcCBmaWxlIGZvciBhdG9taWMgbW92ZS4gIFRoaXMgdXN1YWxseSBoYXBwZW5zIHdoZW4gdXNpbmcgUHl0aG9uMyBsZXNzIHRoYW4gUHl0aG9uMy41LiAnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdQbGVhc2UgdXNlIFB5dGhvbjIueCBvciBQeXRob24zLjUgb3IgZ3JlYXRlci4nLCBleGNlcHRpb249dHJhY2ViYWNrLmZvcm1hdF9leGMoKSkKCiAgICAgICAgICAgICAgICBiX3RtcF9kZXN0X25hbWUgPSB0b19ieXRlcyh0bXBfZGVzdF9uYW1lLCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQoKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICMgY2xvc2UgdG1wIGZpbGUgaGFuZGxlIGJlZm9yZSBmaWxlIG9wZXJhdGlvbnMgdG8gcHJldmVudCB0ZXh0IGZpbGUgYnVzeSBlcnJvcnMgb24gdmJveGZzIHN5bmNlZCBmb2xkZXJzICh3aW5kb3dzIGhvc3QpCiAgICAgICAgICAgICAgICAgICAgICAgIG9zLmNsb3NlKHRtcF9kZXN0X2ZkKQogICAgICAgICAgICAgICAgICAgICAgICAjIGxlYXZlcyB0bXAgZmlsZSBiZWhpbmQgd2hlbiBzdWRvIGFuZCBub3Qgcm9vdAogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaHV0aWwubW92ZShiX3NyYywgYl90bXBfZGVzdF9uYW1lKQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgY2xlYW51cCB3aWxsIGhhcHBlbiBieSAncm0nIG9mIHRlbXBkaXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgY29weTIgd2lsbCBwcmVzZXJ2ZSBzb21lIG1ldGFkYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaHV0aWwuY29weTIoYl9zcmMsIGJfdG1wX2Rlc3RfbmFtZSkKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNlbGYuc2VsaW51eF9lbmFibGVkKCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldF9jb250ZXh0X2lmX2RpZmZlcmVudCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiX3RtcF9kZXN0X25hbWUsIGNvbnRleHQsIEZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBfc3RhdCA9IG9zLnN0YXQoYl90bXBfZGVzdF9uYW1lKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgZGVzdF9zdGF0IGFuZCAodG1wX3N0YXQuc3RfdWlkICE9IGRlc3Rfc3RhdC5zdF91aWQgb3IgdG1wX3N0YXQuc3RfZ2lkICE9IGRlc3Rfc3RhdC5zdF9naWQpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zLmNob3duKGJfdG1wX2Rlc3RfbmFtZSwgZGVzdF9zdGF0LnN0X3VpZCwgZGVzdF9zdGF0LnN0X2dpZCkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBlLmVycm5vICE9IGVycm5vLkVQRVJNOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zLnJlbmFtZShiX3RtcF9kZXN0X25hbWUsIGJfZGVzdCkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IChzaHV0aWwuRXJyb3IsIE9TRXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdW5zYWZlX3dyaXRlcyBhbmQgZS5lcnJubyA9PSBlcnJuby5FQlVTWToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl91bnNhZmVfd3JpdGVzKGJfdG1wX2Rlc3RfbmFtZSwgYl9kZXN0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9J1VuYWJsZSB0byByZW5hbWUgZmlsZTogJXMgdG8gJXM6ICVzJyAlIChzcmMsIGRlc3QsIGUpLCBleGNlcHRpb249dHJhY2ViYWNrLmZvcm1hdF9leGMoKSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQgKHNodXRpbC5FcnJvciwgT1NFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdGYWlsZWQgdG8gcmVwbGFjZSBmaWxlOiAlcyB0byAlczogJXMnICUgKHNyYywgZGVzdCwgZSksIGV4Y2VwdGlvbj10cmFjZWJhY2suZm9ybWF0X2V4YygpKQogICAgICAgICAgICAgICAgZmluYWxseToKICAgICAgICAgICAgICAgICAgICBzZWxmLmNsZWFudXAoYl90bXBfZGVzdF9uYW1lKQoKICAgICAgICBpZiBjcmVhdGluZzoKICAgICAgICAgICAgIyBtYWtlIHN1cmUgdGhlIGZpbGUgaGFzIHRoZSBjb3JyZWN0IHBlcm1pc3Npb25zCiAgICAgICAgICAgICMgYmFzZWQgb24gdGhlIGN1cnJlbnQgdmFsdWUgb2YgdW1hc2sKICAgICAgICAgICAgdW1hc2sgPSBvcy51bWFzaygwKQogICAgICAgICAgICBvcy51bWFzayh1bWFzaykKICAgICAgICAgICAgb3MuY2htb2QoYl9kZXN0LCBERUZBVUxUX1BFUk0gJiB+dW1hc2spCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG9zLmNob3duKGJfZGVzdCwgb3MuZ2V0ZXVpZCgpLCBvcy5nZXRlZ2lkKCkpCiAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgIyBXZSdyZSBva2F5IHdpdGggdHJ5aW5nIG91ciBiZXN0IGhlcmUuICBJZiB0aGUgdXNlciBpcyBub3QKICAgICAgICAgICAgICAgICMgcm9vdCAob3Igb2xkIFVuaWNlcykgdGhleSB3b24ndCBiZSBhYmxlIHRvIGNob3duLgogICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICBpZiBzZWxmLnNlbGludXhfZW5hYmxlZCgpOgogICAgICAgICAgICAjIHJlbmFtZSBtaWdodCBub3QgcHJlc2VydmUgY29udGV4dAogICAgICAgICAgICBzZWxmLnNldF9jb250ZXh0X2lmX2RpZmZlcmVudChkZXN0LCBjb250ZXh0LCBGYWxzZSkKCiAgICBkZWYgX3Vuc2FmZV93cml0ZXMoc2VsZiwgc3JjLCBkZXN0KToKICAgICAgICAjIHNhZGx5IHRoZXJlIGFyZSBzb21lIHNpdHVhdGlvbnMgd2hlcmUgd2UgY2Fubm90IGVuc3VyZSBhdG9taWNpdHksIGJ1dCBvbmx5IGlmCiAgICAgICAgIyB0aGUgdXNlciBpbnNpc3RzIGFuZCB3ZSBnZXQgdGhlIGFwcHJvcHJpYXRlIGVycm9yIHdlIHVwZGF0ZSB0aGUgZmlsZSB1bnNhZmVseQogICAgICAgIHRyeToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgb3V0X2Rlc3QgPSBvcGVuKGRlc3QsICd3YicpCiAgICAgICAgICAgICAgICBpbl9zcmMgPSBvcGVuKHNyYywgJ3JiJykKICAgICAgICAgICAgICAgIHNodXRpbC5jb3B5ZmlsZW9iaihpbl9zcmMsIG91dF9kZXN0KQogICAgICAgICAgICBmaW5hbGx5OiAgIyBhc3N1cmluZyBjbG9zZWQgZmlsZXMgaW4gMi40IGNvbXBhdGlibGUgd2F5CiAgICAgICAgICAgICAgICBpZiBvdXRfZGVzdDoKICAgICAgICAgICAgICAgICAgICBvdXRfZGVzdC5jbG9zZSgpCiAgICAgICAgICAgICAgICBpZiBpbl9zcmM6CiAgICAgICAgICAgICAgICAgICAgaW5fc3JjLmNsb3NlKCkKICAgICAgICBleGNlcHQgKHNodXRpbC5FcnJvciwgT1NFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24obXNnPSdDb3VsZCBub3Qgd3JpdGUgZGF0YSB0byBmaWxlICglcykgZnJvbSAoJXMpOiAlcycgJSAoZGVzdCwgc3JjLCBlKSwgZXhjZXB0aW9uPXRyYWNlYmFjay5mb3JtYXRfZXhjKCkpCgoKICAgIGRlZiBfcmVhZF9mcm9tX3BpcGVzKHNlbGYsIHJwaXBlcywgcmZkcywgZmlsZV9kZXNjcmlwdG9yKToKICAgICAgICBkYXRhID0gYignJykKICAgICAgICBpZiBmaWxlX2Rlc2NyaXB0b3IgaW4gcmZkczoKICAgICAgICAgICAgZGF0YSA9IG9zLnJlYWQoZmlsZV9kZXNjcmlwdG9yLmZpbGVubygpLCA5MDAwKQogICAgICAgICAgICBpZiBkYXRhID09IGIoJycpOgogICAgICAgICAgICAgICAgcnBpcGVzLnJlbW92ZShmaWxlX2Rlc2NyaXB0b3IpCgogICAgICAgIHJldHVybiBkYXRhCgogICAgZGVmIHJ1bl9jb21tYW5kKHNlbGYsIGFyZ3MsIGNoZWNrX3JjPUZhbHNlLCBjbG9zZV9mZHM9VHJ1ZSwgZXhlY3V0YWJsZT1Ob25lLCBkYXRhPU5vbmUsIGJpbmFyeV9kYXRhPUZhbHNlLCBwYXRoX3ByZWZpeD1Ob25lLCBjd2Q9Tm9uZSwKICAgICAgICAgICAgICAgICAgICB1c2VfdW5zYWZlX3NoZWxsPUZhbHNlLCBwcm9tcHRfcmVnZXg9Tm9uZSwgZW52aXJvbl91cGRhdGU9Tm9uZSwgdW1hc2s9Tm9uZSwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0Jyk6CiAgICAgICAgJycnCiAgICAgICAgRXhlY3V0ZSBhIGNvbW1hbmQsIHJldHVybnMgcmMsIHN0ZG91dCwgYW5kIHN0ZGVyci4KCiAgICAgICAgOmFyZyBhcmdzOiBpcyB0aGUgY29tbWFuZCB0byBydW4KICAgICAgICAgICAgKiBJZiBhcmdzIGlzIGEgbGlzdCwgdGhlIGNvbW1hbmQgd2lsbCBiZSBydW4gd2l0aCBzaGVsbD1GYWxzZS4KICAgICAgICAgICAgKiBJZiBhcmdzIGlzIGEgc3RyaW5nIGFuZCB1c2VfdW5zYWZlX3NoZWxsPUZhbHNlIGl0IHdpbGwgc3BsaXQgYXJncyB0byBhIGxpc3QgYW5kIHJ1biB3aXRoIHNoZWxsPUZhbHNlCiAgICAgICAgICAgICogSWYgYXJncyBpcyBhIHN0cmluZyBhbmQgdXNlX3Vuc2FmZV9zaGVsbD1UcnVlIGl0IHJ1bnMgd2l0aCBzaGVsbD1UcnVlLgogICAgICAgIDprdyBjaGVja19yYzogV2hldGhlciB0byBjYWxsIGZhaWxfanNvbiBpbiBjYXNlIG9mIG5vbiB6ZXJvIFJDLgogICAgICAgICAgICBEZWZhdWx0IEZhbHNlCiAgICAgICAgOmt3IGNsb3NlX2ZkczogU2VlIGRvY3VtZW50YXRpb24gZm9yIHN1YnByb2Nlc3MuUG9wZW4oKS4gRGVmYXVsdCBUcnVlCiAgICAgICAgOmt3IGV4ZWN1dGFibGU6IFNlZSBkb2N1bWVudGF0aW9uIGZvciBzdWJwcm9jZXNzLlBvcGVuKCkuIERlZmF1bHQgTm9uZQogICAgICAgIDprdyBkYXRhOiBJZiBnaXZlbiwgaW5mb3JtYXRpb24gdG8gd3JpdGUgdG8gdGhlIHN0ZGluIG9mIHRoZSBjb21tYW5kCiAgICAgICAgOmt3IGJpbmFyeV9kYXRhOiBJZiBGYWxzZSwgYXBwZW5kIGEgbmV3bGluZSB0byB0aGUgZGF0YS4gIERlZmF1bHQgRmFsc2UKICAgICAgICA6a3cgcGF0aF9wcmVmaXg6IElmIGdpdmVuLCBhZGRpdGlvbmFsIHBhdGggdG8gZmluZCB0aGUgY29tbWFuZCBpbi4KICAgICAgICAgICAgVGhpcyBhZGRzIHRvIHRoZSBQQVRIIGVudmlyb25tZW50IHZhaXJhYmxlIHNvIGhlbHBlciBjb21tYW5kcyBpbgogICAgICAgICAgICB0aGUgc2FtZSBkaXJlY3RvcnkgY2FuIGFsc28gYmUgZm91bmQKICAgICAgICA6a3cgY3dkOiBJZiBnaXZlbiwgd29ya2luZyBkaXJlY3RvcnkgdG8gcnVuIHRoZSBjb21tYW5kIGluc2lkZQogICAgICAgIDprdyB1c2VfdW5zYWZlX3NoZWxsOiBTZWUgYGFyZ3NgIHBhcmFtZXRlci4gIERlZmF1bHQgRmFsc2UKICAgICAgICA6a3cgcHJvbXB0X3JlZ2V4OiBSZWdleCBzdHJpbmcgKG5vdCBhIGNvbXBpbGVkIHJlZ2V4KSB3aGljaCBjYW4gYmUKICAgICAgICAgICAgdXNlZCB0byBkZXRlY3QgcHJvbXB0cyBpbiB0aGUgc3Rkb3V0IHdoaWNoIHdvdWxkIG90aGVyd2lzZSBjYXVzZQogICAgICAgICAgICB0aGUgZXhlY3V0aW9uIHRvIGhhbmcgKGVzcGVjaWFsbHkgaWYgbm8gaW5wdXQgZGF0YSBpcyBzcGVjaWZpZWQpCiAgICAgICAgOmt3IGVudmlyb25fdXBkYXRlOiBkaWN0aW9uYXJ5IHRvICp1cGRhdGUqIG9zLmVudmlyb24gd2l0aAogICAgICAgIDprdyB1bWFzazogVW1hc2sgdG8gYmUgdXNlZCB3aGVuIHJ1bm5pbmcgdGhlIGNvbW1hbmQuIERlZmF1bHQgTm9uZQogICAgICAgIDprdyBlbmNvZGluZzogU2luY2Ugd2UgcmV0dXJuIG5hdGl2ZSBzdHJpbmdzLCBvbiBweXRob24zIHdlIG5lZWQgdG8KICAgICAgICAgICAga25vdyB0aGUgZW5jb2RpbmcgdG8gdXNlIHRvIHRyYW5zZm9ybSBmcm9tIGJ5dGVzIHRvIHRleHQuICBJZiB5b3UKICAgICAgICAgICAgd2FudCB0byBhbHdheXMgZ2V0IGJ5dGVzIGJhY2ssIHVzZSBlbmNvZGluZz1Ob25lLiAgVGhlIGRlZmF1bHQgaXMKICAgICAgICAgICAgInV0Zi04Ii4gIFRoaXMgZG9lcyBub3QgYWZmZWN0IHRyYW5zZm9ybWF0aW9uIG9mIHN0cmluZ3MgZ2l2ZW4gYXMKICAgICAgICAgICAgYXJncy4KICAgICAgICA6a3cgZXJyb3JzOiBTaW5jZSB3ZSByZXR1cm4gbmF0aXZlIHN0cmluZ3MsIG9uIHB5dGhvbjMgd2UgbmVlZCB0bwogICAgICAgICAgICB0cmFuc2Zvcm0gc3Rkb3V0IGFuZCBzdGRlcnIgZnJvbSBieXRlcyB0byB0ZXh0LiAgSWYgdGhlIGJ5dGVzIGFyZQogICAgICAgICAgICB1bmRlY29kYWJsZSBpbiB0aGUgYGBlbmNvZGluZ2BgIHNwZWNpZmllZCwgdGhlbiB1c2UgdGhpcyBlcnJvcgogICAgICAgICAgICBoYW5kbGVyIHRvIGRlYWwgd2l0aCB0aGVtLiAgVGhlIGRlZmF1bHQgaXMgYGBzdXJyb2dhdGVfb3Jfc3RyaWN0YGAKICAgICAgICAgICAgd2hpY2ggbWVhbnMgdGhhdCB0aGUgYnl0ZXMgd2lsbCBiZSBkZWNvZGVkIHVzaW5nIHRoZQogICAgICAgICAgICBzdXJyb2dhdGVlc2NhcGUgZXJyb3IgaGFuZGxlciBpZiBhdmFpbGFibGUgKGF2YWlsYWJsZSBvbiBhbGwKICAgICAgICAgICAgcHl0aG9uMyB2ZXJzaW9ucyB3ZSBzdXBwb3J0KSBvdGhlcndpc2UgYSBVbmljb2RlRXJyb3IgdHJhY2ViYWNrCiAgICAgICAgICAgIHdpbGwgYmUgcmFpc2VkLiAgVGhpcyBkb2VzIG5vdCBhZmZlY3QgdHJhbnNmb3JtYXRpb25zIG9mIHN0cmluZ3MKICAgICAgICAgICAgZ2l2ZW4gYXMgYXJncy4KICAgICAgICA6cmV0dXJuczogQSAzLXR1cGxlIG9mIHJldHVybiBjb2RlIChpbnRlZ2VyKSwgc3Rkb3V0IChuYXRpdmUgc3RyaW5nKSwKICAgICAgICAgICAgYW5kIHN0ZGVyciAobmF0aXZlIHN0cmluZykuICBPbiBweXRob24yLCBzdGRvdXQgYW5kIHN0ZGVyciBhcmUgYm90aAogICAgICAgICAgICBieXRlIHN0cmluZ3MuICBPbiBweXRob24zLCBzdGRvdXQgYW5kIHN0ZGVyciBhcmUgdGV4dCBzdHJpbmdzIGNvbnZlcnRlZAogICAgICAgICAgICBhY2NvcmRpbmcgdG8gdGhlIGVuY29kaW5nIGFuZCBlcnJvcnMgcGFyYW1ldGVycy4gIElmIHlvdSB3YW50IGJ5dGUKICAgICAgICAgICAgc3RyaW5ncyBvbiBweXRob24zLCB1c2UgZW5jb2Rpbmc9Tm9uZSB0byB0dXJuIGRlY29kaW5nIHRvIHRleHQgb2ZmLgogICAgICAgICcnJwoKICAgICAgICBpZiBpc2luc3RhbmNlKGFyZ3MsIGxpc3QpOgogICAgICAgICAgICBpZiB1c2VfdW5zYWZlX3NoZWxsOgogICAgICAgICAgICAgICAgYXJncyA9ICIgIi5qb2luKFtzaGxleF9xdW90ZSh4KSBmb3IgeCBpbiBhcmdzXSkKICAgICAgICAgICAgICAgIHNoZWxsID0gVHJ1ZQogICAgICAgIGVsaWYgaXNpbnN0YW5jZShhcmdzLCAoYmluYXJ5X3R5cGUsIHRleHRfdHlwZSkpIGFuZCB1c2VfdW5zYWZlX3NoZWxsOgogICAgICAgICAgICBzaGVsbCA9IFRydWUKICAgICAgICBlbGlmIGlzaW5zdGFuY2UoYXJncywgKGJpbmFyeV90eXBlLCB0ZXh0X3R5cGUpKToKICAgICAgICAgICAgaWYgbm90IHVzZV91bnNhZmVfc2hlbGw6CiAgICAgICAgICAgICAgICAjIE9uIHB5dGhvbjIuNiBhbmQgYmVsb3csIHNobGV4IGhhcyBwcm9ibGVtcyB3aXRoIHRleHQgdHlwZQogICAgICAgICAgICAgICAgIyBPbiBweXRob24zLCBzaGxleCBuZWVkcyBhIHRleHQgdHlwZS4KICAgICAgICAgICAgICAgIGlmIFBZMjoKICAgICAgICAgICAgICAgICAgICBhcmdzID0gdG9fYnl0ZXMoYXJncywgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykKICAgICAgICAgICAgICAgIGVsaWYgUFkzOgogICAgICAgICAgICAgICAgICAgIGFyZ3MgPSB0b190ZXh0KGFyZ3MsIGVycm9ycz0nc3Vycm9nYXRlZXNjYXBlJykKICAgICAgICAgICAgICAgIGFyZ3MgPSBzaGxleC5zcGxpdChhcmdzKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG1zZyA9ICJBcmd1bWVudCAnYXJncycgdG8gcnVuX2NvbW1hbmQgbXVzdCBiZSBsaXN0IG9yIHN0cmluZyIKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocmM9MjU3LCBjbWQ9YXJncywgbXNnPW1zZykKCiAgICAgICAgc2hlbGwgPSBGYWxzZQogICAgICAgIGlmIHVzZV91bnNhZmVfc2hlbGw6CiAgICAgICAgICAgIGlmIGV4ZWN1dGFibGUgaXMgTm9uZToKICAgICAgICAgICAgICAgIGV4ZWN1dGFibGUgPSBvcy5lbnZpcm9uLmdldCgnU0hFTEwnKQogICAgICAgICAgICBpZiBleGVjdXRhYmxlOgogICAgICAgICAgICAgICAgYXJncyA9IFtleGVjdXRhYmxlLCAnLWMnLCBhcmdzXQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2hlbGwgPSBUcnVlCgogICAgICAgIHByb21wdF9yZSA9IE5vbmUKICAgICAgICBpZiBwcm9tcHRfcmVnZXg6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocHJvbXB0X3JlZ2V4LCB0ZXh0X3R5cGUpOgogICAgICAgICAgICAgICAgaWYgUFkzOgogICAgICAgICAgICAgICAgICAgIHByb21wdF9yZWdleCA9IHRvX2J5dGVzKHByb21wdF9yZWdleCwgZXJyb3JzPSdzdXJyb2dhdGVlc2NhcGUnKQogICAgICAgICAgICAgICAgZWxpZiBQWTI6CiAgICAgICAgICAgICAgICAgICAgcHJvbXB0X3JlZ2V4ID0gdG9fYnl0ZXMocHJvbXB0X3JlZ2V4LCBlcnJvcnM9J3N1cnJvZ2F0ZV9vcl9zdHJpY3QnKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBwcm9tcHRfcmUgPSByZS5jb21waWxlKHByb21wdF9yZWdleCwgcmUuTVVMVElMSU5FKQogICAgICAgICAgICBleGNlcHQgcmUuZXJyb3I6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWxfanNvbihtc2c9ImludmFsaWQgcHJvbXB0IHJlZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiB0byBydW5fY29tbWFuZCIpCgogICAgICAgICMgZXhwYW5kIHRoaW5ncyBsaWtlICRIT01FIGFuZCB+CiAgICAgICAgaWYgbm90IHNoZWxsOgogICAgICAgICAgICBhcmdzID0gWyBvcy5wYXRoLmV4cGFuZHVzZXIob3MucGF0aC5leHBhbmR2YXJzKHgpKSBmb3IgeCBpbiBhcmdzIGlmIHggaXMgbm90IE5vbmUgXQoKICAgICAgICByYyA9IDAKICAgICAgICBtc2cgPSBOb25lCiAgICAgICAgc3RfaW4gPSBOb25lCgogICAgICAgICMgTWFuaXB1bGF0ZSB0aGUgZW52aXJvbiB3ZSdsbCBzZW5kIHRvIHRoZSBuZXcgcHJvY2VzcwogICAgICAgIG9sZF9lbnZfdmFscyA9IHt9CiAgICAgICAgIyBXZSBjYW4gc2V0IHRoaXMgZnJvbSBib3RoIGFuIGF0dHJpYnV0ZSBhbmQgcGVyIGNhbGwKICAgICAgICBmb3Iga2V5LCB2YWwgaW4gc2VsZi5ydW5fY29tbWFuZF9lbnZpcm9uX3VwZGF0ZS5pdGVtcygpOgogICAgICAgICAgICBvbGRfZW52X3ZhbHNba2V5XSA9IG9zLmVudmlyb24uZ2V0KGtleSwgTm9uZSkKICAgICAgICAgICAgb3MuZW52aXJvbltrZXldID0gdmFsCiAgICAgICAgaWYgZW52aXJvbl91cGRhdGU6CiAgICAgICAgICAgIGZvciBrZXksIHZhbCBpbiBlbnZpcm9uX3VwZGF0ZS5pdGVtcygpOgogICAgICAgICAgICAgICAgb2xkX2Vudl92YWxzW2tleV0gPSBvcy5lbnZpcm9uLmdldChrZXksIE5vbmUpCiAgICAgICAgICAgICAgICBvcy5lbnZpcm9uW2tleV0gPSB2YWwKICAgICAgICBpZiBwYXRoX3ByZWZpeDoKICAgICAgICAgICAgb2xkX2Vudl92YWxzWydQQVRIJ10gPSBvcy5lbnZpcm9uWydQQVRIJ10KICAgICAgICAgICAgb3MuZW52aXJvblsnUEFUSCddID0gIiVzOiVzIiAlIChwYXRoX3ByZWZpeCwgb3MuZW52aXJvblsnUEFUSCddKQoKICAgICAgICAjIElmIHVzaW5nIHRlc3QtbW9kdWxlIGFuZCBleHBsb2RlLCB0aGUgcmVtb3RlIGxpYiBwYXRoIHdpbGwgcmVzZW1ibGUgLi4uCiAgICAgICAgIyAgIC90bXAvdGVzdF9tb2R1bGVfc2NyYXRjaC9kZWJ1Z19kaXIvYW5zaWJsZS9tb2R1bGVfdXRpbHMvYmFzaWMucHkKICAgICAgICAjIElmIHVzaW5nIGFuc2libGUgb3IgYW5zaWJsZS1wbGF5Ym9vayB3aXRoIGEgcmVtb3RlIHN5c3RlbSAuLi4KICAgICAgICAjICAgL3RtcC9hbnNpYmxlX3Ztd2VMUS9hbnNpYmxlX21vZGxpYi56aXAvYW5zaWJsZS9tb2R1bGVfdXRpbHMvYmFzaWMucHkKCiAgICAgICAgIyBDbGVhbiBvdXQgcHl0aG9uIHBhdGhzIHNldCBieSBhbnNpYmFsbHoKICAgICAgICBpZiAnUFlUSE9OUEFUSCcgaW4gb3MuZW52aXJvbjoKICAgICAgICAgICAgcHlwYXRocyA9IG9zLmVudmlyb25bJ1BZVEhPTlBBVEgnXS5zcGxpdCgnOicpCiAgICAgICAgICAgIHB5cGF0aHMgPSBbeCBmb3IgeCBpbiBweXBhdGhzIFwKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IHguZW5kc3dpdGgoJy9hbnNpYmxlX21vZGxpYi56aXAnKSBcCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBub3QgeC5lbmRzd2l0aCgnL2RlYnVnX2RpcicpXQogICAgICAgICAgICBvcy5lbnZpcm9uWydQWVRIT05QQVRIJ10gPSAnOicuam9pbihweXBhdGhzKQogICAgICAgICAgICBpZiBub3Qgb3MuZW52aXJvblsnUFlUSE9OUEFUSCddOgogICAgICAgICAgICAgICAgZGVsIG9zLmVudmlyb25bJ1BZVEhPTlBBVEgnXQoKICAgICAgICAjIGNyZWF0ZSBhIHByaW50YWJsZSB2ZXJzaW9uIG9mIHRoZSBjb21tYW5kIGZvciB1c2UKICAgICAgICAjIGluIHJlcG9ydGluZyBsYXRlciwgd2hpY2ggc3RyaXBzIG91dCB0aGluZ3MgbGlrZQogICAgICAgICMgcGFzc3dvcmRzIGZyb20gdGhlIGFyZ3MgbGlzdAogICAgICAgIHRvX2NsZWFuX2FyZ3MgPSBhcmdzCiAgICAgICAgaWYgUFkyOgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGFyZ3MsIHRleHRfdHlwZSk6CiAgICAgICAgICAgICAgICB0b19jbGVhbl9hcmdzID0gdG9fYnl0ZXMoYXJncykKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGFyZ3MsIGJpbmFyeV90eXBlKToKICAgICAgICAgICAgICAgIHRvX2NsZWFuX2FyZ3MgPSB0b190ZXh0KGFyZ3MpCiAgICAgICAgaWYgaXNpbnN0YW5jZShhcmdzLCAodGV4dF90eXBlLCBiaW5hcnlfdHlwZSkpOgogICAgICAgICAgICB0b19jbGVhbl9hcmdzID0gc2hsZXguc3BsaXQodG9fY2xlYW5fYXJncykKCiAgICAgICAgY2xlYW5fYXJncyA9IFtdCiAgICAgICAgaXNfcGFzc3dkID0gRmFsc2UKICAgICAgICBmb3IgYXJnIGluIHRvX2NsZWFuX2FyZ3M6CiAgICAgICAgICAgIGlmIGlzX3Bhc3N3ZDoKICAgICAgICAgICAgICAgIGlzX3Bhc3N3ZCA9IEZhbHNlCiAgICAgICAgICAgICAgICBjbGVhbl9hcmdzLmFwcGVuZCgnKioqKioqKionKQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgaWYgUEFTU1dEX0FSR19SRS5tYXRjaChhcmcpOgogICAgICAgICAgICAgICAgc2VwX2lkeCA9IGFyZy5maW5kKCc9JykKICAgICAgICAgICAgICAgIGlmIHNlcF9pZHggPiAtMToKICAgICAgICAgICAgICAgICAgICBjbGVhbl9hcmdzLmFwcGVuZCgnJXM9KioqKioqKionICUgYXJnWzpzZXBfaWR4XSkKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpc19wYXNzd2QgPSBUcnVlCiAgICAgICAgICAgIGFyZyA9IGhldXJpc3RpY19sb2dfc2FuaXRpemUoYXJnLCBzZWxmLm5vX2xvZ192YWx1ZXMpCiAgICAgICAgICAgIGNsZWFuX2FyZ3MuYXBwZW5kKGFyZykKICAgICAgICBjbGVhbl9hcmdzID0gJyAnLmpvaW4oc2hsZXhfcXVvdGUoYXJnKSBmb3IgYXJnIGluIGNsZWFuX2FyZ3MpCgogICAgICAgIGlmIGRhdGE6CiAgICAgICAgICAgIHN0X2luID0gc3VicHJvY2Vzcy5QSVBFCgogICAgICAgIGt3YXJncyA9IGRpY3QoCiAgICAgICAgICAgIGV4ZWN1dGFibGU9ZXhlY3V0YWJsZSwKICAgICAgICAgICAgc2hlbGw9c2hlbGwsCiAgICAgICAgICAgIGNsb3NlX2Zkcz1jbG9zZV9mZHMsCiAgICAgICAgICAgIHN0ZGluPXN0X2luLAogICAgICAgICAgICBzdGRvdXQ9c3VicHJvY2Vzcy5QSVBFLAogICAgICAgICAgICBzdGRlcnI9c3VicHJvY2Vzcy5QSVBFLAogICAgICAgICkKCiAgICAgICAgIyBzdG9yZSB0aGUgcHdkCiAgICAgICAgcHJldl9kaXIgPSBvcy5nZXRjd2QoKQoKICAgICAgICAjIG1ha2Ugc3VyZSB3ZSdyZSBpbiB0aGUgcmlnaHQgd29ya2luZyBkaXJlY3RvcnkKICAgICAgICBpZiBjd2QgYW5kIG9zLnBhdGguaXNkaXIoY3dkKToKICAgICAgICAgICAgY3dkID0gb3MucGF0aC5hYnNwYXRoKG9zLnBhdGguZXhwYW5kdXNlcihjd2QpKQogICAgICAgICAgICBrd2FyZ3NbJ2N3ZCddID0gY3dkCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG9zLmNoZGlyKGN3ZCkKICAgICAgICAgICAgZXhjZXB0IChPU0Vycm9yLCBJT0Vycm9yKToKICAgICAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgICAgIHNlbGYuZmFpbF9qc29uKHJjPWUuZXJybm8sIG1zZz0iQ291bGQgbm90IG9wZW4gJXMsICVzIiAlIChjd2QsIHN0cihlKSkpCgogICAgICAgIG9sZF91bWFzayA9IE5vbmUKICAgICAgICBpZiB1bWFzazoKICAgICAgICAgICAgb2xkX3VtYXNrID0gb3MudW1hc2sodW1hc2spCgogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgc2VsZi5fZGVidWc6CiAgICAgICAgICAgICAgICBzZWxmLmxvZygnRXhlY3V0aW5nOiAnICsgY2xlYW5fYXJncykKICAgICAgICAgICAgY21kID0gc3VicHJvY2Vzcy5Qb3BlbihhcmdzLCAqKmt3YXJncykKCiAgICAgICAgICAgICMgdGhlIGNvbW11bmljYXRpb24gbG9naWMgaGVyZSBpcyBlc3NlbnRpYWxseSB0YWtlbiBmcm9tIHRoYXQKICAgICAgICAgICAgIyBvZiB0aGUgX2NvbW11bmljYXRlKCkgZnVuY3Rpb24gaW4gc3NoLnB5CgogICAgICAgICAgICBzdGRvdXQgPSBiKCcnKQogICAgICAgICAgICBzdGRlcnIgPSBiKCcnKQogICAgICAgICAgICBycGlwZXMgPSBbY21kLnN0ZG91dCwgY21kLnN0ZGVycl0KCiAgICAgICAgICAgIGlmIGRhdGE6CiAgICAgICAgICAgICAgICBpZiBub3QgYmluYXJ5X2RhdGE6CiAgICAgICAgICAgICAgICAgICAgZGF0YSArPSAnXG4nCiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKGRhdGEsIHRleHRfdHlwZSk6CiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHRvX2J5dGVzKGRhdGEpCiAgICAgICAgICAgICAgICBjbWQuc3RkaW4ud3JpdGUoZGF0YSkKICAgICAgICAgICAgICAgIGNtZC5zdGRpbi5jbG9zZSgpCgogICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgcmZkcywgd2ZkcywgZWZkcyA9IHNlbGVjdC5zZWxlY3QocnBpcGVzLCBbXSwgcnBpcGVzLCAxKQogICAgICAgICAgICAgICAgc3Rkb3V0ICs9IHNlbGYuX3JlYWRfZnJvbV9waXBlcyhycGlwZXMsIHJmZHMsIGNtZC5zdGRvdXQpCiAgICAgICAgICAgICAgICBzdGRlcnIgKz0gc2VsZi5fcmVhZF9mcm9tX3BpcGVzKHJwaXBlcywgcmZkcywgY21kLnN0ZGVycikKICAgICAgICAgICAgICAgICMgaWYgd2UncmUgY2hlY2tpbmcgZm9yIHByb21wdHMsIGRvIGl0IG5vdwogICAgICAgICAgICAgICAgaWYgcHJvbXB0X3JlOgogICAgICAgICAgICAgICAgICAgIGlmIHByb21wdF9yZS5zZWFyY2goc3Rkb3V0KSBhbmQgbm90IGRhdGE6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGVuY29kaW5nOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Rkb3V0ID0gdG9fbmF0aXZlKHN0ZG91dCwgZW5jb2Rpbmc9ZW5jb2RpbmcsIGVycm9ycz1lcnJvcnMpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGRvdXQgPSBzdGRvdXQKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgyNTcsIHN0ZG91dCwgIkEgcHJvbXB0IHdhcyBlbmNvdW50ZXJlZCB3aGlsZSBydW5uaW5nIGEgY29tbWFuZCwgYnV0IG5vIGlucHV0IGRhdGEgd2FzIHNwZWNpZmllZCIpCiAgICAgICAgICAgICAgICAjIG9ubHkgYnJlYWsgb3V0IGlmIG5vIHBpcGVzIGFyZSBsZWZ0IHRvIHJlYWQgb3IKICAgICAgICAgICAgICAgICMgdGhlIHBpcGVzIGFyZSBjb21wbGV0ZWx5IHJlYWQgYW5kCiAgICAgICAgICAgICAgICAjIHRoZSBwcm9jZXNzIGlzIHRlcm1pbmF0ZWQKICAgICAgICAgICAgICAgIGlmIChub3QgcnBpcGVzIG9yIG5vdCByZmRzKSBhbmQgY21kLnBvbGwoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgIyBObyBwaXBlcyBhcmUgbGVmdCB0byByZWFkIGJ1dCBwcm9jZXNzIGlzIG5vdCB5ZXQgdGVybWluYXRlZAogICAgICAgICAgICAgICAgIyBPbmx5IHRoZW4gaXQgaXMgc2FmZSB0byB3YWl0IGZvciB0aGUgcHJvY2VzcyB0byBiZSBmaW5pc2hlZAogICAgICAgICAgICAgICAgIyBOT1RFOiBBY3R1YWxseSBjbWQucG9sbCgpIGlzIGFsd2F5cyBOb25lIGhlcmUgaWYgcnBpcGVzIGlzIGVtcHR5CiAgICAgICAgICAgICAgICBlbGlmIG5vdCBycGlwZXMgYW5kIGNtZC5wb2xsKCkgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICBjbWQud2FpdCgpCiAgICAgICAgICAgICAgICAgICAgIyBUaGUgcHJvY2VzcyBpcyB0ZXJtaW5hdGVkLiBTaW5jZSBubyBwaXBlcyB0byByZWFkIGZyb20gYXJlCiAgICAgICAgICAgICAgICAgICAgIyBsZWZ0LCB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgc2VsZWN0KCkgYWdhaW4uCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgICAgIGNtZC5zdGRvdXQuY2xvc2UoKQogICAgICAgICAgICBjbWQuc3RkZXJyLmNsb3NlKCkKCiAgICAgICAgICAgIHJjID0gY21kLnJldHVybmNvZGUKICAgICAgICBleGNlcHQgKE9TRXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgICAgIHNlbGYubG9nKCJFcnJvciBFeGVjdXRpbmcgQ01EOiVzIEV4Y2VwdGlvbjolcyIgJSAoY2xlYW5fYXJncywgdG9fbmF0aXZlKGUpKSkKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocmM9ZS5lcnJubywgbXNnPXRvX25hdGl2ZShlKSwgY21kPWNsZWFuX2FyZ3MpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgICAgICBzZWxmLmxvZygiRXJyb3IgRXhlY3V0aW5nIENNRDolcyBFeGNlcHRpb246JXMiICUgKGNsZWFuX2FyZ3MsdG9fbmF0aXZlKHRyYWNlYmFjay5mb3JtYXRfZXhjKCkpKSkKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24ocmM9MjU3LCBtc2c9dG9fbmF0aXZlKGUpLCBleGNlcHRpb249dHJhY2ViYWNrLmZvcm1hdF9leGMoKSwgY21kPWNsZWFuX2FyZ3MpCgogICAgICAgICMgUmVzdG9yZSBlbnYgc2V0dGluZ3MKICAgICAgICBmb3Iga2V5LCB2YWwgaW4gb2xkX2Vudl92YWxzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIHZhbCBpcyBOb25lOgogICAgICAgICAgICAgICAgZGVsIG9zLmVudmlyb25ba2V5XQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgb3MuZW52aXJvbltrZXldID0gdmFsCgogICAgICAgIGlmIG9sZF91bWFzazoKICAgICAgICAgICAgb3MudW1hc2sob2xkX3VtYXNrKQoKICAgICAgICBpZiByYyAhPSAwIGFuZCBjaGVja19yYzoKICAgICAgICAgICAgbXNnID0gaGV1cmlzdGljX2xvZ19zYW5pdGl6ZShzdGRlcnIucnN0cmlwKCksIHNlbGYubm9fbG9nX3ZhbHVlcykKICAgICAgICAgICAgc2VsZi5mYWlsX2pzb24oY21kPWNsZWFuX2FyZ3MsIHJjPXJjLCBzdGRvdXQ9c3Rkb3V0LCBzdGRlcnI9c3RkZXJyLCBtc2c9bXNnKQoKICAgICAgICAjIHJlc2V0IHRoZSBwd2QKICAgICAgICBvcy5jaGRpcihwcmV2X2RpcikKCiAgICAgICAgaWYgZW5jb2RpbmcgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldHVybiAocmMsIHRvX25hdGl2ZShzdGRvdXQsIGVuY29kaW5nPWVuY29kaW5nLCBlcnJvcnM9ZXJyb3JzKSwKICAgICAgICAgICAgICAgICAgICB0b19uYXRpdmUoc3RkZXJyLCBlbmNvZGluZz1lbmNvZGluZywgZXJyb3JzPWVycm9ycykpCiAgICAgICAgcmV0dXJuIChyYywgc3Rkb3V0LCBzdGRlcnIpCgogICAgZGVmIGFwcGVuZF90b19maWxlKHNlbGYsIGZpbGVuYW1lLCBzdHIpOgogICAgICAgIGZpbGVuYW1lID0gb3MucGF0aC5leHBhbmR2YXJzKG9zLnBhdGguZXhwYW5kdXNlcihmaWxlbmFtZSkpCiAgICAgICAgZmggPSBvcGVuKGZpbGVuYW1lLCAnYScpCiAgICAgICAgZmgud3JpdGUoc3RyKQogICAgICAgIGZoLmNsb3NlKCkKCiAgICBkZWYgYnl0ZXNfdG9faHVtYW4oc2VsZiwgc2l6ZSk6CiAgICAgICAgcmV0dXJuIGJ5dGVzX3RvX2h1bWFuKHNpemUpCgogICAgIyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkKICAgIHByZXR0eV9ieXRlcyA9IGJ5dGVzX3RvX2h1bWFuCgogICAgZGVmIGh1bWFuX3RvX2J5dGVzKHNlbGYsIG51bWJlciwgaXNiaXRzPUZhbHNlKToKICAgICAgICByZXR1cm4gaHVtYW5fdG9fYnl0ZXMobnVtYmVyLCBpc2JpdHMpCgogICAgIwogICAgIyBCYWNrd2FyZHMgY29tcGF0CiAgICAjCgogICAgIyBJbiAyLjAsIG1vdmVkIGZyb20gaW5zaWRlIHRoZSBtb2R1bGUgdG8gdGhlIHRvcGxldmVsCiAgICBpc19leGVjdXRhYmxlID0gaXNfZXhlY3V0YWJsZQoKCmRlZiBnZXRfbW9kdWxlX3BhdGgoKToKICAgIHJldHVybiBvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5yZWFscGF0aChfX2ZpbGVfXykpClBLAwQUAAAAAADWuytLXYa1bzutAAA7rQAAHAAAAGFuc2libGUvbW9kdWxlX3V0aWxzL3VybHMucHkjIFRoaXMgY29kZSBpcyBwYXJ0IG9mIEFuc2libGUsIGJ1dCBpcyBhbiBpbmRlcGVuZGVudCBjb21wb25lbnQuCiMgVGhpcyBwYXJ0aWN1bGFyIGZpbGUgc25pcHBldCwgYW5kIHRoaXMgZmlsZSBzbmlwcGV0IG9ubHksIGlzIEJTRCBsaWNlbnNlZC4KIyBNb2R1bGVzIHlvdSB3cml0ZSB1c2luZyB0aGlzIHNuaXBwZXQsIHdoaWNoIGlzIGVtYmVkZGVkIGR5bmFtaWNhbGx5IGJ5IEFuc2libGUKIyBzdGlsbCBiZWxvbmcgdG8gdGhlIGF1dGhvciBvZiB0aGUgbW9kdWxlLCBhbmQgbWF5IGFzc2lnbiB0aGVpciBvd24gbGljZW5zZQojIHRvIHRoZSBjb21wbGV0ZSB3b3JrLgojCiMgQ29weXJpZ2h0IChjKSwgTWljaGFlbCBEZUhhYW4gPG1pY2hhZWwuZGVoYWFuQGdtYWlsLmNvbT4sIDIwMTItMjAxMwojIENvcHlyaWdodCAoYyksIFRvc2hpbyBLdXJhdG9taSA8dGt1cmF0b21pQGFuc2libGUuY29tPiwgMjAxNQojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLAojIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDoKIwojICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQKIyAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwKIyAgICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24KIyAgICAgIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgojCiMgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyAiQVMgSVMiIEFORAojIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVECiMgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELgojIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULAojIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywKIyBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MKIyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUCiMgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFCiMgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCiMKIyBUaGUgbWF0Y2hfaG9zdG5hbWUgZnVuY3Rpb24gYW5kIHN1cHBvcnRpbmcgY29kZSBpcyB1bmRlciB0aGUgdGVybXMgYW5kCiMgY29uZGl0aW9ucyBvZiB0aGUgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24gTGljZW5zZS4gIFRoZXkgd2VyZSB0YWtlbiBmcm9tCiMgdGhlIFB5dGhvbjMgc3RhbmRhcmQgbGlicmFyeSBhbmQgYWRhcHRlZCBmb3IgdXNlIGluIFB5dGhvbjIuICBTZWUgY29tbWVudHMgaW4gdGhlCiMgc291cmNlIGZvciB3aGljaCBjb2RlIHByZWNpc2VseSBpcyB1bmRlciB0aGlzIExpY2Vuc2UuICBQU0YgTGljZW5zZSB0ZXh0CiMgZm9sbG93czoKIwojIFBZVEhPTiBTT0ZUV0FSRSBGT1VOREFUSU9OIExJQ0VOU0UgVkVSU0lPTiAyCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIwojIDEuIFRoaXMgTElDRU5TRSBBR1JFRU1FTlQgaXMgYmV0d2VlbiB0aGUgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24KIyAoIlBTRiIpLCBhbmQgdGhlIEluZGl2aWR1YWwgb3IgT3JnYW5pemF0aW9uICgiTGljZW5zZWUiKSBhY2Nlc3NpbmcgYW5kCiMgb3RoZXJ3aXNlIHVzaW5nIHRoaXMgc29mdHdhcmUgKCJQeXRob24iKSBpbiBzb3VyY2Ugb3IgYmluYXJ5IGZvcm0gYW5kCiMgaXRzIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbi4KIwojIDIuIFN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQsIFBTRiBoZXJlYnkKIyBncmFudHMgTGljZW5zZWUgYSBub25leGNsdXNpdmUsIHJveWFsdHktZnJlZSwgd29ybGQtd2lkZSBsaWNlbnNlIHRvIHJlcHJvZHVjZSwKIyBhbmFseXplLCB0ZXN0LCBwZXJmb3JtIGFuZC9vciBkaXNwbGF5IHB1YmxpY2x5LCBwcmVwYXJlIGRlcml2YXRpdmUgd29ya3MsCiMgZGlzdHJpYnV0ZSwgYW5kIG90aGVyd2lzZSB1c2UgUHl0aG9uIGFsb25lIG9yIGluIGFueSBkZXJpdmF0aXZlIHZlcnNpb24sCiMgcHJvdmlkZWQsIGhvd2V2ZXIsIHRoYXQgUFNGJ3MgTGljZW5zZSBBZ3JlZW1lbnQgYW5kIFBTRidzIG5vdGljZSBvZiBjb3B5cmlnaHQsCiMgaS5lLiwgIkNvcHlyaWdodCAoYykgMjAwMSwgMjAwMiwgMjAwMywgMjAwNCwgMjAwNSwgMjAwNiwgMjAwNywgMjAwOCwgMjAwOSwgMjAxMCwKIyAyMDExLCAyMDEyLCAyMDEzLCAyMDE0IFB5dGhvbiBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBBbGwgUmlnaHRzIFJlc2VydmVkIiBhcmUKIyByZXRhaW5lZCBpbiBQeXRob24gYWxvbmUgb3IgaW4gYW55IGRlcml2YXRpdmUgdmVyc2lvbiBwcmVwYXJlZCBieSBMaWNlbnNlZS4KIwojIDMuIEluIHRoZSBldmVudCBMaWNlbnNlZSBwcmVwYXJlcyBhIGRlcml2YXRpdmUgd29yayB0aGF0IGlzIGJhc2VkIG9uCiMgb3IgaW5jb3Jwb3JhdGVzIFB5dGhvbiBvciBhbnkgcGFydCB0aGVyZW9mLCBhbmQgd2FudHMgdG8gbWFrZQojIHRoZSBkZXJpdmF0aXZlIHdvcmsgYXZhaWxhYmxlIHRvIG90aGVycyBhcyBwcm92aWRlZCBoZXJlaW4sIHRoZW4KIyBMaWNlbnNlZSBoZXJlYnkgYWdyZWVzIHRvIGluY2x1ZGUgaW4gYW55IHN1Y2ggd29yayBhIGJyaWVmIHN1bW1hcnkgb2YKIyB0aGUgY2hhbmdlcyBtYWRlIHRvIFB5dGhvbi4KIwojIDQuIFBTRiBpcyBtYWtpbmcgUHl0aG9uIGF2YWlsYWJsZSB0byBMaWNlbnNlZSBvbiBhbiAiQVMgSVMiCiMgYmFzaXMuICBQU0YgTUFLRVMgTk8gUkVQUkVTRU5UQVRJT05TIE9SIFdBUlJBTlRJRVMsIEVYUFJFU1MgT1IKIyBJTVBMSUVELiAgQlkgV0FZIE9GIEVYQU1QTEUsIEJVVCBOT1QgTElNSVRBVElPTiwgUFNGIE1BS0VTIE5PIEFORAojIERJU0NMQUlNUyBBTlkgUkVQUkVTRU5UQVRJT04gT1IgV0FSUkFOVFkgT0YgTUVSQ0hBTlRBQklMSVRZIE9SIEZJVE5FU1MKIyBGT1IgQU5ZIFBBUlRJQ1VMQVIgUFVSUE9TRSBPUiBUSEFUIFRIRSBVU0UgT0YgUFlUSE9OIFdJTEwgTk9UCiMgSU5GUklOR0UgQU5ZIFRISVJEIFBBUlRZIFJJR0hUUy4KIwojIDUuIFBTRiBTSEFMTCBOT1QgQkUgTElBQkxFIFRPIExJQ0VOU0VFIE9SIEFOWSBPVEhFUiBVU0VSUyBPRiBQWVRIT04KIyBGT1IgQU5ZIElOQ0lERU5UQUwsIFNQRUNJQUwsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBMT1NTIEFTCiMgQSBSRVNVTFQgT0YgTU9ESUZZSU5HLCBESVNUUklCVVRJTkcsIE9SIE9USEVSV0lTRSBVU0lORyBQWVRIT04sCiMgT1IgQU5ZIERFUklWQVRJVkUgVEhFUkVPRiwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBUSEVSRU9GLgojCiMgNi4gVGhpcyBMaWNlbnNlIEFncmVlbWVudCB3aWxsIGF1dG9tYXRpY2FsbHkgdGVybWluYXRlIHVwb24gYSBtYXRlcmlhbAojIGJyZWFjaCBvZiBpdHMgdGVybXMgYW5kIGNvbmRpdGlvbnMuCiMKIyA3LiBOb3RoaW5nIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgc2hhbGwgYmUgZGVlbWVkIHRvIGNyZWF0ZSBhbnkKIyByZWxhdGlvbnNoaXAgb2YgYWdlbmN5LCBwYXJ0bmVyc2hpcCwgb3Igam9pbnQgdmVudHVyZSBiZXR3ZWVuIFBTRiBhbmQKIyBMaWNlbnNlZS4gIFRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgZG9lcyBub3QgZ3JhbnQgcGVybWlzc2lvbiB0byB1c2UgUFNGCiMgdHJhZGVtYXJrcyBvciB0cmFkZSBuYW1lIGluIGEgdHJhZGVtYXJrIHNlbnNlIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZQojIHByb2R1Y3RzIG9yIHNlcnZpY2VzIG9mIExpY2Vuc2VlLCBvciBhbnkgdGhpcmQgcGFydHkuCiMKIyA4LiBCeSBjb3B5aW5nLCBpbnN0YWxsaW5nIG9yIG90aGVyd2lzZSB1c2luZyBQeXRob24sIExpY2Vuc2VlCiMgYWdyZWVzIHRvIGJlIGJvdW5kIGJ5IHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGlzIExpY2Vuc2UKIyBBZ3JlZW1lbnQuCgonJycKVGhlICoqdXJscyoqIHV0aWxzIG1vZHVsZSBvZmZlcnMgYSByZXBsYWNlbWVudCBmb3IgdGhlIHVybGxpYjIgcHl0aG9uIGxpYnJhcnkuCgp1cmxsaWIyIGlzIHRoZSBweXRob24gc3RkbGliIHdheSB0byByZXRyaWV2ZSBmaWxlcyBmcm9tIHRoZSBJbnRlcm5ldCBidXQgaXQKbGFja3Mgc29tZSBzZWN1cml0eSBmZWF0dXJlcyAoYXJvdW5kIHZlcmlmeWluZyBTU0wgY2VydGlmaWNhdGVzKSB0aGF0IHVzZXJzCnNob3VsZCBjYXJlIGFib3V0IGluIG1vc3Qgc2l0dWF0aW9ucy4gVXNpbmcgdGhlIGZ1bmN0aW9ucyBpbiB0aGlzIG1vZHVsZSBjb3JyZWN0cwpkZWZpY2llbmNpZXMgaW4gdGhlIHVybGxpYjIgbW9kdWxlIHdoZXJldmVyIHBvc3NpYmxlLgoKVGhlcmUgYXJlIGFsc28gdGhpcmQtcGFydHkgbGlicmFyaWVzIChmb3IgaW5zdGFuY2UsIHJlcXVlc3RzKSB3aGljaCBjYW4gYmUgdXNlZAp0byByZXBsYWNlIHVybGxpYjIgd2l0aCBhIG1vcmUgc2VjdXJlIGxpYnJhcnkuIEhvd2V2ZXIsIGFsbCB0aGlyZCBwYXJ0eSBsaWJyYXJpZXMKcmVxdWlyZSB0aGF0IHRoZSBsaWJyYXJ5IGJlIGluc3RhbGxlZCBvbiB0aGUgbWFuYWdlZCBtYWNoaW5lLiBUaGF0IGlzIGFuIGV4dHJhIHN0ZXAKZm9yIHVzZXJzIG1ha2luZyB1c2Ugb2YgYSBtb2R1bGUuIElmIHBvc3NpYmxlLCBhdm9pZCB0aGlyZCBwYXJ0eSBsaWJyYXJpZXMgYnkgdXNpbmcKdGhpcyBjb2RlIGluc3RlYWQuCicnJwoKaW1wb3J0IG5ldHJjCmltcG9ydCBvcwppbXBvcnQgcmUKaW1wb3J0IHN5cwppbXBvcnQgc29ja2V0CmltcG9ydCBwbGF0Zm9ybQppbXBvcnQgdGVtcGZpbGUKaW1wb3J0IGJhc2U2NAoKdHJ5OgogICAgaW1wb3J0IGh0dHBsaWIKZXhjZXB0IEltcG9ydEVycm9yOgogICAgIyBQeXRob24gMwogICAgaW1wb3J0IGh0dHAuY2xpZW50IGFzIGh0dHBsaWIKCmltcG9ydCBhbnNpYmxlLm1vZHVsZV91dGlscy5zaXgubW92ZXMudXJsbGliLnJlcXVlc3QgYXMgdXJsbGliX3JlcXVlc3QKaW1wb3J0IGFuc2libGUubW9kdWxlX3V0aWxzLnNpeC5tb3Zlcy51cmxsaWIuZXJyb3IgYXMgdXJsbGliX2Vycm9yCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuYmFzaWMgaW1wb3J0IGdldF9kaXN0cmlidXRpb24sIGdldF9leGNlcHRpb24KZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5zaXggaW1wb3J0IGIKZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5fdGV4dCBpbXBvcnQgdG9fYnl0ZXMsIHRvX25hdGl2ZSwgdG9fdGV4dAoKdHJ5OgogICAgIyBweXRob24zCiAgICBpbXBvcnQgdXJsbGliLnJlcXVlc3QgYXMgdXJsbGliX3JlcXVlc3QKICAgIGZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IEFic3RyYWN0SFRUUEhhbmRsZXIKZXhjZXB0IEltcG9ydEVycm9yOgogICAgIyBweXRob24yCiAgICBpbXBvcnQgdXJsbGliMiBhcyB1cmxsaWJfcmVxdWVzdAogICAgZnJvbSB1cmxsaWIyIGltcG9ydCBBYnN0cmFjdEhUVFBIYW5kbGVyCgp0cnk6CiAgICBmcm9tIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeC5tb3Zlcy51cmxsaWIucGFyc2UgaW1wb3J0IHVybHBhcnNlLCB1cmx1bnBhcnNlCiAgICBIQVNfVVJMUEFSU0UgPSBUcnVlCmV4Y2VwdDoKICAgIEhBU19VUkxQQVJTRSA9IEZhbHNlCgp0cnk6CiAgICBpbXBvcnQgc3NsCiAgICBIQVNfU1NMID0gVHJ1ZQpleGNlcHQ6CiAgICBIQVNfU1NMID0gRmFsc2UKCnRyeToKICAgICMgU05JIEhhbmRsaW5nIG5lZWRzIHB5dGhvbjIuNy45J3MgU1NMQ29udGV4dAogICAgZnJvbSBzc2wgaW1wb3J0IGNyZWF0ZV9kZWZhdWx0X2NvbnRleHQsIFNTTENvbnRleHQKICAgIEhBU19TU0xDT05URVhUID0gVHJ1ZQpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBIQVNfU1NMQ09OVEVYVCA9IEZhbHNlCgojIFNOSSBIYW5kbGluZyBmb3IgcHl0aG9uIDwgMi43Ljkgd2l0aCB1cmxsaWIzIHN1cHBvcnQKdHJ5OgogICAgIyB1cmxsaWIzPj0xLjE1CiAgICBIQVNfVVJMTElCM19TU0xfV1JBUF9TT0NLRVQgPSBGYWxzZQogICAgdHJ5OgogICAgICAgIGZyb20gdXJsbGliMy5jb250cmliLnB5b3BlbnNzbCBpbXBvcnQgUHlPcGVuU1NMQ29udGV4dAogICAgZXhjZXB0IEltcG9ydEVycm9yOgogICAgICAgIGZyb20gcmVxdWVzdHMucGFja2FnZXMudXJsbGliMy5jb250cmliLnB5b3BlbnNzbCBpbXBvcnQgUHlPcGVuU1NMQ29udGV4dAogICAgSEFTX1VSTExJQjNfUFlPUEVOU1NMQ09OVEVYVCA9IFRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgIyB1cmxsaWIzPDEuMTUsPj0xLjYKICAgIEhBU19VUkxMSUIzX1BZT1BFTlNTTENPTlRFWFQgPSBGYWxzZQogICAgdHJ5OgogICAgICAgIHRyeToKICAgICAgICAgICAgZnJvbSB1cmxsaWIzLmNvbnRyaWIucHlvcGVuc3NsIGltcG9ydCBzc2xfd3JhcF9zb2NrZXQKICAgICAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgICAgIGZyb20gcmVxdWVzdHMucGFja2FnZXMudXJsbGliMy5jb250cmliLnB5b3BlbnNzbCBpbXBvcnQgc3NsX3dyYXBfc29ja2V0CiAgICAgICAgSEFTX1VSTExJQjNfU1NMX1dSQVBfU09DS0VUID0gVHJ1ZQogICAgZXhjZXB0IEltcG9ydEVycm9yOgogICAgICAgIHBhc3MKCiMgU2VsZWN0IGEgcHJvdG9jb2wgdGhhdCBpbmNsdWRlcyBhbGwgc2VjdXJlIHRscyBwcm90b2NvbHMKIyBFeGNsdWRlIGluc2VjdXJlIHNzbCBwcm90b2NvbHMgaWYgcG9zc2libGUKCmlmIEhBU19TU0w6CiAgICAjIElmIHdlIGNhbid0IGZpbmQgZXh0cmEgdGxzIG1ldGhvZHMsIHNzbC5QUk9UT0NPTF9UTFN2MSBpcyBzdWZmaWNpZW50CiAgICBQUk9UT0NPTCA9IHNzbC5QUk9UT0NPTF9UTFN2MQppZiBub3QgSEFTX1NTTENPTlRFWFQgYW5kIEhBU19TU0w6CiAgICB0cnk6CiAgICAgICAgaW1wb3J0IGN0eXBlcwogICAgICAgIGltcG9ydCBjdHlwZXMudXRpbAogICAgZXhjZXB0IEltcG9ydEVycm9yOgogICAgICAgICMgcHl0aG9uIDIuNCAobGlrZWx5IHJoZWw1IHdoaWNoIGRvZXNuJ3QgaGF2ZSB0bHMxLjEgc3VwcG9ydCBpbiBpdHMgb3BlbnNzbCkKICAgICAgICBwYXNzCiAgICBlbHNlOgogICAgICAgIGxpYnNzbF9uYW1lID0gY3R5cGVzLnV0aWwuZmluZF9saWJyYXJ5KCdzc2wnKQogICAgICAgIGxpYnNzbCA9IGN0eXBlcy5DRExMKGxpYnNzbF9uYW1lKQogICAgICAgIGZvciBtZXRob2QgaW4gKCdUTFN2MV8xX21ldGhvZCcsICdUTFN2MV8yX21ldGhvZCcpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBsaWJzc2xbbWV0aG9kXQogICAgICAgICAgICAgICAgIyBGb3VuZCBzb21ldGhpbmcgLSB3ZSdsbCBsZXQgb3BlbnNzbCBhdXRvbmVnb3RpYXRlIGFuZCBob3BlCiAgICAgICAgICAgICAgICAjIHRoZSBzZXJ2ZXIgaGFzIGRpc2FibGVkIHNzbHYyIGFuZCAzLiAgYmVzdCB3ZSBjYW4gZG8uCiAgICAgICAgICAgICAgICBQUk9UT0NPTCA9IHNzbC5QUk9UT0NPTF9TU0x2MjMKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICBkZWwgbGlic3NsCgoKTE9BREVEX1ZFUklGWV9MT0NBVElPTlMgPSBzZXQoKQoKSEFTX01BVENIX0hPU1ROQU1FID0gVHJ1ZQp0cnk6CiAgICBmcm9tIHNzbCBpbXBvcnQgbWF0Y2hfaG9zdG5hbWUsIENlcnRpZmljYXRlRXJyb3IKZXhjZXB0IEltcG9ydEVycm9yOgogICAgdHJ5OgogICAgICAgIGZyb20gYmFja3BvcnRzLnNzbF9tYXRjaF9ob3N0bmFtZSBpbXBvcnQgbWF0Y2hfaG9zdG5hbWUsIENlcnRpZmljYXRlRXJyb3IKICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBIQVNfTUFUQ0hfSE9TVE5BTUUgPSBGYWxzZQoKaWYgbm90IEhBU19NQVRDSF9IT1NUTkFNRToKICAgICMjIwogICAgIyMjIFRoZSBmb2xsb3dpbmcgYmxvY2sgb2YgY29kZSBpcyB1bmRlciB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhlCiAgICAjIyMgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24gTGljZW5zZQogICAgIyMjCgogICAgIiIiVGhlIG1hdGNoX2hvc3RuYW1lKCkgZnVuY3Rpb24gZnJvbSBQeXRob24gMy40LCBlc3NlbnRpYWwgd2hlbiB1c2luZyBTU0wuIiIiCgogICAgY2xhc3MgQ2VydGlmaWNhdGVFcnJvcihWYWx1ZUVycm9yKToKICAgICAgICBwYXNzCgoKICAgIGRlZiBfZG5zbmFtZV9tYXRjaChkbiwgaG9zdG5hbWUsIG1heF93aWxkY2FyZHM9MSk6CiAgICAgICAgIiIiTWF0Y2hpbmcgYWNjb3JkaW5nIHRvIFJGQyA2MTI1LCBzZWN0aW9uIDYuNC4zCgogICAgICAgIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzYxMjUjc2VjdGlvbi02LjQuMwogICAgICAgICIiIgogICAgICAgIHBhdHMgPSBbXQogICAgICAgIGlmIG5vdCBkbjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgICMgUG9ydGVkIGZyb20gcHl0aG9uMy1zeW50YXg6CiAgICAgICAgIyBsZWZ0bW9zdCwgKnJlbWFpbmRlciA9IGRuLnNwbGl0KHInLicpCiAgICAgICAgcGFydHMgPSBkbi5zcGxpdChyJy4nKQogICAgICAgIGxlZnRtb3N0ID0gcGFydHNbMF0KICAgICAgICByZW1haW5kZXIgPSBwYXJ0c1sxOl0KCiAgICAgICAgd2lsZGNhcmRzID0gbGVmdG1vc3QuY291bnQoJyonKQogICAgICAgIGlmIHdpbGRjYXJkcyA+IG1heF93aWxkY2FyZHM6CiAgICAgICAgICAgICMgSXNzdWUgIzE3OTgwOiBhdm9pZCBkZW5pYWxzIG9mIHNlcnZpY2UgYnkgcmVmdXNpbmcgbW9yZQogICAgICAgICAgICAjIHRoYW4gb25lIHdpbGRjYXJkIHBlciBmcmFnbWVudC4gIEEgc3VydmV5IG9mIGVzdGFibGlzaGVkCiAgICAgICAgICAgICMgcG9saWN5IGFtb25nIFNTTCBpbXBsZW1lbnRhdGlvbnMgc2hvd2VkIGl0IHRvIGJlIGEKICAgICAgICAgICAgIyByZWFzb25hYmxlIGNob2ljZS4KICAgICAgICAgICAgcmFpc2UgQ2VydGlmaWNhdGVFcnJvcigKICAgICAgICAgICAgICAgICJ0b28gbWFueSB3aWxkY2FyZHMgaW4gY2VydGlmaWNhdGUgRE5TIG5hbWU6ICIgKyByZXByKGRuKSkKCiAgICAgICAgIyBzcGVlZCB1cCBjb21tb24gY2FzZSB3L28gd2lsZGNhcmRzCiAgICAgICAgaWYgbm90IHdpbGRjYXJkczoKICAgICAgICAgICAgcmV0dXJuIGRuLmxvd2VyKCkgPT0gaG9zdG5hbWUubG93ZXIoKQoKICAgICAgICAjIFJGQyA2MTI1LCBzZWN0aW9uIDYuNC4zLCBzdWJpdGVtIDEuCiAgICAgICAgIyBUaGUgY2xpZW50IFNIT1VMRCBOT1QgYXR0ZW1wdCB0byBtYXRjaCBhIHByZXNlbnRlZCBpZGVudGlmaWVyIGluIHdoaWNoCiAgICAgICAgIyB0aGUgd2lsZGNhcmQgY2hhcmFjdGVyIGNvbXByaXNlcyBhIGxhYmVsIG90aGVyIHRoYW4gdGhlIGxlZnQtbW9zdCBsYWJlbC4KICAgICAgICBpZiBsZWZ0bW9zdCA9PSAnKic6CiAgICAgICAgICAgICMgV2hlbiAnKicgaXMgYSBmcmFnbWVudCBieSBpdHNlbGYsIGl0IG1hdGNoZXMgYSBub24tZW1wdHkgZG90bGVzcwogICAgICAgICAgICAjIGZyYWdtZW50LgogICAgICAgICAgICBwYXRzLmFwcGVuZCgnW14uXSsnKQogICAgICAgIGVsaWYgbGVmdG1vc3Quc3RhcnRzd2l0aCgneG4tLScpIG9yIGhvc3RuYW1lLnN0YXJ0c3dpdGgoJ3huLS0nKToKICAgICAgICAgICAgIyBSRkMgNjEyNSwgc2VjdGlvbiA2LjQuMywgc3ViaXRlbSAzLgogICAgICAgICAgICAjIFRoZSBjbGllbnQgU0hPVUxEIE5PVCBhdHRlbXB0IHRvIG1hdGNoIGEgcHJlc2VudGVkIGlkZW50aWZpZXIKICAgICAgICAgICAgIyB3aGVyZSB0aGUgd2lsZGNhcmQgY2hhcmFjdGVyIGlzIGVtYmVkZGVkIHdpdGhpbiBhbiBBLWxhYmVsIG9yCiAgICAgICAgICAgICMgVS1sYWJlbCBvZiBhbiBpbnRlcm5hdGlvbmFsaXplZCBkb21haW4gbmFtZS4KICAgICAgICAgICAgcGF0cy5hcHBlbmQocmUuZXNjYXBlKGxlZnRtb3N0KSkKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIE90aGVyd2lzZSwgJyonIG1hdGNoZXMgYW55IGRvdGxlc3Mgc3RyaW5nLCBlLmcuIHd3dyoKICAgICAgICAgICAgcGF0cy5hcHBlbmQocmUuZXNjYXBlKGxlZnRtb3N0KS5yZXBsYWNlKHInXConLCAnW14uXSonKSkKCiAgICAgICAgIyBhZGQgdGhlIHJlbWFpbmluZyBmcmFnbWVudHMsIGlnbm9yZSBhbnkgd2lsZGNhcmRzCiAgICAgICAgZm9yIGZyYWcgaW4gcmVtYWluZGVyOgogICAgICAgICAgICBwYXRzLmFwcGVuZChyZS5lc2NhcGUoZnJhZykpCgogICAgICAgIHBhdCA9IHJlLmNvbXBpbGUocidcQScgKyByJ1wuJy5qb2luKHBhdHMpICsgcidcWicsIHJlLklHTk9SRUNBU0UpCiAgICAgICAgcmV0dXJuIHBhdC5tYXRjaChob3N0bmFtZSkKCgogICAgZGVmIG1hdGNoX2hvc3RuYW1lKGNlcnQsIGhvc3RuYW1lKToKICAgICAgICAiIiJWZXJpZnkgdGhhdCAqY2VydCogKGluIGRlY29kZWQgZm9ybWF0IGFzIHJldHVybmVkIGJ5CiAgICAgICAgU1NMU29ja2V0LmdldHBlZXJjZXJ0KCkpIG1hdGNoZXMgdGhlICpob3N0bmFtZSouICBSRkMgMjgxOCBhbmQgUkZDIDYxMjUKICAgICAgICBydWxlcyBhcmUgZm9sbG93ZWQsIGJ1dCBJUCBhZGRyZXNzZXMgYXJlIG5vdCBhY2NlcHRlZCBmb3IgKmhvc3RuYW1lKi4KCiAgICAgICAgQ2VydGlmaWNhdGVFcnJvciBpcyByYWlzZWQgb24gZmFpbHVyZS4gT24gc3VjY2VzcywgdGhlIGZ1bmN0aW9uCiAgICAgICAgcmV0dXJucyBub3RoaW5nLgogICAgICAgICIiIgogICAgICAgIGlmIG5vdCBjZXJ0OgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJlbXB0eSBvciBubyBjZXJ0aWZpY2F0ZSIpCiAgICAgICAgZG5zbmFtZXMgPSBbXQogICAgICAgIHNhbiA9IGNlcnQuZ2V0KCdzdWJqZWN0QWx0TmFtZScsICgpKQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIHNhbjoKICAgICAgICAgICAgaWYga2V5ID09ICdETlMnOgogICAgICAgICAgICAgICAgaWYgX2Ruc25hbWVfbWF0Y2godmFsdWUsIGhvc3RuYW1lKToKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgIGRuc25hbWVzLmFwcGVuZCh2YWx1ZSkKICAgICAgICBpZiBub3QgZG5zbmFtZXM6CiAgICAgICAgICAgICMgVGhlIHN1YmplY3QgaXMgb25seSBjaGVja2VkIHdoZW4gdGhlcmUgaXMgbm8gZE5TTmFtZSBlbnRyeQogICAgICAgICAgICAjIGluIHN1YmplY3RBbHROYW1lCiAgICAgICAgICAgIGZvciBzdWIgaW4gY2VydC5nZXQoJ3N1YmplY3QnLCAoKSk6CiAgICAgICAgICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBzdWI6CiAgICAgICAgICAgICAgICAgICAgIyBYWFggYWNjb3JkaW5nIHRvIFJGQyAyODE4LCB0aGUgbW9zdCBzcGVjaWZpYyBDb21tb24gTmFtZQogICAgICAgICAgICAgICAgICAgICMgbXVzdCBiZSB1c2VkLgogICAgICAgICAgICAgICAgICAgIGlmIGtleSA9PSAnY29tbW9uTmFtZSc6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIF9kbnNuYW1lX21hdGNoKHZhbHVlLCBob3N0bmFtZSk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICAgICAgZG5zbmFtZXMuYXBwZW5kKHZhbHVlKQogICAgICAgIGlmIGxlbihkbnNuYW1lcykgPiAxOgogICAgICAgICAgICByYWlzZSBDZXJ0aWZpY2F0ZUVycm9yKCJob3N0bmFtZSAlciAiCiAgICAgICAgICAgICAgICAiZG9lc24ndCBtYXRjaCBlaXRoZXIgb2YgJXMiCiAgICAgICAgICAgICAgICAlIChob3N0bmFtZSwgJywgJy5qb2luKG1hcChyZXByLCBkbnNuYW1lcykpKSkKICAgICAgICBlbGlmIGxlbihkbnNuYW1lcykgPT0gMToKICAgICAgICAgICAgcmFpc2UgQ2VydGlmaWNhdGVFcnJvcigiaG9zdG5hbWUgJXIgIgogICAgICAgICAgICAgICAgImRvZXNuJ3QgbWF0Y2ggJXIiCiAgICAgICAgICAgICAgICAlIChob3N0bmFtZSwgZG5zbmFtZXNbMF0pKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJhaXNlIENlcnRpZmljYXRlRXJyb3IoIm5vIGFwcHJvcHJpYXRlIGNvbW1vbk5hbWUgb3IgIgogICAgICAgICAgICAgICAgInN1YmplY3RBbHROYW1lIGZpZWxkcyB3ZXJlIGZvdW5kIikKCiAgICAjIyMKICAgICMjIyBFbmQgb2YgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24gTGljZW5zZWQgY29kZQogICAgIyMjCgogICAgSEFTX01BVENIX0hPU1ROQU1FID0gVHJ1ZQoKCiMgVGhpcyBpcyBhIGR1bW15IGNhY2VydCBwcm92aWRlZCBmb3IgTWFjIE9TIHNpbmNlIHlvdSBuZWVkIGF0IGxlYXN0IDEKIyBjYSBjZXJ0LCByZWdhcmRsZXNzIG9mIHZhbGlkaXR5LCBmb3IgUHl0aG9uIG9uIE1hYyBPUyB0byB1c2UgdGhlCiMga2V5Y2hhaW4gZnVuY3Rpb25hbGl0eSBpbiBPcGVuU1NMIGZvciB2YWxpZGF0aW5nIFNTTCBjZXJ0aWZpY2F0ZXMuCiMgU2VlOiBodHRwOi8vbWVyY3VyaWFsLnNlbGVuaWMuY29tL3dpa2kvQ0FDZXJ0aWZpY2F0ZXMjTWFjX09TX1hfMTAuNl9hbmRfaGlnaGVyCmJfRFVNTVlfQ0FfQ0VSVCA9IGIoIiIiLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN2RENDQWlXZ0F3SUJBZ0lKQU84RTEyUzcvcUVwTUEwR0NTcUdTSWIzRFFFQkJRVUFNRWt4Q3pBSkJnTlYKQkFZVEFsVlRNUmN3RlFZRFZRUUlFdzVPYjNKMGFDQkRZWEp2YkdsdVlURVBNQTBHQTFVRUJ4TUdSSFZ5YUdGdApNUkF3RGdZRFZRUUtFd2RCYm5OcFlteGxNQjRYRFRFME1ETXhPREl5TURBeU1sb1hEVEkwTURNeE5USXlNREF5Ck1sb3dTVEVMTUFrR0ExVUVCaE1DVlZNeEZ6QVZCZ05WQkFnVERrNXZjblJvSUVOaGNtOXNhVzVoTVE4d0RRWUQKVlFRSEV3WkVkWEpvWVcweEVEQU9CZ05WQkFvVEIwRnVjMmxpYkdVd2daOHdEUVlKS29aSWh2Y05BUUVCQlFBRApnWTBBTUlHSkFvR0JBTnR2cFBxM0lsTmxSYkNIaFpBY1A2V0N6aGM1UmJzRHF5aDF6cmttTGkwR3djUTN6L3I5CmdhV2ZRQlloSHBvYksyVGlxMTFUZnJhSGVOQjMvVmZOSW1qWmNHcE44RmwzTVd3dTdMZlZrSnkzZ05ObnhrQTEKNEdvMC9MbUl2UkZIaGJ6Z2Z1bzlORmdqUG1tYWI5ZXFYSmNlcVpJbHoyQzh4QTdFZUc3a3UwK3ZBZ01CQUFHagpnYXN3Z2Fnd0hRWURWUjBPQkJZRUZQbk4xblBScU5EWEdsQ3FDdmRaY2hSTmkvRmFNSGtHQTFVZEl3UnlNSENBCkZQbk4xblBScU5EWEdsQ3FDdmRaY2hSTmkvRmFvVTJrU3pCSk1Rc3dDUVlEVlFRR0V3SlZVekVYTUJVR0ExVUUKQ0JNT1RtOXlkR2dnUTJGeWIyeHBibUV4RHpBTkJnTlZCQWNUQmtSMWNtaGhiVEVRTUE0R0ExVUVDaE1IUVc1egphV0pzWllJSkFPOEUxMlM3L3FFcE1Bd0dBMVVkRXdRRk1BTUJBZjh3RFFZSktvWklodmNOQVFFRkJRQURnWUVBCk1VQjgwSVI2a25xOUsvdFkraHZQc1plcjZlRk16TzNKR2tSRkJoMmtuNkpkTURuaFlHWDdBWFZIR2ZscndOUUgKcUZ5K2FlbldYc0MwWnZyaWtGeGJRblg4R1Z0REFEdFZ6bnhPaTdYekZ3N0pPeGRzVnJwWGdTTjBlaDBhTXp2Vgp6S1Bac1oybWlWR2NsaWNKSHptNXEwODBiMXAvc1p0dUtJRVprNnZacUVnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCiIiIikKCiMKIyBFeGNlcHRpb25zCiMKCgpjbGFzcyBDb25uZWN0aW9uRXJyb3IoRXhjZXB0aW9uKToKICAgICIiIkZhaWxlZCB0byBjb25uZWN0IHRvIHRoZSBzZXJ2ZXIiIiIKICAgIHBhc3MKCgpjbGFzcyBQcm94eUVycm9yKENvbm5lY3Rpb25FcnJvcik6CiAgICAiIiJGYWlsdXJlIHRvIGNvbm5lY3QgYmVjYXVzZSBvZiBhIHByb3h5IiIiCiAgICBwYXNzCgoKY2xhc3MgU1NMVmFsaWRhdGlvbkVycm9yKENvbm5lY3Rpb25FcnJvcik6CiAgICAiIiJGYWlsdXJlIHRvIGNvbm5lY3QgZHVlIHRvIFNTTCB2YWxpZGF0aW9uIGZhaWxpbmciIiIKICAgIHBhc3MKCgpjbGFzcyBOb1NTTEVycm9yKFNTTFZhbGlkYXRpb25FcnJvcik6CiAgICAiIiJOZWVkZWQgdG8gY29ubmVjdCB0byBhbiBIVFRQUyB1cmwgYnV0IG5vIHNzbCBsaWJyYXJ5IGF2YWlsYWJsZSB0byB2ZXJpZnkgdGhlIGNlcnRpZmljYXRlIiIiCiAgICBwYXNzCgojIFNvbWUgZW52aXJvbm1lbnRzIChHb29nbGUgQ29tcHV0ZSBFbmdpbmUncyBDb3JlT1MgZGVwbG95cykgZG8gbm90IGNvbXBpbGUKIyBhZ2FpbnN0IG9wZW5zc2wgYW5kIHRodXMgZG8gbm90IGhhdmUgYW55IEhUVFBTIHN1cHBvcnQuCkN1c3RvbUhUVFBTQ29ubmVjdGlvbiA9IEN1c3RvbUhUVFBTSGFuZGxlciA9IE5vbmUKaWYgaGFzYXR0cihodHRwbGliLCAnSFRUUFNDb25uZWN0aW9uJykgYW5kIGhhc2F0dHIodXJsbGliX3JlcXVlc3QsICdIVFRQU0hhbmRsZXInKToKICAgIGNsYXNzIEN1c3RvbUhUVFBTQ29ubmVjdGlvbihodHRwbGliLkhUVFBTQ29ubmVjdGlvbik6CiAgICAgICAgZGVmIF9faW5pdF9fKHNlbGYsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgICAgIGh0dHBsaWIuSFRUUFNDb25uZWN0aW9uLl9faW5pdF9fKHNlbGYsICphcmdzLCAqKmt3YXJncykKICAgICAgICAgICAgc2VsZi5jb250ZXh0ID0gTm9uZQogICAgICAgICAgICBpZiBIQVNfU1NMQ09OVEVYVDoKICAgICAgICAgICAgICAgIHNlbGYuY29udGV4dCA9IGNyZWF0ZV9kZWZhdWx0X2NvbnRleHQoKQogICAgICAgICAgICBlbGlmIEhBU19VUkxMSUIzX1BZT1BFTlNTTENPTlRFWFQ6CiAgICAgICAgICAgICAgICBzZWxmLmNvbnRleHQgPSBQeU9wZW5TU0xDb250ZXh0KFBST1RPQ09MKQogICAgICAgICAgICBpZiBzZWxmLmNvbnRleHQgYW5kIHNlbGYuY2VydF9maWxlOgogICAgICAgICAgICAgICAgc2VsZi5jb250ZXh0LmxvYWRfY2VydF9jaGFpbihzZWxmLmNlcnRfZmlsZSwgc2VsZi5rZXlfZmlsZSkKCiAgICAgICAgZGVmIGNvbm5lY3Qoc2VsZik6CiAgICAgICAgICAgICJDb25uZWN0IHRvIGEgaG9zdCBvbiBhIGdpdmVuIChTU0wpIHBvcnQuIgoKICAgICAgICAgICAgaWYgaGFzYXR0cihzZWxmLCAnc291cmNlX2FkZHJlc3MnKToKICAgICAgICAgICAgICAgIHNvY2sgPSBzb2NrZXQuY3JlYXRlX2Nvbm5lY3Rpb24oKHNlbGYuaG9zdCwgc2VsZi5wb3J0KSwgc2VsZi50aW1lb3V0LCBzZWxmLnNvdXJjZV9hZGRyZXNzKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc29jayA9IHNvY2tldC5jcmVhdGVfY29ubmVjdGlvbigoc2VsZi5ob3N0LCBzZWxmLnBvcnQpLCBzZWxmLnRpbWVvdXQpCgogICAgICAgICAgICBzZXJ2ZXJfaG9zdG5hbWUgPSBzZWxmLmhvc3QKICAgICAgICAgICAgIyBOb3RlOiBzZWxmLl90dW5uZWxfaG9zdCBpcyBub3QgYXZhaWxhYmxlIG9uIHB5IDwgMi42IGJ1dCB0aGlzIGNvZGUKICAgICAgICAgICAgIyBpc24ndCB1c2VkIG9uIHB5IDwgMi42IChsYWNrIG9mIGNyZWF0ZV9jb25uZWN0aW9uKQogICAgICAgICAgICBpZiBzZWxmLl90dW5uZWxfaG9zdDoKICAgICAgICAgICAgICAgIHNlbGYuc29jayA9IHNvY2sKICAgICAgICAgICAgICAgIHNlbGYuX3R1bm5lbCgpCiAgICAgICAgICAgICAgICBzZXJ2ZXJfaG9zdG5hbWUgPSBzZWxmLl90dW5uZWxfaG9zdAoKICAgICAgICAgICAgaWYgSEFTX1NTTENPTlRFWFQgb3IgSEFTX1VSTExJQjNfUFlPUEVOU1NMQ09OVEVYVDoKICAgICAgICAgICAgICAgIHNlbGYuc29jayA9IHNlbGYuY29udGV4dC53cmFwX3NvY2tldChzb2NrLCBzZXJ2ZXJfaG9zdG5hbWU9c2VydmVyX2hvc3RuYW1lKQogICAgICAgICAgICBlbGlmIEhBU19VUkxMSUIzX1NTTF9XUkFQX1NPQ0tFVDoKICAgICAgICAgICAgICAgIHNlbGYuc29jayA9IHNzbF93cmFwX3NvY2tldChzb2NrLCBrZXlmaWxlPXNlbGYua2V5X2ZpbGUsIGNlcnRfcmVxcz1zc2wuQ0VSVF9OT05FLCBjZXJ0ZmlsZT1zZWxmLmNlcnRfZmlsZSwgc3NsX3ZlcnNpb249UFJPVE9DT0wsCiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlcl9ob3N0bmFtZT1zZXJ2ZXJfaG9zdG5hbWUpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLnNvY2sgPSBzc2wud3JhcF9zb2NrZXQoc29jaywga2V5ZmlsZT1zZWxmLmtleV9maWxlLCBjZXJ0ZmlsZT1zZWxmLmNlcnRfZmlsZSwgc3NsX3ZlcnNpb249UFJPVE9DT0wpCgogICAgY2xhc3MgQ3VzdG9tSFRUUFNIYW5kbGVyKHVybGxpYl9yZXF1ZXN0LkhUVFBTSGFuZGxlcik6CgogICAgICAgIGRlZiBodHRwc19vcGVuKHNlbGYsIHJlcSk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLmRvX29wZW4oQ3VzdG9tSFRUUFNDb25uZWN0aW9uLCByZXEpCgogICAgICAgIGh0dHBzX3JlcXVlc3QgPSBBYnN0cmFjdEhUVFBIYW5kbGVyLmRvX3JlcXVlc3RfCgoKY2xhc3MgSFRUUFNDbGllbnRBdXRoSGFuZGxlcih1cmxsaWJfcmVxdWVzdC5IVFRQU0hhbmRsZXIpOgogICAgJycnSGFuZGxlcyBjbGllbnQgYXV0aGVudGljYXRpb24gdmlhIGNlcnQva2V5CgogICAgVGhpcyBpcyBhIGZhaXJseSBsaWdodHdlaWdodCBleHRlbnNpb24gb24gSFRUUFNIYW5kbGVyLCBhbmQgY2FuIGJlIHVzZWQKICAgIGluIHBsYWNlIG9mIEhUVFBTSGFuZGxlcgogICAgJycnCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGNsaWVudF9jZXJ0PU5vbmUsIGNsaWVudF9rZXk9Tm9uZSwgKiprd2FyZ3MpOgogICAgICAgIHVybGxpYl9yZXF1ZXN0LkhUVFBTSGFuZGxlci5fX2luaXRfXyhzZWxmLCAqKmt3YXJncykKICAgICAgICBzZWxmLmNsaWVudF9jZXJ0ID0gY2xpZW50X2NlcnQKICAgICAgICBzZWxmLmNsaWVudF9rZXkgPSBjbGllbnRfa2V5CgogICAgZGVmIGh0dHBzX29wZW4oc2VsZiwgcmVxKToKICAgICAgICByZXR1cm4gc2VsZi5kb19vcGVuKHNlbGYuX2J1aWxkX2h0dHBzX2Nvbm5lY3Rpb24sIHJlcSkKCiAgICBkZWYgX2J1aWxkX2h0dHBzX2Nvbm5lY3Rpb24oc2VsZiwgaG9zdCwgKiprd2FyZ3MpOgogICAgICAgIGt3YXJncy51cGRhdGUoewogICAgICAgICAgICAnY2VydF9maWxlJzogc2VsZi5jbGllbnRfY2VydCwKICAgICAgICAgICAgJ2tleV9maWxlJzogc2VsZi5jbGllbnRfa2V5LAogICAgICAgIH0pCiAgICAgICAgdHJ5OgogICAgICAgICAgICBrd2FyZ3NbJ2NvbnRleHQnXSA9IHNlbGYuX2NvbnRleHQKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICByZXR1cm4gaHR0cGxpYi5IVFRQU0Nvbm5lY3Rpb24oaG9zdCwgKiprd2FyZ3MpCgoKZGVmIGdlbmVyaWNfdXJscGFyc2UocGFydHMpOgogICAgJycnCiAgICBSZXR1cm5zIGEgZGljdGlvbmFyeSBvZiB1cmwgcGFydHMgYXMgcGFyc2VkIGJ5IHVybHBhcnNlLAogICAgYnV0IGFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IG9sZGVyIHZlcnNpb25zIG9mIHRoYXQKICAgIGxpYnJhcnkgZG8gbm90IHN1cHBvcnQgbmFtZWQgYXR0cmlidXRlcyAoaWUuIC5uZXRsb2MpCiAgICAnJycKICAgIGdlbmVyaWNfcGFydHMgPSBkaWN0KCkKICAgIGlmIGhhc2F0dHIocGFydHMsICduZXRsb2MnKToKICAgICAgICAjIHVybHBhcnNlIGlzIG5ld2VyLCBqdXN0IHJlYWQgdGhlIGZpZWxkcyBzdHJhaWdodAogICAgICAgICMgZnJvbSB0aGUgcGFydHMgb2JqZWN0CiAgICAgICAgZ2VuZXJpY19wYXJ0c1snc2NoZW1lJ10gICA9IHBhcnRzLnNjaGVtZQogICAgICAgIGdlbmVyaWNfcGFydHNbJ25ldGxvYyddICAgPSBwYXJ0cy5uZXRsb2MKICAgICAgICBnZW5lcmljX3BhcnRzWydwYXRoJ10gICAgID0gcGFydHMucGF0aAogICAgICAgIGdlbmVyaWNfcGFydHNbJ3BhcmFtcyddICAgPSBwYXJ0cy5wYXJhbXMKICAgICAgICBnZW5lcmljX3BhcnRzWydxdWVyeSddICAgID0gcGFydHMucXVlcnkKICAgICAgICBnZW5lcmljX3BhcnRzWydmcmFnbWVudCddID0gcGFydHMuZnJhZ21lbnQKICAgICAgICBnZW5lcmljX3BhcnRzWyd1c2VybmFtZSddID0gcGFydHMudXNlcm5hbWUKICAgICAgICBnZW5lcmljX3BhcnRzWydwYXNzd29yZCddID0gcGFydHMucGFzc3dvcmQKICAgICAgICBnZW5lcmljX3BhcnRzWydob3N0bmFtZSddID0gcGFydHMuaG9zdG5hbWUKICAgICAgICBnZW5lcmljX3BhcnRzWydwb3J0J10gICAgID0gcGFydHMucG9ydAogICAgZWxzZToKICAgICAgICAjIHdlIGhhdmUgdG8gdXNlIGluZGV4ZXMsIGFuZCB0aGVuIHBhcnNlIG91dAogICAgICAgICMgdGhlIG90aGVyIHBhcnRzIG5vdCBzdXBwb3J0ZWQgYnkgaW5kZXhpbmcKICAgICAgICBnZW5lcmljX3BhcnRzWydzY2hlbWUnXSAgID0gcGFydHNbMF0KICAgICAgICBnZW5lcmljX3BhcnRzWyduZXRsb2MnXSAgID0gcGFydHNbMV0KICAgICAgICBnZW5lcmljX3BhcnRzWydwYXRoJ10gICAgID0gcGFydHNbMl0KICAgICAgICBnZW5lcmljX3BhcnRzWydwYXJhbXMnXSAgID0gcGFydHNbM10KICAgICAgICBnZW5lcmljX3BhcnRzWydxdWVyeSddICAgID0gcGFydHNbNF0KICAgICAgICBnZW5lcmljX3BhcnRzWydmcmFnbWVudCddID0gcGFydHNbNV0KICAgICAgICAjIGdldCB0aGUgdXNlcm5hbWUsIHBhc3N3b3JkLCBldGMuCiAgICAgICAgdHJ5OgogICAgICAgICAgICBuZXRsb2NfcmUgPSByZS5jb21waWxlKHInXigoPzpcdykrKD86Oig/Olx3KSspP0ApPyhbQS1aYS16MC05Li1dKykoOlxkKyk/JCcpCiAgICAgICAgICAgIG1hdGNoID0gbmV0bG9jX3JlLm1hdGNoKHBhcnRzWzFdKQogICAgICAgICAgICBhdXRoID0gbWF0Y2guZ3JvdXAoMSkKICAgICAgICAgICAgaG9zdG5hbWUgPSBtYXRjaC5ncm91cCgyKQogICAgICAgICAgICBwb3J0ID0gbWF0Y2guZ3JvdXAoMykKICAgICAgICAgICAgaWYgcG9ydDoKICAgICAgICAgICAgICAgICMgdGhlIGNhcHR1cmUgZ3JvdXAgZm9yIHRoZSBwb3J0IHdpbGwgaW5jbHVkZSB0aGUgJzonLAogICAgICAgICAgICAgICAgIyBzbyByZW1vdmUgaXQgYW5kIGNvbnZlcnQgdGhlIHBvcnQgdG8gYW4gaW50ZWdlcgogICAgICAgICAgICAgICAgcG9ydCA9IGludChwb3J0WzE6XSkKICAgICAgICAgICAgaWYgYXV0aDoKICAgICAgICAgICAgICAgICMgdGhlIGNhcHR1cmUgZ3JvdXAgYWJvdmUgaW5jbHVlcyB0aGUgQCwgc28gcmVtb3ZlIGl0CiAgICAgICAgICAgICAgICAjIGFuZCB0aGVuIHNwbGl0IGl0IHVwIGJhc2VkIG9uIHRoZSBmaXJzdCAnOicgZm91bmQKICAgICAgICAgICAgICAgIGF1dGggPSBhdXRoWzotMV0KICAgICAgICAgICAgICAgIHVzZXJuYW1lLCBwYXNzd29yZCA9IGF1dGguc3BsaXQoJzonLCAxKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBwYXNzd29yZCA9IE5vbmUKICAgICAgICAgICAgZ2VuZXJpY19wYXJ0c1sndXNlcm5hbWUnXSA9IHVzZXJuYW1lCiAgICAgICAgICAgIGdlbmVyaWNfcGFydHNbJ3Bhc3N3b3JkJ10gPSBwYXNzd29yZAogICAgICAgICAgICBnZW5lcmljX3BhcnRzWydob3N0bmFtZSddID0gaG9zdG5hbWUKICAgICAgICAgICAgZ2VuZXJpY19wYXJ0c1sncG9ydCddICAgICA9IHBvcnQKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIGdlbmVyaWNfcGFydHNbJ3VzZXJuYW1lJ10gPSBOb25lCiAgICAgICAgICAgIGdlbmVyaWNfcGFydHNbJ3Bhc3N3b3JkJ10gPSBOb25lCiAgICAgICAgICAgIGdlbmVyaWNfcGFydHNbJ2hvc3RuYW1lJ10gPSBwYXJ0c1sxXQogICAgICAgICAgICBnZW5lcmljX3BhcnRzWydwb3J0J10gICAgID0gTm9uZQogICAgcmV0dXJuIGdlbmVyaWNfcGFydHMKCgpjbGFzcyBSZXF1ZXN0V2l0aE1ldGhvZCh1cmxsaWJfcmVxdWVzdC5SZXF1ZXN0KToKICAgICcnJwogICAgV29ya2Fyb3VuZCBmb3IgdXNpbmcgREVMRVRFL1BVVC9ldGMgd2l0aCB1cmxsaWIyCiAgICBPcmlnaW5hbGx5IGNvbnRhaW5lZCBpbiBsaWJyYXJ5L25ldF9pbmZyYXN0cnVjdHVyZS9kbnNtYWRlZWFzeQogICAgJycnCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHVybCwgbWV0aG9kLCBkYXRhPU5vbmUsIGhlYWRlcnM9Tm9uZSk6CiAgICAgICAgaWYgaGVhZGVycyBpcyBOb25lOgogICAgICAgICAgICBoZWFkZXJzID0ge30KICAgICAgICBzZWxmLl9tZXRob2QgPSBtZXRob2QudXBwZXIoKQogICAgICAgIHVybGxpYl9yZXF1ZXN0LlJlcXVlc3QuX19pbml0X18oc2VsZiwgdXJsLCBkYXRhLCBoZWFkZXJzKQoKICAgIGRlZiBnZXRfbWV0aG9kKHNlbGYpOgogICAgICAgIGlmIHNlbGYuX21ldGhvZDoKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX21ldGhvZAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiB1cmxsaWJfcmVxdWVzdC5SZXF1ZXN0LmdldF9tZXRob2Qoc2VsZikKCgpkZWYgUmVkaXJlY3RIYW5kbGVyRmFjdG9yeShmb2xsb3dfcmVkaXJlY3RzPU5vbmUsIHZhbGlkYXRlX2NlcnRzPVRydWUpOgogICAgIiIiVGhpcyBpcyBhIGNsYXNzIGZhY3RvcnkgdGhhdCBjbG9zZXMgb3ZlciB0aGUgdmFsdWUgb2YKICAgIGBgZm9sbG93X3JlZGlyZWN0c2BgIHNvIHRoYXQgdGhlIFJlZGlyZWN0SGFuZGxlciBjbGFzcyBoYXMgYWNjZXNzIHRvCiAgICB0aGF0IHZhbHVlIHdpdGhvdXQgaGF2aW5nIHRvIHVzZSBnbG9iYWxzLCBhbmQgcG90ZW50aWFsbHkgY2F1c2UgcHJvYmxlbXMKICAgIHdoZXJlIGBgb3Blbl91cmxgYCBvciBgYGZldGNoX3VybGBgIGFyZSB1c2VkIG11bHRpcGxlIHRpbWVzIGluIGEgbW9kdWxlLgogICAgIiIiCgogICAgY2xhc3MgUmVkaXJlY3RIYW5kbGVyKHVybGxpYl9yZXF1ZXN0LkhUVFBSZWRpcmVjdEhhbmRsZXIpOgogICAgICAgICIiIlRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYSBSZWRpcmVjdEhhbmRsZXIgdG8gbWF0Y2ggdGhlCiAgICAgICAgZnVuY3Rpb25hbGl0eSBwcm92aWRlZCBieSBodHRwbGliMi4gSXQgd2lsbCB1dGlsaXplIHRoZSB2YWx1ZSBvZgogICAgICAgIGBgZm9sbG93X3JlZGlyZWN0c2BgIHRoYXQgaXMgcGFzc2VkIGludG8gYGBSZWRpcmVjdEhhbmRsZXJGYWN0b3J5YGAKICAgICAgICB0byBkZXRlcm1pbmUgaG93IHJlZGlyZWN0cyBzaG91bGQgYmUgaGFuZGxlZCBpbiB1cmxsaWIyLgogICAgICAgICIiIgoKICAgICAgICBkZWYgcmVkaXJlY3RfcmVxdWVzdChzZWxmLCByZXEsIGZwLCBjb2RlLCBtc2csIGhkcnMsIG5ld3VybCk6CiAgICAgICAgICAgIGhhbmRsZXIgPSBtYXliZV9hZGRfc3NsX2hhbmRsZXIobmV3dXJsLCB2YWxpZGF0ZV9jZXJ0cykKICAgICAgICAgICAgaWYgaGFuZGxlcjoKICAgICAgICAgICAgICAgIHVybGxpYl9yZXF1ZXN0Ll9vcGVuZXIuYWRkX2hhbmRsZXIoaGFuZGxlcikKCiAgICAgICAgICAgIGlmIGZvbGxvd19yZWRpcmVjdHMgPT0gJ3VybGxpYjInOgogICAgICAgICAgICAgICAgcmV0dXJuIHVybGxpYl9yZXF1ZXN0LkhUVFBSZWRpcmVjdEhhbmRsZXIucmVkaXJlY3RfcmVxdWVzdChzZWxmLCByZXEsIGZwLCBjb2RlLCBtc2csIGhkcnMsIG5ld3VybCkKICAgICAgICAgICAgZWxpZiBmb2xsb3dfcmVkaXJlY3RzIGluIFsnbm8nLCAnbm9uZScsIEZhbHNlXToKICAgICAgICAgICAgICAgIHJhaXNlIHVybGxpYl9lcnJvci5IVFRQRXJyb3IobmV3dXJsLCBjb2RlLCBtc2csIGhkcnMsIGZwKQoKICAgICAgICAgICAgZG9fcmVkaXJlY3QgPSBGYWxzZQogICAgICAgICAgICBpZiBmb2xsb3dfcmVkaXJlY3RzIGluIFsnYWxsJywgJ3llcycsIFRydWVdOgogICAgICAgICAgICAgICAgZG9fcmVkaXJlY3QgPSAoY29kZSA+PSAzMDAgYW5kIGNvZGUgPCA0MDApCgogICAgICAgICAgICBlbGlmIGZvbGxvd19yZWRpcmVjdHMgPT0gJ3NhZmUnOgogICAgICAgICAgICAgICAgbSA9IHJlcS5nZXRfbWV0aG9kKCkKICAgICAgICAgICAgICAgIGRvX3JlZGlyZWN0ID0gKGNvZGUgPj0gMzAwIGFuZCBjb2RlIDwgNDAwIGFuZCBtIGluICgnR0VUJywgJ0hFQUQnKSkKCiAgICAgICAgICAgIGlmIGRvX3JlZGlyZWN0OgogICAgICAgICAgICAgICAgIyBiZSBjb25jaWxpYW50IHdpdGggVVJJcyBjb250YWluaW5nIGEgc3BhY2UKICAgICAgICAgICAgICAgIG5ld3VybCA9IG5ld3VybC5yZXBsYWNlKCcgJywgJyUyMCcpCiAgICAgICAgICAgICAgICBuZXdoZWFkZXJzID0gZGljdCgoayx2KSBmb3Igayx2IGluIHJlcS5oZWFkZXJzLml0ZW1zKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGsubG93ZXIoKSBub3QgaW4gKCJjb250ZW50LWxlbmd0aCIsICJjb250ZW50LXR5cGUiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgIyBQeXRob24gMi0zLjMKICAgICAgICAgICAgICAgICAgICBvcmlnaW5fcmVxX2hvc3QgPSByZXEuZ2V0X29yaWdpbl9yZXFfaG9zdCgpCiAgICAgICAgICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgIyBQeXRob24gMy40KwogICAgICAgICAgICAgICAgICAgIG9yaWdpbl9yZXFfaG9zdCA9IHJlcS5vcmlnaW5fcmVxX2hvc3QKICAgICAgICAgICAgICAgIHJldHVybiB1cmxsaWJfcmVxdWVzdC5SZXF1ZXN0KG5ld3VybCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9bmV3aGVhZGVycywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbl9yZXFfaG9zdD1vcmlnaW5fcmVxX2hvc3QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnZlcmlmaWFibGU9VHJ1ZSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJhaXNlIHVybGxpYl9lcnJvci5IVFRQRXJyb3IocmVxLmdldF9mdWxsX3VybCgpLCBjb2RlLCBtc2csIGhkcnMsIGZwKQoKICAgIHJldHVybiBSZWRpcmVjdEhhbmRsZXIKCgpkZWYgYnVpbGRfc3NsX3ZhbGlkYXRpb25fZXJyb3IoaG9zdG5hbWUsIHBvcnQsIHBhdGhzLCBleGM9Tm9uZSk6CiAgICAnJydJbnRlbGlnZW50bHkgYnVpbGQgb3V0IHRoZSBTU0xWYWxpZGF0aW9uRXJyb3IgYmFzZWQgb24gd2hhdCBzdXBwb3J0CiAgICB5b3UgaGF2ZSBpbnN0YWxsZWQKICAgICcnJwoKICAgIG1zZyA9IFsKICAgICAgICAoJ0ZhaWxlZCB0byB2YWxpZGF0ZSB0aGUgU1NMIGNlcnRpZmljYXRlIGZvciAlczolcy4nCiAgICAgICAgICcgTWFrZSBzdXJlIHlvdXIgbWFuYWdlZCBzeXN0ZW1zIGhhdmUgYSB2YWxpZCBDQScKICAgICAgICAgJyBjZXJ0aWZpY2F0ZSBpbnN0YWxsZWQuJykKICAgIF0KICAgIGlmIG5vdCBIQVNfU1NMQ09OVEVYVDoKICAgICAgICBtc2cuYXBwZW5kKCdJZiB0aGUgd2Vic2l0ZSBzZXJ2aW5nIHRoZSB1cmwgdXNlcyBTTkkgeW91IG5lZWQnCiAgICAgICAgICAgICAgICAgICAnIHB5dGhvbiA+PSAyLjcuOSBvbiB5b3VyIG1hbmFnZWQgbWFjaGluZScpCiAgICAgICAgaWYgbm90IEhBU19VUkxMSUIzX1BZT1BFTlNTTENPTlRFWFQgb3Igbm90IEhBU19VUkxMSUIzX1NTTF9XUkFQX1NPQ0tFVDoKICAgICAgICAgICAgbXNnLmFwcGVuZCgnb3IgeW91IGNhbiBpbnN0YWxsIHRoZSBgdXJsbGliM2AsIGBweU9wZW5TU0xgLCcKICAgICAgICAgICAgICAgICAgICAgICAnIGBuZGctaHR0cHNjbGllbnRgLCBhbmQgYHB5YXNuMWAgcHl0aG9uIG1vZHVsZXMnKQoKICAgICAgICBtc2cuYXBwZW5kKCd0byBwZXJmb3JtIFNOSSB2ZXJpZmljYXRpb24gaW4gcHl0aG9uID49IDIuNi4nKQoKICAgIG1zZy5hcHBlbmQoJ1lvdSBjYW4gdXNlIHZhbGlkYXRlX2NlcnRzPUZhbHNlIGlmIHlvdSBkbycKICAgICAgICAgICAgICAgJyBub3QgbmVlZCB0byBjb25maXJtIHRoZSBzZXJ2ZXJzIGlkZW50aXR5IGJ1dCB0aGlzIGlzJwogICAgICAgICAgICAgICAnIHVuc2FmZSBhbmQgbm90IHJlY29tbWVuZGVkLicKICAgICAgICAgICAgICAgJyBQYXRocyBjaGVja2VkIGZvciB0aGlzIHBsYXRmb3JtOiAlcy4nKQoKICAgIGlmIGV4YzoKICAgICAgICBtc2cuYXBwZW5kKCdUaGUgZXhjZXB0aW9uIG1zZyB3YXM6ICVzLicgJSB0b19uYXRpdmUoZXhjKSkKCiAgICByYWlzZSBTU0xWYWxpZGF0aW9uRXJyb3IoJyAnLmpvaW4obXNnKSAlIChob3N0bmFtZSwgcG9ydCwgIiwgIi5qb2luKHBhdGhzKSkpCgoKY2xhc3MgU1NMVmFsaWRhdGlvbkhhbmRsZXIodXJsbGliX3JlcXVlc3QuQmFzZUhhbmRsZXIpOgogICAgJycnCiAgICBBIGN1c3RvbSBoYW5kbGVyIGNsYXNzIGZvciBTU0wgdmFsaWRhdGlvbi4KCiAgICBCYXNlZCBvbjoKICAgIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA4NzIyNy92YWxpZGF0ZS1zc2wtY2VydGlmaWNhdGVzLXdpdGgtcHl0aG9uCiAgICBodHRwOi8vdGVjaGtuYWNrLm5ldC9weXRob24tdXJsbGliMi1oYW5kbGVycy8KICAgICcnJwogICAgQ09OTkVDVF9DT01NQU5EID0gIkNPTk5FQ1QgJXM6JXMgSFRUUC8xLjBcclxuQ29ubmVjdGlvbjogY2xvc2VcclxuIgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBob3N0bmFtZSwgcG9ydCk6CiAgICAgICAgc2VsZi5ob3N0bmFtZSA9IGhvc3RuYW1lCiAgICAgICAgc2VsZi5wb3J0ID0gcG9ydAoKICAgIGRlZiBnZXRfY2FfY2VydHMoc2VsZik6CiAgICAgICAgIyB0cmllcyB0byBmaW5kIGEgdmFsaWQgQ0EgY2VydCBpbiBvbmUgb2YgdGhlCiAgICAgICAgIyBzdGFuZGFyZCBsb2NhdGlvbnMgZm9yIHRoZSBjdXJyZW50IGRpc3RyaWJ1dGlvbgoKICAgICAgICBjYV9jZXJ0cyA9IFtdCiAgICAgICAgcGF0aHNfY2hlY2tlZCA9IFtdCgogICAgICAgIHN5c3RlbSA9IHRvX3RleHQocGxhdGZvcm0uc3lzdGVtKCksIGVycm9ycz0nc3Vycm9nYXRlX29yX3N0cmljdCcpCiAgICAgICAgIyBidWlsZCBhIGxpc3Qgb2YgcGF0aHMgdG8gY2hlY2sgZm9yIC5jcnQvLnBlbSBmaWxlcwogICAgICAgICMgYmFzZWQgb24gdGhlIHBsYXRmb3JtIHR5cGUKICAgICAgICBwYXRoc19jaGVja2VkLmFwcGVuZCgnL2V0Yy9zc2wvY2VydHMnKQogICAgICAgIGlmIHN5c3RlbSA9PSB1J0xpbnV4JzoKICAgICAgICAgICAgcGF0aHNfY2hlY2tlZC5hcHBlbmQoJy9ldGMvcGtpL2NhLXRydXN0L2V4dHJhY3RlZC9wZW0nKQogICAgICAgICAgICBwYXRoc19jaGVja2VkLmFwcGVuZCgnL2V0Yy9wa2kvdGxzL2NlcnRzJykKICAgICAgICAgICAgcGF0aHNfY2hlY2tlZC5hcHBlbmQoJy91c3Ivc2hhcmUvY2EtY2VydGlmaWNhdGVzL2NhY2VydC5vcmcnKQogICAgICAgIGVsaWYgc3lzdGVtID09IHUnRnJlZUJTRCc6CiAgICAgICAgICAgIHBhdGhzX2NoZWNrZWQuYXBwZW5kKCcvdXNyL2xvY2FsL3NoYXJlL2NlcnRzJykKICAgICAgICBlbGlmIHN5c3RlbSA9PSB1J09wZW5CU0QnOgogICAgICAgICAgICBwYXRoc19jaGVja2VkLmFwcGVuZCgnL2V0Yy9zc2wnKQogICAgICAgIGVsaWYgc3lzdGVtID09IHUnTmV0QlNEJzoKICAgICAgICAgICAgY2FfY2VydHMuYXBwZW5kKCcvZXRjL29wZW5zc2wvY2VydHMnKQogICAgICAgIGVsaWYgc3lzdGVtID09IHUnU3VuT1MnOgogICAgICAgICAgICBwYXRoc19jaGVja2VkLmFwcGVuZCgnL29wdC9sb2NhbC9ldGMvb3BlbnNzbC9jZXJ0cycpCgogICAgICAgICMgZmFsbCBiYWNrIHRvIGEgdXNlci1kZXBsb3llZCBjZXJ0IGluIGEgc3RhbmRhcmQKICAgICAgICAjIGxvY2F0aW9uIGlmIHRoZSBPUyBwbGF0Zm9ybSBvbmUgaXMgbm90IGF2YWlsYWJsZQogICAgICAgIHBhdGhzX2NoZWNrZWQuYXBwZW5kKCcvZXRjL2Fuc2libGUnKQoKICAgICAgICB0bXBfZmQsIHRtcF9wYXRoID0gdGVtcGZpbGUubWtzdGVtcCgpCiAgICAgICAgdG9fYWRkX2ZkLCB0b19hZGRfcGF0aCA9IHRlbXBmaWxlLm1rc3RlbXAoKQogICAgICAgIHRvX2FkZCA9IEZhbHNlCgogICAgICAgICMgV3JpdGUgdGhlIGR1bW15IGNhIGNlcnQgaWYgd2UgYXJlIHJ1bm5pbmcgb24gTWFjIE9TIFgKICAgICAgICBpZiBzeXN0ZW0gPT0gdSdEYXJ3aW4nOgogICAgICAgICAgICBvcy53cml0ZSh0bXBfZmQsIGJfRFVNTVlfQ0FfQ0VSVCkKICAgICAgICAgICAgIyBEZWZhdWx0IEhvbWVicmV3IHBhdGggZm9yIE9wZW5TU0wgY2VydHMKICAgICAgICAgICAgcGF0aHNfY2hlY2tlZC5hcHBlbmQoJy91c3IvbG9jYWwvZXRjL29wZW5zc2wnKQoKICAgICAgICAjIGZvciBhbGwgb2YgdGhlIHBhdGhzLCBmaW5kIGFueSAgLmNydCBvciAucGVtIGZpbGVzCiAgICAgICAgIyBhbmQgY29tcGlsZSB0aGVtIGludG8gc2luZ2xlIHRlbXAgZmlsZSBmb3IgdXNlCiAgICAgICAgIyBpbiB0aGUgc3NsIGNoZWNrIHRvIHNwZWVkIHVwIHRoZSB0ZXN0CiAgICAgICAgZm9yIHBhdGggaW4gcGF0aHNfY2hlY2tlZDoKICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMocGF0aCkgYW5kIG9zLnBhdGguaXNkaXIocGF0aCk6CiAgICAgICAgICAgICAgICBkaXJfY29udGVudHMgPSBvcy5saXN0ZGlyKHBhdGgpCiAgICAgICAgICAgICAgICBmb3IgZiBpbiBkaXJfY29udGVudHM6CiAgICAgICAgICAgICAgICAgICAgZnVsbF9wYXRoID0gb3MucGF0aC5qb2luKHBhdGgsIGYpCiAgICAgICAgICAgICAgICAgICAgaWYgb3MucGF0aC5pc2ZpbGUoZnVsbF9wYXRoKSBhbmQgb3MucGF0aC5zcGxpdGV4dChmKVsxXSBpbiAoJy5jcnQnLCcucGVtJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlcnRfZmlsZSA9IG9wZW4oZnVsbF9wYXRoLCAncmInKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VydCA9IGNlcnRfZmlsZS5yZWFkKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlcnRfZmlsZS5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy53cml0ZSh0bXBfZmQsIGNlcnQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy53cml0ZSh0bXBfZmQsIGIoJ1xuJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBmdWxsX3BhdGggbm90IGluIExPQURFRF9WRVJJRllfTE9DQVRJT05TOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvX2FkZCA9IFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy53cml0ZSh0b19hZGRfZmQsIGNlcnQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Mud3JpdGUodG9fYWRkX2ZkLCBiKCdcbicpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExPQURFRF9WRVJJRllfTE9DQVRJT05TLmFkZChmdWxsX3BhdGgpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCAoT1NFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzCgogICAgICAgIGlmIG5vdCB0b19hZGQ6CiAgICAgICAgICAgIHRvX2FkZF9wYXRoID0gTm9uZQogICAgICAgIHJldHVybiAodG1wX3BhdGgsIHRvX2FkZF9wYXRoLCBwYXRoc19jaGVja2VkKQoKICAgIGRlZiB2YWxpZGF0ZV9wcm94eV9yZXNwb25zZShzZWxmLCByZXNwb25zZSwgdmFsaWRfY29kZXM9WzIwMF0pOgogICAgICAgICcnJwogICAgICAgIG1ha2Ugc3VyZSB3ZSBnZXQgYmFjayBhIHZhbGlkIGNvZGUgZnJvbSB0aGUgcHJveHkKICAgICAgICAnJycKICAgICAgICB0cnk6CiAgICAgICAgICAgIChodHRwX3ZlcnNpb24sIHJlc3BfY29kZSwgbXNnKSA9IHJlLm1hdGNoKHInKEhUVFAvXGRcLlxkKSAoXGRcZFxkKSAoLiopJywgcmVzcG9uc2UpLmdyb3VwcygpCiAgICAgICAgICAgIGlmIGludChyZXNwX2NvZGUpIG5vdCBpbiB2YWxpZF9jb2RlczoKICAgICAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbgogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcmFpc2UgUHJveHlFcnJvcignQ29ubmVjdGlvbiB0byBwcm94eSBmYWlsZWQnKQoKICAgIGRlZiBkZXRlY3Rfbm9fcHJveHkoc2VsZiwgdXJsKToKICAgICAgICAnJycKICAgICAgICBEZXRlY3QgaWYgdGhlICdub19wcm94eScgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgc2V0IGFuZCBob25vciB0aG9zZSBsb2NhdGlvbnMuCiAgICAgICAgJycnCiAgICAgICAgZW52X25vX3Byb3h5ID0gb3MuZW52aXJvbi5nZXQoJ25vX3Byb3h5JykKICAgICAgICBpZiBlbnZfbm9fcHJveHk6CiAgICAgICAgICAgIGVudl9ub19wcm94eSA9IGVudl9ub19wcm94eS5zcGxpdCgnLCcpCiAgICAgICAgICAgIG5ldGxvYyA9IHVybHBhcnNlKHVybCkubmV0bG9jCgogICAgICAgICAgICBmb3IgaG9zdCBpbiBlbnZfbm9fcHJveHk6CiAgICAgICAgICAgICAgICBpZiBuZXRsb2MuZW5kc3dpdGgoaG9zdCkgb3IgbmV0bG9jLnNwbGl0KCc6JylbMF0uZW5kc3dpdGgoaG9zdCk6CiAgICAgICAgICAgICAgICAgICAgIyBPdXIgcmVxdWVzdGVkIFVSTCBtYXRjaGVzIHNvbWV0aGluZyBpbiBub19wcm94eSwgc28gZG9uJ3QKICAgICAgICAgICAgICAgICAgICAjIHVzZSB0aGUgcHJveHkgZm9yIHRoaXMKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBfbWFrZV9jb250ZXh0KHNlbGYsIHRvX2FkZF9jYV9jZXJ0X3BhdGgpOgogICAgICAgIGlmIEhBU19VUkxMSUIzX1BZT1BFTlNTTENPTlRFWFQ6CiAgICAgICAgICAgIGNvbnRleHQgPSBQeU9wZW5TU0xDb250ZXh0KFBST1RPQ09MKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGNvbnRleHQgPSBjcmVhdGVfZGVmYXVsdF9jb250ZXh0KCkKICAgICAgICBpZiB0b19hZGRfY2FfY2VydF9wYXRoOgogICAgICAgICAgICBjb250ZXh0LmxvYWRfdmVyaWZ5X2xvY2F0aW9ucyh0b19hZGRfY2FfY2VydF9wYXRoKQogICAgICAgIHJldHVybiBjb250ZXh0CgogICAgZGVmIGh0dHBfcmVxdWVzdChzZWxmLCByZXEpOgogICAgICAgIHRtcF9jYV9jZXJ0X3BhdGgsIHRvX2FkZF9jYV9jZXJ0X3BhdGgsIHBhdGhzX2NoZWNrZWQgPSBzZWxmLmdldF9jYV9jZXJ0cygpCiAgICAgICAgaHR0cHNfcHJveHkgPSBvcy5lbnZpcm9uLmdldCgnaHR0cHNfcHJveHknKQogICAgICAgIGNvbnRleHQgPSBOb25lCiAgICAgICAgaWYgSEFTX1NTTENPTlRFWFQgb3IgSEFTX1VSTExJQjNfUFlPUEVOU1NMQ09OVEVYVDoKICAgICAgICAgICAgY29udGV4dCA9IHNlbGYuX21ha2VfY29udGV4dCh0b19hZGRfY2FfY2VydF9wYXRoKQoKICAgICAgICAjIERldGVjdCBpZiAnbm9fcHJveHknIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIHNldCBhbmQgaWYgb3VyIFVSTCBpcyBpbmNsdWRlZAogICAgICAgIHVzZV9wcm94eSA9IHNlbGYuZGV0ZWN0X25vX3Byb3h5KHJlcS5nZXRfZnVsbF91cmwoKSkKCiAgICAgICAgaWYgbm90IHVzZV9wcm94eToKICAgICAgICAgICAgIyBpZ25vcmUgcHJveHkgc2V0dGluZ3MgZm9yIHRoaXMgaG9zdCByZXF1ZXN0CiAgICAgICAgICAgIHJldHVybiByZXEKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzID0gc29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCwgc29ja2V0LlNPQ0tfU1RSRUFNKQogICAgICAgICAgICBpZiBodHRwc19wcm94eToKICAgICAgICAgICAgICAgIHByb3h5X3BhcnRzID0gZ2VuZXJpY191cmxwYXJzZSh1cmxwYXJzZShodHRwc19wcm94eSkpCiAgICAgICAgICAgICAgICBwb3J0ID0gcHJveHlfcGFydHMuZ2V0KCdwb3J0Jykgb3IgNDQzCiAgICAgICAgICAgICAgICBzLmNvbm5lY3QoKHByb3h5X3BhcnRzLmdldCgnaG9zdG5hbWUnKSwgcG9ydCkpCiAgICAgICAgICAgICAgICBpZiBwcm94eV9wYXJ0cy5nZXQoJ3NjaGVtZScpID09ICdodHRwJzoKICAgICAgICAgICAgICAgICAgICBzLnNlbmRhbGwoc2VsZi5DT05ORUNUX0NPTU1BTkQgJSAoc2VsZi5ob3N0bmFtZSwgc2VsZi5wb3J0KSkKICAgICAgICAgICAgICAgICAgICBpZiBwcm94eV9wYXJ0cy5nZXQoJ3VzZXJuYW1lJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzID0gIiVzOiVzIiAlIChwcm94eV9wYXJ0cy5nZXQoJ3VzZXJuYW1lJywnJyksIHByb3h5X3BhcnRzLmdldCgncGFzc3dvcmQnLCcnKSkKICAgICAgICAgICAgICAgICAgICAgICAgcy5zZW5kYWxsKGIoJ1Byb3h5LUF1dGhvcml6YXRpb246IEJhc2ljICVzXHJcbicpICUgYmFzZTY0LmI2NGVuY29kZSh0b19ieXRlcyhjcmVkZW50aWFscywgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykpLnN0cmlwKCkpCiAgICAgICAgICAgICAgICAgICAgcy5zZW5kYWxsKGIoJ1xyXG4nKSkKICAgICAgICAgICAgICAgICAgICBjb25uZWN0X3Jlc3VsdCA9IGIoIiIpCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgY29ubmVjdF9yZXN1bHQuZmluZChiKCJcclxuXHJcbiIpKSA8PSAwOgogICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0X3Jlc3VsdCArPSBzLnJlY3YoNDA5NikKICAgICAgICAgICAgICAgICAgICAgICAgIyAxMjgga2lsb2J5dGVzIG9mIGhlYWRlcnMgc2hvdWxkIGJlIGVub3VnaCBmb3IgZXZlcnlvbmUuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbihjb25uZWN0X3Jlc3VsdCkgPiAxMzEwNzI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZSBQcm94eUVycm9yKCdQcm94eSBzZW50IHRvbyB2ZXJib3NlIGhlYWRlcnMuIE9ubHkgMTI4S2lCIGFsbG93ZWQuJykKICAgICAgICAgICAgICAgICAgICBzZWxmLnZhbGlkYXRlX3Byb3h5X3Jlc3BvbnNlKGNvbm5lY3RfcmVzdWx0KQogICAgICAgICAgICAgICAgICAgIGlmIGNvbnRleHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHNzbF9zID0gY29udGV4dC53cmFwX3NvY2tldChzLCBzZXJ2ZXJfaG9zdG5hbWU9c2VsZi5ob3N0bmFtZSkKICAgICAgICAgICAgICAgICAgICBlbGlmIEhBU19VUkxMSUIzX1NTTF9XUkFQX1NPQ0tFVDoKICAgICAgICAgICAgICAgICAgICAgICAgc3NsX3MgPSBzc2xfd3JhcF9zb2NrZXQocywgY2FfY2VydHM9dG1wX2NhX2NlcnRfcGF0aCwgY2VydF9yZXFzPXNzbC5DRVJUX1JFUVVJUkVELCBzc2xfdmVyc2lvbj1QUk9UT0NPTCwgc2VydmVyX2hvc3RuYW1lPXNlbGYuaG9zdG5hbWUpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgc3NsX3MgPSBzc2wud3JhcF9zb2NrZXQocywgY2FfY2VydHM9dG1wX2NhX2NlcnRfcGF0aCwgY2VydF9yZXFzPXNzbC5DRVJUX1JFUVVJUkVELCBzc2xfdmVyc2lvbj1QUk9UT0NPTCkKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hfaG9zdG5hbWUoc3NsX3MuZ2V0cGVlcmNlcnQoKSwgc2VsZi5ob3N0bmFtZSkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcmFpc2UgUHJveHlFcnJvcignVW5zdXBwb3J0ZWQgcHJveHkgc2NoZW1lOiAlcy4gQ3VycmVudGx5IGFuc2libGUgb25seSBzdXBwb3J0cyBIVFRQIHByb3hpZXMuJyAlIHByb3h5X3BhcnRzLmdldCgnc2NoZW1lJykpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzLmNvbm5lY3QoKHNlbGYuaG9zdG5hbWUsIHNlbGYucG9ydCkpCiAgICAgICAgICAgICAgICBpZiBjb250ZXh0OgogICAgICAgICAgICAgICAgICAgIHNzbF9zID0gY29udGV4dC53cmFwX3NvY2tldChzLCBzZXJ2ZXJfaG9zdG5hbWU9c2VsZi5ob3N0bmFtZSkKICAgICAgICAgICAgICAgIGVsaWYgSEFTX1VSTExJQjNfU1NMX1dSQVBfU09DS0VUOgogICAgICAgICAgICAgICAgICAgIHNzbF9zID0gc3NsX3dyYXBfc29ja2V0KHMsIGNhX2NlcnRzPXRtcF9jYV9jZXJ0X3BhdGgsIGNlcnRfcmVxcz1zc2wuQ0VSVF9SRVFVSVJFRCwgc3NsX3ZlcnNpb249UFJPVE9DT0wsIHNlcnZlcl9ob3N0bmFtZT1zZWxmLmhvc3RuYW1lKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBzc2xfcyA9IHNzbC53cmFwX3NvY2tldChzLCBjYV9jZXJ0cz10bXBfY2FfY2VydF9wYXRoLCBjZXJ0X3JlcXM9c3NsLkNFUlRfUkVRVUlSRUQsIHNzbF92ZXJzaW9uPVBST1RPQ09MKQogICAgICAgICAgICAgICAgICAgIG1hdGNoX2hvc3RuYW1lKHNzbF9zLmdldHBlZXJjZXJ0KCksIHNlbGYuaG9zdG5hbWUpCiAgICAgICAgICAgICMgY2xvc2UgdGhlIHNzbCBjb25uZWN0aW9uCiAgICAgICAgICAgICNzc2xfcy51bndyYXAoKQogICAgICAgICAgICBzLmNsb3NlKCkKICAgICAgICBleGNlcHQgKHNzbC5TU0xFcnJvciwgQ2VydGlmaWNhdGVFcnJvcik6CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgYnVpbGRfc3NsX3ZhbGlkYXRpb25fZXJyb3Ioc2VsZi5ob3N0bmFtZSwgc2VsZi5wb3J0LCBwYXRoc19jaGVja2VkLCBlKQogICAgICAgIGV4Y2VwdCBzb2NrZXQuZXJyb3I6CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICAgICAgcmFpc2UgQ29ubmVjdGlvbkVycm9yKCdGYWlsZWQgdG8gY29ubmVjdCB0byAlcyBhdCBwb3J0ICVzOiAlcycgJSAoc2VsZi5ob3N0bmFtZSwgc2VsZi5wb3J0LCB0b19uYXRpdmUoZSkpKQoKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgY2xlYW51cCB0aGUgdGVtcCBmaWxlIGNyZWF0ZWQsIGRvbid0IHdvcnJ5CiAgICAgICAgICAgICMgaWYgaXQgZmFpbHMgZm9yIHNvbWUgcmVhc29uCiAgICAgICAgICAgIG9zLnJlbW92ZSh0bXBfY2FfY2VydF9wYXRoKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcGFzcwoKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgY2xlYW51cCB0aGUgdGVtcCBmaWxlIGNyZWF0ZWQsIGRvbid0IHdvcnJ5CiAgICAgICAgICAgICMgaWYgaXQgZmFpbHMgZm9yIHNvbWUgcmVhc29uCiAgICAgICAgICAgIGlmIHRvX2FkZF9jYV9jZXJ0X3BhdGg6CiAgICAgICAgICAgICAgICBvcy5yZW1vdmUodG9fYWRkX2NhX2NlcnRfcGF0aCkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHBhc3MKCiAgICAgICAgcmV0dXJuIHJlcQoKICAgIGh0dHBzX3JlcXVlc3QgPSBodHRwX3JlcXVlc3QKCgpkZWYgbWF5YmVfYWRkX3NzbF9oYW5kbGVyKHVybCwgdmFsaWRhdGVfY2VydHMpOgogICAgIyBGSVhNRTogY2hhbmdlIHRoZSBmb2xsb3dpbmcgdG8gdXNlIHRoZSBnZW5lcmljX3VybHBhcnNlIGZ1bmN0aW9uCiAgICAjICAgICAgICB0byByZW1vdmUgdGhlIGluZGV4ZWQgcmVmZXJlbmNlcyBmb3IgJ3BhcnNlZCcKICAgIHBhcnNlZCA9IHVybHBhcnNlKHVybCkKICAgIGlmIHBhcnNlZFswXSA9PSAnaHR0cHMnIGFuZCB2YWxpZGF0ZV9jZXJ0czoKICAgICAgICBpZiBub3QgSEFTX1NTTDoKICAgICAgICAgICAgcmFpc2UgTm9TU0xFcnJvcignU1NMIHZhbGlkYXRpb24gaXMgbm90IGF2YWlsYWJsZSBpbiB5b3VyIHZlcnNpb24gb2YgcHl0aG9uLiBZb3UgY2FuIHVzZSB2YWxpZGF0ZV9jZXJ0cz1GYWxzZSwnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBob3dldmVyIHRoaXMgaXMgdW5zYWZlIGFuZCBub3QgcmVjb21tZW5kZWQnKQoKICAgICAgICAjIGRvIHRoZSBjZXJ0IHZhbGlkYXRpb24KICAgICAgICBuZXRsb2MgPSBwYXJzZWRbMV0KICAgICAgICBpZiAnQCcgaW4gbmV0bG9jOgogICAgICAgICAgICBuZXRsb2MgPSBuZXRsb2Muc3BsaXQoJ0AnLCAxKVsxXQogICAgICAgIGlmICc6JyBpbiBuZXRsb2M6CiAgICAgICAgICAgIGhvc3RuYW1lLCBwb3J0ID0gbmV0bG9jLnNwbGl0KCc6JywgMSkKICAgICAgICAgICAgcG9ydCA9IGludChwb3J0KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGhvc3RuYW1lID0gbmV0bG9jCiAgICAgICAgICAgIHBvcnQgPSA0NDMKICAgICAgICAjIGNyZWF0ZSB0aGUgU1NMIHZhbGlkYXRpb24gaGFuZGxlciBhbmQKICAgICAgICAjIGFkZCBpdCB0byB0aGUgbGlzdCBvZiBoYW5kbGVycwogICAgICAgIHJldHVybiBTU0xWYWxpZGF0aW9uSGFuZGxlcihob3N0bmFtZSwgcG9ydCkKCgpkZWYgb3Blbl91cmwodXJsLCBkYXRhPU5vbmUsIGhlYWRlcnM9Tm9uZSwgbWV0aG9kPU5vbmUsIHVzZV9wcm94eT1UcnVlLAogICAgICAgICAgICAgZm9yY2U9RmFsc2UsIGxhc3RfbW9kX3RpbWU9Tm9uZSwgdGltZW91dD0xMCwgdmFsaWRhdGVfY2VydHM9VHJ1ZSwKICAgICAgICAgICAgIHVybF91c2VybmFtZT1Ob25lLCB1cmxfcGFzc3dvcmQ9Tm9uZSwgaHR0cF9hZ2VudD1Ob25lLAogICAgICAgICAgICAgZm9yY2VfYmFzaWNfYXV0aD1GYWxzZSwgZm9sbG93X3JlZGlyZWN0cz0ndXJsbGliMicsCiAgICAgICAgICAgICBjbGllbnRfY2VydD1Ob25lLCBjbGllbnRfa2V5PU5vbmUpOgogICAgJycnCiAgICBTZW5kcyBhIHJlcXVlc3QgdmlhIEhUVFAoUykgb3IgRlRQIHVzaW5nIHVybGxpYjIgKFB5dGhvbjIpIG9yIHVybGxpYiAoUHl0aG9uMykKCiAgICBEb2VzIG5vdCByZXF1aXJlIHRoZSBtb2R1bGUgZW52aXJvbm1lbnQKICAgICcnJwogICAgaGFuZGxlcnMgPSBbXQogICAgc3NsX2hhbmRsZXIgPSBtYXliZV9hZGRfc3NsX2hhbmRsZXIodXJsLCB2YWxpZGF0ZV9jZXJ0cykKICAgIGlmIHNzbF9oYW5kbGVyOgogICAgICAgIGhhbmRsZXJzLmFwcGVuZChzc2xfaGFuZGxlcikKCiAgICAjIEZJWE1FOiBjaGFuZ2UgdGhlIGZvbGxvd2luZyB0byB1c2UgdGhlIGdlbmVyaWNfdXJscGFyc2UgZnVuY3Rpb24KICAgICMgICAgICAgIHRvIHJlbW92ZSB0aGUgaW5kZXhlZCByZWZlcmVuY2VzIGZvciAncGFyc2VkJwogICAgcGFyc2VkID0gdXJscGFyc2UodXJsKQogICAgaWYgcGFyc2VkWzBdICE9ICdmdHAnOgogICAgICAgIHVzZXJuYW1lID0gdXJsX3VzZXJuYW1lCgogICAgICAgIGlmIGhlYWRlcnMgaXMgTm9uZToKICAgICAgICAgICAgaGVhZGVycyA9IHt9CgogICAgICAgIGlmIHVzZXJuYW1lOgogICAgICAgICAgICBwYXNzd29yZCA9IHVybF9wYXNzd29yZAogICAgICAgICAgICBuZXRsb2MgPSBwYXJzZWRbMV0KICAgICAgICBlbGlmICdAJyBpbiBwYXJzZWRbMV06CiAgICAgICAgICAgIGNyZWRlbnRpYWxzLCBuZXRsb2MgPSBwYXJzZWRbMV0uc3BsaXQoJ0AnLCAxKQogICAgICAgICAgICBpZiAnOicgaW4gY3JlZGVudGlhbHM6CiAgICAgICAgICAgICAgICB1c2VybmFtZSwgcGFzc3dvcmQgPSBjcmVkZW50aWFscy5zcGxpdCgnOicsIDEpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGNyZWRlbnRpYWxzCiAgICAgICAgICAgICAgICBwYXNzd29yZCA9ICcnCgogICAgICAgICAgICBwYXJzZWQgPSBsaXN0KHBhcnNlZCkKICAgICAgICAgICAgcGFyc2VkWzFdID0gbmV0bG9jCgogICAgICAgICAgICAjIHJlY29uc3RydWN0IHVybCB3aXRob3V0IGNyZWRlbnRpYWxzCiAgICAgICAgICAgIHVybCA9IHVybHVucGFyc2UocGFyc2VkKQoKICAgICAgICBpZiB1c2VybmFtZSBhbmQgbm90IGZvcmNlX2Jhc2ljX2F1dGg6CiAgICAgICAgICAgIHBhc3NtYW4gPSB1cmxsaWJfcmVxdWVzdC5IVFRQUGFzc3dvcmRNZ3JXaXRoRGVmYXVsdFJlYWxtKCkKCiAgICAgICAgICAgICMgdGhpcyBjcmVhdGVzIGEgcGFzc3dvcmQgbWFuYWdlcgogICAgICAgICAgICBwYXNzbWFuLmFkZF9wYXNzd29yZChOb25lLCBuZXRsb2MsIHVzZXJuYW1lLCBwYXNzd29yZCkKCiAgICAgICAgICAgICMgYmVjYXVzZSB3ZSBoYXZlIHB1dCBOb25lIGF0IHRoZSBzdGFydCBpdCB3aWxsIGFsd2F5cwogICAgICAgICAgICAjIHVzZSB0aGlzIHVzZXJuYW1lL3Bhc3N3b3JkIGNvbWJpbmF0aW9uIGZvciAgdXJscwogICAgICAgICAgICAjIGZvciB3aGljaCBgdGhldXJsYCBpcyBhIHN1cGVyLXVybAogICAgICAgICAgICBhdXRoaGFuZGxlciA9IHVybGxpYl9yZXF1ZXN0LkhUVFBCYXNpY0F1dGhIYW5kbGVyKHBhc3NtYW4pCiAgICAgICAgICAgIGRpZ2VzdF9hdXRoaGFuZGxlciA9IHVybGxpYl9yZXF1ZXN0LkhUVFBEaWdlc3RBdXRoSGFuZGxlcihwYXNzbWFuKQoKICAgICAgICAgICAgIyBjcmVhdGUgdGhlIEF1dGhIYW5kbGVyCiAgICAgICAgICAgIGhhbmRsZXJzLmFwcGVuZChhdXRoaGFuZGxlcikKICAgICAgICAgICAgaGFuZGxlcnMuYXBwZW5kKGRpZ2VzdF9hdXRoaGFuZGxlcikKCiAgICAgICAgZWxpZiB1c2VybmFtZSBhbmQgZm9yY2VfYmFzaWNfYXV0aDoKICAgICAgICAgICAgaGVhZGVyc1siQXV0aG9yaXphdGlvbiJdID0gYmFzaWNfYXV0aF9oZWFkZXIodXNlcm5hbWUsIHBhc3N3b3JkKQoKICAgICAgICBlbHNlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByYyA9IG5ldHJjLm5ldHJjKG9zLmVudmlyb24uZ2V0KCdORVRSQycpKQogICAgICAgICAgICAgICAgbG9naW4gPSByYy5hdXRoZW50aWNhdG9ycyhwYXJzZWRbMV0pCiAgICAgICAgICAgIGV4Y2VwdCBJT0Vycm9yOgogICAgICAgICAgICAgICAgbG9naW4gPSBOb25lCgogICAgICAgICAgICBpZiBsb2dpbjoKICAgICAgICAgICAgICAgIHVzZXJuYW1lLCBfLCBwYXNzd29yZCA9IGxvZ2luCiAgICAgICAgICAgICAgICBpZiB1c2VybmFtZSBhbmQgcGFzc3dvcmQ6CiAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1siQXV0aG9yaXphdGlvbiJdID0gYmFzaWNfYXV0aF9oZWFkZXIodXNlcm5hbWUsIHBhc3N3b3JkKQoKICAgIGlmIG5vdCB1c2VfcHJveHk6CiAgICAgICAgcHJveHloYW5kbGVyID0gdXJsbGliX3JlcXVlc3QuUHJveHlIYW5kbGVyKHt9KQogICAgICAgIGhhbmRsZXJzLmFwcGVuZChwcm94eWhhbmRsZXIpCgogICAgaWYgSEFTX1NTTENPTlRFWFQgYW5kIG5vdCB2YWxpZGF0ZV9jZXJ0czoKICAgICAgICAjIEluIDIuNy45LCB0aGUgZGVmYXVsdCBjb250ZXh0IHZhbGlkYXRlcyBjZXJ0aWZpY2F0ZXMKICAgICAgICBjb250ZXh0ID0gU1NMQ29udGV4dChzc2wuUFJPVE9DT0xfU1NMdjIzKQogICAgICAgIGNvbnRleHQub3B0aW9ucyB8PSBzc2wuT1BfTk9fU1NMdjIKICAgICAgICBjb250ZXh0Lm9wdGlvbnMgfD0gc3NsLk9QX05PX1NTTHYzCiAgICAgICAgY29udGV4dC52ZXJpZnlfbW9kZSA9IHNzbC5DRVJUX05PTkUKICAgICAgICBjb250ZXh0LmNoZWNrX2hvc3RuYW1lID0gRmFsc2UKICAgICAgICBoYW5kbGVycy5hcHBlbmQoSFRUUFNDbGllbnRBdXRoSGFuZGxlcihjbGllbnRfY2VydD1jbGllbnRfY2VydCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRfa2V5PWNsaWVudF9rZXksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dD1jb250ZXh0KSkKICAgIGVsaWYgY2xpZW50X2NlcnQ6CiAgICAgICAgaGFuZGxlcnMuYXBwZW5kKEhUVFBTQ2xpZW50QXV0aEhhbmRsZXIoY2xpZW50X2NlcnQ9Y2xpZW50X2NlcnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50X2tleT1jbGllbnRfa2V5KSkKCiAgICAjIHByZS0yLjYgdmVyc2lvbnMgb2YgcHl0aG9uIGNhbm5vdCB1c2UgdGhlIGN1c3RvbSBodHRwcwogICAgIyBoYW5kbGVyLCBzaW5jZSB0aGUgc29ja2V0IGNsYXNzIGlzIGxhY2tpbmcgY3JlYXRlX2Nvbm5lY3Rpb24uCiAgICAjIFNvbWUgcHl0aG9uIGJ1aWxkcyBsYWNrIEhUVFBTIHN1cHBvcnQuCiAgICBpZiBoYXNhdHRyKHNvY2tldCwgJ2NyZWF0ZV9jb25uZWN0aW9uJykgYW5kIEN1c3RvbUhUVFBTSGFuZGxlcjoKICAgICAgICBoYW5kbGVycy5hcHBlbmQoQ3VzdG9tSFRUUFNIYW5kbGVyKQoKICAgIGhhbmRsZXJzLmFwcGVuZChSZWRpcmVjdEhhbmRsZXJGYWN0b3J5KGZvbGxvd19yZWRpcmVjdHMsIHZhbGlkYXRlX2NlcnRzKSkKCiAgICBvcGVuZXIgPSB1cmxsaWJfcmVxdWVzdC5idWlsZF9vcGVuZXIoKmhhbmRsZXJzKQogICAgdXJsbGliX3JlcXVlc3QuaW5zdGFsbF9vcGVuZXIob3BlbmVyKQoKICAgIGRhdGEgPSB0b19ieXRlcyhkYXRhLCBub25zdHJpbmc9J3Bhc3N0aHJ1JykKICAgIGlmIG1ldGhvZDoKICAgICAgICBpZiBtZXRob2QudXBwZXIoKSBub3QgaW4gKCdPUFRJT05TJywnR0VUJywnSEVBRCcsJ1BPU1QnLCdQVVQnLCdERUxFVEUnLCdUUkFDRScsJ0NPTk5FQ1QnLCdQQVRDSCcpOgogICAgICAgICAgICByYWlzZSBDb25uZWN0aW9uRXJyb3IoJ2ludmFsaWQgSFRUUCByZXF1ZXN0IG1ldGhvZDsgJXMnICUgbWV0aG9kLnVwcGVyKCkpCiAgICAgICAgcmVxdWVzdCA9IFJlcXVlc3RXaXRoTWV0aG9kKHVybCwgbWV0aG9kLnVwcGVyKCksIGRhdGEpCiAgICBlbHNlOgogICAgICAgIHJlcXVlc3QgPSB1cmxsaWJfcmVxdWVzdC5SZXF1ZXN0KHVybCwgZGF0YSkKCiAgICAjIGFkZCB0aGUgY3VzdG9tIGFnZW50IGhlYWRlciwgdG8gaGVscCBwcmV2ZW50IGlzc3VlcwogICAgIyB3aXRoIHNpdGVzIHRoYXQgYmxvY2sgdGhlIGRlZmF1bHQgdXJsbGliIGFnZW50IHN0cmluZwogICAgaWYgaHR0cF9hZ2VudDoKICAgICAgICByZXF1ZXN0LmFkZF9oZWFkZXIoJ1VzZXItYWdlbnQnLCBodHRwX2FnZW50KQoKICAgICMgQ2FjaGUgY29udHJvbAogICAgIyBFaXRoZXIgd2UgZGlyZWN0bHkgZm9yY2UgYSBjYWNoZSByZWZyZXNoCiAgICBpZiBmb3JjZToKICAgICAgICByZXF1ZXN0LmFkZF9oZWFkZXIoJ2NhY2hlLWNvbnRyb2wnLCAnbm8tY2FjaGUnKQogICAgIyBvciB3ZSBkbyBpdCBpZiB0aGUgb3JpZ2luYWwgaXMgbW9yZSByZWNlbnQgdGhhbiBvdXIgY29weQogICAgZWxpZiBsYXN0X21vZF90aW1lOgogICAgICAgIHRzdGFtcCA9IGxhc3RfbW9kX3RpbWUuc3RyZnRpbWUoJyVhLCAlZCAlYiAlWSAlSDolTTolUyArMDAwMCcpCiAgICAgICAgcmVxdWVzdC5hZGRfaGVhZGVyKCdJZi1Nb2RpZmllZC1TaW5jZScsIHRzdGFtcCkKCiAgICAjIHVzZXIgZGVmaW5lZCBoZWFkZXJzIG5vdywgd2hpY2ggbWF5IG92ZXJyaWRlIHRoaW5ncyB3ZSd2ZSBzZXQgYWJvdmUKICAgIGlmIGhlYWRlcnM6CiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoaGVhZGVycywgZGljdCk6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImhlYWRlcnMgcHJvdmlkZWQgdG8gZmV0Y2hfdXJsKCkgbXVzdCBiZSBhIGRpY3QiKQogICAgICAgIGZvciBoZWFkZXIgaW4gaGVhZGVyczoKICAgICAgICAgICAgcmVxdWVzdC5hZGRfaGVhZGVyKGhlYWRlciwgaGVhZGVyc1toZWFkZXJdKQoKICAgIHVybG9wZW5fYXJncyA9IFtyZXF1ZXN0LCBOb25lXQogICAgaWYgc3lzLnZlcnNpb25faW5mbyA+PSAoMiw2LDApOgogICAgICAgICMgdXJsb3BlbiBpbiBweXRob24gcHJpb3IgdG8gMi42LjAgZGlkIG5vdAogICAgICAgICMgaGF2ZSBhIHRpbWVvdXQgcGFyYW1ldGVyCiAgICAgICAgdXJsb3Blbl9hcmdzLmFwcGVuZCh0aW1lb3V0KQoKICAgIHIgPSB1cmxsaWJfcmVxdWVzdC51cmxvcGVuKCp1cmxvcGVuX2FyZ3MpCiAgICByZXR1cm4gcgoKIwojIE1vZHVsZS1yZWxhdGVkIGZ1bmN0aW9ucwojCgoKZGVmIGJhc2ljX2F1dGhfaGVhZGVyKHVzZXJuYW1lLCBwYXNzd29yZCk6CiAgICAiIiJUYWtlcyBhIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBhbmQgcmV0dXJucyBhIGJ5dGUgc3RyaW5nIHN1aXRhYmxlIGZvcgogICAgdXNpbmcgYXMgdmFsdWUgb2YgYW4gQXV0aG9yaXphdGlvbiBoZWFkZXIgdG8gZG8gYmFzaWMgYXV0aC4KICAgICIiIgogICAgcmV0dXJuIGIoIkJhc2ljICVzIikgJSBiYXNlNjQuYjY0ZW5jb2RlKHRvX2J5dGVzKCIlczolcyIgJSAodXNlcm5hbWUsIHBhc3N3b3JkKSwgZXJyb3JzPSdzdXJyb2dhdGVfb3Jfc3RyaWN0JykpCgoKZGVmIHVybF9hcmd1bWVudF9zcGVjKCk6CiAgICAnJycKICAgIENyZWF0ZXMgYW4gYXJndW1lbnQgc3BlYyB0aGF0IGNhbiBiZSB1c2VkIHdpdGggYW55IG1vZHVsZQogICAgdGhhdCB3aWxsIGJlIHJlcXVlc3RpbmcgY29udGVudCB2aWEgdXJsbGliL3VybGxpYjIKICAgICcnJwogICAgcmV0dXJuIGRpY3QoCiAgICAgICAgdXJsPWRpY3QoKSwKICAgICAgICBmb3JjZT1kaWN0KGRlZmF1bHQ9J25vJywgYWxpYXNlcz1bJ3RoaXJzdHknXSwgdHlwZT0nYm9vbCcpLAogICAgICAgIGh0dHBfYWdlbnQ9ZGljdChkZWZhdWx0PSdhbnNpYmxlLWh0dHBnZXQnKSwKICAgICAgICB1c2VfcHJveHk9ZGljdChkZWZhdWx0PSd5ZXMnLCB0eXBlPSdib29sJyksCiAgICAgICAgdmFsaWRhdGVfY2VydHM9ZGljdChkZWZhdWx0PSd5ZXMnLCB0eXBlPSdib29sJyksCiAgICAgICAgdXJsX3VzZXJuYW1lPWRpY3QocmVxdWlyZWQ9RmFsc2UpLAogICAgICAgIHVybF9wYXNzd29yZD1kaWN0KHJlcXVpcmVkPUZhbHNlLCBub19sb2c9VHJ1ZSksCiAgICAgICAgZm9yY2VfYmFzaWNfYXV0aD1kaWN0KHJlcXVpcmVkPUZhbHNlLCB0eXBlPSdib29sJywgZGVmYXVsdD0nbm8nKSwKICAgICAgICBjbGllbnRfY2VydD1kaWN0KHJlcXVpcmVkPUZhbHNlLCB0eXBlPSdwYXRoJywgZGVmYXVsdD1Ob25lKSwKICAgICAgICBjbGllbnRfa2V5PWRpY3QocmVxdWlyZWQ9RmFsc2UsIHR5cGU9J3BhdGgnLCBkZWZhdWx0PU5vbmUpLAogICAgKQoKCmRlZiBmZXRjaF91cmwobW9kdWxlLCB1cmwsIGRhdGE9Tm9uZSwgaGVhZGVycz1Ob25lLCBtZXRob2Q9Tm9uZSwKICAgICAgICAgICAgICB1c2VfcHJveHk9VHJ1ZSwgZm9yY2U9RmFsc2UsIGxhc3RfbW9kX3RpbWU9Tm9uZSwgdGltZW91dD0xMCk6CiAgICAiIiJTZW5kcyBhIHJlcXVlc3QgdmlhIEhUVFAoUykgb3IgRlRQIChuZWVkcyB0aGUgbW9kdWxlIGFzIHBhcmFtZXRlcikKCiAgICA6YXJnIG1vZHVsZTogVGhlIEFuc2libGVNb2R1bGUgKHVzZWQgdG8gZ2V0IHVzZXJuYW1lLCBwYXNzd29yZCBldGMuIChzLmIuKS4KICAgIDphcmcgdXJsOiAgICAgICAgICAgICBUaGUgdXJsIHRvIHVzZS4KCiAgICA6a3dhcmcgZGF0YTogICAgICAgICAgVGhlIGRhdGEgdG8gYmUgc2VudCAoaW4gY2FzZSBvZiBQT1NUL1BVVCkuCiAgICA6a3dhcmcgaGVhZGVyczogICAgICAgQSBkaWN0IHdpdGggdGhlIHJlcXVlc3QgaGVhZGVycy4KICAgIDprd2FyZyBtZXRob2Q6ICAgICAgICAiUE9TVCIsICJQVVQiLCBldGMuCiAgICA6a3dhcmcgYm9vbGVhbiB1c2VfcHJveHk6ICAgICBEZWZhdWx0OiBUcnVlCiAgICA6a3dhcmcgYm9vbGVhbiBmb3JjZTogSWYgVHJ1ZTogRG8gbm90IGdldCBhIGNhY2hlZCBjb3B5IChEZWZhdWx0OiBGYWxzZSkKICAgIDprd2FyZyBsYXN0X21vZF90aW1lOiBEZWZhdWx0OiBOb25lCiAgICA6a3dhcmcgaW50IHRpbWVvdXQ6ICAgRGVmYXVsdDogMTAKCiAgICA6cmV0dXJuczogQSB0dXBsZSBvZiAoKipyZXNwb25zZSoqLCAqKmluZm8qKikuIFVzZSBgYHJlc3BvbnNlLmJvZHkoKWBgIHRvIHJlYWQgdGhlIGRhdGEuCiAgICAgICAgVGhlICoqaW5mbyoqIGNvbnRhaW5zIHRoZSAnc3RhdHVzJyBhbmQgb3RoZXIgbWV0YSBkYXRhLiBXaGVuIGEgSHR0cEVycm9yIChzdGF0dXMgPiA0MDApCiAgICAgICAgb2NjdXJyZWQgdGhlbiBgYGluZm9bJ2JvZHknXWBgIGNvbnRhaW5zIHRoZSBlcnJvciByZXNwb25zZSBkYXRhOjoKCiAgICBFeGFtcGxlOjoKCiAgICAgICAgZGF0YT17Li4ufQogICAgICAgIHJlc3AsIGluZm8gPSBmZXRjaF91cmwobW9kdWxlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHA6Ly9leGFtcGxlLmNvbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhPW1vZHVsZS5qc29uaWZ5KGRhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXI9e0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q9IlBPU1QiKQogICAgICAgIHN0YXR1c19jb2RlID0gaW5mb1sic3RhdHVzIl0KICAgICAgICBib2R5ID0gcmVzcC5yZWFkKCkKICAgICAgICBpZiBzdGF0dXNfY29kZSA+PSA0MDAgOgogICAgICAgICAgICBib2R5ID0gaW5mb1snYm9keSddCiAgICAiIiIKCiAgICBpZiBub3QgSEFTX1VSTFBBUlNFOgogICAgICAgIG1vZHVsZS5mYWlsX2pzb24obXNnPSd1cmxwYXJzZSBpcyBub3QgaW5zdGFsbGVkJykKCiAgICAjIEdldCB2YWxpZGF0ZV9jZXJ0cyBmcm9tIHRoZSBtb2R1bGUgcGFyYW1zCiAgICB2YWxpZGF0ZV9jZXJ0cyA9IG1vZHVsZS5wYXJhbXMuZ2V0KCd2YWxpZGF0ZV9jZXJ0cycsIFRydWUpCgogICAgdXNlcm5hbWUgPSBtb2R1bGUucGFyYW1zLmdldCgndXJsX3VzZXJuYW1lJywgJycpCiAgICBwYXNzd29yZCA9IG1vZHVsZS5wYXJhbXMuZ2V0KCd1cmxfcGFzc3dvcmQnLCAnJykKICAgIGh0dHBfYWdlbnQgPSBtb2R1bGUucGFyYW1zLmdldCgnaHR0cF9hZ2VudCcsIE5vbmUpCiAgICBmb3JjZV9iYXNpY19hdXRoID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2ZvcmNlX2Jhc2ljX2F1dGgnLCAnJykKCiAgICBmb2xsb3dfcmVkaXJlY3RzID0gbW9kdWxlLnBhcmFtcy5nZXQoJ2ZvbGxvd19yZWRpcmVjdHMnLCAndXJsbGliMicpCgogICAgY2xpZW50X2NlcnQgPSBtb2R1bGUucGFyYW1zLmdldCgnY2xpZW50X2NlcnQnKQogICAgY2xpZW50X2tleSA9IG1vZHVsZS5wYXJhbXMuZ2V0KCdjbGllbnRfa2V5JykKCiAgICByID0gTm9uZQogICAgaW5mbyA9IGRpY3QodXJsPXVybCkKICAgIHRyeToKICAgICAgICByID0gb3Blbl91cmwodXJsLCBkYXRhPWRhdGEsIGhlYWRlcnM9aGVhZGVycywgbWV0aG9kPW1ldGhvZCwKICAgICAgICAgICAgICAgICAgICAgdXNlX3Byb3h5PXVzZV9wcm94eSwgZm9yY2U9Zm9yY2UsIGxhc3RfbW9kX3RpbWU9bGFzdF9tb2RfdGltZSwgdGltZW91dD10aW1lb3V0LAogICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZV9jZXJ0cz12YWxpZGF0ZV9jZXJ0cywgdXJsX3VzZXJuYW1lPXVzZXJuYW1lLAogICAgICAgICAgICAgICAgICAgICB1cmxfcGFzc3dvcmQ9cGFzc3dvcmQsIGh0dHBfYWdlbnQ9aHR0cF9hZ2VudCwgZm9yY2VfYmFzaWNfYXV0aD1mb3JjZV9iYXNpY19hdXRoLAogICAgICAgICAgICAgICAgICAgICBmb2xsb3dfcmVkaXJlY3RzPWZvbGxvd19yZWRpcmVjdHMsIGNsaWVudF9jZXJ0PWNsaWVudF9jZXJ0LAogICAgICAgICAgICAgICAgICAgICBjbGllbnRfa2V5PWNsaWVudF9rZXkpCiAgICAgICAgaW5mby51cGRhdGUoci5pbmZvKCkpCiAgICAgICAgaW5mby51cGRhdGUoZGljdChtc2c9Ik9LICglcyBieXRlcykiICUgci5oZWFkZXJzLmdldCgnQ29udGVudC1MZW5ndGgnLCAndW5rbm93bicpLCB1cmw9ci5nZXR1cmwoKSwgc3RhdHVzPXIuY29kZSkpCiAgICBleGNlcHQgTm9TU0xFcnJvcjoKICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgZGlzdHJpYnV0aW9uID0gZ2V0X2Rpc3RyaWJ1dGlvbigpCiAgICAgICAgaWYgZGlzdHJpYnV0aW9uIGlzIG5vdCBOb25lIGFuZCBkaXN0cmlidXRpb24ubG93ZXIoKSA9PSAncmVkaGF0JzoKICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9JyVzLiBZb3UgY2FuIGFsc28gaW5zdGFsbCBweXRob24tc3NsIGZyb20gRVBFTCcgJSBzdHIoZSkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9JyVzJyAlIHN0cihlKSkKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yLCBWYWx1ZUVycm9yKToKICAgICAgICBlID0gZ2V0X2V4Y2VwdGlvbigpCiAgICAgICAgbW9kdWxlLmZhaWxfanNvbihtc2c9c3RyKGUpKQogICAgZXhjZXB0IHVybGxpYl9lcnJvci5IVFRQRXJyb3I6CiAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgIHRyeToKICAgICAgICAgICAgYm9keSA9IGUucmVhZCgpCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICBib2R5ID0gJycKCiAgICAgICAgIyBUcnkgdG8gYWRkIGV4Y2VwdGlvbiBpbmZvIHRvIHRoZSBvdXRwdXQgYnV0IGRvbid0IGZhaWwgaWYgd2UgY2FuJ3QKICAgICAgICBleGNfaW5mbyA9IGUuaW5mbygpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpbmZvLnVwZGF0ZShkaWN0KCoqZS5pbmZvKCkpKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcGFzcwoKICAgICAgICBpbmZvLnVwZGF0ZSh7J21zZyc6IHN0cihlKSwgJ2JvZHknOiBib2R5LCAnc3RhdHVzJzogZS5jb2RlfSkKCiAgICBleGNlcHQgdXJsbGliX2Vycm9yLlVSTEVycm9yOgogICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKICAgICAgICBjb2RlID0gaW50KGdldGF0dHIoZSwgJ2NvZGUnLCAtMSkpCiAgICAgICAgaW5mby51cGRhdGUoZGljdChtc2c9IlJlcXVlc3QgZmFpbGVkOiAlcyIgJSBzdHIoZSksIHN0YXR1cz1jb2RlKSkKICAgIGV4Y2VwdCBzb2NrZXQuZXJyb3I6CiAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgIGluZm8udXBkYXRlKGRpY3QobXNnPSJDb25uZWN0aW9uIGZhaWx1cmU6ICVzIiAlIHN0cihlKSwgc3RhdHVzPS0xKSkKICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgZSA9IGdldF9leGNlcHRpb24oKQogICAgICAgIGluZm8udXBkYXRlKGRpY3QobXNnPSJBbiB1bmtub3duIGVycm9yIG9jY3VycmVkOiAlcyIgJSBzdHIoZSksIHN0YXR1cz0tMSkpCgogICAgcmV0dXJuIHIsIGluZm8KUEsDBBQAAAAAANa7K0sYF3L1AREAAAERAAAkAAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvc2l4L19faW5pdF9fLnB5IyBUaGlzIGNvZGUgaXMgcGFydCBvZiBBbnNpYmxlLCBidXQgaXMgYW4gaW5kZXBlbmRlbnQgY29tcG9uZW50LgojIFRoaXMgcGFydGljdWxhciBmaWxlIHNuaXBwZXQsIGFuZCB0aGlzIGZpbGUgc25pcHBldCBvbmx5LCBpcyBCU0QgbGljZW5zZWQuCiMgTW9kdWxlcyB5b3Ugd3JpdGUgdXNpbmcgdGhpcyBzbmlwcGV0LCB3aGljaCBpcyBlbWJlZGRlZCBkeW5hbWljYWxseSBieSBBbnNpYmxlCiMgc3RpbGwgYmVsb25nIHRvIHRoZSBhdXRob3Igb2YgdGhlIG1vZHVsZSwgYW5kIG1heSBhc3NpZ24gdGhlaXIgb3duIGxpY2Vuc2UKIyB0byB0aGUgY29tcGxldGUgd29yay4KIwojIENvcHlyaWdodCAoYykgMjAxNywgVG9zaGlvIEt1cmF0b21pIDx0a3VyYXRvbWlAYW5zaWJsZS5jb20+CiMKIyBUaGlzIGNvZGUgaXMgYmFzZWQgb24gY29kZSBmcm9tIEFzdHJvcHkgYW5kIHJldGFpbnMgdGhlaXIgMy1jbGF1c2UgQlNEIGxpY2Vuc2UKIyByZXByb2R1Y2VkIGJlbG93OgojCiMgQ29weXJpZ2h0IChjKSAyMDExLTIwMTYsIEFzdHJvcHkgRGV2ZWxvcGVycwojCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dAojIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OgojCiMgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMKIyAgIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLgojICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLAojICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbgojICAgYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uCiMgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBBc3Ryb3B5IFRlYW0gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heQojICAgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dAojICAgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLgojCiMgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyAiQVMgSVMiCiMgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRQojIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRQojIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUKIyBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTAojIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SCiMgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIKIyBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLAojIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFCiMgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS4KIwojIEFzdHJvcHkgTGljZW5zZTogaHR0cHM6Ly9naXRodWIuY29tL2FzdHJvcHkvYXN0cm9weS9ibG9iL2NmMzI2NWU0MmEwZGI4ZTAwYmI5MDY0NGRiMzdjODE1MGY1YWMwMGMvbGljZW5zZXMvTElDRU5TRS5yc3QKIyBBc3Ryb3B5IENvZGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hc3Ryb3B5L2FzdHJvcHkvYmxvYi9jZjMyNjVlNDJhMGRiOGUwMGJiOTA2NDRkYjM3YzgxNTBmNWFjMDBjL2FzdHJvcHkvZXh0ZXJuL3NpeC5weQoKIiIiCkhhbmRsZSBsb2FkaW5nIHNpeCBwYWNrYWdlIGZyb20gc3lzdGVtIG9yIGZyb20gdGhlIGJ1bmRsZWQgY29weQoiIiIKZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhYnNvbHV0ZV9pbXBvcnQKCmltcG9ydCBpbXAgYXMgX2ltcAppbXBvcnQgc3lzIGFzIF9zeXMKCnRyeToKICAgIGZyb20gZGlzdHV0aWxzLnZlcnNpb24gaW1wb3J0IExvb3NlVmVyc2lvbiBhcyBfTG9vc2VWZXJzaW9uCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICMgU29tZSBwbGF0Zm9ybXMgKmNvdWdoKlNvbGFyaXMqY291Z2gqIGRvbid0IHNoaXAgdGhlIHdob2xlIHN0ZGxpYgogICAgX0xvb3NlVmVyc2lvbiA9IE5vbmUKCnRyeToKICAgIGltcG9ydCBzaXggYXMgX3N5c3RlbV9zaXgKZXhjZXB0IEltcG9ydEVycm9yOgogICAgX3N5c3RlbV9zaXggPSBOb25lCgpmcm9tIC4gaW1wb3J0IF9zaXggYXMgX2J1bmRsZWRfc2l4CgoKZGVmIF9maW5kX21vZHVsZShuYW1lLCBwYXRoPU5vbmUpOgogICAgIiIiQWx0ZXJuYXRpdmUgdG8gYGltcC5maW5kX21vZHVsZWAgdGhhdCBjYW4gYWxzbyBzZWFyY2ggaW4gc3VicGFja2FnZXMiIiIKICAgIHBhcnRzID0gbmFtZS5zcGxpdCgnLicpCgogICAgZm9yIHBhcnQgaW4gcGFydHM6CiAgICAgICAgaWYgcGF0aCBpcyBub3QgTm9uZToKICAgICAgICAgICAgcGF0aCA9IFtwYXRoXQogICAgICAgIGZoLCBwYXRoLCBkZXNjciA9IF9pbXAuZmluZF9tb2R1bGUocGFydCwgcGF0aCkKICAgIHJldHVybiBmaCwgcGF0aCwgZGVzY3IKCgpkZWYgX2dldF9idW5kbGVkX3NpeF9zb3VyY2UoKToKICAgICMgU3BlY2lhbCBpbXBvcnQgbG9hZGVyICh6aXBpbXBvcnQgZm9yIGluc3RhbmNlKQogICAgZm91bmQgPSBGYWxzZQogICAgZm9yIHBhdGggaW4gX3N5cy5wYXRoOgogICAgICAgIGltcG9ydGVyID0gX3N5cy5wYXRoX2ltcG9ydGVyX2NhY2hlLmdldChwYXRoKQogICAgICAgIGlmIGltcG9ydGVyOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBmb3VuZCA9IGltcG9ydGVyLmZpbmRfbW9kdWxlKCdhbnNpYmxlL21vZHVsZV91dGlscy9zaXgvX3NpeCcpCiAgICAgICAgICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGlmIGZvdW5kOgogICAgICAgICAgICAgICAgYnJlYWsKICAgIGVsc2U6CiAgICAgICAgcmFpc2UgSW1wb3J0RXJyb3IoIkNvdWxkIG5vdCBmaW5kIGFuc2libGUubW9kdWxlX3V0aWxzLnNpeC5fc2l4IikKCiAgICBtb2R1bGVfc291cmNlID0gaW1wb3J0ZXIuZ2V0X3NvdXJjZSgnYW5zaWJsZS9tb2R1bGVfdXRpbHMvc2l4L19zaXgnKQogICAgcmV0dXJuIG1vZHVsZV9zb3VyY2UKCgpkZWYgX2dldF9zaXhfc291cmNlKCk6CiAgICAiIiJJbXBvcnQgdGhlIG5ld2VzdCB2ZXJzaW9uIG9mIHRoZSBzaXggbGlicmFyeSB0aGF0J3MgYXZhaWxhYmxlIiIiCiAgICBtb2RfaW5mbyA9IE5vbmUKICAgIHRyeToKICAgICAgICBpZiBfc3lzdGVtX3NpeCBhbmQgX0xvb3NlVmVyc2lvbiBhbmQgXAogICAgICAgICAgICAgICAgX0xvb3NlVmVyc2lvbihfc3lzdGVtX3NpeC5fX3ZlcnNpb25fXykgPj0gX0xvb3NlVmVyc2lvbihfYnVuZGxlZF9zaXguX192ZXJzaW9uX18pOgogICAgICAgICAgICBtb2RfaW5mbyA9IF9maW5kX21vZHVsZSgnc2l4JykKICAgIGV4Y2VwdDoKICAgICAgICAjIEFueSBlcnJvcnMgZmluZGluZyB0aGUgc3lzdGVtIGxpYnJhcnksIHVzZSBvdXIgYnVuZGxlZCBsaWIgaW5zdGVhZAogICAgICAgIHBhc3MKCiAgICBpZiBub3QgbW9kX2luZm86CiAgICAgICAgdHJ5OgogICAgICAgICAgICBtb2RfaW5mbyA9IF9maW5kX21vZHVsZSgnYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4Ll9zaXgnKQogICAgICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICAgICAgIyB6aXBpbXBvcnQKICAgICAgICAgICAgbW9kdWxlX3NvdXJjZSA9IF9nZXRfYnVuZGxlZF9zaXhfc291cmNlKCkKICAgICAgICAgICAgcmV0dXJuIG1vZHVsZV9zb3VyY2UKCiAgICByZXR1cm4gbW9kX2luZm9bMF0ucmVhZCgpCgpzb3VyY2UgPSBfZ2V0X3NpeF9zb3VyY2UoKQpleGVjKHNvdXJjZSkKUEsDBBQAAAAAANa7K0u12AQGJTAAACUwAAAdAAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvX3RleHQucHkjIFRoaXMgY29kZSBpcyBwYXJ0IG9mIEFuc2libGUsIGJ1dCBpcyBhbiBpbmRlcGVuZGVudCBjb21wb25lbnQuCiMgVGhpcyBwYXJ0aWN1bGFyIGZpbGUgc25pcHBldCwgYW5kIHRoaXMgZmlsZSBzbmlwcGV0IG9ubHksIGlzIEJTRCBsaWNlbnNlZC4KIyBNb2R1bGVzIHlvdSB3cml0ZSB1c2luZyB0aGlzIHNuaXBwZXQsIHdoaWNoIGlzIGVtYmVkZGVkIGR5bmFtaWNhbGx5IGJ5IEFuc2libGUKIyBzdGlsbCBiZWxvbmcgdG8gdGhlIGF1dGhvciBvZiB0aGUgbW9kdWxlLCBhbmQgbWF5IGFzc2lnbiB0aGVpciBvd24gbGljZW5zZQojIHRvIHRoZSBjb21wbGV0ZSB3b3JrLgojCiMgQ29weXJpZ2h0IChjKSwgVG9zaGlvIEt1cmF0b21pIDxhLmJhZGdlckBnbWFpbC5jb20+LCAyMDE2CiMKIyBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLAojIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDoKIwojICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQKIyAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwKIyAgICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24KIyAgICAgIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgojCiMgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyAiQVMgSVMiIEFORAojIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVECiMgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELgojIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULAojIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywKIyBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MKIyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUCiMgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFCiMgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCiMKCiIiIgouLiB3YXJuOjogVGhpcyBtb2R1bGVfdXRpbCBpcyBjdXJyZW50bHkgaW50ZXJuYWwgaW1wbGVtZW50YXRpb24uCiAgICBXZSB3YW50IHRvIGV2YWx1YXRlIHRoaXMgY29kZSBmb3Igc3RhYmlsaXR5IGFuZCBBUEkgc3VpdGFiaWxpdHkgYmVmb3JlCiAgICBtYWtpbmcgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcy4gIFRoZSBBUEkgbWF5IGNoYW5nZSBiZXR3ZWVuCiAgICByZWxlYXNlcy4gIERvIG5vdCB1c2UgdGhpcyB1bmxlc3MgeW91IGFyZSB3aWxsaW5nIHRvIHBvcnQgeW91ciBtb2R1bGUgY29kZS4KIiIiCmltcG9ydCBjb2RlY3MKCmZyb20gYW5zaWJsZS5tb2R1bGVfdXRpbHMuc2l4IGltcG9ydCBQWTMsIHRleHRfdHlwZSwgYmluYXJ5X3R5cGUKCgp0cnk6CiAgICBjb2RlY3MubG9va3VwX2Vycm9yKCdzdXJyb2dhdGVlc2NhcGUnKQogICAgSEFTX1NVUlJPR0FURUVTQ0FQRSA9IFRydWUKZXhjZXB0IExvb2t1cEVycm9yOgogICAgSEFTX1NVUlJPR0FURUVTQ0FQRSA9IEZhbHNlCgoKX0NPTVBPU0VEX0VSUk9SX0hBTkRMRVJTID0gZnJvemVuc2V0KChOb25lLCAnc3Vycm9nYXRlX29yX2VzY2FwZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3Vycm9nYXRlX29yX3N0cmljdCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3Vycm9nYXRlX3RoZW5fcmVwbGFjZScpKQoKCmRlZiB0b19ieXRlcyhvYmosIGVuY29kaW5nPSd1dGYtOCcsIGVycm9ycz1Ob25lLCBub25zdHJpbmc9J3NpbXBsZXJlcHInKToKICAgICIiIk1ha2Ugc3VyZSB0aGF0IGEgc3RyaW5nIGlzIGEgYnl0ZSBzdHJpbmcKCiAgICA6YXJnIG9iajogQW4gb2JqZWN0IHRvIG1ha2Ugc3VyZSBpcyBhIGJ5dGUgc3RyaW5nLiAgSW4gbW9zdCBjYXNlcyB0aGlzCiAgICAgICAgd2lsbCBiZSBlaXRoZXIgYSB0ZXh0IHN0cmluZyBvciBhIGJ5dGUgc3RyaW5nLiAgSG93ZXZlciwgd2l0aAogICAgICAgIGBgbm9uc3RyaW5nPSdzaW1wbGVyZXByJ2BgLCB0aGlzIGNhbiBiZSB1c2VkIGFzIGEgdHJhY2ViYWNrLWZyZWUKICAgICAgICB2ZXJzaW9uIG9mIGBgc3RyKG9iailgYC4KICAgIDprd2FyZyBlbmNvZGluZzogVGhlIGVuY29kaW5nIHRvIHVzZSB0byB0cmFuc2Zvcm0gZnJvbSBhIHRleHQgc3RyaW5nIHRvCiAgICAgICAgYSBieXRlIHN0cmluZy4gIERlZmF1bHRzIHRvIHVzaW5nICd1dGYtOCcuCiAgICA6a3dhcmcgZXJyb3JzOiBUaGUgZXJyb3IgaGFuZGxlciB0byB1c2UgaWYgdGhlIHRleHQgc3RyaW5nIGlzIG5vdAogICAgICAgIGVuY29kYWJsZSB1c2luZyB0aGUgc3BlY2lmaWVkIGVuY29kaW5nLiAgQW55IHZhbGlkIGBjb2RlY3MgZXJyb3IKICAgICAgICBoYW5kbGVyIDxodHRwczovL2RvY3MucHl0aG9uLm9yZy8yL2xpYnJhcnkvY29kZWNzLmh0bWwjY29kZWMtYmFzZS1jbGFzc2VzPmBfCiAgICAgICAgbWF5IGJlIHNwZWNpZmllZC4gVGhlcmUgYXJlIHRocmVlIGFkZGl0aW9uYWwgZXJyb3Igc3RyYXRlZ2llcwogICAgICAgIHNwZWNpZmljYWxseSBhaW1lZCBhdCBoZWxwaW5nIHBlb3BsZSB0byBwb3J0IGNvZGUuICBUaGUgZmlyc3QgdHdvIGFyZToKCiAgICAgICAgICAgIDpzdXJyb2dhdGVfb3Jfc3RyaWN0OiBXaWxsIHVzZSBgYHN1cnJvZ2F0ZWVzY2FwZWBgIGlmIGl0IGlzIGEgdmFsaWQKICAgICAgICAgICAgICAgIGhhbmRsZXIsIG90aGVyd2lzZSBpdCB3aWxsIHVzZSBgYHN0cmljdGBgCiAgICAgICAgICAgIDpzdXJyb2dhdGVfb3JfcmVwbGFjZTogV2lsbCB1c2UgYGBzdXJyb2dhdGVlc2NhcGVgYCBpZiBpdCBpcyBhIHZhbGlkCiAgICAgICAgICAgICAgICBoYW5kbGVyLCBvdGhlcndpc2UgaXQgd2lsbCB1c2UgYGByZXBsYWNlYGAuCgogICAgICAgIEJlY2F1c2UgYGBzdXJyb2dhdGVlc2NhcGVgYCB3YXMgYWRkZWQgaW4gUHl0aG9uMyB0aGlzIHVzdWFsbHkgbWVhbnMgdGhhdAogICAgICAgIFB5dGhvbjMgd2lsbCB1c2UgYGBzdXJyb2dhdGVlc2NhcGVgYCBhbmQgUHl0aG9uMiB3aWxsIHVzZSB0aGUgZmFsbGJhY2sKICAgICAgICBlcnJvciBoYW5kbGVyLiBOb3RlIHRoYXQgdGhlIGNvZGUgY2hlY2tzIGZvciBgYHN1cnJvZ2F0ZWVzY2FwZWBgIHdoZW4gdGhlCiAgICAgICAgbW9kdWxlIGlzIGltcG9ydGVkLiAgSWYgeW91IGhhdmUgYSBiYWNrcG9ydCBvZiBgYHN1cnJvZ2F0ZWVzY2FwZWBgIGZvcgogICAgICAgIFB5dGhvbjIsIGJlIHN1cmUgdG8gcmVnaXN0ZXIgdGhlIGVycm9yIGhhbmRsZXIgcHJpb3IgdG8gaW1wb3J0aW5nIHRoaXMKICAgICAgICBtb2R1bGUuCgogICAgICAgIFRoZSBsYXN0IGVycm9yIGhhbmRsZXIgaXM6CgogICAgICAgICAgICA6c3Vycm9nYXRlX3RoZW5fcmVwbGFjZTogV2lsbCB1c2UgYGBzdXJyb2dhdGVlc2NhcGVgYCBpZiBpdCBpcyBhIHZhbGlkCiAgICAgICAgICAgICAgICBoYW5kbGVyLiAgSWYgZW5jb2Rpbmcgd2l0aCBgYHN1cnJvZ2F0ZWVzY2FwZWBgIHdvdWxkIHRyYWNlYmFjaywKICAgICAgICAgICAgICAgIHN1cnJvZ2F0ZXMgYXJlIGZpcnN0IHJlcGxhY2VkIHdpdGggYSByZXBsYWNlbWVudCBjaGFyYWN0ZXJzCiAgICAgICAgICAgICAgICBhbmQgdGhlbiB0aGUgc3RyaW5nIGlzIGVuY29kZWQgdXNpbmcgYGByZXBsYWNlYGAgKHdoaWNoIHJlcGxhY2VzCiAgICAgICAgICAgICAgICB0aGUgcmVzdCBvZiB0aGUgbm9uZW5jb2RhYmxlIGJ5dGVzKS4gIElmIGBgc3Vycm9nYXRlZXNjYXBlYGAgaXMKICAgICAgICAgICAgICAgIG5vdCBwcmVzZW50IGl0IHdpbGwgc2ltcGx5IHVzZSBgYHJlcGxhY2VgYC4gIChBZGRlZCBpbiBBbnNpYmxlIDIuMykKICAgICAgICAgICAgICAgIFRoaXMgc3RyYXRlZ3kgaXMgZGVzaWduZWQgdG8gbmV2ZXIgdHJhY2ViYWNrIHdoZW4gaXQgYXR0ZW1wdHMKICAgICAgICAgICAgICAgIHRvIGVuY29kZSBhIHN0cmluZy4KCiAgICAgICAgVGhlIGRlZmF1bHQgdW50aWwgQW5zaWJsZS0yLjIgd2FzIGBgc3Vycm9nYXRlX29yX3JlcGxhY2VgYAogICAgICAgIEZyb20gQW5zaWJsZS0yLjMgb253YXJkcywgdGhlIGRlZmF1bHQgaXMgYGBzdXJyb2dhdGVfdGhlbl9yZXBsYWNlYGAuCgogICAgOmt3YXJnIG5vbnN0cmluZzogVGhlIHN0cmF0ZWd5IHRvIHVzZSBpZiBhIG5vbnN0cmluZyBpcyBzcGVjaWZpZWQgaW4KICAgICAgICBgYG9iamBgLiAgRGVmYXVsdCBpcyAnc2ltcGxlcmVwcicuICBWYWxpZCB2YWx1ZXMgYXJlOgoKICAgICAgICA6c2ltcGxlcmVwcjogVGhlIGRlZmF1bHQuICBUaGlzIHRha2VzIHRoZSBgYHN0cmBgIG9mIHRoZSBvYmplY3QgYW5kCiAgICAgICAgICAgIHRoZW4gcmV0dXJucyB0aGUgYnl0ZXMgdmVyc2lvbiBvZiB0aGF0IHN0cmluZy4KICAgICAgICA6ZW1wdHk6IFJldHVybiBhbiBlbXB0eSBieXRlIHN0cmluZwogICAgICAgIDpwYXNzdGhydTogUmV0dXJuIHRoZSBvYmplY3QgcGFzc2VkIGluCiAgICAgICAgOnN0cmljdDogUmFpc2UgYSA6ZXhjOmBUeXBlRXJyb3JgCgogICAgOnJldHVybnM6IFR5cGljYWxseSB0aGlzIHJldHVybnMgYSBieXRlIHN0cmluZy4gIElmIGEgbm9uc3RyaW5nIG9iamVjdCBpcwogICAgICAgIHBhc3NlZCBpbiB0aGlzIG1heSBiZSBhIGRpZmZlcmVudCB0eXBlIGRlcGVuZGluZyBvbiB0aGUgc3RyYXRlZ3kKICAgICAgICBzcGVjaWZpZWQgYnkgbm9uc3RyaW5nLiAgVGhpcyB3aWxsIG5ldmVyIHJldHVybiBhIHRleHQgc3RyaW5nLgoKICAgIC4uIG5vdGU6OiBJZiBwYXNzZWQgYSBieXRlIHN0cmluZywgdGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBjaGVjayB0aGF0IHRoZQogICAgICAgIHN0cmluZyBpcyB2YWxpZCBpbiB0aGUgc3BlY2lmaWVkIGVuY29kaW5nLiAgSWYgaXQncyBpbXBvcnRhbnQgdGhhdCB0aGUKICAgICAgICBieXRlIHN0cmluZyBpcyBpbiB0aGUgc3BlY2lmaWVkIGVuY29kaW5nIGRvOjoKCiAgICAgICAgICAgIGVuY29kZWRfc3RyaW5nID0gdG9fYnl0ZXModG9fdGV4dChpbnB1dF9zdHJpbmcsICdsYXRpbi0xJyksICd1dGYtOCcpCgogICAgLi4gdmVyc2lvbl9jaGFuZ2VkOjogMi4zCgogICAgICAgIEFkZGVkIHRoZSBgYHN1cnJvZ2F0ZV90aGVuX3JlcGxhY2VgYCBlcnJvciBoYW5kbGVyIGFuZCBtYWRlIGl0IHRoZSBkZWZhdWx0IGVycm9yIGhhbmRsZXIuCiAgICAiIiIKICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBiaW5hcnlfdHlwZSk6CiAgICAgICAgcmV0dXJuIG9iagoKICAgICMgV2UncmUgZ2l2ZW4gYSB0ZXh0IHN0cmluZwogICAgIyBJZiBpdCBoYXMgc3Vycm9nYXRlcywgd2Uga25vdyBiZWNhdXNlIGl0IHdpbGwgZGVjb2RlCiAgICBvcmlnaW5hbF9lcnJvcnMgPSBlcnJvcnMKICAgIGlmIGVycm9ycyBpbiBfQ09NUE9TRURfRVJST1JfSEFORExFUlM6CiAgICAgICAgaWYgSEFTX1NVUlJPR0FURUVTQ0FQRToKICAgICAgICAgICAgZXJyb3JzID0gJ3N1cnJvZ2F0ZWVzY2FwZScKICAgICAgICBlbGlmIGVycm9ycyA9PSAnc3Vycm9nYXRlX29yX3N0cmljdCc6CiAgICAgICAgICAgIGVycm9ycyA9ICdzdHJpY3QnCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZXJyb3JzID0gJ3JlcGxhY2UnCgogICAgaWYgaXNpbnN0YW5jZShvYmosIHRleHRfdHlwZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFRyeSB0aGlzIGZpcnN0IGFzIGl0J3MgdGhlIGZhc3Rlc3QKICAgICAgICAgICAgcmV0dXJuIG9iai5lbmNvZGUoZW5jb2RpbmcsIGVycm9ycykKICAgICAgICBleGNlcHQgVW5pY29kZUVuY29kZUVycm9yOgogICAgICAgICAgICBpZiBvcmlnaW5hbF9lcnJvcnMgaW4gKE5vbmUsICdzdXJyb2dhdGVfdGhlbl9yZXBsYWNlJyk6CiAgICAgICAgICAgICAgICAjIFNsb3cgYnV0IHdvcmtzCiAgICAgICAgICAgICAgICByZXR1cm5fc3RyaW5nID0gb2JqLmVuY29kZSgndXRmLTgnLCAnc3Vycm9nYXRlZXNjYXBlJykKICAgICAgICAgICAgICAgIHJldHVybl9zdHJpbmcgPSByZXR1cm5fc3RyaW5nLmRlY29kZSgndXRmLTgnLCAncmVwbGFjZScpCiAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXJuX3N0cmluZy5lbmNvZGUoZW5jb2RpbmcsICdyZXBsYWNlJykKICAgICAgICAgICAgcmFpc2UKCiAgICAjIE5vdGU6IFdlIGRvIHRoZXNlIGxhc3QgZXZlbiB0aG91Z2ggd2UgaGF2ZSB0byBjYWxsIHRvX2J5dGVzIGFnYWluIG9uIHRoZQogICAgIyB2YWx1ZSBiZWNhdXNlIHdlJ3JlIG9wdGltaXppbmcgdGhlIGNvbW1vbiBjYXNlCiAgICBpZiBub25zdHJpbmcgPT0gJ3NpbXBsZXJlcHInOgogICAgICAgIHRyeToKICAgICAgICAgICAgdmFsdWUgPSBzdHIob2JqKQogICAgICAgIGV4Y2VwdCBVbmljb2RlRXJyb3I6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHZhbHVlID0gcmVwcihvYmopCiAgICAgICAgICAgIGV4Y2VwdCBVbmljb2RlRXJyb3I6CiAgICAgICAgICAgICAgICAjIEdpdmluZyB1cAogICAgICAgICAgICAgICAgcmV0dXJuIHRvX2J5dGVzKCcnKQogICAgZWxpZiBub25zdHJpbmcgPT0gJ3Bhc3N0aHJ1JzoKICAgICAgICByZXR1cm4gb2JqCiAgICBlbGlmIG5vbnN0cmluZyA9PSAnZW1wdHknOgogICAgICAgICMgcHl0aG9uMi40IGRvZXNuJ3QgaGF2ZSBiJycKICAgICAgICByZXR1cm4gdG9fYnl0ZXMoJycpCiAgICBlbGlmIG5vbnN0cmluZyA9PSAnc3RyaWN0JzoKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ29iaiBtdXN0IGJlIGEgc3RyaW5nIHR5cGUnKQogICAgZWxzZToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ0ludmFsaWQgdmFsdWUgJXMgZm9yIHRvX2J5dGVzXCcgbm9uc3RyaW5nIHBhcmFtZXRlcicgJSBub25zdHJpbmcpCgogICAgcmV0dXJuIHRvX2J5dGVzKHZhbHVlLCBlbmNvZGluZywgZXJyb3JzKQoKCmRlZiB0b190ZXh0KG9iaiwgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPU5vbmUsIG5vbnN0cmluZz0nc2ltcGxlcmVwcicpOgogICAgIiIiTWFrZSBzdXJlIHRoYXQgYSBzdHJpbmcgaXMgYSB0ZXh0IHN0cmluZwoKICAgIDphcmcgb2JqOiBBbiBvYmplY3QgdG8gbWFrZSBzdXJlIGlzIGEgdGV4dCBzdHJpbmcuICBJbiBtb3N0IGNhc2VzIHRoaXMKICAgICAgICB3aWxsIGJlIGVpdGhlciBhIHRleHQgc3RyaW5nIG9yIGEgYnl0ZSBzdHJpbmcuICBIb3dldmVyLCB3aXRoCiAgICAgICAgYGBub25zdHJpbmc9J3NpbXBsZXJlcHInYGAsIHRoaXMgY2FuIGJlIHVzZWQgYXMgYSB0cmFjZWJhY2stZnJlZQogICAgICAgIHZlcnNpb24gb2YgYGBzdHIob2JqKWBgLgogICAgOmt3YXJnIGVuY29kaW5nOiBUaGUgZW5jb2RpbmcgdG8gdXNlIHRvIHRyYW5zZm9ybSBmcm9tIGEgYnl0ZSBzdHJpbmcgdG8KICAgICAgICBhIHRleHQgc3RyaW5nLiAgRGVmYXVsdHMgdG8gdXNpbmcgJ3V0Zi04Jy4KICAgIDprd2FyZyBlcnJvcnM6IFRoZSBlcnJvciBoYW5kbGVyIHRvIHVzZSBpZiB0aGUgYnl0ZSBzdHJpbmcgaXMgbm90CiAgICAgICAgZGVjb2RhYmxlIHVzaW5nIHRoZSBzcGVjaWZpZWQgZW5jb2RpbmcuICBBbnkgdmFsaWQgYGNvZGVjcyBlcnJvcgogICAgICAgIGhhbmRsZXIgPGh0dHBzOi8vZG9jcy5weXRob24ub3JnLzIvbGlicmFyeS9jb2RlY3MuaHRtbCNjb2RlYy1iYXNlLWNsYXNzZXM+YF8KICAgICAgICBtYXkgYmUgc3BlY2lmaWVkLiAgIFdlIHN1cHBvcnQgdGhyZWUgYWRkaXRpb25hbCBlcnJvciBzdHJhdGVnaWVzCiAgICAgICAgc3BlY2lmaWNhbGx5IGFpbWVkIGF0IGhlbHBpbmcgcGVvcGxlIHRvIHBvcnQgY29kZToKCiAgICAgICAgICAgIDpzdXJyb2dhdGVfb3Jfc3RyaWN0OiBXaWxsIHVzZSBzdXJyb2dhdGVlc2NhcGUgaWYgaXQgaXMgYSB2YWxpZAogICAgICAgICAgICAgICAgaGFuZGxlciwgb3RoZXJ3aXNlIGl0IHdpbGwgdXNlIHN0cmljdAogICAgICAgICAgICA6c3Vycm9nYXRlX29yX3JlcGxhY2U6IFdpbGwgdXNlIHN1cnJvZ2F0ZWVzY2FwZSBpZiBpdCBpcyBhIHZhbGlkCiAgICAgICAgICAgICAgICBoYW5kbGVyLCBvdGhlcndpc2UgaXQgd2lsbCB1c2UgcmVwbGFjZS4KICAgICAgICAgICAgOnN1cnJvZ2F0ZV90aGVuX3JlcGxhY2U6IERvZXMgdGhlIHNhbWUgYXMgc3Vycm9nYXRlX29yX3JlcGxhY2UgYnV0CiAgICAgICAgICAgICAgICBgd2FzIGFkZGVkIGZvciBzeW1tZXRyeSB3aXRoIHRoZSBlcnJvciBoYW5kbGVycyBpbgogICAgICAgICAgICAgICAgOmZ1bmM6YGFuc2libGUubW9kdWxlX3V0aWxzLl90ZXh0LnRvX2J5dGVzYCAoQWRkZWQgaW4gQW5zaWJsZSAyLjMpCgogICAgICAgIEJlY2F1c2Ugc3Vycm9nYXRlZXNjYXBlIHdhcyBhZGRlZCBpbiBQeXRob24zIHRoaXMgdXN1YWxseSBtZWFucyB0aGF0CiAgICAgICAgUHl0aG9uMyB3aWxsIHVzZSBgc3Vycm9nYXRlZXNjYXBlYCBhbmQgUHl0aG9uMiB3aWxsIHVzZSB0aGUgZmFsbGJhY2sKICAgICAgICBlcnJvciBoYW5kbGVyLiBOb3RlIHRoYXQgdGhlIGNvZGUgY2hlY2tzIGZvciBzdXJyb2dhdGVlc2NhcGUgd2hlbiB0aGUKICAgICAgICBtb2R1bGUgaXMgaW1wb3J0ZWQuICBJZiB5b3UgaGF2ZSBhIGJhY2twb3J0IG9mIGBzdXJyb2dhdGVlc2NhcGVgIGZvcgogICAgICAgIHB5dGhvbjIsIGJlIHN1cmUgdG8gcmVnaXN0ZXIgdGhlIGVycm9yIGhhbmRsZXIgcHJpb3IgdG8gaW1wb3J0aW5nIHRoaXMKICAgICAgICBtb2R1bGUuCgogICAgICAgIFRoZSBkZWZhdWx0IHVudGlsIEFuc2libGUtMi4yIHdhcyBgc3Vycm9nYXRlX29yX3JlcGxhY2VgCiAgICAgICAgSW4gQW5zaWJsZS0yLjMgdGhpcyBkZWZhdWx0cyB0byBgc3Vycm9nYXRlX3RoZW5fcmVwbGFjZWAgZm9yIHN5bW1ldHJ5CiAgICAgICAgd2l0aCA6ZnVuYzpgYW5zaWJsZS5tb2R1bGVfdXRpbHMuX3RleHQudG9fYnl0ZXNgIC4KICAgIDprd2FyZyBub25zdHJpbmc6IFRoZSBzdHJhdGVneSB0byB1c2UgaWYgYSBub25zdHJpbmcgaXMgc3BlY2lmaWVkIGluCiAgICAgICAgYGBvYmpgYC4gIERlZmF1bHQgaXMgJ3NpbXBsZXJlcHInLiAgVmFsaWQgdmFsdWVzIGFyZToKCiAgICAgICAgOnNpbXBsZXJlcHI6IFRoZSBkZWZhdWx0LiAgVGhpcyB0YWtlcyB0aGUgYGBzdHJgYCBvZiB0aGUgb2JqZWN0IGFuZAogICAgICAgICAgICB0aGVuIHJldHVybnMgdGhlIHRleHQgdmVyc2lvbiBvZiB0aGF0IHN0cmluZy4KICAgICAgICA6ZW1wdHk6IFJldHVybiBhbiBlbXB0eSB0ZXh0IHN0cmluZwogICAgICAgIDpwYXNzdGhydTogUmV0dXJuIHRoZSBvYmplY3QgcGFzc2VkIGluCiAgICAgICAgOnN0cmljdDogUmFpc2UgYSA6ZXhjOmBUeXBlRXJyb3JgCgogICAgOnJldHVybnM6IFR5cGljYWxseSB0aGlzIHJldHVybnMgYSB0ZXh0IHN0cmluZy4gIElmIGEgbm9uc3RyaW5nIG9iamVjdCBpcwogICAgICAgIHBhc3NlZCBpbiB0aGlzIG1heSBiZSBhIGRpZmZlcmVudCB0eXBlIGRlcGVuZGluZyBvbiB0aGUgc3RyYXRlZ3kKICAgICAgICBzcGVjaWZpZWQgYnkgbm9uc3RyaW5nLiAgVGhpcyB3aWxsIG5ldmVyIHJldHVybiBhIGJ5dGUgc3RyaW5nLgogICAgICAgIEZyb20gQW5zaWJsZS0yLjMgb253YXJkcywgdGhlIGRlZmF1bHQgaXMgYHN1cnJvZ2F0ZV90aGVuX3JlcGxhY2VgLgoKICAgIC4uIHZlcnNpb25fY2hhbmdlZDo6IDIuMwoKICAgICAgICBBZGRlZCB0aGUgc3Vycm9nYXRlX3RoZW5fcmVwbGFjZSBlcnJvciBoYW5kbGVyIGFuZCBtYWRlIGl0IHRoZSBkZWZhdWx0IGVycm9yIGhhbmRsZXIuCiAgICAiIiIKICAgIGlmIGlzaW5zdGFuY2Uob2JqLCB0ZXh0X3R5cGUpOgogICAgICAgIHJldHVybiBvYmoKCiAgICBpZiBlcnJvcnMgaW4gX0NPTVBPU0VEX0VSUk9SX0hBTkRMRVJTOgogICAgICAgIGlmIEhBU19TVVJST0dBVEVFU0NBUEU6CiAgICAgICAgICAgIGVycm9ycyA9ICdzdXJyb2dhdGVlc2NhcGUnCiAgICAgICAgZWxpZiBlcnJvcnMgPT0gJ3N1cnJvZ2F0ZV9vcl9zdHJpY3QnOgogICAgICAgICAgICBlcnJvcnMgPSAnc3RyaWN0JwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGVycm9ycyA9ICdyZXBsYWNlJwoKICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBiaW5hcnlfdHlwZSk6CiAgICAgICAgIyBOb3RlOiBXZSBkb24ndCBuZWVkIHNwZWNpYWwgaGFuZGxpbmcgZm9yIHN1cnJvZ2F0ZV90aGVuX3JlcGxhY2UKICAgICAgICAjIGJlY2F1c2UgYWxsIGJ5dGVzIHdpbGwgZWl0aGVyIGJlIG1hZGUgaW50byBzdXJyb2dhdGVzIG9yIGFyZSB2YWxpZAogICAgICAgICMgdG8gZGVjb2RlLgogICAgICAgIHJldHVybiBvYmouZGVjb2RlKGVuY29kaW5nLCBlcnJvcnMpCgogICAgIyBOb3RlOiBXZSBkbyB0aGVzZSBsYXN0IGV2ZW4gdGhvdWdoIHdlIGhhdmUgdG8gY2FsbCB0b190ZXh0IGFnYWluIG9uIHRoZQogICAgIyB2YWx1ZSBiZWNhdXNlIHdlJ3JlIG9wdGltaXppbmcgdGhlIGNvbW1vbiBjYXNlCiAgICBpZiBub25zdHJpbmcgPT0gJ3NpbXBsZXJlcHInOgogICAgICAgIHRyeToKICAgICAgICAgICAgdmFsdWUgPSBzdHIob2JqKQogICAgICAgIGV4Y2VwdCBVbmljb2RlRXJyb3I6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHZhbHVlID0gcmVwcihvYmopCiAgICAgICAgICAgIGV4Y2VwdCBVbmljb2RlRXJyb3I6CiAgICAgICAgICAgICAgICAjIEdpdmluZyB1cAogICAgICAgICAgICAgICAgcmV0dXJuIHUnJwogICAgZWxpZiBub25zdHJpbmcgPT0gJ3Bhc3N0aHJ1JzoKICAgICAgICByZXR1cm4gb2JqCiAgICBlbGlmIG5vbnN0cmluZyA9PSAnZW1wdHknOgogICAgICAgIHJldHVybiB1JycKICAgIGVsaWYgbm9uc3RyaW5nID09ICdzdHJpY3QnOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignb2JqIG11c3QgYmUgYSBzdHJpbmcgdHlwZScpCiAgICBlbHNlOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignSW52YWxpZCB2YWx1ZSAlcyBmb3IgdG9fdGV4dFwncyBub25zdHJpbmcgcGFyYW1ldGVyJyAlIG5vbnN0cmluZykKCiAgICByZXR1cm4gdG9fdGV4dCh2YWx1ZSwgZW5jb2RpbmcsIGVycm9ycykKCgojOiA6cHk6ZnVuYzpgdG9fbmF0aXZlYAojOiAgICAgIFRyYW5zZm9ybSBhIHZhcmlhYmxlIGludG8gdGhlIG5hdGl2ZSBzdHIgdHlwZSBmb3IgdGhlIHB5dGhvbiB2ZXJzaW9uCiM6CiM6ICAgICAgT24gUHl0aG9uMiwgdGhpcyBpcyBhbiBhbGlhcyBmb3IKIzogICAgICA6ZnVuYzpgfmFuc2libGUubW9kdWxlX3V0aWxzLnRvX2J5dGVzYC4gIE9uIFB5dGhvbjMgaXQgaXMgYW4gYWxpYXMgZm9yCiM6ICAgICAgOmZ1bmM6YH5hbnNpYmxlLm1vZHVsZV91dGlscy50b190ZXh0YC4gIEl0IG1ha2VzIGl0IGVhc2llciB0bwojOiAgICAgIHRyYW5zZm9ybSBhIHZhcmlhYmxlIGludG8gdGhlIG5hdGl2ZSBzdHIgdHlwZSBmb3IgdGhlIHB5dGhvbiB2ZXJzaW9uCiM6ICAgICAgdGhlIGNvZGUgaXMgcnVubmluZyBvbi4gIFVzZSB0aGlzIHdoZW4gY29uc3RydWN0aW5nIHRoZSBtZXNzYWdlIHRvCiM6ICAgICAgc2VuZCB0byBleGNlcHRpb25zIG9yIHdoZW4gZGVhbGluZyB3aXRoIGFuIEFQSSB0aGF0IG5lZWRzIHRvIHRha2UKIzogICAgICBhIG5hdGl2ZSBzdHJpbmcuICBFeGFtcGxlOjoKIzoKIzogICAgICAgICAgdHJ5OgojOiAgICAgICAgICAgICAgMS8vMAojOiAgICAgICAgICBleGNlcHQgWmVyb0RpdmlzaW9uRXJyb3IgYXMgZToKIzogICAgICAgICAgICAgIHJhaXNlIE15RXhjZXB0aW9uKCdFbmNvdW50ZXJlZCBhbmQgZXJyb3I6ICVzJyAlIHRvX25hdGl2ZShlKSkKaWYgUFkzOgogICAgdG9fbmF0aXZlID0gdG9fdGV4dAplbHNlOgogICAgdG9fbmF0aXZlID0gdG9fYnl0ZXMKUEsDBBQAAAAAANa7K0sl3LR+ExAAABMQAAAiAAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvcHljb21wYXQyNC5weSMgVGhpcyBjb2RlIGlzIHBhcnQgb2YgQW5zaWJsZSwgYnV0IGlzIGFuIGluZGVwZW5kZW50IGNvbXBvbmVudC4KIyBUaGlzIHBhcnRpY3VsYXIgZmlsZSBzbmlwcGV0LCBhbmQgdGhpcyBmaWxlIHNuaXBwZXQgb25seSwgaXMgQlNEIGxpY2Vuc2VkLgojIE1vZHVsZXMgeW91IHdyaXRlIHVzaW5nIHRoaXMgc25pcHBldCwgd2hpY2ggaXMgZW1iZWRkZWQgZHluYW1pY2FsbHkgYnkgQW5zaWJsZQojIHN0aWxsIGJlbG9uZyB0byB0aGUgYXV0aG9yIG9mIHRoZSBtb2R1bGUsIGFuZCBtYXkgYXNzaWduIHRoZWlyIG93biBsaWNlbnNlCiMgdG8gdGhlIGNvbXBsZXRlIHdvcmsuCiMKIyBDb3B5cmlnaHQgKGMpIDIwMTYsIFRvc2hpbyBLdXJhdG9taSA8dGt1cmF0b21pQGFuc2libGUuY29tPgojIENvcHlyaWdodCAoYykgMjAxNSwgTWFyaXVzIEdlZG1pbmFzCiMKIyBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLAojIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDoKIwojICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQKIyAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KIyAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwKIyAgICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24KIyAgICAgIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgojCiMgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyAiQVMgSVMiIEFORAojIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVECiMgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELgojIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULAojIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywKIyBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MKIyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUCiMgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFCiMgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCiMKCmltcG9ydCBzeXMKCmRlZiBnZXRfZXhjZXB0aW9uKCk6CiAgICAiIiJHZXQgdGhlIGN1cnJlbnQgZXhjZXB0aW9uLgoKICAgIFRoaXMgY29kZSBuZWVkcyB0byB3b3JrIG9uIFB5dGhvbiAyLjQgdGhyb3VnaCAzLngsIHNvIHdlIGNhbm5vdCB1c2UKICAgICJleGNlcHQgRXhjZXB0aW9uLCBlOiIgKFN5bnRheEVycm9yIG9uIFB5dGhvbiAzLngpIG5vcgogICAgImV4Y2VwdCBFeGNlcHRpb24gYXMgZToiIChTeW50YXhFcnJvciBvbiBQeXRob24gMi40LTIuNSkuCiAgICBJbnN0ZWFkIHdlIG11c3QgdXNlIDo6CgogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIGUgPSBnZXRfZXhjZXB0aW9uKCkKCiAgICAiIiIKICAgIHJldHVybiBzeXMuZXhjX2luZm8oKVsxXQoKdHJ5OgogICAgIyBQeXRob24gMi42KwogICAgZnJvbSBhc3QgaW1wb3J0IGxpdGVyYWxfZXZhbApleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAjIGEgcmVwbGFjZW1lbnQgZm9yIGxpdGVyYWxfZXZhbCB0aGF0IHdvcmtzIHdpdGggcHl0aG9uIDIuNC4gZnJvbToKICAgICMgaHR0cHM6Ly9tYWlsLnB5dGhvbi5vcmcvcGlwZXJtYWlsL3B5dGhvbi1saXN0LzIwMDktU2VwdGVtYmVyLzU1MTg4MC5odG1sCiAgICAjIHdoaWNoIGlzIGVzc2VudGlhbGx5IGEgY3V0L3Bhc3RlIGZyb20gYW4gZWFybGllciAoMi42KSB2ZXJzaW9uIG9mIHB5dGhvbidzCiAgICAjIGFzdC5weQogICAgZnJvbSBjb21waWxlciBpbXBvcnQgYXN0LCBwYXJzZQogICAgZnJvbSBhbnNpYmxlLm1vZHVsZV91dGlscy5zaXggaW1wb3J0IGJpbmFyeV90eXBlLCBzdHJpbmdfdHlwZXMsIHRleHRfdHlwZQoKICAgIGRlZiBsaXRlcmFsX2V2YWwobm9kZV9vcl9zdHJpbmcpOgogICAgICAgICIiIgogICAgICAgIFNhZmVseSBldmFsdWF0ZSBhbiBleHByZXNzaW9uIG5vZGUgb3IgYSBzdHJpbmcgY29udGFpbmluZyBhIFB5dGhvbgogICAgICAgIGV4cHJlc3Npb24uICBUaGUgc3RyaW5nIG9yIG5vZGUgcHJvdmlkZWQgbWF5IG9ubHkgY29uc2lzdCBvZiB0aGUgIGZvbGxvd2luZwogICAgICAgIFB5dGhvbiBsaXRlcmFsIHN0cnVjdHVyZXM6IHN0cmluZ3MsIG51bWJlcnMsIHR1cGxlcywgbGlzdHMsIGRpY3RzLCAgYm9vbGVhbnMsCiAgICAgICAgYW5kIE5vbmUuCiAgICAgICAgIiIiCiAgICAgICAgX3NhZmVfbmFtZXMgPSB7J05vbmUnOiBOb25lLCAnVHJ1ZSc6IFRydWUsICdGYWxzZSc6IEZhbHNlfQogICAgICAgIGlmIGlzaW5zdGFuY2Uobm9kZV9vcl9zdHJpbmcsIHN0cmluZ190eXBlcyk6CiAgICAgICAgICAgIG5vZGVfb3Jfc3RyaW5nID0gcGFyc2Uobm9kZV9vcl9zdHJpbmcsIG1vZGU9J2V2YWwnKQogICAgICAgIGlmIGlzaW5zdGFuY2Uobm9kZV9vcl9zdHJpbmcsIGFzdC5FeHByZXNzaW9uKToKICAgICAgICAgICAgbm9kZV9vcl9zdHJpbmcgPSBub2RlX29yX3N0cmluZy5ub2RlCgogICAgICAgIGRlZiBfY29udmVydChub2RlKToKICAgICAgICAgICAgIyBPa2F5IHRvIHVzZSBsb25nIGhlcmUgYmVjYXVzZSB0aGlzIGlzIG9ubHkgZm9yIHB5dGhvbiAyLjQgYW5kIDIuNQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKG5vZGUsIGFzdC5Db25zdCkgYW5kIGlzaW5zdGFuY2Uobm9kZS52YWx1ZSwgKHRleHRfdHlwZSwgYmluYXJ5X3R5cGUsIGludCwgZmxvYXQsIGxvbmcsIGNvbXBsZXgpKToKICAgICAgICAgICAgICAgIHJldHVybiBub2RlLnZhbHVlCiAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZShub2RlLCBhc3QuVHVwbGUpOgogICAgICAgICAgICAgICAgcmV0dXJuIHR1cGxlKG1hcChfY29udmVydCwgbm9kZS5ub2RlcykpCiAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZShub2RlLCBhc3QuTGlzdCk6CiAgICAgICAgICAgICAgICByZXR1cm4gbGlzdChtYXAoX2NvbnZlcnQsIG5vZGUubm9kZXMpKQogICAgICAgICAgICBlbGlmIGlzaW5zdGFuY2Uobm9kZSwgYXN0LkRpY3QpOgogICAgICAgICAgICAgICAgcmV0dXJuIGRpY3QoKF9jb252ZXJ0KGspLCBfY29udmVydCh2KSkgZm9yIGssIHYgaW4gbm9kZS5pdGVtcygpKQogICAgICAgICAgICBlbGlmIGlzaW5zdGFuY2Uobm9kZSwgYXN0Lk5hbWUpOgogICAgICAgICAgICAgICAgaWYgbm9kZS5uYW1lIGluIF9zYWZlX25hbWVzOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfc2FmZV9uYW1lc1tub2RlLm5hbWVdCiAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZShub2RlLCBhc3QuVW5hcnlTdWIpOgogICAgICAgICAgICAgICAgcmV0dXJuIC1fY29udmVydChub2RlLmV4cHIpCiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ21hbGZvcm1lZCBzdHJpbmcnKQogICAgICAgIHJldHVybiBfY29udmVydChub2RlX29yX3N0cmluZykKCl9fYWxsX18gPSAoJ2dldF9leGNlcHRpb24nLCAnbGl0ZXJhbF9ldmFsJykKUEsDBBQAAAAAANa7K0s44sfRkXUAAJF1AAAgAAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvc2l4L19zaXgucHkiIiJVdGlsaXRpZXMgZm9yIHdyaXRpbmcgY29kZSB0aGF0IHJ1bnMgb24gUHl0aG9uIDIgYW5kIDMiIiIKCiMgQ29weXJpZ2h0IChjKSAyMDEwLTIwMTUgQmVuamFtaW4gUGV0ZXJzb24KIwojIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKIyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbAojIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMKIyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCiMgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCiMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKIwojIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbAojIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCiMKIyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgojIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLAojIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQojIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKIyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLAojIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFCiMgU09GVFdBUkUuCgpmcm9tIF9fZnV0dXJlX18gaW1wb3J0IGFic29sdXRlX2ltcG9ydAoKaW1wb3J0IGZ1bmN0b29scwppbXBvcnQgaXRlcnRvb2xzCmltcG9ydCBvcGVyYXRvcgppbXBvcnQgc3lzCmltcG9ydCB0eXBlcwoKX19hdXRob3JfXyA9ICJCZW5qYW1pbiBQZXRlcnNvbiA8YmVuamFtaW5AcHl0aG9uLm9yZz4iCl9fdmVyc2lvbl9fID0gIjEuMTAuMCIKCgojIFVzZWZ1bCBmb3IgdmVyeSBjb2Fyc2UgdmVyc2lvbiBkaWZmZXJlbnRpYXRpb24uClBZMiA9IHN5cy52ZXJzaW9uX2luZm9bMF0gPT0gMgpQWTMgPSBzeXMudmVyc2lvbl9pbmZvWzBdID09IDMKUFkzNCA9IHN5cy52ZXJzaW9uX2luZm9bMDoyXSA+PSAoMywgNCkKCmlmIFBZMzoKICAgIHN0cmluZ190eXBlcyA9IHN0ciwKICAgIGludGVnZXJfdHlwZXMgPSBpbnQsCiAgICBjbGFzc190eXBlcyA9IHR5cGUsCiAgICB0ZXh0X3R5cGUgPSBzdHIKICAgIGJpbmFyeV90eXBlID0gYnl0ZXMKICAgIE1BWFNJWkUgPSBzeXMubWF4c2l6ZQplbHNlOgogICAgc3RyaW5nX3R5cGVzID0gYmFzZXN0cmluZywKICAgIGludGVnZXJfdHlwZXMgPSAoaW50LCBsb25nKQogICAgY2xhc3NfdHlwZXMgPSAodHlwZSwgdHlwZXMuQ2xhc3NUeXBlKQogICAgdGV4dF90eXBlID0gdW5pY29kZQogICAgYmluYXJ5X3R5cGUgPSBzdHIKCiAgICBpZiBzeXMucGxhdGZvcm0uc3RhcnRzd2l0aCgiamF2YSIpOgogICAgICAgICMgSnl0aG9uIGFsd2F5cyB1c2VzIDMyIGJpdHMuCiAgICAgICAgTUFYU0laRSA9IGludCgoMSA8PCAzMSkgLSAxKQogICAgZWxzZToKICAgICAgICAjIEl0J3MgcG9zc2libGUgdG8gaGF2ZSBzaXplb2YobG9uZykgIT0gc2l6ZW9mKFB5X3NzaXplX3QpLgogICAgICAgIGNsYXNzIFgob2JqZWN0KToKCiAgICAgICAgICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgICAgICAgICAgcmV0dXJuIDEgPDwgMzEKICAgICAgICB0cnk6CiAgICAgICAgICAgIGxlbihYKCkpCiAgICAgICAgZXhjZXB0IE92ZXJmbG93RXJyb3I6CiAgICAgICAgICAgICMgMzItYml0CiAgICAgICAgICAgIE1BWFNJWkUgPSBpbnQoKDEgPDwgMzEpIC0gMSkKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIDY0LWJpdAogICAgICAgICAgICBNQVhTSVpFID0gaW50KCgxIDw8IDYzKSAtIDEpCiAgICAgICAgZGVsIFgKCgpkZWYgX2FkZF9kb2MoZnVuYywgZG9jKToKICAgICIiIkFkZCBkb2N1bWVudGF0aW9uIHRvIGEgZnVuY3Rpb24uIiIiCiAgICBmdW5jLl9fZG9jX18gPSBkb2MKCgpkZWYgX2ltcG9ydF9tb2R1bGUobmFtZSk6CiAgICAiIiJJbXBvcnQgbW9kdWxlLCByZXR1cm5pbmcgdGhlIG1vZHVsZSBhZnRlciB0aGUgbGFzdCBkb3QuIiIiCiAgICBfX2ltcG9ydF9fKG5hbWUpCiAgICByZXR1cm4gc3lzLm1vZHVsZXNbbmFtZV0KCgpjbGFzcyBfTGF6eURlc2NyKG9iamVjdCk6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG5hbWUpOgogICAgICAgIHNlbGYubmFtZSA9IG5hbWUKCiAgICBkZWYgX19nZXRfXyhzZWxmLCBvYmosIHRwKToKICAgICAgICByZXN1bHQgPSBzZWxmLl9yZXNvbHZlKCkKICAgICAgICBzZXRhdHRyKG9iaiwgc2VsZi5uYW1lLCByZXN1bHQpICAjIEludm9rZXMgX19zZXRfXy4KICAgICAgICB0cnk6CiAgICAgICAgICAgICMgVGhpcyBpcyBhIGJpdCB1Z2x5LCBidXQgaXQgYXZvaWRzIHJ1bm5pbmcgdGhpcyBhZ2FpbiBieQogICAgICAgICAgICAjIHJlbW92aW5nIHRoaXMgZGVzY3JpcHRvci4KICAgICAgICAgICAgZGVsYXR0cihvYmouX19jbGFzc19fLCBzZWxmLm5hbWUpCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICBwYXNzCiAgICAgICAgcmV0dXJuIHJlc3VsdAoKCmNsYXNzIE1vdmVkTW9kdWxlKF9MYXp5RGVzY3IpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBuYW1lLCBvbGQsIG5ldz1Ob25lKToKICAgICAgICBzdXBlcihNb3ZlZE1vZHVsZSwgc2VsZikuX19pbml0X18obmFtZSkKICAgICAgICBpZiBQWTM6CiAgICAgICAgICAgIGlmIG5ldyBpcyBOb25lOgogICAgICAgICAgICAgICAgbmV3ID0gbmFtZQogICAgICAgICAgICBzZWxmLm1vZCA9IG5ldwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYubW9kID0gb2xkCgogICAgZGVmIF9yZXNvbHZlKHNlbGYpOgogICAgICAgIHJldHVybiBfaW1wb3J0X21vZHVsZShzZWxmLm1vZCkKCiAgICBkZWYgX19nZXRhdHRyX18oc2VsZiwgYXR0cik6CiAgICAgICAgX21vZHVsZSA9IHNlbGYuX3Jlc29sdmUoKQogICAgICAgIHZhbHVlID0gZ2V0YXR0cihfbW9kdWxlLCBhdHRyKQogICAgICAgIHNldGF0dHIoc2VsZiwgYXR0ciwgdmFsdWUpCiAgICAgICAgcmV0dXJuIHZhbHVlCgoKY2xhc3MgX0xhenlNb2R1bGUodHlwZXMuTW9kdWxlVHlwZSk6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG5hbWUpOgogICAgICAgIHN1cGVyKF9MYXp5TW9kdWxlLCBzZWxmKS5fX2luaXRfXyhuYW1lKQogICAgICAgIHNlbGYuX19kb2NfXyA9IHNlbGYuX19jbGFzc19fLl9fZG9jX18KCiAgICBkZWYgX19kaXJfXyhzZWxmKToKICAgICAgICBhdHRycyA9IFsiX19kb2NfXyIsICJfX25hbWVfXyJdCiAgICAgICAgYXR0cnMgKz0gW2F0dHIubmFtZSBmb3IgYXR0ciBpbiBzZWxmLl9tb3ZlZF9hdHRyaWJ1dGVzXQogICAgICAgIHJldHVybiBhdHRycwoKICAgICMgU3ViY2xhc3NlcyBzaG91bGQgb3ZlcnJpZGUgdGhpcwogICAgX21vdmVkX2F0dHJpYnV0ZXMgPSBbXQoKCmNsYXNzIE1vdmVkQXR0cmlidXRlKF9MYXp5RGVzY3IpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBuYW1lLCBvbGRfbW9kLCBuZXdfbW9kLCBvbGRfYXR0cj1Ob25lLCBuZXdfYXR0cj1Ob25lKToKICAgICAgICBzdXBlcihNb3ZlZEF0dHJpYnV0ZSwgc2VsZikuX19pbml0X18obmFtZSkKICAgICAgICBpZiBQWTM6CiAgICAgICAgICAgIGlmIG5ld19tb2QgaXMgTm9uZToKICAgICAgICAgICAgICAgIG5ld19tb2QgPSBuYW1lCiAgICAgICAgICAgIHNlbGYubW9kID0gbmV3X21vZAogICAgICAgICAgICBpZiBuZXdfYXR0ciBpcyBOb25lOgogICAgICAgICAgICAgICAgaWYgb2xkX2F0dHIgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICBuZXdfYXR0ciA9IG5hbWUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgbmV3X2F0dHIgPSBvbGRfYXR0cgogICAgICAgICAgICBzZWxmLmF0dHIgPSBuZXdfYXR0cgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYubW9kID0gb2xkX21vZAogICAgICAgICAgICBpZiBvbGRfYXR0ciBpcyBOb25lOgogICAgICAgICAgICAgICAgb2xkX2F0dHIgPSBuYW1lCiAgICAgICAgICAgIHNlbGYuYXR0ciA9IG9sZF9hdHRyCgogICAgZGVmIF9yZXNvbHZlKHNlbGYpOgogICAgICAgIG1vZHVsZSA9IF9pbXBvcnRfbW9kdWxlKHNlbGYubW9kKQogICAgICAgIHJldHVybiBnZXRhdHRyKG1vZHVsZSwgc2VsZi5hdHRyKQoKCmNsYXNzIF9TaXhNZXRhUGF0aEltcG9ydGVyKG9iamVjdCk6CgogICAgIiIiCiAgICBBIG1ldGEgcGF0aCBpbXBvcnRlciB0byBpbXBvcnQgc2l4Lm1vdmVzIGFuZCBpdHMgc3VibW9kdWxlcy4KCiAgICBUaGlzIGNsYXNzIGltcGxlbWVudHMgYSBQRVAzMDIgZmluZGVyIGFuZCBsb2FkZXIuIEl0IHNob3VsZCBiZSBjb21wYXRpYmxlCiAgICB3aXRoIFB5dGhvbiAyLjUgYW5kIGFsbCBleGlzdGluZyB2ZXJzaW9ucyBvZiBQeXRob24zCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgc2l4X21vZHVsZV9uYW1lKToKICAgICAgICBzZWxmLm5hbWUgPSBzaXhfbW9kdWxlX25hbWUKICAgICAgICBzZWxmLmtub3duX21vZHVsZXMgPSB7fQoKICAgIGRlZiBfYWRkX21vZHVsZShzZWxmLCBtb2QsICpmdWxsbmFtZXMpOgogICAgICAgIGZvciBmdWxsbmFtZSBpbiBmdWxsbmFtZXM6CiAgICAgICAgICAgIHNlbGYua25vd25fbW9kdWxlc1tzZWxmLm5hbWUgKyAiLiIgKyBmdWxsbmFtZV0gPSBtb2QKCiAgICBkZWYgX2dldF9tb2R1bGUoc2VsZiwgZnVsbG5hbWUpOgogICAgICAgIHJldHVybiBzZWxmLmtub3duX21vZHVsZXNbc2VsZi5uYW1lICsgIi4iICsgZnVsbG5hbWVdCgogICAgZGVmIGZpbmRfbW9kdWxlKHNlbGYsIGZ1bGxuYW1lLCBwYXRoPU5vbmUpOgogICAgICAgIGlmIGZ1bGxuYW1lIGluIHNlbGYua25vd25fbW9kdWxlczoKICAgICAgICAgICAgcmV0dXJuIHNlbGYKICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiBfX2dldF9tb2R1bGUoc2VsZiwgZnVsbG5hbWUpOgogICAgICAgIHRyeToKICAgICAgICAgICAgcmV0dXJuIHNlbGYua25vd25fbW9kdWxlc1tmdWxsbmFtZV0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHJhaXNlIEltcG9ydEVycm9yKCJUaGlzIGxvYWRlciBkb2VzIG5vdCBrbm93IG1vZHVsZSAiICsgZnVsbG5hbWUpCgogICAgZGVmIGxvYWRfbW9kdWxlKHNlbGYsIGZ1bGxuYW1lKToKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgaW4gY2FzZSBvZiBhIHJlbG9hZAogICAgICAgICAgICByZXR1cm4gc3lzLm1vZHVsZXNbZnVsbG5hbWVdCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBwYXNzCiAgICAgICAgbW9kID0gc2VsZi5fX2dldF9tb2R1bGUoZnVsbG5hbWUpCiAgICAgICAgaWYgaXNpbnN0YW5jZShtb2QsIE1vdmVkTW9kdWxlKToKICAgICAgICAgICAgbW9kID0gbW9kLl9yZXNvbHZlKCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBtb2QuX19sb2FkZXJfXyA9IHNlbGYKICAgICAgICBzeXMubW9kdWxlc1tmdWxsbmFtZV0gPSBtb2QKICAgICAgICByZXR1cm4gbW9kCgogICAgZGVmIGlzX3BhY2thZ2Uoc2VsZiwgZnVsbG5hbWUpOgogICAgICAgICIiIgogICAgICAgIFJldHVybiB0cnVlLCBpZiB0aGUgbmFtZWQgbW9kdWxlIGlzIGEgcGFja2FnZS4KCiAgICAgICAgV2UgbmVlZCB0aGlzIG1ldGhvZCB0byBnZXQgY29ycmVjdCBzcGVjIG9iamVjdHMgd2l0aAogICAgICAgIFB5dGhvbiAzLjQgKHNlZSBQRVA0NTEpCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIGhhc2F0dHIoc2VsZi5fX2dldF9tb2R1bGUoZnVsbG5hbWUpLCAiX19wYXRoX18iKQoKICAgIGRlZiBnZXRfY29kZShzZWxmLCBmdWxsbmFtZSk6CiAgICAgICAgIiIiUmV0dXJuIE5vbmUKCiAgICAgICAgUmVxdWlyZWQsIGlmIGlzX3BhY2thZ2UgaXMgaW1wbGVtZW50ZWQiIiIKICAgICAgICBzZWxmLl9fZ2V0X21vZHVsZShmdWxsbmFtZSkgICMgZXZlbnR1YWxseSByYWlzZXMgSW1wb3J0RXJyb3IKICAgICAgICByZXR1cm4gTm9uZQogICAgZ2V0X3NvdXJjZSA9IGdldF9jb2RlICAjIHNhbWUgYXMgZ2V0X2NvZGUKCl9pbXBvcnRlciA9IF9TaXhNZXRhUGF0aEltcG9ydGVyKF9fbmFtZV9fKQoKCmNsYXNzIF9Nb3ZlZEl0ZW1zKF9MYXp5TW9kdWxlKToKCiAgICAiIiJMYXp5IGxvYWRpbmcgb2YgbW92ZWQgb2JqZWN0cyIiIgogICAgX19wYXRoX18gPSBbXSAgIyBtYXJrIGFzIHBhY2thZ2UKCgpfbW92ZWRfYXR0cmlidXRlcyA9IFsKICAgIE1vdmVkQXR0cmlidXRlKCJjU3RyaW5nSU8iLCAiY1N0cmluZ0lPIiwgImlvIiwgIlN0cmluZ0lPIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiZmlsdGVyIiwgIml0ZXJ0b29scyIsICJidWlsdGlucyIsICJpZmlsdGVyIiwgImZpbHRlciIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImZpbHRlcmZhbHNlIiwgIml0ZXJ0b29scyIsICJpdGVydG9vbHMiLCAiaWZpbHRlcmZhbHNlIiwgImZpbHRlcmZhbHNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiaW5wdXQiLCAiX19idWlsdGluX18iLCAiYnVpbHRpbnMiLCAicmF3X2lucHV0IiwgImlucHV0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiaW50ZXJuIiwgIl9fYnVpbHRpbl9fIiwgInN5cyIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIm1hcCIsICJpdGVydG9vbHMiLCAiYnVpbHRpbnMiLCAiaW1hcCIsICJtYXAiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJnZXRjd2QiLCAib3MiLCAib3MiLCAiZ2V0Y3dkdSIsICJnZXRjd2QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJnZXRjd2RiIiwgIm9zIiwgIm9zIiwgImdldGN3ZCIsICJnZXRjd2RiIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicmFuZ2UiLCAiX19idWlsdGluX18iLCAiYnVpbHRpbnMiLCAieHJhbmdlIiwgInJhbmdlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicmVsb2FkX21vZHVsZSIsICJfX2J1aWx0aW5fXyIsICJpbXBvcnRsaWIiIGlmIFBZMzQgZWxzZSAiaW1wIiwgInJlbG9hZCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInJlZHVjZSIsICJfX2J1aWx0aW5fXyIsICJmdW5jdG9vbHMiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJzaGxleF9xdW90ZSIsICJwaXBlcyIsICJzaGxleCIsICJxdW90ZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlN0cmluZ0lPIiwgIlN0cmluZ0lPIiwgImlvIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiVXNlckRpY3QiLCAiVXNlckRpY3QiLCAiY29sbGVjdGlvbnMiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJVc2VyTGlzdCIsICJVc2VyTGlzdCIsICJjb2xsZWN0aW9ucyIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlVzZXJTdHJpbmciLCAiVXNlclN0cmluZyIsICJjb2xsZWN0aW9ucyIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInhyYW5nZSIsICJfX2J1aWx0aW5fXyIsICJidWlsdGlucyIsICJ4cmFuZ2UiLCAicmFuZ2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ6aXAiLCAiaXRlcnRvb2xzIiwgImJ1aWx0aW5zIiwgIml6aXAiLCAiemlwIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiemlwX2xvbmdlc3QiLCAiaXRlcnRvb2xzIiwgIml0ZXJ0b29scyIsICJpemlwX2xvbmdlc3QiLCAiemlwX2xvbmdlc3QiKSwKICAgIE1vdmVkTW9kdWxlKCJidWlsdGlucyIsICJfX2J1aWx0aW5fXyIpLAogICAgTW92ZWRNb2R1bGUoImNvbmZpZ3BhcnNlciIsICJDb25maWdQYXJzZXIiKSwKICAgIE1vdmVkTW9kdWxlKCJjb3B5cmVnIiwgImNvcHlfcmVnIiksCiAgICBNb3ZlZE1vZHVsZSgiZGJtX2dudSIsICJnZGJtIiwgImRibS5nbnUiKSwKICAgIE1vdmVkTW9kdWxlKCJfZHVtbXlfdGhyZWFkIiwgImR1bW15X3RocmVhZCIsICJfZHVtbXlfdGhyZWFkIiksCiAgICBNb3ZlZE1vZHVsZSgiaHR0cF9jb29raWVqYXIiLCAiY29va2llbGliIiwgImh0dHAuY29va2llamFyIiksCiAgICBNb3ZlZE1vZHVsZSgiaHR0cF9jb29raWVzIiwgIkNvb2tpZSIsICJodHRwLmNvb2tpZXMiKSwKICAgIE1vdmVkTW9kdWxlKCJodG1sX2VudGl0aWVzIiwgImh0bWxlbnRpdHlkZWZzIiwgImh0bWwuZW50aXRpZXMiKSwKICAgIE1vdmVkTW9kdWxlKCJodG1sX3BhcnNlciIsICJIVE1MUGFyc2VyIiwgImh0bWwucGFyc2VyIiksCiAgICBNb3ZlZE1vZHVsZSgiaHR0cF9jbGllbnQiLCAiaHR0cGxpYiIsICJodHRwLmNsaWVudCIpLAogICAgTW92ZWRNb2R1bGUoImVtYWlsX21pbWVfbXVsdGlwYXJ0IiwgImVtYWlsLk1JTUVNdWx0aXBhcnQiLCAiZW1haWwubWltZS5tdWx0aXBhcnQiKSwKICAgIE1vdmVkTW9kdWxlKCJlbWFpbF9taW1lX25vbm11bHRpcGFydCIsICJlbWFpbC5NSU1FTm9uTXVsdGlwYXJ0IiwgImVtYWlsLm1pbWUubm9ubXVsdGlwYXJ0IiksCiAgICBNb3ZlZE1vZHVsZSgiZW1haWxfbWltZV90ZXh0IiwgImVtYWlsLk1JTUVUZXh0IiwgImVtYWlsLm1pbWUudGV4dCIpLAogICAgTW92ZWRNb2R1bGUoImVtYWlsX21pbWVfYmFzZSIsICJlbWFpbC5NSU1FQmFzZSIsICJlbWFpbC5taW1lLmJhc2UiKSwKICAgIE1vdmVkTW9kdWxlKCJCYXNlSFRUUFNlcnZlciIsICJCYXNlSFRUUFNlcnZlciIsICJodHRwLnNlcnZlciIpLAogICAgTW92ZWRNb2R1bGUoIkNHSUhUVFBTZXJ2ZXIiLCAiQ0dJSFRUUFNlcnZlciIsICJodHRwLnNlcnZlciIpLAogICAgTW92ZWRNb2R1bGUoIlNpbXBsZUhUVFBTZXJ2ZXIiLCAiU2ltcGxlSFRUUFNlcnZlciIsICJodHRwLnNlcnZlciIpLAogICAgTW92ZWRNb2R1bGUoImNQaWNrbGUiLCAiY1BpY2tsZSIsICJwaWNrbGUiKSwKICAgIE1vdmVkTW9kdWxlKCJxdWV1ZSIsICJRdWV1ZSIpLAogICAgTW92ZWRNb2R1bGUoInJlcHJsaWIiLCAicmVwciIpLAogICAgTW92ZWRNb2R1bGUoInNvY2tldHNlcnZlciIsICJTb2NrZXRTZXJ2ZXIiKSwKICAgIE1vdmVkTW9kdWxlKCJfdGhyZWFkIiwgInRocmVhZCIsICJfdGhyZWFkIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlciIsICJUa2ludGVyIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9kaWFsb2ciLCAiRGlhbG9nIiwgInRraW50ZXIuZGlhbG9nIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9maWxlZGlhbG9nIiwgIkZpbGVEaWFsb2ciLCAidGtpbnRlci5maWxlZGlhbG9nIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9zY3JvbGxlZHRleHQiLCAiU2Nyb2xsZWRUZXh0IiwgInRraW50ZXIuc2Nyb2xsZWR0ZXh0IiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9zaW1wbGVkaWFsb2ciLCAiU2ltcGxlRGlhbG9nIiwgInRraW50ZXIuc2ltcGxlZGlhbG9nIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl90aXgiLCAiVGl4IiwgInRraW50ZXIudGl4IiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl90dGsiLCAidHRrIiwgInRraW50ZXIudHRrIiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl9jb25zdGFudHMiLCAiVGtjb25zdGFudHMiLCAidGtpbnRlci5jb25zdGFudHMiKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX2RuZCIsICJUa2RuZCIsICJ0a2ludGVyLmRuZCIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfY29sb3JjaG9vc2VyIiwgInRrQ29sb3JDaG9vc2VyIiwKICAgICAgICAgICAgICAgICJ0a2ludGVyLmNvbG9yY2hvb3NlciIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfY29tbW9uZGlhbG9nIiwgInRrQ29tbW9uRGlhbG9nIiwKICAgICAgICAgICAgICAgICJ0a2ludGVyLmNvbW1vbmRpYWxvZyIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfdGtmaWxlZGlhbG9nIiwgInRrRmlsZURpYWxvZyIsICJ0a2ludGVyLmZpbGVkaWFsb2ciKSwKICAgIE1vdmVkTW9kdWxlKCJ0a2ludGVyX2ZvbnQiLCAidGtGb250IiwgInRraW50ZXIuZm9udCIpLAogICAgTW92ZWRNb2R1bGUoInRraW50ZXJfbWVzc2FnZWJveCIsICJ0a01lc3NhZ2VCb3giLCAidGtpbnRlci5tZXNzYWdlYm94IiksCiAgICBNb3ZlZE1vZHVsZSgidGtpbnRlcl90a3NpbXBsZWRpYWxvZyIsICJ0a1NpbXBsZURpYWxvZyIsCiAgICAgICAgICAgICAgICAidGtpbnRlci5zaW1wbGVkaWFsb2ciKSwKICAgIE1vdmVkTW9kdWxlKCJ1cmxsaWJfcGFyc2UiLCBfX25hbWVfXyArICIubW92ZXMudXJsbGliX3BhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRNb2R1bGUoInVybGxpYl9lcnJvciIsIF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWJfZXJyb3IiLCAidXJsbGliLmVycm9yIiksCiAgICBNb3ZlZE1vZHVsZSgidXJsbGliIiwgX19uYW1lX18gKyAiLm1vdmVzLnVybGxpYiIsIF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWIiKSwKICAgIE1vdmVkTW9kdWxlKCJ1cmxsaWJfcm9ib3RwYXJzZXIiLCAicm9ib3RwYXJzZXIiLCAidXJsbGliLnJvYm90cGFyc2VyIiksCiAgICBNb3ZlZE1vZHVsZSgieG1scnBjX2NsaWVudCIsICJ4bWxycGNsaWIiLCAieG1scnBjLmNsaWVudCIpLAogICAgTW92ZWRNb2R1bGUoInhtbHJwY19zZXJ2ZXIiLCAiU2ltcGxlWE1MUlBDU2VydmVyIiwgInhtbHJwYy5zZXJ2ZXIiKSwKXQojIEFkZCB3aW5kb3dzIHNwZWNpZmljIG1vZHVsZXMuCmlmIHN5cy5wbGF0Zm9ybSA9PSAid2luMzIiOgogICAgX21vdmVkX2F0dHJpYnV0ZXMgKz0gWwogICAgICAgIE1vdmVkTW9kdWxlKCJ3aW5yZWciLCAiX3dpbnJlZyIpLAogICAgXQoKZm9yIGF0dHIgaW4gX21vdmVkX2F0dHJpYnV0ZXM6CiAgICBzZXRhdHRyKF9Nb3ZlZEl0ZW1zLCBhdHRyLm5hbWUsIGF0dHIpCiAgICBpZiBpc2luc3RhbmNlKGF0dHIsIE1vdmVkTW9kdWxlKToKICAgICAgICBfaW1wb3J0ZXIuX2FkZF9tb2R1bGUoYXR0ciwgIm1vdmVzLiIgKyBhdHRyLm5hbWUpCmRlbCBhdHRyCgpfTW92ZWRJdGVtcy5fbW92ZWRfYXR0cmlidXRlcyA9IF9tb3ZlZF9hdHRyaWJ1dGVzCgptb3ZlcyA9IF9Nb3ZlZEl0ZW1zKF9fbmFtZV9fICsgIi5tb3ZlcyIpCl9pbXBvcnRlci5fYWRkX21vZHVsZShtb3ZlcywgIm1vdmVzIikKCgpjbGFzcyBNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9wYXJzZShfTGF6eU1vZHVsZSk6CgogICAgIiIiTGF6eSBsb2FkaW5nIG9mIG1vdmVkIG9iamVjdHMgaW4gc2l4Lm1vdmVzLnVybGxpYl9wYXJzZSIiIgoKCl91cmxsaWJfcGFyc2VfbW92ZWRfYXR0cmlidXRlcyA9IFsKICAgIE1vdmVkQXR0cmlidXRlKCJQYXJzZVJlc3VsdCIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJTcGxpdFJlc3VsdCIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJwYXJzZV9xcyIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJwYXJzZV9xc2wiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsZGVmcmFnIiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVybGpvaW4iLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJscGFyc2UiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsc3BsaXQiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsdW5wYXJzZSIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1cmx1bnNwbGl0IiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInF1b3RlIiwgInVybGxpYiIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJxdW90ZV9wbHVzIiwgInVybGxpYiIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1bnF1b3RlIiwgInVybGxpYiIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1bnF1b3RlX3BsdXMiLCAidXJsbGliIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVybGVuY29kZSIsICJ1cmxsaWIiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgic3BsaXRxdWVyeSIsICJ1cmxsaWIiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgic3BsaXR0YWciLCAidXJsbGliIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInNwbGl0dXNlciIsICJ1cmxsaWIiLCAidXJsbGliLnBhcnNlIiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXNlc19mcmFnbWVudCIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1c2VzX25ldGxvYyIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1c2VzX3BhcmFtcyIsICJ1cmxwYXJzZSIsICJ1cmxsaWIucGFyc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJ1c2VzX3F1ZXJ5IiwgInVybHBhcnNlIiwgInVybGxpYi5wYXJzZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVzZXNfcmVsYXRpdmUiLCAidXJscGFyc2UiLCAidXJsbGliLnBhcnNlIiksCl0KZm9yIGF0dHIgaW4gX3VybGxpYl9wYXJzZV9tb3ZlZF9hdHRyaWJ1dGVzOgogICAgc2V0YXR0cihNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9wYXJzZSwgYXR0ci5uYW1lLCBhdHRyKQpkZWwgYXR0cgoKTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcGFyc2UuX21vdmVkX2F0dHJpYnV0ZXMgPSBfdXJsbGliX3BhcnNlX21vdmVkX2F0dHJpYnV0ZXMKCl9pbXBvcnRlci5fYWRkX21vZHVsZShNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9wYXJzZShfX25hbWVfXyArICIubW92ZXMudXJsbGliX3BhcnNlIiksCiAgICAgICAgICAgICAgICAgICAgICAibW92ZXMudXJsbGliX3BhcnNlIiwgIm1vdmVzLnVybGxpYi5wYXJzZSIpCgoKY2xhc3MgTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfZXJyb3IoX0xhenlNb2R1bGUpOgoKICAgICIiIkxhenkgbG9hZGluZyBvZiBtb3ZlZCBvYmplY3RzIGluIHNpeC5tb3Zlcy51cmxsaWJfZXJyb3IiIiIKCgpfdXJsbGliX2Vycm9yX21vdmVkX2F0dHJpYnV0ZXMgPSBbCiAgICBNb3ZlZEF0dHJpYnV0ZSgiVVJMRXJyb3IiLCAidXJsbGliMiIsICJ1cmxsaWIuZXJyb3IiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQRXJyb3IiLCAidXJsbGliMiIsICJ1cmxsaWIuZXJyb3IiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJDb250ZW50VG9vU2hvcnRFcnJvciIsICJ1cmxsaWIiLCAidXJsbGliLmVycm9yIiksCl0KZm9yIGF0dHIgaW4gX3VybGxpYl9lcnJvcl9tb3ZlZF9hdHRyaWJ1dGVzOgogICAgc2V0YXR0cihNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9lcnJvciwgYXR0ci5uYW1lLCBhdHRyKQpkZWwgYXR0cgoKTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfZXJyb3IuX21vdmVkX2F0dHJpYnV0ZXMgPSBfdXJsbGliX2Vycm9yX21vdmVkX2F0dHJpYnV0ZXMKCl9pbXBvcnRlci5fYWRkX21vZHVsZShNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9lcnJvcihfX25hbWVfXyArICIubW92ZXMudXJsbGliLmVycm9yIiksCiAgICAgICAgICAgICAgICAgICAgICAibW92ZXMudXJsbGliX2Vycm9yIiwgIm1vdmVzLnVybGxpYi5lcnJvciIpCgoKY2xhc3MgTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcmVxdWVzdChfTGF6eU1vZHVsZSk6CgogICAgIiIiTGF6eSBsb2FkaW5nIG9mIG1vdmVkIG9iamVjdHMgaW4gc2l4Lm1vdmVzLnVybGxpYl9yZXF1ZXN0IiIiCgoKX3VybGxpYl9yZXF1ZXN0X21vdmVkX2F0dHJpYnV0ZXMgPSBbCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsb3BlbiIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiaW5zdGFsbF9vcGVuZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImJ1aWxkX29wZW5lciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicGF0aG5hbWUydXJsIiwgInVybGxpYiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoInVybDJwYXRobmFtZSIsICJ1cmxsaWIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJnZXRwcm94aWVzIiwgInVybGxpYiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIlJlcXVlc3QiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIk9wZW5lckRpcmVjdG9yIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQRGVmYXVsdEVycm9ySGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUFJlZGlyZWN0SGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUENvb2tpZVByb2Nlc3NvciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiUHJveHlIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJCYXNlSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUFBhc3N3b3JkTWdyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJIVFRQUGFzc3dvcmRNZ3JXaXRoRGVmYXVsdFJlYWxtIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJBYnN0cmFjdEJhc2ljQXV0aEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBCYXNpY0F1dGhIYW5kbGVyIiwgInVybGxpYjIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJQcm94eUJhc2ljQXV0aEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkFic3RyYWN0RGlnZXN0QXV0aEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBEaWdlc3RBdXRoSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiUHJveHlEaWdlc3RBdXRoSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiSFRUUEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBTSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiRmlsZUhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkZUUEhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkNhY2hlRlRQSGFuZGxlciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiVW5rbm93bkhhbmRsZXIiLCAidXJsbGliMiIsICJ1cmxsaWIucmVxdWVzdCIpLAogICAgTW92ZWRBdHRyaWJ1dGUoIkhUVFBFcnJvclByb2Nlc3NvciIsICJ1cmxsaWIyIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJscmV0cmlldmUiLCAidXJsbGliIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgidXJsY2xlYW51cCIsICJ1cmxsaWIiLCAidXJsbGliLnJlcXVlc3QiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJVUkxvcGVuZXIiLCAidXJsbGliIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgiRmFuY3lVUkxvcGVuZXIiLCAidXJsbGliIiwgInVybGxpYi5yZXF1ZXN0IiksCiAgICBNb3ZlZEF0dHJpYnV0ZSgicHJveHlfYnlwYXNzIiwgInVybGxpYiIsICJ1cmxsaWIucmVxdWVzdCIpLApdCmZvciBhdHRyIGluIF91cmxsaWJfcmVxdWVzdF9tb3ZlZF9hdHRyaWJ1dGVzOgogICAgc2V0YXR0cihNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yZXF1ZXN0LCBhdHRyLm5hbWUsIGF0dHIpCmRlbCBhdHRyCgpNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yZXF1ZXN0Ll9tb3ZlZF9hdHRyaWJ1dGVzID0gX3VybGxpYl9yZXF1ZXN0X21vdmVkX2F0dHJpYnV0ZXMKCl9pbXBvcnRlci5fYWRkX21vZHVsZShNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yZXF1ZXN0KF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWIucmVxdWVzdCIpLAogICAgICAgICAgICAgICAgICAgICAgIm1vdmVzLnVybGxpYl9yZXF1ZXN0IiwgIm1vdmVzLnVybGxpYi5yZXF1ZXN0IikKCgpjbGFzcyBNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yZXNwb25zZShfTGF6eU1vZHVsZSk6CgogICAgIiIiTGF6eSBsb2FkaW5nIG9mIG1vdmVkIG9iamVjdHMgaW4gc2l4Lm1vdmVzLnVybGxpYl9yZXNwb25zZSIiIgoKCl91cmxsaWJfcmVzcG9uc2VfbW92ZWRfYXR0cmlidXRlcyA9IFsKICAgIE1vdmVkQXR0cmlidXRlKCJhZGRiYXNlIiwgInVybGxpYiIsICJ1cmxsaWIucmVzcG9uc2UiKSwKICAgIE1vdmVkQXR0cmlidXRlKCJhZGRjbG9zZWhvb2siLCAidXJsbGliIiwgInVybGxpYi5yZXNwb25zZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImFkZGluZm8iLCAidXJsbGliIiwgInVybGxpYi5yZXNwb25zZSIpLAogICAgTW92ZWRBdHRyaWJ1dGUoImFkZGluZm91cmwiLCAidXJsbGliIiwgInVybGxpYi5yZXNwb25zZSIpLApdCmZvciBhdHRyIGluIF91cmxsaWJfcmVzcG9uc2VfbW92ZWRfYXR0cmlidXRlczoKICAgIHNldGF0dHIoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcmVzcG9uc2UsIGF0dHIubmFtZSwgYXR0cikKZGVsIGF0dHIKCk1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3Jlc3BvbnNlLl9tb3ZlZF9hdHRyaWJ1dGVzID0gX3VybGxpYl9yZXNwb25zZV9tb3ZlZF9hdHRyaWJ1dGVzCgpfaW1wb3J0ZXIuX2FkZF9tb2R1bGUoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWJfcmVzcG9uc2UoX19uYW1lX18gKyAiLm1vdmVzLnVybGxpYi5yZXNwb25zZSIpLAogICAgICAgICAgICAgICAgICAgICAgIm1vdmVzLnVybGxpYl9yZXNwb25zZSIsICJtb3Zlcy51cmxsaWIucmVzcG9uc2UiKQoKCmNsYXNzIE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3JvYm90cGFyc2VyKF9MYXp5TW9kdWxlKToKCiAgICAiIiJMYXp5IGxvYWRpbmcgb2YgbW92ZWQgb2JqZWN0cyBpbiBzaXgubW92ZXMudXJsbGliX3JvYm90cGFyc2VyIiIiCgoKX3VybGxpYl9yb2JvdHBhcnNlcl9tb3ZlZF9hdHRyaWJ1dGVzID0gWwogICAgTW92ZWRBdHRyaWJ1dGUoIlJvYm90RmlsZVBhcnNlciIsICJyb2JvdHBhcnNlciIsICJ1cmxsaWIucm9ib3RwYXJzZXIiKSwKXQpmb3IgYXR0ciBpbiBfdXJsbGliX3JvYm90cGFyc2VyX21vdmVkX2F0dHJpYnV0ZXM6CiAgICBzZXRhdHRyKE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3JvYm90cGFyc2VyLCBhdHRyLm5hbWUsIGF0dHIpCmRlbCBhdHRyCgpNb2R1bGVfc2l4X21vdmVzX3VybGxpYl9yb2JvdHBhcnNlci5fbW92ZWRfYXR0cmlidXRlcyA9IF91cmxsaWJfcm9ib3RwYXJzZXJfbW92ZWRfYXR0cmlidXRlcwoKX2ltcG9ydGVyLl9hZGRfbW9kdWxlKE1vZHVsZV9zaXhfbW92ZXNfdXJsbGliX3JvYm90cGFyc2VyKF9fbmFtZV9fICsgIi5tb3Zlcy51cmxsaWIucm9ib3RwYXJzZXIiKSwKICAgICAgICAgICAgICAgICAgICAgICJtb3Zlcy51cmxsaWJfcm9ib3RwYXJzZXIiLCAibW92ZXMudXJsbGliLnJvYm90cGFyc2VyIikKCgpjbGFzcyBNb2R1bGVfc2l4X21vdmVzX3VybGxpYih0eXBlcy5Nb2R1bGVUeXBlKToKCiAgICAiIiJDcmVhdGUgYSBzaXgubW92ZXMudXJsbGliIG5hbWVzcGFjZSB0aGF0IHJlc2VtYmxlcyB0aGUgUHl0aG9uIDMgbmFtZXNwYWNlIiIiCiAgICBfX3BhdGhfXyA9IFtdICAjIG1hcmsgYXMgcGFja2FnZQogICAgcGFyc2UgPSBfaW1wb3J0ZXIuX2dldF9tb2R1bGUoIm1vdmVzLnVybGxpYl9wYXJzZSIpCiAgICBlcnJvciA9IF9pbXBvcnRlci5fZ2V0X21vZHVsZSgibW92ZXMudXJsbGliX2Vycm9yIikKICAgIHJlcXVlc3QgPSBfaW1wb3J0ZXIuX2dldF9tb2R1bGUoIm1vdmVzLnVybGxpYl9yZXF1ZXN0IikKICAgIHJlc3BvbnNlID0gX2ltcG9ydGVyLl9nZXRfbW9kdWxlKCJtb3Zlcy51cmxsaWJfcmVzcG9uc2UiKQogICAgcm9ib3RwYXJzZXIgPSBfaW1wb3J0ZXIuX2dldF9tb2R1bGUoIm1vdmVzLnVybGxpYl9yb2JvdHBhcnNlciIpCgogICAgZGVmIF9fZGlyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIFsncGFyc2UnLCAnZXJyb3InLCAncmVxdWVzdCcsICdyZXNwb25zZScsICdyb2JvdHBhcnNlciddCgpfaW1wb3J0ZXIuX2FkZF9tb2R1bGUoTW9kdWxlX3NpeF9tb3Zlc191cmxsaWIoX19uYW1lX18gKyAiLm1vdmVzLnVybGxpYiIpLAogICAgICAgICAgICAgICAgICAgICAgIm1vdmVzLnVybGxpYiIpCgoKZGVmIGFkZF9tb3ZlKG1vdmUpOgogICAgIiIiQWRkIGFuIGl0ZW0gdG8gc2l4Lm1vdmVzLiIiIgogICAgc2V0YXR0cihfTW92ZWRJdGVtcywgbW92ZS5uYW1lLCBtb3ZlKQoKCmRlZiByZW1vdmVfbW92ZShuYW1lKToKICAgICIiIlJlbW92ZSBpdGVtIGZyb20gc2l4Lm1vdmVzLiIiIgogICAgdHJ5OgogICAgICAgIGRlbGF0dHIoX01vdmVkSXRlbXMsIG5hbWUpCiAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBkZWwgbW92ZXMuX19kaWN0X19bbmFtZV0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKCJubyBzdWNoIG1vdmUsICVyIiAlIChuYW1lLCkpCgoKaWYgUFkzOgogICAgX21ldGhfZnVuYyA9ICJfX2Z1bmNfXyIKICAgIF9tZXRoX3NlbGYgPSAiX19zZWxmX18iCgogICAgX2Z1bmNfY2xvc3VyZSA9ICJfX2Nsb3N1cmVfXyIKICAgIF9mdW5jX2NvZGUgPSAiX19jb2RlX18iCiAgICBfZnVuY19kZWZhdWx0cyA9ICJfX2RlZmF1bHRzX18iCiAgICBfZnVuY19nbG9iYWxzID0gIl9fZ2xvYmFsc19fIgplbHNlOgogICAgX21ldGhfZnVuYyA9ICJpbV9mdW5jIgogICAgX21ldGhfc2VsZiA9ICJpbV9zZWxmIgoKICAgIF9mdW5jX2Nsb3N1cmUgPSAiZnVuY19jbG9zdXJlIgogICAgX2Z1bmNfY29kZSA9ICJmdW5jX2NvZGUiCiAgICBfZnVuY19kZWZhdWx0cyA9ICJmdW5jX2RlZmF1bHRzIgogICAgX2Z1bmNfZ2xvYmFscyA9ICJmdW5jX2dsb2JhbHMiCgoKdHJ5OgogICAgYWR2YW5jZV9pdGVyYXRvciA9IG5leHQKZXhjZXB0IE5hbWVFcnJvcjoKICAgIGRlZiBhZHZhbmNlX2l0ZXJhdG9yKGl0KToKICAgICAgICByZXR1cm4gaXQubmV4dCgpCm5leHQgPSBhZHZhbmNlX2l0ZXJhdG9yCgoKdHJ5OgogICAgY2FsbGFibGUgPSBjYWxsYWJsZQpleGNlcHQgTmFtZUVycm9yOgogICAgZGVmIGNhbGxhYmxlKG9iaik6CiAgICAgICAgcmV0dXJuIGFueSgiX19jYWxsX18iIGluIGtsYXNzLl9fZGljdF9fIGZvciBrbGFzcyBpbiB0eXBlKG9iaikuX19tcm9fXykKCgppZiBQWTM6CiAgICBkZWYgZ2V0X3VuYm91bmRfZnVuY3Rpb24odW5ib3VuZCk6CiAgICAgICAgcmV0dXJuIHVuYm91bmQKCiAgICBjcmVhdGVfYm91bmRfbWV0aG9kID0gdHlwZXMuTWV0aG9kVHlwZQoKICAgIGRlZiBjcmVhdGVfdW5ib3VuZF9tZXRob2QoZnVuYywgY2xzKToKICAgICAgICByZXR1cm4gZnVuYwoKICAgIEl0ZXJhdG9yID0gb2JqZWN0CmVsc2U6CiAgICBkZWYgZ2V0X3VuYm91bmRfZnVuY3Rpb24odW5ib3VuZCk6CiAgICAgICAgcmV0dXJuIHVuYm91bmQuaW1fZnVuYwoKICAgIGRlZiBjcmVhdGVfYm91bmRfbWV0aG9kKGZ1bmMsIG9iaik6CiAgICAgICAgcmV0dXJuIHR5cGVzLk1ldGhvZFR5cGUoZnVuYywgb2JqLCBvYmouX19jbGFzc19fKQoKICAgIGRlZiBjcmVhdGVfdW5ib3VuZF9tZXRob2QoZnVuYywgY2xzKToKICAgICAgICByZXR1cm4gdHlwZXMuTWV0aG9kVHlwZShmdW5jLCBOb25lLCBjbHMpCgogICAgY2xhc3MgSXRlcmF0b3Iob2JqZWN0KToKCiAgICAgICAgZGVmIG5leHQoc2VsZik6CiAgICAgICAgICAgIHJldHVybiB0eXBlKHNlbGYpLl9fbmV4dF9fKHNlbGYpCgogICAgY2FsbGFibGUgPSBjYWxsYWJsZQpfYWRkX2RvYyhnZXRfdW5ib3VuZF9mdW5jdGlvbiwKICAgICAgICAgIiIiR2V0IHRoZSBmdW5jdGlvbiBvdXQgb2YgYSBwb3NzaWJseSB1bmJvdW5kIGZ1bmN0aW9uIiIiKQoKCmdldF9tZXRob2RfZnVuY3Rpb24gPSBvcGVyYXRvci5hdHRyZ2V0dGVyKF9tZXRoX2Z1bmMpCmdldF9tZXRob2Rfc2VsZiA9IG9wZXJhdG9yLmF0dHJnZXR0ZXIoX21ldGhfc2VsZikKZ2V0X2Z1bmN0aW9uX2Nsb3N1cmUgPSBvcGVyYXRvci5hdHRyZ2V0dGVyKF9mdW5jX2Nsb3N1cmUpCmdldF9mdW5jdGlvbl9jb2RlID0gb3BlcmF0b3IuYXR0cmdldHRlcihfZnVuY19jb2RlKQpnZXRfZnVuY3Rpb25fZGVmYXVsdHMgPSBvcGVyYXRvci5hdHRyZ2V0dGVyKF9mdW5jX2RlZmF1bHRzKQpnZXRfZnVuY3Rpb25fZ2xvYmFscyA9IG9wZXJhdG9yLmF0dHJnZXR0ZXIoX2Z1bmNfZ2xvYmFscykKCgppZiBQWTM6CiAgICBkZWYgaXRlcmtleXMoZCwgKiprdyk6CiAgICAgICAgcmV0dXJuIGl0ZXIoZC5rZXlzKCoqa3cpKQoKICAgIGRlZiBpdGVydmFsdWVzKGQsICoqa3cpOgogICAgICAgIHJldHVybiBpdGVyKGQudmFsdWVzKCoqa3cpKQoKICAgIGRlZiBpdGVyaXRlbXMoZCwgKiprdyk6CiAgICAgICAgcmV0dXJuIGl0ZXIoZC5pdGVtcygqKmt3KSkKCiAgICBkZWYgaXRlcmxpc3RzKGQsICoqa3cpOgogICAgICAgIHJldHVybiBpdGVyKGQubGlzdHMoKiprdykpCgogICAgdmlld2tleXMgPSBvcGVyYXRvci5tZXRob2RjYWxsZXIoImtleXMiKQoKICAgIHZpZXd2YWx1ZXMgPSBvcGVyYXRvci5tZXRob2RjYWxsZXIoInZhbHVlcyIpCgogICAgdmlld2l0ZW1zID0gb3BlcmF0b3IubWV0aG9kY2FsbGVyKCJpdGVtcyIpCmVsc2U6CiAgICBkZWYgaXRlcmtleXMoZCwgKiprdyk6CiAgICAgICAgcmV0dXJuIGQuaXRlcmtleXMoKiprdykKCiAgICBkZWYgaXRlcnZhbHVlcyhkLCAqKmt3KToKICAgICAgICByZXR1cm4gZC5pdGVydmFsdWVzKCoqa3cpCgogICAgZGVmIGl0ZXJpdGVtcyhkLCAqKmt3KToKICAgICAgICByZXR1cm4gZC5pdGVyaXRlbXMoKiprdykKCiAgICBkZWYgaXRlcmxpc3RzKGQsICoqa3cpOgogICAgICAgIHJldHVybiBkLml0ZXJsaXN0cygqKmt3KQoKICAgIHZpZXdrZXlzID0gb3BlcmF0b3IubWV0aG9kY2FsbGVyKCJ2aWV3a2V5cyIpCgogICAgdmlld3ZhbHVlcyA9IG9wZXJhdG9yLm1ldGhvZGNhbGxlcigidmlld3ZhbHVlcyIpCgogICAgdmlld2l0ZW1zID0gb3BlcmF0b3IubWV0aG9kY2FsbGVyKCJ2aWV3aXRlbXMiKQoKX2FkZF9kb2MoaXRlcmtleXMsICJSZXR1cm4gYW4gaXRlcmF0b3Igb3ZlciB0aGUga2V5cyBvZiBhIGRpY3Rpb25hcnkuIikKX2FkZF9kb2MoaXRlcnZhbHVlcywgIlJldHVybiBhbiBpdGVyYXRvciBvdmVyIHRoZSB2YWx1ZXMgb2YgYSBkaWN0aW9uYXJ5LiIpCl9hZGRfZG9jKGl0ZXJpdGVtcywKICAgICAgICAgIlJldHVybiBhbiBpdGVyYXRvciBvdmVyIHRoZSAoa2V5LCB2YWx1ZSkgcGFpcnMgb2YgYSBkaWN0aW9uYXJ5LiIpCl9hZGRfZG9jKGl0ZXJsaXN0cywKICAgICAgICAgIlJldHVybiBhbiBpdGVyYXRvciBvdmVyIHRoZSAoa2V5LCBbdmFsdWVzXSkgcGFpcnMgb2YgYSBkaWN0aW9uYXJ5LiIpCgoKaWYgUFkzOgogICAgZGVmIGIocyk6CiAgICAgICAgcmV0dXJuIHMuZW5jb2RlKCJsYXRpbi0xIikKCiAgICBkZWYgdShzKToKICAgICAgICByZXR1cm4gcwogICAgdW5pY2hyID0gY2hyCiAgICBpbXBvcnQgc3RydWN0CiAgICBpbnQyYnl0ZSA9IHN0cnVjdC5TdHJ1Y3QoIj5CIikucGFjawogICAgZGVsIHN0cnVjdAogICAgYnl0ZTJpbnQgPSBvcGVyYXRvci5pdGVtZ2V0dGVyKDApCiAgICBpbmRleGJ5dGVzID0gb3BlcmF0b3IuZ2V0aXRlbQogICAgaXRlcmJ5dGVzID0gaXRlcgogICAgaW1wb3J0IGlvCiAgICBTdHJpbmdJTyA9IGlvLlN0cmluZ0lPCiAgICBCeXRlc0lPID0gaW8uQnl0ZXNJTwogICAgX2Fzc2VydENvdW50RXF1YWwgPSAiYXNzZXJ0Q291bnRFcXVhbCIKICAgIGlmIHN5cy52ZXJzaW9uX2luZm9bMV0gPD0gMToKICAgICAgICBfYXNzZXJ0UmFpc2VzUmVnZXggPSAiYXNzZXJ0UmFpc2VzUmVnZXhwIgogICAgICAgIF9hc3NlcnRSZWdleCA9ICJhc3NlcnRSZWdleHBNYXRjaGVzIgogICAgZWxzZToKICAgICAgICBfYXNzZXJ0UmFpc2VzUmVnZXggPSAiYXNzZXJ0UmFpc2VzUmVnZXgiCiAgICAgICAgX2Fzc2VydFJlZ2V4ID0gImFzc2VydFJlZ2V4IgplbHNlOgogICAgZGVmIGIocyk6CiAgICAgICAgcmV0dXJuIHMKICAgICMgV29ya2Fyb3VuZCBmb3Igc3RhbmRhbG9uZSBiYWNrc2xhc2gKCiAgICBkZWYgdShzKToKICAgICAgICByZXR1cm4gdW5pY29kZShzLnJlcGxhY2UocidcXCcsIHInXFxcXCcpLCAidW5pY29kZV9lc2NhcGUiKQogICAgdW5pY2hyID0gdW5pY2hyCiAgICBpbnQyYnl0ZSA9IGNocgoKICAgIGRlZiBieXRlMmludChicyk6CiAgICAgICAgcmV0dXJuIG9yZChic1swXSkKCiAgICBkZWYgaW5kZXhieXRlcyhidWYsIGkpOgogICAgICAgIHJldHVybiBvcmQoYnVmW2ldKQogICAgaXRlcmJ5dGVzID0gZnVuY3Rvb2xzLnBhcnRpYWwoaXRlcnRvb2xzLmltYXAsIG9yZCkKICAgIGltcG9ydCBTdHJpbmdJTwogICAgU3RyaW5nSU8gPSBCeXRlc0lPID0gU3RyaW5nSU8uU3RyaW5nSU8KICAgIF9hc3NlcnRDb3VudEVxdWFsID0gImFzc2VydEl0ZW1zRXF1YWwiCiAgICBfYXNzZXJ0UmFpc2VzUmVnZXggPSAiYXNzZXJ0UmFpc2VzUmVnZXhwIgogICAgX2Fzc2VydFJlZ2V4ID0gImFzc2VydFJlZ2V4cE1hdGNoZXMiCl9hZGRfZG9jKGIsICIiIkJ5dGUgbGl0ZXJhbCIiIikKX2FkZF9kb2ModSwgIiIiVGV4dCBsaXRlcmFsIiIiKQoKCmRlZiBhc3NlcnRDb3VudEVxdWFsKHNlbGYsICphcmdzLCAqKmt3YXJncyk6CiAgICByZXR1cm4gZ2V0YXR0cihzZWxmLCBfYXNzZXJ0Q291bnRFcXVhbCkoKmFyZ3MsICoqa3dhcmdzKQoKCmRlZiBhc3NlcnRSYWlzZXNSZWdleChzZWxmLCAqYXJncywgKiprd2FyZ3MpOgogICAgcmV0dXJuIGdldGF0dHIoc2VsZiwgX2Fzc2VydFJhaXNlc1JlZ2V4KSgqYXJncywgKiprd2FyZ3MpCgoKZGVmIGFzc2VydFJlZ2V4KHNlbGYsICphcmdzLCAqKmt3YXJncyk6CiAgICByZXR1cm4gZ2V0YXR0cihzZWxmLCBfYXNzZXJ0UmVnZXgpKCphcmdzLCAqKmt3YXJncykKCgppZiBQWTM6CiAgICBleGVjXyA9IGdldGF0dHIobW92ZXMuYnVpbHRpbnMsICJleGVjIikKCiAgICBkZWYgcmVyYWlzZSh0cCwgdmFsdWUsIHRiPU5vbmUpOgogICAgICAgIGlmIHZhbHVlIGlzIE5vbmU6CiAgICAgICAgICAgIHZhbHVlID0gdHAoKQogICAgICAgIGlmIHZhbHVlLl9fdHJhY2ViYWNrX18gaXMgbm90IHRiOgogICAgICAgICAgICByYWlzZSB2YWx1ZS53aXRoX3RyYWNlYmFjayh0YikKICAgICAgICByYWlzZSB2YWx1ZQoKZWxzZToKICAgIGRlZiBleGVjXyhfY29kZV8sIF9nbG9ic189Tm9uZSwgX2xvY3NfPU5vbmUpOgogICAgICAgICIiIkV4ZWN1dGUgY29kZSBpbiBhIG5hbWVzcGFjZS4iIiIKICAgICAgICBpZiBfZ2xvYnNfIGlzIE5vbmU6CiAgICAgICAgICAgIGZyYW1lID0gc3lzLl9nZXRmcmFtZSgxKQogICAgICAgICAgICBfZ2xvYnNfID0gZnJhbWUuZl9nbG9iYWxzCiAgICAgICAgICAgIGlmIF9sb2NzXyBpcyBOb25lOgogICAgICAgICAgICAgICAgX2xvY3NfID0gZnJhbWUuZl9sb2NhbHMKICAgICAgICAgICAgZGVsIGZyYW1lCiAgICAgICAgZWxpZiBfbG9jc18gaXMgTm9uZToKICAgICAgICAgICAgX2xvY3NfID0gX2dsb2JzXwogICAgICAgIGV4ZWMoIiIiZXhlYyBfY29kZV8gaW4gX2dsb2JzXywgX2xvY3NfIiIiKQoKICAgIGV4ZWNfKCIiImRlZiByZXJhaXNlKHRwLCB2YWx1ZSwgdGI9Tm9uZSk6CiAgICByYWlzZSB0cCwgdmFsdWUsIHRiCiIiIikKCgppZiBzeXMudmVyc2lvbl9pbmZvWzoyXSA9PSAoMywgMik6CiAgICBleGVjXygiIiJkZWYgcmFpc2VfZnJvbSh2YWx1ZSwgZnJvbV92YWx1ZSk6CiAgICBpZiBmcm9tX3ZhbHVlIGlzIE5vbmU6CiAgICAgICAgcmFpc2UgdmFsdWUKICAgIHJhaXNlIHZhbHVlIGZyb20gZnJvbV92YWx1ZQoiIiIpCmVsaWYgc3lzLnZlcnNpb25faW5mb1s6Ml0gPiAoMywgMik6CiAgICBleGVjXygiIiJkZWYgcmFpc2VfZnJvbSh2YWx1ZSwgZnJvbV92YWx1ZSk6CiAgICByYWlzZSB2YWx1ZSBmcm9tIGZyb21fdmFsdWUKIiIiKQplbHNlOgogICAgZGVmIHJhaXNlX2Zyb20odmFsdWUsIGZyb21fdmFsdWUpOgogICAgICAgIHJhaXNlIHZhbHVlCgoKcHJpbnRfID0gZ2V0YXR0cihtb3Zlcy5idWlsdGlucywgInByaW50IiwgTm9uZSkKaWYgcHJpbnRfIGlzIE5vbmU6CiAgICBkZWYgcHJpbnRfKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgIiIiVGhlIG5ldy1zdHlsZSBwcmludCBmdW5jdGlvbiBmb3IgUHl0aG9uIDIuNCBhbmQgMi41LiIiIgogICAgICAgIGZwID0ga3dhcmdzLnBvcCgiZmlsZSIsIHN5cy5zdGRvdXQpCiAgICAgICAgaWYgZnAgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIGRlZiB3cml0ZShkYXRhKToKICAgICAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoZGF0YSwgYmFzZXN0cmluZyk6CiAgICAgICAgICAgICAgICBkYXRhID0gc3RyKGRhdGEpCiAgICAgICAgICAgICMgSWYgdGhlIGZpbGUgaGFzIGFuIGVuY29kaW5nLCBlbmNvZGUgdW5pY29kZSB3aXRoIGl0LgogICAgICAgICAgICBpZiAoaXNpbnN0YW5jZShmcCwgZmlsZSkgYW5kCiAgICAgICAgICAgICAgICAgICAgaXNpbnN0YW5jZShkYXRhLCB1bmljb2RlKSBhbmQKICAgICAgICAgICAgICAgICAgICBmcC5lbmNvZGluZyBpcyBub3QgTm9uZSk6CiAgICAgICAgICAgICAgICBlcnJvcnMgPSBnZXRhdHRyKGZwLCAiZXJyb3JzIiwgTm9uZSkKICAgICAgICAgICAgICAgIGlmIGVycm9ycyBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgIGVycm9ycyA9ICJzdHJpY3QiCiAgICAgICAgICAgICAgICBkYXRhID0gZGF0YS5lbmNvZGUoZnAuZW5jb2RpbmcsIGVycm9ycykKICAgICAgICAgICAgZnAud3JpdGUoZGF0YSkKICAgICAgICB3YW50X3VuaWNvZGUgPSBGYWxzZQogICAgICAgIHNlcCA9IGt3YXJncy5wb3AoInNlcCIsIE5vbmUpCiAgICAgICAgaWYgc2VwIGlzIG5vdCBOb25lOgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHNlcCwgdW5pY29kZSk6CiAgICAgICAgICAgICAgICB3YW50X3VuaWNvZGUgPSBUcnVlCiAgICAgICAgICAgIGVsaWYgbm90IGlzaW5zdGFuY2Uoc2VwLCBzdHIpOgogICAgICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJzZXAgbXVzdCBiZSBOb25lIG9yIGEgc3RyaW5nIikKICAgICAgICBlbmQgPSBrd2FyZ3MucG9wKCJlbmQiLCBOb25lKQogICAgICAgIGlmIGVuZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShlbmQsIHVuaWNvZGUpOgogICAgICAgICAgICAgICAgd2FudF91bmljb2RlID0gVHJ1ZQogICAgICAgICAgICBlbGlmIG5vdCBpc2luc3RhbmNlKGVuZCwgc3RyKToKICAgICAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigiZW5kIG11c3QgYmUgTm9uZSBvciBhIHN0cmluZyIpCiAgICAgICAgaWYga3dhcmdzOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoImludmFsaWQga2V5d29yZCBhcmd1bWVudHMgdG8gcHJpbnQoKSIpCiAgICAgICAgaWYgbm90IHdhbnRfdW5pY29kZToKICAgICAgICAgICAgZm9yIGFyZyBpbiBhcmdzOgogICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShhcmcsIHVuaWNvZGUpOgogICAgICAgICAgICAgICAgICAgIHdhbnRfdW5pY29kZSA9IFRydWUKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGlmIHdhbnRfdW5pY29kZToKICAgICAgICAgICAgbmV3bGluZSA9IHVuaWNvZGUoIlxuIikKICAgICAgICAgICAgc3BhY2UgPSB1bmljb2RlKCIgIikKICAgICAgICBlbHNlOgogICAgICAgICAgICBuZXdsaW5lID0gIlxuIgogICAgICAgICAgICBzcGFjZSA9ICIgIgogICAgICAgIGlmIHNlcCBpcyBOb25lOgogICAgICAgICAgICBzZXAgPSBzcGFjZQogICAgICAgIGlmIGVuZCBpcyBOb25lOgogICAgICAgICAgICBlbmQgPSBuZXdsaW5lCiAgICAgICAgZm9yIGksIGFyZyBpbiBlbnVtZXJhdGUoYXJncyk6CiAgICAgICAgICAgIGlmIGk6CiAgICAgICAgICAgICAgICB3cml0ZShzZXApCiAgICAgICAgICAgIHdyaXRlKGFyZykKICAgICAgICB3cml0ZShlbmQpCmlmIHN5cy52ZXJzaW9uX2luZm9bOjJdIDwgKDMsIDMpOgogICAgX3ByaW50ID0gcHJpbnRfCgogICAgZGVmIHByaW50XygqYXJncywgKiprd2FyZ3MpOgogICAgICAgIGZwID0ga3dhcmdzLmdldCgiZmlsZSIsIHN5cy5zdGRvdXQpCiAgICAgICAgZmx1c2ggPSBrd2FyZ3MucG9wKCJmbHVzaCIsIEZhbHNlKQogICAgICAgIF9wcmludCgqYXJncywgKiprd2FyZ3MpCiAgICAgICAgaWYgZmx1c2ggYW5kIGZwIGlzIG5vdCBOb25lOgogICAgICAgICAgICBmcC5mbHVzaCgpCgpfYWRkX2RvYyhyZXJhaXNlLCAiIiJSZXJhaXNlIGFuIGV4Y2VwdGlvbi4iIiIpCgppZiBzeXMudmVyc2lvbl9pbmZvWzA6Ml0gPCAoMywgNCk6CiAgICBkZWYgd3JhcHMod3JhcHBlZCwgYXNzaWduZWQ9ZnVuY3Rvb2xzLldSQVBQRVJfQVNTSUdOTUVOVFMsCiAgICAgICAgICAgICAgdXBkYXRlZD1mdW5jdG9vbHMuV1JBUFBFUl9VUERBVEVTKToKICAgICAgICBkZWYgd3JhcHBlcihmKToKICAgICAgICAgICAgZiA9IGZ1bmN0b29scy53cmFwcyh3cmFwcGVkLCBhc3NpZ25lZCwgdXBkYXRlZCkoZikKICAgICAgICAgICAgZi5fX3dyYXBwZWRfXyA9IHdyYXBwZWQKICAgICAgICAgICAgcmV0dXJuIGYKICAgICAgICByZXR1cm4gd3JhcHBlcgplbHNlOgogICAgd3JhcHMgPSBmdW5jdG9vbHMud3JhcHMKCgpkZWYgd2l0aF9tZXRhY2xhc3MobWV0YSwgKmJhc2VzKToKICAgICIiIkNyZWF0ZSBhIGJhc2UgY2xhc3Mgd2l0aCBhIG1ldGFjbGFzcy4iIiIKICAgICMgVGhpcyByZXF1aXJlcyBhIGJpdCBvZiBleHBsYW5hdGlvbjogdGhlIGJhc2ljIGlkZWEgaXMgdG8gbWFrZSBhIGR1bW15CiAgICAjIG1ldGFjbGFzcyBmb3Igb25lIGxldmVsIG9mIGNsYXNzIGluc3RhbnRpYXRpb24gdGhhdCByZXBsYWNlcyBpdHNlbGYgd2l0aAogICAgIyB0aGUgYWN0dWFsIG1ldGFjbGFzcy4KICAgIGNsYXNzIG1ldGFjbGFzcyhtZXRhKToKCiAgICAgICAgZGVmIF9fbmV3X18oY2xzLCBuYW1lLCB0aGlzX2Jhc2VzLCBkKToKICAgICAgICAgICAgcmV0dXJuIG1ldGEobmFtZSwgYmFzZXMsIGQpCiAgICByZXR1cm4gdHlwZS5fX25ld19fKG1ldGFjbGFzcywgJ3RlbXBvcmFyeV9jbGFzcycsICgpLCB7fSkKCgpkZWYgYWRkX21ldGFjbGFzcyhtZXRhY2xhc3MpOgogICAgIiIiQ2xhc3MgZGVjb3JhdG9yIGZvciBjcmVhdGluZyBhIGNsYXNzIHdpdGggYSBtZXRhY2xhc3MuIiIiCiAgICBkZWYgd3JhcHBlcihjbHMpOgogICAgICAgIG9yaWdfdmFycyA9IGNscy5fX2RpY3RfXy5jb3B5KCkKICAgICAgICBzbG90cyA9IG9yaWdfdmFycy5nZXQoJ19fc2xvdHNfXycpCiAgICAgICAgaWYgc2xvdHMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoc2xvdHMsIHN0cik6CiAgICAgICAgICAgICAgICBzbG90cyA9IFtzbG90c10KICAgICAgICAgICAgZm9yIHNsb3RzX3ZhciBpbiBzbG90czoKICAgICAgICAgICAgICAgIG9yaWdfdmFycy5wb3Aoc2xvdHNfdmFyKQogICAgICAgIG9yaWdfdmFycy5wb3AoJ19fZGljdF9fJywgTm9uZSkKICAgICAgICBvcmlnX3ZhcnMucG9wKCdfX3dlYWtyZWZfXycsIE5vbmUpCiAgICAgICAgcmV0dXJuIG1ldGFjbGFzcyhjbHMuX19uYW1lX18sIGNscy5fX2Jhc2VzX18sIG9yaWdfdmFycykKICAgIHJldHVybiB3cmFwcGVyCgoKZGVmIHB5dGhvbl8yX3VuaWNvZGVfY29tcGF0aWJsZShrbGFzcyk6CiAgICAiIiIKICAgIEEgZGVjb3JhdG9yIHRoYXQgZGVmaW5lcyBfX3VuaWNvZGVfXyBhbmQgX19zdHJfXyBtZXRob2RzIHVuZGVyIFB5dGhvbiAyLgogICAgVW5kZXIgUHl0aG9uIDMgaXQgZG9lcyBub3RoaW5nLgoKICAgIFRvIHN1cHBvcnQgUHl0aG9uIDIgYW5kIDMgd2l0aCBhIHNpbmdsZSBjb2RlIGJhc2UsIGRlZmluZSBhIF9fc3RyX18gbWV0aG9kCiAgICByZXR1cm5pbmcgdGV4dCBhbmQgYXBwbHkgdGhpcyBkZWNvcmF0b3IgdG8gdGhlIGNsYXNzLgogICAgIiIiCiAgICBpZiBQWTI6CiAgICAgICAgaWYgJ19fc3RyX18nIG5vdCBpbiBrbGFzcy5fX2RpY3RfXzoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiQHB5dGhvbl8yX3VuaWNvZGVfY29tcGF0aWJsZSBjYW5ub3QgYmUgYXBwbGllZCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRvICVzIGJlY2F1c2UgaXQgZG9lc24ndCBkZWZpbmUgX19zdHJfXygpLiIgJQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtsYXNzLl9fbmFtZV9fKQogICAgICAgIGtsYXNzLl9fdW5pY29kZV9fID0ga2xhc3MuX19zdHJfXwogICAgICAgIGtsYXNzLl9fc3RyX18gPSBsYW1iZGEgc2VsZjogc2VsZi5fX3VuaWNvZGVfXygpLmVuY29kZSgndXRmLTgnKQogICAgcmV0dXJuIGtsYXNzCgoKIyBDb21wbGV0ZSB0aGUgbW92ZXMgaW1wbGVtZW50YXRpb24uCiMgVGhpcyBjb2RlIGlzIGF0IHRoZSBlbmQgb2YgdGhpcyBtb2R1bGUgdG8gc3BlZWQgdXAgbW9kdWxlIGxvYWRpbmcuCiMgVHVybiB0aGlzIG1vZHVsZSBpbnRvIGEgcGFja2FnZS4KX19wYXRoX18gPSBbXSAgIyByZXF1aXJlZCBmb3IgUEVQIDMwMiBhbmQgUEVQIDQ1MQpfX3BhY2thZ2VfXyA9IF9fbmFtZV9fICAjIHNlZSBQRVAgMzY2IEBSZXNlcnZlZEFzc2lnbm1lbnQKaWYgZ2xvYmFscygpLmdldCgiX19zcGVjX18iKSBpcyBub3QgTm9uZToKICAgIF9fc3BlY19fLnN1Ym1vZHVsZV9zZWFyY2hfbG9jYXRpb25zID0gW10gICMgUEVQIDQ1MSBAVW5kZWZpbmVkVmFyaWFibGUKIyBSZW1vdmUgb3RoZXIgc2l4IG1ldGEgcGF0aCBpbXBvcnRlcnMsIHNpbmNlIHRoZXkgY2F1c2UgcHJvYmxlbXMuIFRoaXMgY2FuCiMgaGFwcGVuIGlmIHNpeCBpcyByZW1vdmVkIGZyb20gc3lzLm1vZHVsZXMgYW5kIHRoZW4gcmVsb2FkZWQuIChTZXR1cHRvb2xzIGRvZXMKIyB0aGlzIGZvciBzb21lIHJlYXNvbi4pCmlmIHN5cy5tZXRhX3BhdGg6CiAgICBmb3IgaSwgaW1wb3J0ZXIgaW4gZW51bWVyYXRlKHN5cy5tZXRhX3BhdGgpOgogICAgICAgICMgSGVyZSdzIHNvbWUgcmVhbCBuYXN0aW5lc3M6IEFub3RoZXIgImluc3RhbmNlIiBvZiB0aGUgc2l4IG1vZHVsZSBtaWdodAogICAgICAgICMgYmUgZmxvYXRpbmcgYXJvdW5kLiBUaGVyZWZvcmUsIHdlIGNhbid0IHVzZSBpc2luc3RhbmNlKCkgdG8gY2hlY2sgZm9yCiAgICAgICAgIyB0aGUgc2l4IG1ldGEgcGF0aCBpbXBvcnRlciwgc2luY2UgdGhlIG90aGVyIHNpeCBpbnN0YW5jZSB3aWxsIGhhdmUKICAgICAgICAjIGluc2VydGVkIGFuIGltcG9ydGVyIHdpdGggZGlmZmVyZW50IGNsYXNzLgogICAgICAgIGlmICh0eXBlKGltcG9ydGVyKS5fX25hbWVfXyA9PSAiX1NpeE1ldGFQYXRoSW1wb3J0ZXIiIGFuZAogICAgICAgICAgICAgICAgaW1wb3J0ZXIubmFtZSA9PSBfX25hbWVfXyk6CiAgICAgICAgICAgIGRlbCBzeXMubWV0YV9wYXRoW2ldCiAgICAgICAgICAgIGJyZWFrCiAgICBkZWwgaSwgaW1wb3J0ZXIKIyBGaW5hbGx5LCBhZGQgdGhlIGltcG9ydGVyIHRvIHRoZSBtZXRhIHBhdGggaW1wb3J0IGhvb2suCnN5cy5tZXRhX3BhdGguYXBwZW5kKF9pbXBvcnRlcikKUEsBAhQDFAAAAAAA1rsrS4+n8VJ3AAAAdwAAABMAAAAAAAAAAAAAAIABAAAAAGFuc2libGUvX19pbml0X18ucHlQSwECFAMUAAAAAADWuytLncXxa0gAAABIAAAAIAAAAAAAAAAAAAAAgAGoAAAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvX19pbml0X18ucHlQSwECFAMUAAAAAADWuytLPDHAe6AjAACgIwAAGgAAAAAAAAAAAAAAgAEuAQAAYW5zaWJsZV9tb2R1bGVfc2VuZGdyaWQucHlQSwECFAMUAAAAAADWuytLO985lTCKAQAwigEAHQAAAAAAAAAAAAAAgAEGJQAAYW5zaWJsZS9tb2R1bGVfdXRpbHMvYmFzaWMucHlQSwECFAMUAAAAAADWuytLXYa1bzutAAA7rQAAHAAAAAAAAAAAAAAAgAFxrwEAYW5zaWJsZS9tb2R1bGVfdXRpbHMvdXJscy5weVBLAQIUAxQAAAAAANa7K0sYF3L1AREAAAERAAAkAAAAAAAAAAAAAACAAeZcAgBhbnNpYmxlL21vZHVsZV91dGlscy9zaXgvX19pbml0X18ucHlQSwECFAMUAAAAAADWuytLtdgEBiUwAAAlMAAAHQAAAAAAAAAAAAAAgAEpbgIAYW5zaWJsZS9tb2R1bGVfdXRpbHMvX3RleHQucHlQSwECFAMUAAAAAADWuytLJdy0fhMQAAATEAAAIgAAAAAAAAAAAAAAgAGJngIAYW5zaWJsZS9tb2R1bGVfdXRpbHMvcHljb21wYXQyNC5weVBLAQIUAxQAAAAAANa7K0s44sfRkXUAAJF1AAAgAAAAAAAAAAAAAACAAdyuAgBhbnNpYmxlL21vZHVsZV91dGlscy9zaXgvX3NpeC5weVBLBQYAAAAACQAJAKcCAACrJAMAAAA="""
def invoke_module(module, modlib_path, json_params):
    pythonpath = os.environ.get('PYTHONPATH')
    if pythonpath:
        os.environ['PYTHONPATH'] = ':'.join((modlib_path, pythonpath))
    else:
        os.environ['PYTHONPATH'] = modlib_path
    p = subprocess.Popen(['/usr/bin/python', module], env=os.environ, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
    (stdout, stderr) = p.communicate(json_params)
    if not isinstance(stderr, (bytes, unicode)):
        stderr = stderr.read()
    if not isinstance(stdout, (bytes, unicode)):
        stdout = stdout.read()
    if PY3:
        sys.stderr.buffer.write(stderr)
        sys.stdout.buffer.write(stdout)
    else:
        sys.stderr.write(stderr)
        sys.stdout.write(stdout)
    return p.returncode
def debug(command, zipped_mod, json_params):
    basedir = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'debug_dir')
    args_path = os.path.join(basedir, 'args')
    script_path = os.path.join(basedir, 'ansible_module_sendgrid.py')
    if command == 'explode':
        z = zipfile.ZipFile(zipped_mod)
        for filename in z.namelist():
            if filename.startswith('/'):
                raise Exception('Something wrong with this module zip file: should not contain absolute paths')
            dest_filename = os.path.join(basedir, filename)
            if dest_filename.endswith(os.path.sep) and not os.path.exists(dest_filename):
                os.makedirs(dest_filename)
            else:
                directory = os.path.dirname(dest_filename)
                if not os.path.exists(directory):
                    os.makedirs(directory)
                f = open(dest_filename, 'wb')
                f.write(z.read(filename))
                f.close()
        f = open(args_path, 'wb')
        f.write(json_params)
        f.close()
        print('Module expanded into:')
        print('%s' % basedir)
        exitcode = 0
    elif command == 'execute':
        pythonpath = os.environ.get('PYTHONPATH')
        if pythonpath:
            os.environ['PYTHONPATH'] = ':'.join((basedir, pythonpath))
        else:
            os.environ['PYTHONPATH'] = basedir
        p = subprocess.Popen(['/usr/bin/python', script_path, args_path],
                env=os.environ, shell=False, stdout=subprocess.PIPE,
                stderr=subprocess.PIPE, stdin=subprocess.PIPE)
        (stdout, stderr) = p.communicate()
        if not isinstance(stderr, (bytes, unicode)):
            stderr = stderr.read()
        if not isinstance(stdout, (bytes, unicode)):
            stdout = stdout.read()
        if PY3:
            sys.stderr.buffer.write(stderr)
            sys.stdout.buffer.write(stdout)
        else:
            sys.stderr.write(stderr)
            sys.stdout.write(stdout)
        return p.returncode
    elif command == 'excommunicate':
        sys.argv = ['sendgrid', args_path]
        sys.path.insert(0, basedir)
        from ansible_module_sendgrid import main
        main()
        print('WARNING: Module returned to wrapper instead of exiting')
        sys.exit(1)
    else:
        print('WARNING: Unknown debug command.  Doing nothing.')
        exitcode = 0
    return exitcode
if __name__ == '__main__':
    ANSIBALLZ_PARAMS = json.dumps({"ANSIBLE_MODULE_ARGS": json.load(sys.stdin)})
    if PY3:
        ANSIBALLZ_PARAMS = ANSIBALLZ_PARAMS.encode('utf-8')
    try:
        temp_path = tempfile.mkdtemp(prefix='ansible_')
        zipped_mod = os.path.join(temp_path, 'ansible_modlib.zip')
        modlib = open(zipped_mod, 'wb')
        modlib.write(base64.b64decode(ZIPDATA))
        modlib.close()
        if len(sys.argv) == 2:
            exitcode = debug(sys.argv[1], zipped_mod, ANSIBALLZ_PARAMS)
        else:
            z = zipfile.ZipFile(zipped_mod, mode='r')
            module = os.path.join(temp_path, 'ansible_module_sendgrid.py')
            f = open(module, 'wb')
            f.write(z.read('ansible_module_sendgrid.py'))
            f.close()
            z = zipfile.ZipFile(zipped_mod, mode='a')
            sitecustomize = u'import sys\nsys.path.insert(0,"%s")\n' %  zipped_mod
            sitecustomize = sitecustomize.encode('utf-8')
            zinfo = zipfile.ZipInfo()
            zinfo.filename = 'sitecustomize.py'
            zinfo.date_time = ( 2017, 9, 11, 23, 30, 44)
            z.writestr(zinfo, sitecustomize)
            z.close()
            exitcode = invoke_module(module, zipped_mod, ANSIBALLZ_PARAMS)
    finally:
        try:
            shutil.rmtree(temp_path)
        except OSError:
            pass
    sys.exit(exitcode)