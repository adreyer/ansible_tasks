{
  "description": "Templates a file out to a remote server.", 
  "parameters": {
    "src": {
      "type": "String", 
      "description": "Path of a Jinja2 formatted template on the Ansible controller. This can be a relative or absolute path."
    }, 
    "seuser": {
      "type": "Optional[String]", 
      "description": "User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available."
    }, 
    "force": {
      "type": "Optional[String]", 
      "description": "the default is C(yes), which will replace the remote file when contents are different than the source.  If C(no), the file will only be transferred if the destination does not exist."
    }, 
    "trim_blocks": {
      "type": "Optional[String]", 
      "description": "If this is set to True the first newline after a block is removed (block, not variable tag!)."
    }, 
    "dest": {
      "type": "String", 
      "description": "Location to render the template to on the remote machine."
    }, 
    "selevel": {
      "type": "Optional[String]", 
      "description": "Level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). C(_default) feature works as for I(seuser)."
    }, 
    "block_end_string": {
      "type": "Optional[String]", 
      "description": "The string marking the end of a block."
    }, 
    "serole": {
      "type": "Optional[String]", 
      "description": "Role part of SELinux file context, C(_default) feature works as for I(seuser)."
    }, 
    "variable_start_string": {
      "type": "Optional[String]", 
      "description": "The string marking the beginning of a print statement."
    }, 
    "mode": {
      "type": "Optional[String]", 
      "description": "Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r))."
    }, 
    "unsafe_writes": {
      "type": "Optional[String]", 
      "description": "Normally this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, sometimes systems are configured or just broken in ways that prevent this. One example are docker mounted files, they cannot be updated atomically and can only be done in an unsafe manner. This boolean option allows ansible to fall back to unsafe methods of updating files for those cases in which you do not have any other choice. Be aware that this is subject to race conditions and can lead to data corruption."
    }, 
    "setype": {
      "type": "Optional[String]", 
      "description": "Type part of SELinux file context, C(_default) feature works as for I(seuser)."
    }, 
    "block_start_string": {
      "type": "Optional[String]", 
      "description": "The string marking the beginning of a block."
    }, 
    "variable_end_string": {
      "type": "Optional[String]", 
      "description": "The string marking the end of a print statement."
    }, 
    "attributes": {
      "type": "Optional[String]", 
      "description": "Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr)."
    }, 
    "owner": {
      "type": "Optional[String]", 
      "description": "Name of the user that should own the file/directory, as would be fed to I(chown)."
    }, 
    "group": {
      "type": "Optional[String]", 
      "description": "Name of the group that should own the file/directory, as would be fed to I(chown)."
    }, 
    "validate": {
      "type": "Optional[String]", 
      "description": "The validation command to run before copying into place. The path to the file to validate is passed in via '%s' which must be present as in the example below. The command is passed securely so shell features like expansion and pipes won't work."
    }, 
    "backup": {
      "type": "Optional[String]", 
      "description": "Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."
    }, 
    "newline_sequence": {
      "type": "Optional[String]", 
      "description": "Specify the newline sequence to use for templating files."
    }
  }
}