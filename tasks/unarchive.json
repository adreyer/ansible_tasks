{
  "description": "Unpacks an archive after (optionally) copying it from the local machine.", 
  "parameters": {
    "src": {
      "type": "String", 
      "description": "If C(remote_src=no) (default), local path to archive file to copy to the target server; can be absolute or relative. If C(remote_src=yes), path on the target server to existing archive file to unpack. If C(remote_src=yes) and C(src) contains C(://), the remote machine will download the file from the URL first. (version_added 2.0). This is only for simple cases, for full download support use the M(get_url) module."
    }, 
    "seuser": {
      "type": "Optional[String]", 
      "description": "User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available."
    }, 
    "group": {
      "type": "Optional[String]", 
      "description": "Name of the group that should own the file/directory, as would be fed to I(chown)."
    }, 
    "remote_src": {
      "type": "Optional[Boolean]", 
      "description": "Set to C(yes) to indicate the archived file is already on the remote system and not local to the Ansible controller. This option is mutually exclusive with C(copy)."
    }, 
    "unsafe_writes": {
      "type": "Optional[String]", 
      "description": "Normally this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, sometimes systems are configured or just broken in ways that prevent this. One example are docker mounted files, they cannot be updated atomically and can only be done in an unsafe manner. This boolean option allows ansible to fall back to unsafe methods of updating files for those cases in which you do not have any other choice. Be aware that this is subject to race conditions and can lead to data corruption."
    }, 
    "selevel": {
      "type": "Optional[String]", 
      "description": "Level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). C(_default) feature works as for I(seuser)."
    }, 
    "list_files": {
      "type": "Optional[Boolean]", 
      "description": "If set to True, return the list of files that are contained in the tarball."
    }, 
    "keep_newer": {
      "type": "Optional[Boolean]", 
      "description": "Do not replace existing files that are newer than files from the archive."
    }, 
    "decrypt": {
      "type": "Optional[String]", 
      "description": "This option controls the autodecryption of source files using vault."
    }, 
    "setype": {
      "type": "Optional[String]", 
      "description": "Type part of SELinux file context, C(_default) feature works as for I(seuser)."
    }, 
    "creates": {
      "type": "Optional[String]", 
      "description": "A filename, when it already exists, this step will B(not) be run."
    }, 
    "dest": {
      "type": "String", 
      "description": "Remote absolute path where the archive should be unpacked."
    }, 
    "serole": {
      "type": "Optional[String]", 
      "description": "Role part of SELinux file context, C(_default) feature works as for I(seuser)."
    }, 
    "mode": {
      "type": "Optional[String]", 
      "description": "Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r))."
    }, 
    "extra_opts": {
      "type": "Optional[String]", 
      "description": "Specify additional options by passing in an array."
    }, 
    "owner": {
      "type": "Optional[String]", 
      "description": "Name of the user that should own the file/directory, as would be fed to I(chown)."
    }, 
    "exclude": {
      "type": "Optional[String]", 
      "description": "List the directory and file entries that you would like to exclude from the unarchive action."
    }, 
    "attributes": {
      "type": "Optional[String]", 
      "description": "Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr)."
    }, 
    "validate_certs": {
      "type": "Optional[Boolean]", 
      "description": "This only applies if using a https URL as the source of the file. This should only set to C(no) used on personally controlled sites using self-signed certificate. Prior to 2.2 the code worked as if this was set to C(yes)."
    }, 
    "copy": {
      "type": "Optional[Boolean]", 
      "description": "If true, the file is copied from local 'master' to the target machine, otherwise, the plugin will look for src archive at the target machine. This option has been deprecated in favor of C(remote_src). This option is mutually exclusive with C(remote_src)."
    }
  }
}