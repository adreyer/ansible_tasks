{
  "description": "Interacts with webservices", 
  "parameters": {
    "body": {
      "type": "Optional[String]", 
      "description": "The body of the http request/response to the web service. If C(body_format) is set to 'json' it will take an already formatted JSON string or convert a data structure into JSON."
    }, 
    "status_code": {
      "type": "Optional[String]", 
      "description": "A valid, numeric, HTTP status code that signifies success of the request. Can also be comma separated list of status codes."
    }, 
    "client_cert": {
      "type": "Optional[String]", 
      "description": "PEM formatted certificate chain file to be used for SSL client authentication. This file can also include the key as well, and if the key is included, I(client_key) is not required"
    }, 
    "headers": {
      "type": "Optional[String]", 
      "description": "Add custom HTTP headers to a request in the format of a YAML hash. As of C(2.3) supplying C(Content-Type) here will override the header generated by supplying C(json) for I(body_format)."
    }, 
    "dest": {
      "type": "Optional[String]", 
      "description": "path of where to download the file to (if desired). If I(dest) is a directory, the basename of the file on the remote server will be used."
    }, 
    "follow_redirects": {
      "type": "Optional[String]", 
      "description": "Whether or not the URI module should follow redirects. C(all) will follow all redirects. C(safe) will follow only \"safe\" redirects, where \"safe\" means that the client is only doing a GET or HEAD on the URI to which it is being redirected. C(none) will not follow any redirects. Note that C(yes) and C(no) choices are accepted for backwards compatibility, where C(yes) is the equivalent of C(all) and C(no) is the equivalent of C(safe). C(yes) and C(no) are deprecated and will be removed in some future version of Ansible."
    }, 
    "force_basic_auth": {
      "type": "Optional[String]", 
      "description": "The library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail. This option forces the sending of the Basic authentication header upon initial request."
    }, 
    "removes": {
      "type": "Optional[String]", 
      "description": "a filename, when it does not exist, this step will not be run."
    }, 
    "method": {
      "type": "Optional[String]", 
      "description": "The HTTP method of the request or response. It MUST be uppercase."
    }, 
    "creates": {
      "type": "Optional[String]", 
      "description": "a filename, when it already exists, this step will not be run."
    }, 
    "url": {
      "type": "String", 
      "description": "HTTP or HTTPS URL in the form (http|https)://host.domain[:port]/path"
    }, 
    "user": {
      "type": "Optional[String]", 
      "description": "username for the module to use for Digest, Basic or WSSE authentication."
    }, 
    "timeout": {
      "type": "Optional[String]", 
      "description": "The socket level timeout in seconds"
    }, 
    "others": {
      "type": "Optional[String]", 
      "description": "all arguments accepted by the M(file) module also work here"
    }, 
    "body_format": {
      "type": "Optional[String]", 
      "description": "The serialization format of the body. When set to json, encodes the body argument, if needed, and automatically sets the Content-Type header accordingly. As of C(2.3) it is possible to override the `Content-Type` header, when set to json via the I(headers) option."
    }, 
    "return_content": {
      "type": "Optional[String]", 
      "description": "Whether or not to return the body of the request as a \"content\" key in the dictionary result. If the reported Content-type is \"application/json\", then the JSON is additionally loaded into a key called C(json) in the dictionary results."
    }, 
    "password": {
      "type": "Optional[String]", 
      "description": "password for the module to use for Digest, Basic or WSSE authentication."
    }, 
    "validate_certs": {
      "type": "Optional[String]", 
      "description": "If C(no), SSL certificates will not be validated.  This should only set to C(no) used on personally controlled sites using self-signed certificates.  Prior to 1.9.2 the code defaulted to C(no)."
    }, 
    "HEADER_": {
      "type": "Optional[String]", 
      "description": "Any parameter starting with \"HEADER_\" is a sent with your request as a header. For example, HEADER_Content-Type=\"application/json\" would send the header \"Content-Type\" along with your request with a value of \"application/json\". This option is deprecated as of C(2.1) and may be removed in a future release. Use I(headers) instead."
    }, 
    "client_key": {
      "type": "Optional[String]", 
      "description": "PEM formatted file that contains your private key to be used for SSL client authentication. If I(client_cert) contains both the certificate and key, this option is not required."
    }
  }
}